{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2","program":"/home/knoldus/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","indexmap","--edition=2018","/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"serde\"","--cfg","feature=\"serde-1\"","-C","metadata=7127a152a4afc7ed","-C","extra-filename=-7127a152a4afc7ed","--out-dir","/home/knoldus/CheckGitIgnore/assignment5/target/rls/debug/deps","-L","dependency=/home/knoldus/CheckGitIgnore/assignment5/target/rls/debug/deps","--extern","hashbrown=/home/knoldus/CheckGitIgnore/assignment5/target/rls/debug/deps/libhashbrown-02232d8e96d8edc3.rmeta","--extern","serde=/home/knoldus/CheckGitIgnore/assignment5/target/rls/debug/deps/libserde-c2eb2c4478df5401.rmeta","--cap-lints","allow","--cfg","has_std","--error-format=json","--sysroot","/home/knoldus/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/knoldus/CheckGitIgnore/assignment5/target/rls/debug/deps/libindexmap-7127a152a4afc7ed.rmeta"},"prelude":{"crate_id":{"name":"indexmap","disambiguator":[7071416697235091349,2557538984661984690]},"crate_root":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src","external_crates":[{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[18134888982608726624,15478788479473023395]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[6673302632599048863,4691371433878452070]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11457885127507258025,479752930606968628]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":4,"id":{"name":"std","disambiguator":[12933703438800314702,5774803219644544316]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6007655421670680970,17748288058820543149]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4051320655186846034,14773827427477085591]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3672675044024306215,7179779047398453100]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14739525726177289408,3061276640434149652]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2246841610299105657,12905561680815043912]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4036557704906104068,994131407893854156]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7443407023664770875,11250036483448109314]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[10148669557414888454,6400214184476534778]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4006540472161665961,15205760237192158299]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[16043199729901662453,7825522302763349882]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[5738570549504868290,14845130516100231771]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[6807687926185025542,9498922200428406688]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[6171827839412267364,4338689175470013405]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde.rs","num":18,"id":{"name":"serde","disambiguator":[5909158681187662501,17131162412888138597]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde.rs","num":19,"id":{"name":"serde_derive","disambiguator":[17893235928559199534,1741590885616372074]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","num":20,"id":{"name":"hashbrown","disambiguator":[3428627531582944327,345110721140972055]}}],"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":92,"byte_end":5450,"line_start":2,"line_end":192,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":30},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19948,"byte_end":19959,"line_start":6,"line_end":6,"column_start":30,"column_end":41},"alias_span":null,"name":"MutableKeys","value":"","parent":{"krate":0,"index":197}},{"kind":"Use","ref_id":{"krate":0,"index":338},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20506,"byte_end":20511,"line_start":27,"line_end":27,"column_start":22,"column_end":27},"alias_span":null,"name":"Entry","value":"","parent":{"krate":0,"index":197}},{"kind":"Use","ref_id":{"krate":0,"index":228},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20513,"byte_end":20526,"line_start":27,"line_end":27,"column_start":29,"column_end":42},"alias_span":null,"name":"OccupiedEntry","value":"","parent":{"krate":0,"index":197}},{"kind":"Use","ref_id":{"krate":0,"index":379},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20528,"byte_end":20539,"line_start":27,"line_end":27,"column_start":44,"column_end":55},"alias_span":null,"name":"VacantEntry","value":"","parent":{"krate":0,"index":197}},{"kind":"Use","ref_id":{"krate":0,"index":15},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3648,"byte_end":3658,"line_start":111,"line_end":111,"column_start":28,"column_end":38},"alias_span":null,"name":"Equivalent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":428},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3680,"byte_end":3688,"line_start":112,"line_end":112,"column_start":21,"column_end":29},"alias_span":null,"name":"IndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":812},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3710,"byte_end":3718,"line_start":113,"line_end":113,"column_start":21,"column_end":29},"alias_span":null,"name":"IndexSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":92,"byte_end":5450,"line_start":2,"line_end":192,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":13},{"krate":0,"index":22},{"krate":0,"index":49},{"krate":0,"index":140},{"krate":0,"index":183},{"krate":0,"index":197},{"krate":0,"index":785},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1266},{"krate":0,"index":1276},{"krate":0,"index":1275},{"krate":0,"index":1273},{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1169},{"krate":0,"index":1278},{"krate":0,"index":1288},{"krate":0,"index":1284},{"krate":0,"index":1171},{"krate":0,"index":1176},{"krate":0,"index":1187}],"decl_id":null,"docs":" [`IndexMap`] is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.","sig":null,"attributes":[{"value":"deny(unsafe_code)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":92,"byte_end":113,"line_start":2,"line_end":2,"column_start":1,"column_end":22}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":114,"byte_end":140,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"no_std","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":196,"byte_end":206,"line_start":5,"line_end":5,"column_start":1,"column_end":11}},{"value":"/ [`IndexMap`] is a hash table where the iteration order of the key-value","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":208,"byte_end":283,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ pairs is independent of the hash values of the keys.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":284,"byte_end":340,"line_start":8,"line_end":8,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":341,"byte_end":344,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`] is a corresponding hash set using the same implementation and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":345,"byte_end":423,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ with similar properties.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":424,"byte_end":452,"line_start":11,"line_end":11,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":453,"byte_end":456,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`]: map/struct.IndexMap.html","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":457,"byte_end":499,"line_start":13,"line_end":13,"column_start":1,"column_end":43}},{"value":"/ [`IndexSet`]: set/struct.IndexSet.html","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":500,"byte_end":542,"line_start":14,"line_end":14,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":543,"byte_end":546,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":547,"byte_end":550,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ### Feature Highlights","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":551,"byte_end":577,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":578,"byte_end":581,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`] and [`IndexSet`] are drop-in compatible with the std `HashMap`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":582,"byte_end":661,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ and `HashSet`, but they also have some features of note:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":662,"byte_end":722,"line_start":20,"line_end":20,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":723,"byte_end":726,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ - The ordering semantics (see their documentation for details)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":727,"byte_end":793,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"/ - Sorting methods and the [`.pop()`][IndexMap::pop] methods.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":794,"byte_end":858,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"/ - The [`Equivalent`] trait, which offers more flexible equality definitions","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":859,"byte_end":938,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/   between borrowed and owned versions of keys.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":939,"byte_end":989,"line_start":25,"line_end":25,"column_start":1,"column_end":51}},{"value":"/ - The [`MutableKeys`][map::MutableKeys] trait, which gives opt-in mutable","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":990,"byte_end":1067,"line_start":26,"line_end":26,"column_start":1,"column_end":78}},{"value":"/   access to hash map keys.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1068,"byte_end":1098,"line_start":27,"line_end":27,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1099,"byte_end":1102,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ### Alternate Hashers","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1103,"byte_end":1128,"line_start":29,"line_end":29,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1129,"byte_end":1132,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`] and [`IndexSet`] have a default hasher type `S = RandomState`,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1133,"byte_end":1212,"line_start":31,"line_end":31,"column_start":1,"column_end":80}},{"value":"/ just like the standard `HashMap` and `HashSet`, which is resistant to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1213,"byte_end":1286,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ HashDoS attacks but not the most performant. Type aliases can make it easier","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1287,"byte_end":1367,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ to use alternate hashers:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1368,"byte_end":1397,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1398,"byte_end":1401,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1402,"byte_end":1409,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ use fnv::FnvBuildHasher;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1410,"byte_end":1438,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ use fxhash::FxBuildHasher;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1439,"byte_end":1469,"line_start":38,"line_end":38,"column_start":1,"column_end":31}},{"value":"/ use indexmap::{IndexMap, IndexSet};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1470,"byte_end":1509,"line_start":39,"line_end":39,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1510,"byte_end":1513,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ type FnvIndexMap<K, V> = IndexMap<K, V, FnvBuildHasher>;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1514,"byte_end":1574,"line_start":41,"line_end":41,"column_start":1,"column_end":61}},{"value":"/ type FnvIndexSet<T> = IndexSet<T, FnvBuildHasher>;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1575,"byte_end":1629,"line_start":42,"line_end":42,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1630,"byte_end":1633,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ type FxIndexMap<K, V> = IndexMap<K, V, FxBuildHasher>;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1634,"byte_end":1692,"line_start":44,"line_end":44,"column_start":1,"column_end":59}},{"value":"/ type FxIndexSet<T> = IndexSet<T, FxBuildHasher>;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1693,"byte_end":1745,"line_start":45,"line_end":45,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1746,"byte_end":1749,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let std: IndexSet<i32> = (0..100).collect();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1750,"byte_end":1798,"line_start":47,"line_end":47,"column_start":1,"column_end":49}},{"value":"/ let fnv: FnvIndexSet<i32> = (0..100).collect();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1799,"byte_end":1850,"line_start":48,"line_end":48,"column_start":1,"column_end":52}},{"value":"/ let fx: FxIndexSet<i32> = (0..100).collect();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1851,"byte_end":1900,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(std, fnv);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1901,"byte_end":1926,"line_start":50,"line_end":50,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(std, fx);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1927,"byte_end":1951,"line_start":51,"line_end":51,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1952,"byte_end":1959,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1960,"byte_end":1963,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ### Rust Version","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1964,"byte_end":1984,"line_start":54,"line_end":54,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1985,"byte_end":1988,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ This version of indexmap requires Rust 1.36 or later.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":1989,"byte_end":2046,"line_start":56,"line_end":56,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2047,"byte_end":2050,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ The indexmap 1.x release series will use a carefully considered version","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2051,"byte_end":2126,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/ upgrade policy, where in a later 1.x version, we will raise the minimum","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2127,"byte_end":2202,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ required Rust version.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2203,"byte_end":2229,"line_start":60,"line_end":60,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2230,"byte_end":2233,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ## No Standard Library Targets","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2234,"byte_end":2268,"line_start":62,"line_end":62,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2269,"byte_end":2272,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ This crate supports being built without `std`, requiring","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2273,"byte_end":2333,"line_start":64,"line_end":64,"column_start":1,"column_end":61}},{"value":"/ `alloc` instead. This is enabled automatically when it is detected that","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2334,"byte_end":2409,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"/ `std` is not available. There is no crate feature to enable/disable to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2410,"byte_end":2484,"line_start":66,"line_end":66,"column_start":1,"column_end":75}},{"value":"/ trigger this. It can be tested by building for a std-less target.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2485,"byte_end":2554,"line_start":67,"line_end":67,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2555,"byte_end":2558,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ - Creating maps and sets using [`new`][IndexMap::new] and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2559,"byte_end":2620,"line_start":69,"line_end":69,"column_start":1,"column_end":62}},{"value":"/ [`with_capacity`][IndexMap::with_capacity] is unavailable without `std`.  ","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2621,"byte_end":2699,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/   Use methods [`IndexMap::default`][def],","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2700,"byte_end":2745,"line_start":71,"line_end":71,"column_start":1,"column_end":46}},{"value":"/   [`with_hasher`][IndexMap::with_hasher],","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2746,"byte_end":2791,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/   [`with_capacity_and_hasher`][IndexMap::with_capacity_and_hasher] instead.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2792,"byte_end":2871,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   A no-std compatible hasher will be needed as well, for example","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2872,"byte_end":2940,"line_start":74,"line_end":74,"column_start":1,"column_end":69}},{"value":"/   from the crate `twox-hash`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2941,"byte_end":2974,"line_start":75,"line_end":75,"column_start":1,"column_end":34}},{"value":"/ - Macros [`indexmap!`] and [`indexset!`] are unavailable without `std`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":2975,"byte_end":3050,"line_start":76,"line_end":76,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3051,"byte_end":3054,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ [def]: map/struct.IndexMap.html#impl-Default","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3055,"byte_end":3103,"line_start":78,"line_end":78,"column_start":1,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":15},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":9081,"byte_end":9091,"line_start":13,"line_end":13,"column_start":11,"column_end":21},"name":"Equivalent","qualname":"::equivalent::Equivalent","value":"Equivalent<K: ?Sized>","parent":null,"children":[{"krate":0,"index":17}],"decl_id":null,"docs":" Key equivalence trait.","sig":null,"attributes":[{"value":"/ Key equivalence trait.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":8691,"byte_end":8717,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":8718,"byte_end":8721,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ This trait allows hash table lookup to be customized.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":8722,"byte_end":8779,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ It has one blanket implementation that uses the regular `Borrow` solution,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":8780,"byte_end":8858,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ just like `HashMap` and `BTreeMap` do, so that you can pass `&str` to lookup","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":8859,"byte_end":8939,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ into a map with `String` keys and so on.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":8940,"byte_end":8984,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":8985,"byte_end":8988,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Contract","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":8989,"byte_end":9003,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":9004,"byte_end":9007,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The implementor **must** hash like `K`, if it is hashable.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":9008,"byte_end":9070,"line_start":12,"line_end":12,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":9179,"byte_end":9189,"line_start":15,"line_end":15,"column_start":8,"column_end":18},"name":"equivalent","qualname":"::equivalent::Equivalent::equivalent","value":"pub fn equivalent(&Self, &K) -> bool","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" Compare self to `key` and return `true` if they are equal.\n","sig":null,"attributes":[{"value":"/ Compare self to `key` and return `true` if they are equal.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":9109,"byte_end":9171,"line_start":14,"line_end":14,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":29},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9485,"byte_end":9498,"line_start":5,"line_end":5,"column_start":12,"column_end":25},"name":"PrivateMarker","qualname":"::mutable_keys::PrivateMarker","value":"PrivateMarker {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":30},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10046,"byte_end":10057,"line_start":19,"line_end":19,"column_start":11,"column_end":22},"name":"MutableKeys","qualname":"::mutable_keys::MutableKeys","value":"MutableKeys","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":35},{"krate":0,"index":37}],"decl_id":null,"docs":" Opt-in mutable access to keys.","sig":null,"attributes":[{"value":"/ Opt-in mutable access to keys.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9503,"byte_end":9537,"line_start":7,"line_end":7,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9538,"byte_end":9541,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ These methods expose `&mut K`, mutable references to the key as it is stored","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9542,"byte_end":9622,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/ in the map.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9623,"byte_end":9638,"line_start":10,"line_end":10,"column_start":1,"column_end":16}},{"value":"/ You are allowed to modify the keys in the hashmap **if the modifcation","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9639,"byte_end":9713,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/ does not change the key’s hash and equality**.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9714,"byte_end":9766,"line_start":12,"line_end":12,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9767,"byte_end":9770,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ If keys are modified erronously, you can no longer look them up.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9771,"byte_end":9839,"line_start":14,"line_end":14,"column_start":1,"column_end":69}},{"value":"/ This is sound (memory safe) but a logical error hazard (just like","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9840,"byte_end":9909,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/ implementing PartialEq, Eq, or Hash incorrectly would be).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9910,"byte_end":9972,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9973,"byte_end":9976,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ `use` this trait to enable its methods for `IndexMap`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":9977,"byte_end":10035,"line_start":18,"line_end":18,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":31},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10069,"byte_end":10072,"line_start":20,"line_end":20,"column_start":10,"column_end":13},"name":"Key","qualname":"::mutable_keys::MutableKeys::Key","value":"type Key;","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":32},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10083,"byte_end":10088,"line_start":21,"line_end":21,"column_start":10,"column_end":15},"name":"Value","qualname":"::mutable_keys::MutableKeys::Value","value":"type Value;","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10160,"byte_end":10173,"line_start":24,"line_end":24,"column_start":8,"column_end":21},"name":"get_full_mut2","qualname":"::mutable_keys::MutableKeys::get_full_mut2","value":"pub fn get_full_mut2<Q: ?Sized>(&mut Self, &Q)\n-> Option<(usize, &mut Self::Key, &mut Self::Value)> where Q: Hash +\nEquivalent<Self::Key>","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Return item index, mutable reference to key and value\n","sig":null,"attributes":[{"value":"/ Return item index, mutable reference to key and value","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10095,"byte_end":10152,"line_start":23,"line_end":23,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10609,"byte_end":10616,"line_start":38,"line_end":38,"column_start":8,"column_end":15},"name":"retain2","qualname":"::mutable_keys::MutableKeys::retain2","value":"pub fn retain2<F>(&mut Self, F) where\nF: FnMut(&mut Self::Key, &mut Self::Value) -> bool","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each key-value pair in the map and keep those where the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10337,"byte_end":10409,"line_start":31,"line_end":31,"column_start":5,"column_end":77}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10414,"byte_end":10448,"line_start":32,"line_end":32,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10453,"byte_end":10456,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10461,"byte_end":10533,"line_start":34,"line_end":34,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10538,"byte_end":10548,"line_start":35,"line_end":35,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10553,"byte_end":10556,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10561,"byte_end":10601,"line_start":37,"line_end":37,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10908,"byte_end":10924,"line_start":45,"line_end":45,"column_start":8,"column_end":24},"name":"__private_marker","qualname":"::mutable_keys::MutableKeys::__private_marker","value":"pub fn __private_marker(&Self) -> PrivateMarker","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" This method is not useful in itself – it is there to “seal” the trait\n for external implementation, so that we can add methods without\n causing breaking changes.\n","sig":null,"attributes":[{"value":"/ This method is not useful in itself – it is there to “seal” the trait","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10715,"byte_end":10794,"line_start":42,"line_end":42,"column_start":5,"column_end":78}},{"value":"/ for external implementation, so that we can add methods without","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10799,"byte_end":10866,"line_start":43,"line_end":43,"column_start":5,"column_end":72}},{"value":"/ causing breaking changes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":10871,"byte_end":10900,"line_start":44,"line_end":44,"column_start":5,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":140},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"serde_seq","qualname":"::serde_seq","value":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":1359},{"krate":0,"index":155},{"krate":0,"index":1361},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":162},{"krate":0,"index":168},{"krate":0,"index":177}],"decl_id":null,"docs":" Functions to serialize and deserialize an `IndexMap` as an ordered sequence.","sig":null,"attributes":[{"value":"cfg(feature = \"serde\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3386,"byte_end":3411,"line_start":99,"line_end":99,"column_start":1,"column_end":26}},{"value":"/ Functions to serialize and deserialize an `IndexMap` as an ordered sequence.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":15497,"byte_end":15577,"line_start":1,"line_end":1,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":15578,"byte_end":15581,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The default `serde` implementation serializes `IndexMap` as a normal map,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":15582,"byte_end":15659,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ but there is no guarantee that serialization formats will preserve the order","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":15660,"byte_end":15740,"line_start":4,"line_end":4,"column_start":1,"column_end":81}},{"value":"/ of the key-value pairs. This module serializes `IndexMap` as a sequence of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":15741,"byte_end":15819,"line_start":5,"line_end":5,"column_start":1,"column_end":79}},{"value":"/ `(key, value)` elements instead, in order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":15820,"byte_end":15866,"line_start":6,"line_end":6,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":15867,"byte_end":15870,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This module may be used in a field attribute for derived implementations:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":15871,"byte_end":15948,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":15949,"byte_end":15952,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":15953,"byte_end":15960,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ # use indexmap::IndexMap;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":15961,"byte_end":15990,"line_start":11,"line_end":11,"column_start":1,"column_end":30}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":15991,"byte_end":16040,"line_start":12,"line_end":12,"column_start":1,"column_end":50}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16041,"byte_end":16078,"line_start":13,"line_end":13,"column_start":1,"column_end":38}},{"value":"/ struct Data {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16079,"byte_end":16096,"line_start":14,"line_end":14,"column_start":1,"column_end":18}},{"value":"/     #[serde(with = \"indexmap::serde_seq\")]","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16097,"byte_end":16143,"line_start":15,"line_end":15,"column_start":1,"column_end":47}},{"value":"/     map: IndexMap<i32, u64>,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16144,"byte_end":16176,"line_start":16,"line_end":16,"column_start":1,"column_end":33}},{"value":"/     // ...","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16177,"byte_end":16191,"line_start":17,"line_end":17,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16192,"byte_end":16197,"line_start":18,"line_end":18,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16198,"byte_end":16205,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16206,"byte_end":16209,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Requires crate feature `\"serde\"` or `\"serde-1\"`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16210,"byte_end":16261,"line_start":21,"line_end":21,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":157},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16941,"byte_end":16950,"line_start":48,"line_end":48,"column_start":8,"column_end":17},"name":"serialize","qualname":"::serde_seq::serialize","value":"pub fn serialize<K, V, S, T>(&IndexMap<K, V, S>, T) -> Result<T::Ok, T::Error>\nwhere K: Serialize + Hash + Eq, V: Serialize, S: BuildHasher, T: Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serializes an `IndexMap` as an ordered sequence.","sig":null,"attributes":[{"value":"/ Serializes an `IndexMap` as an ordered sequence.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16494,"byte_end":16546,"line_start":32,"line_end":32,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16547,"byte_end":16550,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ This function may be used in a field attribute for deriving `Serialize`:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16551,"byte_end":16627,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16628,"byte_end":16631,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16632,"byte_end":16639,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use indexmap::IndexMap;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16640,"byte_end":16669,"line_start":37,"line_end":37,"column_start":1,"column_end":30}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16670,"byte_end":16704,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16705,"byte_end":16729,"line_start":39,"line_end":39,"column_start":1,"column_end":25}},{"value":"/ struct Data {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16730,"byte_end":16747,"line_start":40,"line_end":40,"column_start":1,"column_end":18}},{"value":"/     #[serde(serialize_with = \"indexmap::serde_seq::serialize\")]","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16748,"byte_end":16815,"line_start":41,"line_end":41,"column_start":1,"column_end":68}},{"value":"/     map: IndexMap<i32, u64>,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16816,"byte_end":16848,"line_start":42,"line_end":42,"column_start":1,"column_end":33}},{"value":"/     // ...","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16849,"byte_end":16863,"line_start":43,"line_end":43,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16864,"byte_end":16869,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16870,"byte_end":16877,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16878,"byte_end":16881,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Requires crate feature `\"serde\"` or `\"serde-1\"`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":16882,"byte_end":16933,"line_start":47,"line_end":47,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":177},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":18426,"byte_end":18437,"line_start":104,"line_end":104,"column_start":8,"column_end":19},"name":"deserialize","qualname":"::serde_seq::deserialize","value":"pub fn deserialize<'de, D, K, V, S>(D) -> Result<IndexMap<K, V, S>, D::Error>\nwhere D: Deserializer, K: Deserialize + Eq + Hash, V: Deserialize,\nS: Default + BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an `IndexMap` from an ordered sequence.","sig":null,"attributes":[{"value":"/ Deserializes an `IndexMap` from an ordered sequence.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":17965,"byte_end":18021,"line_start":88,"line_end":88,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":18022,"byte_end":18025,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ This function may be used in a field attribute for deriving `Deserialize`:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":18026,"byte_end":18104,"line_start":90,"line_end":90,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":18105,"byte_end":18108,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":18109,"byte_end":18116,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ # use indexmap::IndexMap;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":18117,"byte_end":18146,"line_start":93,"line_end":93,"column_start":1,"column_end":30}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":18147,"byte_end":18183,"line_start":94,"line_end":94,"column_start":1,"column_end":37}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":18184,"byte_end":18210,"line_start":95,"line_end":95,"column_start":1,"column_end":27}},{"value":"/ struct Data {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":18211,"byte_end":18228,"line_start":96,"line_end":96,"column_start":1,"column_end":18}},{"value":"/     #[serde(deserialize_with = \"indexmap::serde_seq::deserialize\")]","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":18229,"byte_end":18300,"line_start":97,"line_end":97,"column_start":1,"column_end":72}},{"value":"/     map: IndexMap<i32, u64>,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":18301,"byte_end":18333,"line_start":98,"line_end":98,"column_start":1,"column_end":33}},{"value":"/     // ...","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":18334,"byte_end":18348,"line_start":99,"line_end":99,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":18349,"byte_end":18354,"line_start":100,"line_end":100,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":18355,"byte_end":18362,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":18363,"byte_end":18366,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ Requires crate feature `\"serde\"` or `\"serde-1\"`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":18367,"byte_end":18418,"line_start":103,"line_end":103,"column_start":1,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":197},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":1429},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":1457},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":434},{"krate":0,"index":440},{"krate":0,"index":450},{"krate":0,"index":455},{"krate":0,"index":460},{"krate":0,"index":480},{"krate":0,"index":540},{"krate":0,"index":553},{"krate":0,"index":558},{"krate":0,"index":563},{"krate":0,"index":567},{"krate":0,"index":571},{"krate":0,"index":575},{"krate":0,"index":579},{"krate":0,"index":584},{"krate":0,"index":589},{"krate":0,"index":593},{"krate":0,"index":597},{"krate":0,"index":601},{"krate":0,"index":605},{"krate":0,"index":610},{"krate":0,"index":615},{"krate":0,"index":619},{"krate":0,"index":623},{"krate":0,"index":628},{"krate":0,"index":633},{"krate":0,"index":637},{"krate":0,"index":641},{"krate":0,"index":645},{"krate":0,"index":649},{"krate":0,"index":654},{"krate":0,"index":659},{"krate":0,"index":663},{"krate":0,"index":667},{"krate":0,"index":671},{"krate":0,"index":675},{"krate":0,"index":679},{"krate":0,"index":683},{"krate":0,"index":687},{"krate":0,"index":692},{"krate":0,"index":696},{"krate":0,"index":699},{"krate":0,"index":707},{"krate":0,"index":715},{"krate":0,"index":722},{"krate":0,"index":729},{"krate":0,"index":735},{"krate":0,"index":741},{"krate":0,"index":746},{"krate":0,"index":752},{"krate":0,"index":759},{"krate":0,"index":767},{"krate":0,"index":772},{"krate":0,"index":781}],"decl_id":null,"docs":" `IndexMap` is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.\n","sig":null,"attributes":[{"value":"/ `IndexMap` is a hash table where the iteration order of the key-value","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19776,"byte_end":19849,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"/ pairs is independent of the hash values of the keys.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":19850,"byte_end":19906,"line_start":2,"line_end":2,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":228},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":94240,"byte_end":94253,"line_start":95,"line_end":95,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::core::raw::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234}],"decl_id":null,"docs":" A view into an occupied entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `IndexMap`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":93968,"byte_end":94018,"line_start":89,"line_end":89,"column_start":1,"column_end":51}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":94019,"byte_end":94056,"line_start":90,"line_end":90,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":94057,"byte_end":94060,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":94061,"byte_end":94091,"line_start":92,"line_end":92,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":94984,"byte_end":94987,"line_start":112,"line_end":112,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the entry's key in the map.","sig":null,"attributes":[{"value":"/ Gets a reference to the entry's key in the map.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":94654,"byte_end":94705,"line_start":107,"line_end":107,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":94710,"byte_end":94713,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Note that this is not the key that was used to find the entry. There may be an observable","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":94718,"byte_end":94811,"line_start":109,"line_end":109,"column_start":5,"column_end":98}},{"value":"/ difference if the key type has any distinguishing features outside of `Hash` and `Eq`, like","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":94816,"byte_end":94911,"line_start":110,"line_end":110,"column_start":5,"column_end":100}},{"value":"/ extra fields or the memory address of an allocation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":94916,"byte_end":94972,"line_start":111,"line_end":111,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":95123,"byte_end":95126,"line_start":117,"line_end":117,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the entry's value in the map.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the entry's value in the map.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":95058,"byte_end":95111,"line_start":116,"line_end":116,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":95392,"byte_end":95399,"line_start":125,"line_end":125,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the entry's value in the map.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the entry's value in the map.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":95199,"byte_end":95260,"line_start":121,"line_end":121,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":95265,"byte_end":95268,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ If you need a reference which may outlive the destruction of the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":95273,"byte_end":95341,"line_start":123,"line_end":123,"column_start":5,"column_end":73}},{"value":"/ `Entry` value, see `into_mut`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":95346,"byte_end":95380,"line_start":124,"line_end":124,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":95811,"byte_end":95816,"line_start":139,"line_end":139,"column_start":12,"column_end":17},"name":"index","qualname":"<OccupiedEntry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index of the key-value pair\n","sig":null,"attributes":[{"value":"/ Return the index of the key-value pair","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":95743,"byte_end":95785,"line_start":137,"line_end":137,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":95790,"byte_end":95799,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":96086,"byte_end":96094,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts into a mutable reference to the entry's value in the map,\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts into a mutable reference to the entry's value in the map,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":95955,"byte_end":96025,"line_start":144,"line_end":144,"column_start":5,"column_end":75}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":96030,"byte_end":96074,"line_start":145,"line_end":145,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":96556,"byte_end":96573,"line_start":158,"line_end":158,"column_start":12,"column_end":29},"name":"swap_remove_entry","qualname":"<OccupiedEntry>::swap_remove_entry","value":"pub fn swap_remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":96204,"byte_end":96278,"line_start":151,"line_end":151,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":96283,"byte_end":96286,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":96291,"byte_end":96363,"line_start":153,"line_end":153,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":96368,"byte_end":96431,"line_start":154,"line_end":154,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":96436,"byte_end":96491,"line_start":155,"line_end":155,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":96496,"byte_end":96499,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":96504,"byte_end":96544,"line_start":157,"line_end":157,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":97223,"byte_end":97241,"line_start":172,"line_end":172,"column_start":12,"column_end":30},"name":"shift_remove_entry","qualname":"<OccupiedEntry>::shift_remove_entry","value":"pub fn shift_remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":96877,"byte_end":96951,"line_start":165,"line_end":165,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":96956,"byte_end":96959,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":96964,"byte_end":97030,"line_start":167,"line_end":167,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":97035,"byte_end":97096,"line_start":168,"line_end":168,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":97101,"byte_end":97158,"line_start":169,"line_end":169,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":97163,"byte_end":97166,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":97171,"byte_end":97211,"line_start":171,"line_end":171,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":342},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":83935,"byte_end":83943,"line_start":442,"line_end":442,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::core::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":338},"children":[],"decl_id":null,"docs":" Existing slot with equivalent key.\n","sig":null,"attributes":[{"value":"/ Existing slot with equivalent key.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":83892,"byte_end":83930,"line_start":441,"line_end":441,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":345},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":84026,"byte_end":84032,"line_start":444,"line_end":444,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::core::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":338},"children":[],"decl_id":null,"docs":" Vacant slot (no equivalent key in the map).\n","sig":null,"attributes":[{"value":"/ Vacant slot (no equivalent key in the map).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":83974,"byte_end":84021,"line_start":443,"line_end":443,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":338},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":83870,"byte_end":83875,"line_start":440,"line_end":440,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::core::Entry","value":"pub enum Entry<'a, K, V> {\n\n    /// Existing slot with equivalent key.\n    Occupied(OccupiedEntry),\n\n    /// Vacant slot (no equivalent key in the map).\n    Vacant(VacantEntry),\n}","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":345}],"decl_id":null,"docs":" Entry for an existing key-value pair or a vacant location to\n insert one.\n","sig":null,"attributes":[{"value":"/ Entry for an existing key-value pair or a vacant location to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":83780,"byte_end":83844,"line_start":438,"line_end":438,"column_start":1,"column_end":65}},{"value":"/ insert one.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":83845,"byte_end":83860,"line_start":439,"line_end":439,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":84355,"byte_end":84364,"line_start":452,"line_end":452,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"pub fn or_insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the given default value in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts the given default value in the entry if it is vacant and returns a mutable","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":84097,"byte_end":84183,"line_start":448,"line_end":448,"column_start":5,"column_end":91}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":84188,"byte_end":84280,"line_start":449,"line_end":449,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":84285,"byte_end":84288,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":84293,"byte_end":84343,"line_start":451,"line_end":451,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":84823,"byte_end":84837,"line_start":463,"line_end":463,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"pub fn or_insert_with<F>(Self, F) -> &'a mut V where F: FnOnce() -> V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the result of the `call` function in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts the result of the `call` function in the entry if it is vacant and returns a mutable","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":84555,"byte_end":84651,"line_start":459,"line_end":459,"column_start":5,"column_end":101}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":84656,"byte_end":84748,"line_start":460,"line_end":460,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":84753,"byte_end":84756,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":84761,"byte_end":84811,"line_start":462,"line_end":462,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":85378,"byte_end":85396,"line_start":478,"line_end":478,"column_start":12,"column_end":30},"name":"or_insert_with_key","qualname":"<Entry>::or_insert_with_key","value":"pub fn or_insert_with_key<F>(Self, F) -> &'a mut V where F: FnOnce(&K) -> V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the result of the `call` function with a reference to the entry's key if it is\n vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to\n an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts the result of the `call` function with a reference to the entry's key if it is","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":85067,"byte_end":85157,"line_start":473,"line_end":473,"column_start":5,"column_end":95}},{"value":"/ vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":85162,"byte_end":85256,"line_start":474,"line_end":474,"column_start":5,"column_end":99}},{"value":"/ an already existent value is returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":85261,"byte_end":85303,"line_start":475,"line_end":475,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":85308,"byte_end":85311,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":85316,"byte_end":85366,"line_start":477,"line_end":477,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":85852,"byte_end":85855,"line_start":493,"line_end":493,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the entry's key, either within the map if occupied,\n or else the new key that was used to find the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the entry's key, either within the map if occupied,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":85704,"byte_end":85779,"line_start":491,"line_end":491,"column_start":5,"column_end":80}},{"value":"/ or else the new key that was used to find the entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":85784,"byte_end":85840,"line_start":492,"line_end":492,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":86107,"byte_end":86112,"line_start":501,"line_end":501,"column_start":12,"column_end":17},"name":"index","qualname":"<Entry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair exists or will be inserted.\n","sig":null,"attributes":[{"value":"/ Return the index where the key-value pair exists or will be inserted.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":86022,"byte_end":86095,"line_start":500,"line_end":500,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":86339,"byte_end":86349,"line_start":509,"line_end":509,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Modifies the entry if it is occupied.\n","sig":null,"attributes":[{"value":"/ Modifies the entry if it is occupied.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":86286,"byte_end":86327,"line_start":508,"line_end":508,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":86861,"byte_end":86871,"line_start":526,"line_end":526,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"pub fn or_default(Self) -> &'a mut V where V: Default","parent":null,"children":[],"decl_id":null,"docs":" Inserts a default-constructed value in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts a default-constructed value in the entry if it is vacant and returns a mutable","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":86599,"byte_end":86689,"line_start":522,"line_end":522,"column_start":5,"column_end":95}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":86694,"byte_end":86786,"line_start":523,"line_end":523,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":86791,"byte_end":86794,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":86799,"byte_end":86849,"line_start":525,"line_end":525,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":87666,"byte_end":87672,"line_start":551,"line_end":551,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry to `value`, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry to `value`, and returns the entry's old value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":87576,"byte_end":87654,"line_start":550,"line_end":550,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":87915,"byte_end":87921,"line_start":558,"line_end":558,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":87751,"byte_end":87837,"line_start":555,"line_end":555,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":87842,"byte_end":87845,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove()`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":87850,"byte_end":87903,"line_start":557,"line_end":557,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":88337,"byte_end":88348,"line_start":569,"line_end":569,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<OccupiedEntry>::swap_remove","value":"pub fn swap_remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":87973,"byte_end":88059,"line_start":562,"line_end":562,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":88064,"byte_end":88067,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":88072,"byte_end":88144,"line_start":564,"line_end":564,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":88149,"byte_end":88212,"line_start":565,"line_end":565,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":88217,"byte_end":88272,"line_start":566,"line_end":566,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":88277,"byte_end":88280,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":88285,"byte_end":88325,"line_start":568,"line_end":568,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":88766,"byte_end":88778,"line_start":580,"line_end":580,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<OccupiedEntry>::shift_remove","value":"pub fn shift_remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":88408,"byte_end":88494,"line_start":573,"line_end":573,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":88499,"byte_end":88502,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":88507,"byte_end":88573,"line_start":575,"line_end":575,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":88578,"byte_end":88639,"line_start":576,"line_end":576,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":88644,"byte_end":88701,"line_start":577,"line_end":577,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":88706,"byte_end":88709,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":88714,"byte_end":88754,"line_start":579,"line_end":579,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":88997,"byte_end":89009,"line_start":587,"line_end":587,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":88839,"byte_end":88913,"line_start":584,"line_end":584,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":88918,"byte_end":88921,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove_entry()`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":88926,"byte_end":88985,"line_start":586,"line_end":586,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":379},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":89500,"byte_end":89511,"line_start":605,"line_end":605,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::core::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385}],"decl_id":null,"docs":" A view into a vacant entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `IndexMap`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":89368,"byte_end":89415,"line_start":601,"line_end":601,"column_start":1,"column_end":48}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":89416,"byte_end":89453,"line_start":602,"line_end":602,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":89454,"byte_end":89457,"line_start":603,"line_end":603,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":89458,"byte_end":89488,"line_start":604,"line_end":604,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":89716,"byte_end":89719,"line_start":613,"line_end":613,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that was used to find the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key that was used to find the entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":89640,"byte_end":89704,"line_start":612,"line_end":612,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":89833,"byte_end":89841,"line_start":618,"line_end":618,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"pub fn into_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Takes ownership of the key, leaving the entry vacant.\n","sig":null,"attributes":[{"value":"/ Takes ownership of the key, leaving the entry vacant.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":89764,"byte_end":89821,"line_start":617,"line_end":617,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":89958,"byte_end":89963,"line_start":623,"line_end":623,"column_start":12,"column_end":17},"name":"index","qualname":"<VacantEntry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair will be inserted.\n","sig":null,"attributes":[{"value":"/ Return the index where the key-value pair will be inserted.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":89883,"byte_end":89946,"line_start":622,"line_end":622,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":90143,"byte_end":90149,"line_start":629,"line_end":629,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"pub fn insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the entry's key and the given value into the map, and returns a mutable reference\n to the value.\n","sig":null,"attributes":[{"value":"/ Inserts the entry's key and the given value into the map, and returns a mutable reference","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":90016,"byte_end":90109,"line_start":627,"line_end":627,"column_start":5,"column_end":98}},{"value":"/ to the value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":90114,"byte_end":90131,"line_start":628,"line_end":628,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":428},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21979,"byte_end":21987,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"IndexMap","qualname":"::map::IndexMap","value":"IndexMap {  }","parent":null,"children":[{"krate":0,"index":432},{"krate":0,"index":433}],"decl_id":null,"docs":" A hash table where the iteration order of the key-value pairs is independent\n of the hash values of the keys.","sig":null,"attributes":[{"value":"/ A hash table where the iteration order of the key-value pairs is independent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20543,"byte_end":20623,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ of the hash values of the keys.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20624,"byte_end":20659,"line_start":30,"line_end":30,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20660,"byte_end":20663,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ The interface is closely compatible with the standard `HashMap`, but also","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20664,"byte_end":20741,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/ has additional features.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20742,"byte_end":20770,"line_start":33,"line_end":33,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20771,"byte_end":20774,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Order","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20775,"byte_end":20786,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20787,"byte_end":20790,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ The key-value pairs have a consistent order that is determined by","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20791,"byte_end":20860,"line_start":37,"line_end":37,"column_start":1,"column_end":70}},{"value":"/ the sequence of insertion and removal calls on the map. The order does","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20861,"byte_end":20935,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"/ not depend on the keys or the hash function at all.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20936,"byte_end":20991,"line_start":39,"line_end":39,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20992,"byte_end":20995,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ All iterators traverse the map in *the order*.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":20996,"byte_end":21046,"line_start":41,"line_end":41,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21047,"byte_end":21050,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ The insertion order is preserved, with **notable exceptions** like the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21051,"byte_end":21125,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ `.remove()` or `.swap_remove()` methods. Methods such as `.sort_by()` of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21126,"byte_end":21202,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ course result in a new order, depending on the sorting order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21203,"byte_end":21268,"line_start":45,"line_end":45,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21269,"byte_end":21272,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Indices","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21273,"byte_end":21286,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21287,"byte_end":21290,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The key-value pairs are indexed in a compact range without holes in the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21291,"byte_end":21366,"line_start":49,"line_end":49,"column_start":1,"column_end":76}},{"value":"/ range `0..self.len()`. For example, the method `.get_full` looks up the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21367,"byte_end":21442,"line_start":50,"line_end":50,"column_start":1,"column_end":76}},{"value":"/ index for a key, and the method `.get_index` looks up the key-value pair by","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21443,"byte_end":21522,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ index.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21523,"byte_end":21533,"line_start":52,"line_end":52,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21534,"byte_end":21537,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21538,"byte_end":21552,"line_start":54,"line_end":54,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21553,"byte_end":21556,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21557,"byte_end":21564,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ use indexmap::IndexMap;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21565,"byte_end":21592,"line_start":57,"line_end":57,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21593,"byte_end":21596,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // count the frequency of each letter in a sentence.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21597,"byte_end":21653,"line_start":59,"line_end":59,"column_start":1,"column_end":57}},{"value":"/ let mut letters = IndexMap::new();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21654,"byte_end":21692,"line_start":60,"line_end":60,"column_start":1,"column_end":39}},{"value":"/ for ch in \"a short treatise on fungi\".chars() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21693,"byte_end":21744,"line_start":61,"line_end":61,"column_start":1,"column_end":52}},{"value":"/     *letters.entry(ch).or_insert(0) += 1;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21745,"byte_end":21790,"line_start":62,"line_end":62,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21791,"byte_end":21796,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21797,"byte_end":21800,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(letters[&'s'], 2);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21801,"byte_end":21834,"line_start":65,"line_end":65,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters[&'t'], 3);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21835,"byte_end":21868,"line_start":66,"line_end":66,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters[&'u'], 1);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21869,"byte_end":21902,"line_start":67,"line_end":67,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters.get(&'y'), None);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21903,"byte_end":21943,"line_start":68,"line_end":68,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21944,"byte_end":21951,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"cfg(has_std)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":21952,"byte_end":21967,"line_start":70,"line_end":70,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23693,"byte_end":23696,"line_start":147,"line_end":147,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexMap<K, V>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map. (Does not allocate.)\n","sig":null,"attributes":[{"value":"/ Create a new map. (Does not allocate.)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23625,"byte_end":23667,"line_start":145,"line_end":145,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23672,"byte_end":23681,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23923,"byte_end":23936,"line_start":156,"line_end":156,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexMap<K, V>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new map with capacity for `n` key-value pairs. (Does not","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23751,"byte_end":23820,"line_start":151,"line_end":151,"column_start":5,"column_end":74}},{"value":"/ allocate if `n` is zero.)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23825,"byte_end":23854,"line_start":152,"line_end":152,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23859,"byte_end":23862,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23867,"byte_end":23897,"line_start":154,"line_end":154,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23902,"byte_end":23911,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24234,"byte_end":24258,"line_start":167,"line_end":167,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexMap<K, V, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new map with capacity for `n` key-value pairs. (Does not","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24062,"byte_end":24131,"line_start":162,"line_end":162,"column_start":5,"column_end":74}},{"value":"/ allocate if `n` is zero.)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24136,"byte_end":24165,"line_start":163,"line_end":163,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24170,"byte_end":24173,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24178,"byte_end":24208,"line_start":165,"line_end":165,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24213,"byte_end":24222,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24637,"byte_end":24648,"line_start":182,"line_end":182,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<IndexMap<K, V, S>>::with_hasher","value":"pub fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with `hash_builder`\n","sig":null,"attributes":[{"value":"/ Create a new map with `hash_builder`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24585,"byte_end":24625,"line_start":181,"line_end":181,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24785,"byte_end":24793,"line_start":187,"line_end":187,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexMap<K, V, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24743,"byte_end":24773,"line_start":186,"line_end":186,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24914,"byte_end":24920,"line_start":192,"line_end":192,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexMap<K, V, S>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the map's `BuildHasher`.\n","sig":null,"attributes":[{"value":"/ Return a reference to the map's `BuildHasher`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24852,"byte_end":24902,"line_start":191,"line_end":191,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25095,"byte_end":25098,"line_start":200,"line_end":200,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexMap<K, V, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of key-value pairs in the map.","sig":null,"attributes":[{"value":"/ Return the number of key-value pairs in the map.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24974,"byte_end":25026,"line_start":196,"line_end":196,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25031,"byte_end":25034,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25039,"byte_end":25069,"line_start":198,"line_end":198,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25074,"byte_end":25083,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25270,"byte_end":25278,"line_start":208,"line_end":208,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexMap<K, V, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the map contains no elements.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25152,"byte_end":25201,"line_start":204,"line_end":204,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25206,"byte_end":25209,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25214,"byte_end":25244,"line_start":206,"line_end":206,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25249,"byte_end":25258,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25417,"byte_end":25421,"line_start":213,"line_end":213,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexMap<K, V, S>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25331,"byte_end":25405,"line_start":212,"line_end":212,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25615,"byte_end":25623,"line_start":220,"line_end":220,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<IndexMap<K, V, S>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25529,"byte_end":25603,"line_start":219,"line_end":219,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25824,"byte_end":25828,"line_start":227,"line_end":227,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexMap<K, V, S>>::keys","value":"pub fn keys(&Self) -> Keys<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the keys of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the keys of the map, in their order","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25749,"byte_end":25812,"line_start":226,"line_end":226,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26013,"byte_end":26019,"line_start":234,"line_end":234,"column_start":12,"column_end":18},"name":"values","qualname":"<IndexMap<K, V, S>>::values","value":"pub fn values(&Self) -> Values<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the map, in their order","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":25936,"byte_end":26001,"line_start":233,"line_end":233,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26242,"byte_end":26252,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<IndexMap<K, V, S>>::values_mut","value":"pub fn values_mut(&mut Self) -> ValuesMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over mutable references to the the values of the map,\n in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over mutable references to the the values of the map,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26131,"byte_end":26207,"line_start":240,"line_end":240,"column_start":5,"column_end":81}},{"value":"/ in their order","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26212,"byte_end":26230,"line_start":241,"line_end":241,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26510,"byte_end":26515,"line_start":251,"line_end":251,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexMap<K, V, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all key-value pairs in the map, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all key-value pairs in the map, while preserving its capacity.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26382,"byte_end":26455,"line_start":248,"line_end":248,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26460,"byte_end":26463,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26468,"byte_end":26498,"line_start":250,"line_end":250,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26743,"byte_end":26751,"line_start":258,"line_end":258,"column_start":12,"column_end":20},"name":"truncate","qualname":"<IndexMap<K, V, S>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the map, keeping the first `len` elements and dropping the rest.","sig":null,"attributes":[{"value":"/ Shortens the map, keeping the first `len` elements and dropping the rest.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26567,"byte_end":26644,"line_start":255,"line_end":255,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26649,"byte_end":26652,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ If `len` is greater than the map's current length, this has no effect.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26657,"byte_end":26731,"line_start":257,"line_end":257,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27503,"byte_end":27508,"line_start":275,"line_end":275,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexMap<K, V, S>>::drain","value":"pub fn drain<R>(&mut Self, R) -> Drain<, K, V> where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexMap` in the given index range, returning those\n key-value pairs as a drain iterator.","sig":null,"attributes":[{"value":"/ Clears the `IndexMap` in the given index range, returning those","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26821,"byte_end":26888,"line_start":262,"line_end":262,"column_start":5,"column_end":72}},{"value":"/ key-value pairs as a drain iterator.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26893,"byte_end":26933,"line_start":263,"line_end":263,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26938,"byte_end":26941,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ The range may be any type that implements `RangeBounds<usize>`,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":26946,"byte_end":27013,"line_start":265,"line_end":265,"column_start":5,"column_end":72}},{"value":"/ including all of the `std::ops::Range*` types, or even a tuple pair of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27018,"byte_end":27092,"line_start":266,"line_end":266,"column_start":5,"column_end":79}},{"value":"/ `Bound` start and end values. To drain the map entirely, use `RangeFull`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27097,"byte_end":27173,"line_start":267,"line_end":267,"column_start":5,"column_end":81}},{"value":"/ like `map.drain(..)`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27178,"byte_end":27203,"line_start":268,"line_end":268,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27208,"byte_end":27211,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ This shifts down all entries following the drained range to fill the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27216,"byte_end":27288,"line_start":270,"line_end":270,"column_start":5,"column_end":77}},{"value":"/ gap, and keeps the allocated memory for reuse.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27293,"byte_end":27343,"line_start":271,"line_end":271,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27348,"byte_end":27351,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if the starting point is greater than the end point or if","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27356,"byte_end":27430,"line_start":273,"line_end":273,"column_start":5,"column_end":79}},{"value":"/ the end point is greater than the length of the map.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27435,"byte_end":27491,"line_start":274,"line_end":274,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28018,"byte_end":28027,"line_start":291,"line_end":291,"column_start":12,"column_end":21},"name":"split_off","qualname":"<IndexMap<K, V, S>>::split_off","value":"pub fn split_off(&mut Self, usize) -> Self where S: Clone","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given index.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27678,"byte_end":27732,"line_start":284,"line_end":284,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27737,"byte_end":27740,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ Returns a newly allocated map containing the elements in the range","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27745,"byte_end":27815,"line_start":286,"line_end":286,"column_start":5,"column_end":75}},{"value":"/ `[at, len)`. After the call, the original map will be left containing","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27820,"byte_end":27893,"line_start":287,"line_end":287,"column_start":5,"column_end":78}},{"value":"/ the elements `[0, at)` with its previous capacity unchanged.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27898,"byte_end":27962,"line_start":288,"line_end":288,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27967,"byte_end":27970,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `at > len`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":27975,"byte_end":28006,"line_start":290,"line_end":290,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28418,"byte_end":28425,"line_start":310,"line_end":310,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexMap<K, V, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve capacity for `additional` more key-value pairs.","sig":null,"attributes":[{"value":"/ Reserve capacity for `additional` more key-value pairs.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28304,"byte_end":28363,"line_start":307,"line_end":307,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28368,"byte_end":28371,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28376,"byte_end":28406,"line_start":309,"line_end":309,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28618,"byte_end":28631,"line_start":317,"line_end":317,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<IndexMap<K, V, S>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the map as much as possible.","sig":null,"attributes":[{"value":"/ Shrink the capacity of the map as much as possible.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28508,"byte_end":28563,"line_start":314,"line_end":314,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28568,"byte_end":28571,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28576,"byte_end":28606,"line_start":316,"line_end":316,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29530,"byte_end":29536,"line_start":340,"line_end":340,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexMap<K, V, S>>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map.","sig":null,"attributes":[{"value":"/ Insert a key-value pair in the map.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28878,"byte_end":28917,"line_start":327,"line_end":327,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28922,"byte_end":28925,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28930,"byte_end":29001,"line_start":329,"line_end":329,"column_start":5,"column_end":76}},{"value":"/ retains in its place in the order, its corresponding value is updated","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29006,"byte_end":29079,"line_start":330,"line_end":330,"column_start":5,"column_end":78}},{"value":"/ with `value` and the older value is returned inside `Some(_)`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29084,"byte_end":29150,"line_start":331,"line_end":331,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29155,"byte_end":29158,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29163,"byte_end":29233,"line_start":333,"line_end":333,"column_start":5,"column_end":75}},{"value":"/ inserted, last in order, and `None` is returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29238,"byte_end":29290,"line_start":334,"line_end":334,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29295,"byte_end":29298,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29303,"byte_end":29353,"line_start":336,"line_end":336,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29358,"byte_end":29361,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ See also [`entry`](#method.entry) if you you want to insert *or* modify","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29366,"byte_end":29441,"line_start":338,"line_end":338,"column_start":5,"column_end":80}},{"value":"/ or if you need to get the index of the corresponding key-value pair.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29446,"byte_end":29518,"line_start":339,"line_end":339,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30322,"byte_end":30333,"line_start":357,"line_end":357,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexMap<K, V, S>>::insert_full","value":"pub fn insert_full(&mut Self, K, V) -> (usize, Option<V>)","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map, and get their index.","sig":null,"attributes":[{"value":"/ Insert a key-value pair in the map, and get their index.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29631,"byte_end":29691,"line_start":344,"line_end":344,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29696,"byte_end":29699,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29704,"byte_end":29775,"line_start":346,"line_end":346,"column_start":5,"column_end":76}},{"value":"/ retains in its place in the order, its corresponding value is updated","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29780,"byte_end":29853,"line_start":347,"line_end":347,"column_start":5,"column_end":78}},{"value":"/ with `value` and the older value is returned inside `(index, Some(_))`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29858,"byte_end":29933,"line_start":348,"line_end":348,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29938,"byte_end":29941,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":29946,"byte_end":30016,"line_start":350,"line_end":350,"column_start":5,"column_end":75}},{"value":"/ inserted, last in order, and `(index, None)` is returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30021,"byte_end":30082,"line_start":351,"line_end":351,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30087,"byte_end":30090,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30095,"byte_end":30145,"line_start":353,"line_end":353,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30150,"byte_end":30153,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ See also [`entry`](#method.entry) if you you want to insert *or* modify","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30158,"byte_end":30233,"line_start":355,"line_end":355,"column_start":5,"column_end":80}},{"value":"/ or if you need to get the index of the corresponding key-value pair.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30238,"byte_end":30310,"line_start":356,"line_end":356,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30665,"byte_end":30670,"line_start":366,"line_end":366,"column_start":12,"column_end":17},"name":"entry","qualname":"<IndexMap<K, V, S>>::entry","value":"pub fn entry(&mut Self, K) -> Entry<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Get the given key’s corresponding entry in the map for insertion and/or\n in-place manipulation.","sig":null,"attributes":[{"value":"/ Get the given key’s corresponding entry in the map for insertion and/or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30482,"byte_end":30559,"line_start":362,"line_end":362,"column_start":5,"column_end":80}},{"value":"/ in-place manipulation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30564,"byte_end":30590,"line_start":363,"line_end":363,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30595,"byte_end":30598,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30603,"byte_end":30653,"line_start":365,"line_end":365,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30920,"byte_end":30932,"line_start":374,"line_end":374,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<IndexMap<K, V, S>>::contains_key","value":"pub fn contains_key<Q: ?Sized>(&Self, &Q) -> bool where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `key` exists in the map.","sig":null,"attributes":[{"value":"/ Return `true` if an equivalent to `key` exists in the map.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30793,"byte_end":30855,"line_start":371,"line_end":371,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30860,"byte_end":30863,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":30868,"byte_end":30908,"line_start":373,"line_end":373,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31226,"byte_end":31229,"line_start":385,"line_end":385,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexMap<K, V, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&V> where Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored for `key`, if it is present,\n else `None`.","sig":null,"attributes":[{"value":"/ Return a reference to the value stored for `key`, if it is present,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31069,"byte_end":31140,"line_start":381,"line_end":381,"column_start":5,"column_end":76}},{"value":"/ else `None`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31145,"byte_end":31161,"line_start":382,"line_end":382,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31166,"byte_end":31169,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31174,"byte_end":31214,"line_start":384,"line_end":384,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31668,"byte_end":31681,"line_start":401,"line_end":401,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<IndexMap<K, V, S>>::get_key_value","value":"pub fn get_key_value<Q: ?Sized>(&Self, &Q) -> Option<(&K, &V)> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return references to the key-value pair stored for `key`,\n if it is present, else `None`.","sig":null,"attributes":[{"value":"/ Return references to the key-value pair stored for `key`,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31503,"byte_end":31564,"line_start":397,"line_end":397,"column_start":5,"column_end":66}},{"value":"/ if it is present, else `None`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31569,"byte_end":31603,"line_start":398,"line_end":398,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31608,"byte_end":31611,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31616,"byte_end":31656,"line_start":400,"line_end":400,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":32023,"byte_end":32031,"line_start":414,"line_end":414,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexMap<K, V, S>>::get_full","value":"pub fn get_full<Q: ?Sized>(&Self, &Q) -> Option<(usize, &K, &V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, key and value\n","sig":null,"attributes":[{"value":"/ Return item index, key and value","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":31975,"byte_end":32011,"line_start":413,"line_end":413,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":32393,"byte_end":32405,"line_start":427,"line_end":427,"column_start":12,"column_end":24},"name":"get_index_of","qualname":"<IndexMap<K, V, S>>::get_index_of","value":"pub fn get_index_of<Q: ?Sized>(&Self, &Q) -> Option<usize> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, if it exists in the map\n","sig":null,"attributes":[{"value":"/ Return item index, if it exists in the map","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":32335,"byte_end":32381,"line_start":426,"line_end":426,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":32675,"byte_end":32682,"line_start":439,"line_end":439,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<IndexMap<K, V, S>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<&mut V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":32983,"byte_end":32995,"line_start":451,"line_end":451,"column_start":12,"column_end":24},"name":"get_full_mut","qualname":"<IndexMap<K, V, S>>::get_full_mut","value":"pub fn get_full_mut<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, &K, &mut V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34027,"byte_end":34033,"line_start":486,"line_end":486,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexMap<K, V, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33706,"byte_end":33766,"line_start":478,"line_end":478,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33771,"byte_end":33785,"line_start":479,"line_end":479,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33790,"byte_end":33793,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove(key)`, if you need to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33798,"byte_end":33869,"line_start":481,"line_end":481,"column_start":5,"column_end":76}},{"value":"/ preserve the order of the keys in the map, use `.shift_remove(key)`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33874,"byte_end":33945,"line_start":482,"line_end":482,"column_start":5,"column_end":76}},{"value":"/ instead.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33950,"byte_end":33962,"line_start":483,"line_end":483,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33967,"byte_end":33970,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":33975,"byte_end":34015,"line_start":485,"line_end":485,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34483,"byte_end":34495,"line_start":500,"line_end":500,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<IndexMap<K, V, S>>::remove_entry","value":"pub fn remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34168,"byte_end":34229,"line_start":493,"line_end":493,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34234,"byte_end":34237,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove_entry(key)`, if you need to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34242,"byte_end":34319,"line_start":495,"line_end":495,"column_start":5,"column_end":82}},{"value":"/ preserve the order of the keys in the map, use `.shift_remove_entry(key)`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34324,"byte_end":34401,"line_start":496,"line_end":496,"column_start":5,"column_end":82}},{"value":"/ instead.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34406,"byte_end":34418,"line_start":497,"line_end":497,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34423,"byte_end":34426,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34431,"byte_end":34471,"line_start":499,"line_end":499,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35052,"byte_end":35063,"line_start":517,"line_end":517,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexMap<K, V, S>>::swap_remove","value":"pub fn swap_remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34641,"byte_end":34701,"line_start":507,"line_end":507,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34706,"byte_end":34720,"line_start":508,"line_end":508,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34725,"byte_end":34728,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34733,"byte_end":34805,"line_start":510,"line_end":510,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34810,"byte_end":34873,"line_start":511,"line_end":511,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34878,"byte_end":34933,"line_start":512,"line_end":512,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34938,"byte_end":34941,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34946,"byte_end":34987,"line_start":514,"line_end":514,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":34992,"byte_end":34995,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35000,"byte_end":35040,"line_start":516,"line_end":516,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35607,"byte_end":35624,"line_start":533,"line_end":533,"column_start":12,"column_end":29},"name":"swap_remove_entry","qualname":"<IndexMap<K, V, S>>::swap_remove_entry","value":"pub fn swap_remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35214,"byte_end":35275,"line_start":524,"line_end":524,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35280,"byte_end":35283,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35288,"byte_end":35360,"line_start":526,"line_end":526,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35365,"byte_end":35428,"line_start":527,"line_end":527,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35433,"byte_end":35488,"line_start":528,"line_end":528,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35493,"byte_end":35496,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35501,"byte_end":35542,"line_start":530,"line_end":530,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35547,"byte_end":35550,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35555,"byte_end":35595,"line_start":532,"line_end":532,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36295,"byte_end":36311,"line_start":553,"line_end":553,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexMap<K, V, S>>::swap_remove_full","value":"pub fn swap_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, K, V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return it and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35870,"byte_end":35937,"line_start":543,"line_end":543,"column_start":5,"column_end":72}},{"value":"/ the index it had.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35942,"byte_end":35963,"line_start":544,"line_end":544,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35968,"byte_end":35971,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":35976,"byte_end":36048,"line_start":546,"line_end":546,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36053,"byte_end":36116,"line_start":547,"line_end":547,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36121,"byte_end":36176,"line_start":548,"line_end":548,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36181,"byte_end":36184,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36189,"byte_end":36230,"line_start":550,"line_end":550,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36235,"byte_end":36238,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36243,"byte_end":36283,"line_start":552,"line_end":552,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36978,"byte_end":36990,"line_start":574,"line_end":574,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexMap<K, V, S>>::shift_remove","value":"pub fn shift_remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36573,"byte_end":36633,"line_start":564,"line_end":564,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36638,"byte_end":36652,"line_start":565,"line_end":565,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36657,"byte_end":36660,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36665,"byte_end":36731,"line_start":567,"line_end":567,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36736,"byte_end":36797,"line_start":568,"line_end":568,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36802,"byte_end":36859,"line_start":569,"line_end":569,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36864,"byte_end":36867,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36872,"byte_end":36913,"line_start":571,"line_end":571,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36918,"byte_end":36921,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":36926,"byte_end":36966,"line_start":573,"line_end":573,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37529,"byte_end":37547,"line_start":590,"line_end":590,"column_start":12,"column_end":30},"name":"shift_remove_entry","qualname":"<IndexMap<K, V, S>>::shift_remove_entry","value":"pub fn shift_remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37142,"byte_end":37203,"line_start":581,"line_end":581,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37208,"byte_end":37211,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37216,"byte_end":37282,"line_start":583,"line_end":583,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37287,"byte_end":37348,"line_start":584,"line_end":584,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37353,"byte_end":37410,"line_start":585,"line_end":585,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37415,"byte_end":37418,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37423,"byte_end":37464,"line_start":587,"line_end":587,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37469,"byte_end":37472,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37477,"byte_end":37517,"line_start":589,"line_end":589,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38213,"byte_end":38230,"line_start":610,"line_end":610,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexMap<K, V, S>>::shift_remove_full","value":"pub fn shift_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, K, V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return it and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37794,"byte_end":37861,"line_start":600,"line_end":600,"column_start":5,"column_end":72}},{"value":"/ the index it had.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37866,"byte_end":37887,"line_start":601,"line_end":601,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37892,"byte_end":37895,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37900,"byte_end":37966,"line_start":603,"line_end":603,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":37971,"byte_end":38032,"line_start":604,"line_end":604,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38037,"byte_end":38094,"line_start":605,"line_end":605,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38099,"byte_end":38102,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38107,"byte_end":38148,"line_start":607,"line_end":607,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38153,"byte_end":38156,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38161,"byte_end":38201,"line_start":609,"line_end":609,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38592,"byte_end":38595,"line_start":624,"line_end":624,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexMap<K, V, S>>::pop","value":"pub fn pop(&mut Self) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last key-value pair","sig":null,"attributes":[{"value":"/ Remove the last key-value pair","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38493,"byte_end":38527,"line_start":621,"line_end":621,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38532,"byte_end":38535,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38540,"byte_end":38580,"line_start":623,"line_end":623,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38938,"byte_end":38944,"line_start":635,"line_end":635,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexMap<K, V, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each key-value pair in the map and keep those where the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38662,"byte_end":38734,"line_start":628,"line_end":628,"column_start":5,"column_end":77}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38739,"byte_end":38773,"line_start":629,"line_end":629,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38778,"byte_end":38781,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38786,"byte_end":38858,"line_start":631,"line_end":631,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38863,"byte_end":38873,"line_start":632,"line_end":632,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38878,"byte_end":38881,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":38886,"byte_end":38926,"line_start":634,"line_end":634,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39382,"byte_end":39391,"line_start":652,"line_end":652,"column_start":12,"column_end":21},"name":"sort_keys","qualname":"<IndexMap<K, V, S>>::sort_keys","value":"pub fn sort_keys(&mut Self) where K: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs by the default ordering of the keys.","sig":null,"attributes":[{"value":"/ Sort the map’s key-value pairs by the default ordering of the keys.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39254,"byte_end":39327,"line_start":649,"line_end":649,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39332,"byte_end":39335,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ See `sort_by` for details.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39340,"byte_end":39370,"line_start":651,"line_end":651,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39977,"byte_end":39984,"line_start":669,"line_end":669,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexMap<K, V, S>>::sort_by","value":"pub fn sort_by<F>(&mut Self, F) where F: FnMut(&K, &V, &K, &V) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs in place using the comparison\n function `compare`.","sig":null,"attributes":[{"value":"/ Sort the map’s key-value pairs in place using the comparison","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39558,"byte_end":39624,"line_start":661,"line_end":661,"column_start":5,"column_end":69}},{"value":"/ function `compare`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39629,"byte_end":39652,"line_start":662,"line_end":662,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39657,"byte_end":39660,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ The comparison function receives two key and value pairs to compare (you","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39665,"byte_end":39741,"line_start":664,"line_end":664,"column_start":5,"column_end":81}},{"value":"/ can sort by keys or values or their combination as needed).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39746,"byte_end":39809,"line_start":665,"line_end":665,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39814,"byte_end":39817,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n + c)** time and **O(n)** space where *n* is","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39822,"byte_end":39893,"line_start":667,"line_end":667,"column_start":5,"column_end":76}},{"value":"/ the length of the map and *c* the capacity. The sort is stable.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":39898,"byte_end":39965,"line_start":668,"line_end":668,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40387,"byte_end":40396,"line_start":682,"line_end":682,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexMap<K, V, S>>::sorted_by","value":"pub fn sorted_by<F>(Self, F) -> IntoIter<K, V> where F: FnMut(&K, &V, &K, &V)\n-> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the key-value pairs of the map and return a by value iterator of\n the key-value pairs with the result.","sig":null,"attributes":[{"value":"/ Sort the key-value pairs of the map and return a by value iterator of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40221,"byte_end":40294,"line_start":678,"line_end":678,"column_start":5,"column_end":78}},{"value":"/ the key-value pairs with the result.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40299,"byte_end":40339,"line_start":679,"line_end":679,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40344,"byte_end":40347,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ The sort is stable.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40352,"byte_end":40375,"line_start":681,"line_end":681,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40839,"byte_end":40846,"line_start":696,"line_end":696,"column_start":12,"column_end":19},"name":"reverse","qualname":"<IndexMap<K, V, S>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of the map’s key-value pairs in place.","sig":null,"attributes":[{"value":"/ Reverses the order of the map’s key-value pairs in place.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40702,"byte_end":40765,"line_start":693,"line_end":693,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40770,"byte_end":40773,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time and **O(1)** space.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40778,"byte_end":40827,"line_start":695,"line_end":695,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41083,"byte_end":41092,"line_start":707,"line_end":707,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexMap<K, V, S>>::get_index","value":"pub fn get_index(&Self, usize) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[{"value":"/ Get a key-value pair by index","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40935,"byte_end":40968,"line_start":702,"line_end":702,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40973,"byte_end":40976,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40981,"byte_end":41028,"line_start":704,"line_end":704,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41033,"byte_end":41036,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41041,"byte_end":41071,"line_start":706,"line_end":706,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41350,"byte_end":41363,"line_start":716,"line_end":716,"column_start":12,"column_end":25},"name":"get_index_mut","qualname":"<IndexMap<K, V, S>>::get_index_mut","value":"pub fn get_index_mut(&mut Self, usize) -> Option<(&mut K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[{"value":"/ Get a key-value pair by index","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41202,"byte_end":41235,"line_start":711,"line_end":711,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41240,"byte_end":41243,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41248,"byte_end":41295,"line_start":713,"line_end":713,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41300,"byte_end":41303,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41308,"byte_end":41338,"line_start":715,"line_end":715,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41580,"byte_end":41585,"line_start":723,"line_end":723,"column_start":12,"column_end":17},"name":"first","qualname":"<IndexMap<K, V, S>>::first","value":"pub fn first(&Self) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the first key-value pair","sig":null,"attributes":[{"value":"/ Get the first key-value pair","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41493,"byte_end":41525,"line_start":720,"line_end":720,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41530,"byte_end":41533,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41538,"byte_end":41568,"line_start":722,"line_end":722,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41799,"byte_end":41808,"line_start":730,"line_end":730,"column_start":12,"column_end":21},"name":"first_mut","qualname":"<IndexMap<K, V, S>>::first_mut","value":"pub fn first_mut(&mut Self) -> Option<(&K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the first key-value pair, with mutable access to the value","sig":null,"attributes":[{"value":"/ Get the first key-value pair, with mutable access to the value","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41678,"byte_end":41744,"line_start":727,"line_end":727,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41749,"byte_end":41752,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41757,"byte_end":41787,"line_start":729,"line_end":729,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42006,"byte_end":42010,"line_start":737,"line_end":737,"column_start":12,"column_end":16},"name":"last","qualname":"<IndexMap<K, V, S>>::last","value":"pub fn last(&Self) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the last key-value pair","sig":null,"attributes":[{"value":"/ Get the last key-value pair","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41920,"byte_end":41951,"line_start":734,"line_end":734,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41956,"byte_end":41959,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":41964,"byte_end":41994,"line_start":736,"line_end":736,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42222,"byte_end":42230,"line_start":744,"line_end":744,"column_start":12,"column_end":20},"name":"last_mut","qualname":"<IndexMap<K, V, S>>::last_mut","value":"pub fn last_mut(&mut Self) -> Option<(&K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the last key-value pair, with mutable access to the value","sig":null,"attributes":[{"value":"/ Get the last key-value pair, with mutable access to the value","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42102,"byte_end":42167,"line_start":741,"line_end":741,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42172,"byte_end":42175,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42180,"byte_end":42210,"line_start":743,"line_end":743,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42717,"byte_end":42734,"line_start":757,"line_end":757,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexMap<K, V, S>>::swap_remove_index","value":"pub fn swap_remove_index(&mut Self, usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42341,"byte_end":42379,"line_start":748,"line_end":748,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42384,"byte_end":42387,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42392,"byte_end":42439,"line_start":750,"line_end":750,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42444,"byte_end":42447,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42452,"byte_end":42524,"line_start":752,"line_end":752,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42529,"byte_end":42592,"line_start":753,"line_end":753,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42597,"byte_end":42652,"line_start":754,"line_end":754,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42657,"byte_end":42660,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42665,"byte_end":42705,"line_start":756,"line_end":756,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43204,"byte_end":43222,"line_start":770,"line_end":770,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexMap<K, V, S>>::shift_remove_index","value":"pub fn shift_remove_index(&mut Self, usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42834,"byte_end":42872,"line_start":761,"line_end":761,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42877,"byte_end":42880,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42885,"byte_end":42932,"line_start":763,"line_end":763,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42937,"byte_end":42940,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":42945,"byte_end":43011,"line_start":765,"line_end":765,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43016,"byte_end":43077,"line_start":766,"line_end":766,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43082,"byte_end":43139,"line_start":767,"line_end":767,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43144,"byte_end":43147,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43152,"byte_end":43192,"line_start":769,"line_end":769,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43454,"byte_end":43466,"line_start":777,"line_end":777,"column_start":12,"column_end":24},"name":"swap_indices","qualname":"<IndexMap<K, V, S>>::swap_indices","value":"pub fn swap_indices(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps the position of two key-value pairs in the map.","sig":null,"attributes":[{"value":"/ Swaps the position of two key-value pairs in the map.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43323,"byte_end":43380,"line_start":774,"line_end":774,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43385,"byte_end":43388,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `a` or `b` are out of bounds.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43393,"byte_end":43442,"line_start":776,"line_end":776,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":553},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43803,"byte_end":43807,"line_start":789,"line_end":789,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":557}],"decl_id":null,"docs":" An iterator over the keys of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `IndexMap`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43546,"byte_end":43592,"line_start":782,"line_end":782,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43593,"byte_end":43596,"line_start":783,"line_end":783,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`IndexMap`]. See its","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43597,"byte_end":43673,"line_start":784,"line_end":784,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43674,"byte_end":43701,"line_start":785,"line_end":785,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43702,"byte_end":43705,"line_start":786,"line_end":786,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.IndexMap.html#method.keys","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43706,"byte_end":43752,"line_start":787,"line_end":787,"column_start":1,"column_end":47}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43753,"byte_end":43791,"line_start":788,"line_end":788,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":579},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44901,"byte_end":44907,"line_start":833,"line_end":833,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":583}],"decl_id":null,"docs":" An iterator over the values of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `IndexMap`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44636,"byte_end":44684,"line_start":826,"line_end":826,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44685,"byte_end":44688,"line_start":827,"line_end":827,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`IndexMap`]. See its","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44689,"byte_end":44767,"line_start":828,"line_end":828,"column_start":1,"column_end":79}},{"value":"/ documentation for more.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44768,"byte_end":44795,"line_start":829,"line_end":829,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44796,"byte_end":44799,"line_start":830,"line_end":830,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.IndexMap.html#method.values","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44800,"byte_end":44850,"line_start":831,"line_end":831,"column_start":1,"column_end":51}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44851,"byte_end":44889,"line_start":832,"line_end":832,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":605},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46025,"byte_end":46034,"line_start":877,"line_end":877,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":609}],"decl_id":null,"docs":" A mutable iterator over the values of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `IndexMap`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":45741,"byte_end":45796,"line_start":870,"line_end":870,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":45797,"byte_end":45800,"line_start":871,"line_end":871,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`IndexMap`]. See its","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":45801,"byte_end":45883,"line_start":872,"line_end":872,"column_start":1,"column_end":83}},{"value":"/ documentation for more.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":45884,"byte_end":45911,"line_start":873,"line_end":873,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":45912,"byte_end":45915,"line_start":874,"line_end":874,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.IndexMap.html#method.values_mut","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":45916,"byte_end":45974,"line_start":875,"line_end":875,"column_start":1,"column_end":59}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":45975,"byte_end":46013,"line_start":876,"line_end":876,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":623},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46763,"byte_end":46767,"line_start":906,"line_end":906,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":627}],"decl_id":null,"docs":" An iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46503,"byte_end":46552,"line_start":899,"line_end":899,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46553,"byte_end":46556,"line_start":900,"line_end":900,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`IndexMap`]. See its","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46557,"byte_end":46633,"line_start":901,"line_end":901,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46634,"byte_end":46661,"line_start":902,"line_end":902,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46662,"byte_end":46665,"line_start":903,"line_end":903,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.IndexMap.html#method.iter","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46666,"byte_end":46712,"line_start":904,"line_end":904,"column_start":1,"column_end":47}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46713,"byte_end":46751,"line_start":905,"line_end":905,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":649},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47879,"byte_end":47886,"line_start":950,"line_end":950,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":653}],"decl_id":null,"docs":" A mutable iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47600,"byte_end":47656,"line_start":943,"line_end":943,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47657,"byte_end":47660,"line_start":944,"line_end":944,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`IndexMap`]. See its","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47661,"byte_end":47741,"line_start":945,"line_end":945,"column_start":1,"column_end":81}},{"value":"/ documentation for more.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47742,"byte_end":47769,"line_start":946,"line_end":946,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47770,"byte_end":47773,"line_start":947,"line_end":947,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.IndexMap.html#method.iter_mut","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47774,"byte_end":47828,"line_start":948,"line_end":948,"column_start":1,"column_end":55}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47829,"byte_end":47867,"line_start":949,"line_end":949,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":667},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":48675,"byte_end":48683,"line_start":979,"line_end":979,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":670}],"decl_id":null,"docs":" An owning iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":48354,"byte_end":48410,"line_start":972,"line_end":972,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":48411,"byte_end":48414,"line_start":973,"line_end":973,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`IndexMap`]","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":48415,"byte_end":48487,"line_start":974,"line_end":974,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":48488,"byte_end":48563,"line_start":975,"line_end":975,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":48564,"byte_end":48567,"line_start":976,"line_end":976,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.IndexMap.html#method.into_iter","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":48568,"byte_end":48624,"line_start":977,"line_end":977,"column_start":1,"column_end":57}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":48625,"byte_end":48663,"line_start":978,"line_end":978,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":687},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":49656,"byte_end":49661,"line_start":1015,"line_end":1015,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":691}],"decl_id":null,"docs":" A draining iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":49385,"byte_end":49442,"line_start":1008,"line_end":1008,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":49443,"byte_end":49446,"line_start":1009,"line_end":1009,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`IndexMap`]. See its","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":49447,"byte_end":49524,"line_start":1010,"line_end":1010,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":49525,"byte_end":49552,"line_start":1011,"line_end":1011,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":49553,"byte_end":49556,"line_start":1012,"line_end":1012,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.IndexMap.html#method.drain","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":49557,"byte_end":49605,"line_start":1013,"line_end":1013,"column_start":1,"column_end":49}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":49606,"byte_end":49644,"line_start":1014,"line_end":1014,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":785},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"set","qualname":"::set","value":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","parent":null,"children":[{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":1477},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":812},{"krate":0,"index":816},{"krate":0,"index":821},{"krate":0,"index":830},{"krate":0,"index":834},{"krate":0,"index":838},{"krate":0,"index":853},{"krate":0,"index":918},{"krate":0,"index":929},{"krate":0,"index":934},{"krate":0,"index":937},{"krate":0,"index":940},{"krate":0,"index":943},{"krate":0,"index":946},{"krate":0,"index":949},{"krate":0,"index":953},{"krate":0,"index":957},{"krate":0,"index":960},{"krate":0,"index":963},{"krate":0,"index":966},{"krate":0,"index":969},{"krate":0,"index":973},{"krate":0,"index":976},{"krate":0,"index":978},{"krate":0,"index":985},{"krate":0,"index":991},{"krate":0,"index":997},{"krate":0,"index":1003},{"krate":0,"index":1009},{"krate":0,"index":1013},{"krate":0,"index":1018},{"krate":0,"index":1021},{"krate":0,"index":1033},{"krate":0,"index":1039},{"krate":0,"index":1046},{"krate":0,"index":1050},{"krate":0,"index":1054},{"krate":0,"index":1058},{"krate":0,"index":1064},{"krate":0,"index":1071},{"krate":0,"index":1075},{"krate":0,"index":1079},{"krate":0,"index":1083},{"krate":0,"index":1089},{"krate":0,"index":1100},{"krate":0,"index":1105},{"krate":0,"index":1110},{"krate":0,"index":1115},{"krate":0,"index":1120},{"krate":0,"index":1130},{"krate":0,"index":1134},{"krate":0,"index":1138},{"krate":0,"index":1142},{"krate":0,"index":1148},{"krate":0,"index":1154},{"krate":0,"index":1160}],"decl_id":null,"docs":" A hash set implemented using `IndexMap`\n","sig":null,"attributes":[{"value":"/ A hash set implemented using `IndexMap`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":97544,"byte_end":97587,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":812},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99633,"byte_end":99641,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"IndexSet","qualname":"::set::IndexSet","value":"IndexSet {  }","parent":null,"children":[{"krate":0,"index":815}],"decl_id":null,"docs":" A hash set where the iteration order of the values is independent of their\n hash values.","sig":null,"attributes":[{"value":"/ A hash set where the iteration order of the values is independent of their","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98027,"byte_end":98105,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ hash values.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98106,"byte_end":98122,"line_start":22,"line_end":22,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98123,"byte_end":98126,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The interface is closely compatible with the standard `HashSet`, but also","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98127,"byte_end":98204,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ has additional features.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98205,"byte_end":98233,"line_start":25,"line_end":25,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98234,"byte_end":98237,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Order","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98238,"byte_end":98249,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98250,"byte_end":98253,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The values have a consistent order that is determined by the sequence of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98254,"byte_end":98330,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ insertion and removal calls on the set. The order does not depend on the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98331,"byte_end":98407,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ values or the hash function at all. Note that insertion order and value","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98408,"byte_end":98483,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ are not affected if a re-insertion is attempted once an element is","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98484,"byte_end":98554,"line_start":32,"line_end":32,"column_start":1,"column_end":71}},{"value":"/ already present.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98555,"byte_end":98575,"line_start":33,"line_end":33,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98576,"byte_end":98579,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ All iterators traverse the set *in order*.  Set operation iterators like","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98580,"byte_end":98656,"line_start":35,"line_end":35,"column_start":1,"column_end":77}},{"value":"/ `union` produce a concatenated order, as do their matching \"bitwise\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98657,"byte_end":98729,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/ operators.  See their documentation for specifics.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98730,"byte_end":98784,"line_start":37,"line_end":37,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98785,"byte_end":98788,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ The insertion order is preserved, with **notable exceptions** like the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98789,"byte_end":98863,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ `.remove()` or `.swap_remove()` methods. Methods such as `.sort_by()` of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98864,"byte_end":98940,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ course result in a new order, depending on the sorting order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":98941,"byte_end":99006,"line_start":41,"line_end":41,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99007,"byte_end":99010,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ # Indices","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99011,"byte_end":99024,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99025,"byte_end":99028,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ The values are indexed in a compact range without holes in the range","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99029,"byte_end":99101,"line_start":45,"line_end":45,"column_start":1,"column_end":73}},{"value":"/ `0..self.len()`. For example, the method `.get_full` looks up the index for","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99102,"byte_end":99181,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/ a value, and the method `.get_index` looks up the value by index.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99182,"byte_end":99251,"line_start":47,"line_end":47,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99252,"byte_end":99255,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99256,"byte_end":99270,"line_start":49,"line_end":49,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99271,"byte_end":99274,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99275,"byte_end":99282,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ use indexmap::IndexSet;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99283,"byte_end":99310,"line_start":52,"line_end":52,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99311,"byte_end":99314,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // Collects which letters appear in a sentence.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99315,"byte_end":99366,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ let letters: IndexSet<_> = \"a short treatise on fungi\".chars().collect();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99367,"byte_end":99444,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99445,"byte_end":99448,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ assert!(letters.contains(&'s'));","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99449,"byte_end":99485,"line_start":57,"line_end":57,"column_start":1,"column_end":37}},{"value":"/ assert!(letters.contains(&'t'));","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99486,"byte_end":99522,"line_start":58,"line_end":58,"column_start":1,"column_end":37}},{"value":"/ assert!(letters.contains(&'u'));","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99523,"byte_end":99559,"line_start":59,"line_end":59,"column_start":1,"column_end":37}},{"value":"/ assert!(!letters.contains(&'y'));","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99560,"byte_end":99597,"line_start":60,"line_end":60,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99598,"byte_end":99605,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"cfg(has_std)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99606,"byte_end":99621,"line_start":62,"line_end":62,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101063,"byte_end":101066,"line_start":130,"line_end":130,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexSet<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set. (Does not allocate.)\n","sig":null,"attributes":[{"value":"/ Create a new set. (Does not allocate.)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101009,"byte_end":101051,"line_start":129,"line_end":129,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101304,"byte_end":101317,"line_start":140,"line_end":140,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexSet<T>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new set with capacity for `n` elements.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101153,"byte_end":101205,"line_start":136,"line_end":136,"column_start":5,"column_end":57}},{"value":"/ (Does not allocate if `n` is zero.)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101210,"byte_end":101249,"line_start":137,"line_end":137,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101254,"byte_end":101257,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101262,"byte_end":101292,"line_start":139,"line_end":139,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101604,"byte_end":101628,"line_start":152,"line_end":152,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexSet<T, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new set with capacity for `n` elements.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101453,"byte_end":101505,"line_start":148,"line_end":148,"column_start":5,"column_end":57}},{"value":"/ (Does not allocate if `n` is zero.)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101510,"byte_end":101549,"line_start":149,"line_end":149,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101554,"byte_end":101557,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101562,"byte_end":101592,"line_start":151,"line_end":151,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101828,"byte_end":101839,"line_start":159,"line_end":159,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<IndexSet<T, S>>::with_hasher","value":"pub fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with `hash_builder`\n","sig":null,"attributes":[{"value":"/ Create a new set with `hash_builder`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101776,"byte_end":101816,"line_start":158,"line_end":158,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102003,"byte_end":102011,"line_start":166,"line_end":166,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexSet<T, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101961,"byte_end":101991,"line_start":165,"line_end":165,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102131,"byte_end":102137,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexSet<T, S>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the set's `BuildHasher`.\n","sig":null,"attributes":[{"value":"/ Return a reference to the set's `BuildHasher`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102069,"byte_end":102119,"line_start":170,"line_end":170,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102290,"byte_end":102293,"line_start":178,"line_end":178,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexSet<T, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of elements in the set.","sig":null,"attributes":[{"value":"/ Return the number of elements in the set.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102190,"byte_end":102235,"line_start":175,"line_end":175,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102240,"byte_end":102243,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102248,"byte_end":102278,"line_start":177,"line_end":177,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102450,"byte_end":102458,"line_start":185,"line_end":185,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexSet<T, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the set contains no elements.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102346,"byte_end":102395,"line_start":182,"line_end":182,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102400,"byte_end":102403,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102408,"byte_end":102438,"line_start":184,"line_end":184,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102592,"byte_end":102596,"line_start":190,"line_end":190,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexSet<T, S>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the set, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the set, in their order","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102515,"byte_end":102580,"line_start":189,"line_end":189,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102818,"byte_end":102823,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexSet<T, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements in the set, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all elements in the set, while preserving its capacity.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102697,"byte_end":102763,"line_start":196,"line_end":196,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102768,"byte_end":102771,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102776,"byte_end":102806,"line_start":198,"line_end":198,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103050,"byte_end":103058,"line_start":206,"line_end":206,"column_start":12,"column_end":20},"name":"truncate","qualname":"<IndexSet<T, S>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the set, keeping the first `len` elements and dropping the rest.","sig":null,"attributes":[{"value":"/ Shortens the set, keeping the first `len` elements and dropping the rest.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102874,"byte_end":102951,"line_start":203,"line_end":203,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102956,"byte_end":102959,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ If `len` is greater than the set's current length, this has no effect.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":102964,"byte_end":103038,"line_start":205,"line_end":205,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103800,"byte_end":103805,"line_start":223,"line_end":223,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexSet<T, S>>::drain","value":"pub fn drain<R>(&mut Self, R) -> Drain<, T> where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexSet` in the given index range, returning those values\n as a drain iterator.","sig":null,"attributes":[{"value":"/ Clears the `IndexSet` in the given index range, returning those values","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103127,"byte_end":103201,"line_start":210,"line_end":210,"column_start":5,"column_end":79}},{"value":"/ as a drain iterator.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103206,"byte_end":103230,"line_start":211,"line_end":211,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103235,"byte_end":103238,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ The range may be any type that implements `RangeBounds<usize>`,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103243,"byte_end":103310,"line_start":213,"line_end":213,"column_start":5,"column_end":72}},{"value":"/ including all of the `std::ops::Range*` types, or even a tuple pair of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103315,"byte_end":103389,"line_start":214,"line_end":214,"column_start":5,"column_end":79}},{"value":"/ `Bound` start and end values. To drain the set entirely, use `RangeFull`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103394,"byte_end":103470,"line_start":215,"line_end":215,"column_start":5,"column_end":81}},{"value":"/ like `set.drain(..)`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103475,"byte_end":103500,"line_start":216,"line_end":216,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103505,"byte_end":103508,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ This shifts down all entries following the drained range to fill the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103513,"byte_end":103585,"line_start":218,"line_end":218,"column_start":5,"column_end":77}},{"value":"/ gap, and keeps the allocated memory for reuse.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103590,"byte_end":103640,"line_start":219,"line_end":219,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103645,"byte_end":103648,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if the starting point is greater than the end point or if","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103653,"byte_end":103727,"line_start":221,"line_end":221,"column_start":5,"column_end":79}},{"value":"/ the end point is greater than the length of the set.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103732,"byte_end":103788,"line_start":222,"line_end":222,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104316,"byte_end":104325,"line_start":239,"line_end":239,"column_start":12,"column_end":21},"name":"split_off","qualname":"<IndexSet<T, S>>::split_off","value":"pub fn split_off(&mut Self, usize) -> Self where S: Clone","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given index.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":103976,"byte_end":104030,"line_start":232,"line_end":232,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104035,"byte_end":104038,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Returns a newly allocated set containing the elements in the range","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104043,"byte_end":104113,"line_start":234,"line_end":234,"column_start":5,"column_end":75}},{"value":"/ `[at, len)`. After the call, the original set will be left containing","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104118,"byte_end":104191,"line_start":235,"line_end":235,"column_start":5,"column_end":78}},{"value":"/ the elements `[0, at)` with its previous capacity unchanged.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104196,"byte_end":104260,"line_start":236,"line_end":236,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104265,"byte_end":104268,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `at > len`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104273,"byte_end":104304,"line_start":238,"line_end":238,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104646,"byte_end":104653,"line_start":257,"line_end":257,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexSet<T, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve capacity for `additional` more values.","sig":null,"attributes":[{"value":"/ Reserve capacity for `additional` more values.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104541,"byte_end":104591,"line_start":254,"line_end":254,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104596,"byte_end":104599,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104604,"byte_end":104634,"line_start":256,"line_end":256,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104845,"byte_end":104858,"line_start":264,"line_end":264,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<IndexSet<T, S>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the set as much as possible.","sig":null,"attributes":[{"value":"/ Shrink the capacity of the set as much as possible.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104735,"byte_end":104790,"line_start":261,"line_end":261,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104795,"byte_end":104798,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104803,"byte_end":104833,"line_start":263,"line_end":263,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105269,"byte_end":105275,"line_start":276,"line_end":276,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexSet<T, S>>::insert","value":"pub fn insert(&mut Self, T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set.","sig":null,"attributes":[{"value":"/ Insert the value into the set.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104917,"byte_end":104951,"line_start":268,"line_end":268,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104956,"byte_end":104959,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ If an equivalent item already exists in the set, it returns","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104964,"byte_end":105027,"line_start":270,"line_end":270,"column_start":5,"column_end":68}},{"value":"/ `false` leaving the original value in the set and without","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105032,"byte_end":105093,"line_start":271,"line_end":271,"column_start":5,"column_end":66}},{"value":"/ altering its insertion order. Otherwise, it inserts the new","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105098,"byte_end":105161,"line_start":272,"line_end":272,"column_start":5,"column_end":68}},{"value":"/ item and returns `true`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105166,"byte_end":105194,"line_start":273,"line_end":273,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105199,"byte_end":105202,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105207,"byte_end":105257,"line_start":275,"line_end":275,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105813,"byte_end":105824,"line_start":289,"line_end":289,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexSet<T, S>>::insert_full","value":"pub fn insert_full(&mut Self, T) -> (usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set, and get its index.","sig":null,"attributes":[{"value":"/ Insert the value into the set, and get its index.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105363,"byte_end":105416,"line_start":280,"line_end":280,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105421,"byte_end":105424,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ If an equivalent item already exists in the set, it returns","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105429,"byte_end":105492,"line_start":282,"line_end":282,"column_start":5,"column_end":68}},{"value":"/ the index of the existing item and `false`, leaving the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105497,"byte_end":105556,"line_start":283,"line_end":283,"column_start":5,"column_end":64}},{"value":"/ original value in the set and without altering its insertion","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105561,"byte_end":105625,"line_start":284,"line_end":284,"column_start":5,"column_end":69}},{"value":"/ order. Otherwise, it inserts the new item and returns the index","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105630,"byte_end":105697,"line_start":285,"line_end":285,"column_start":5,"column_end":72}},{"value":"/ of the inserted item and `true`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105702,"byte_end":105738,"line_start":286,"line_end":286,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105743,"byte_end":105746,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":105751,"byte_end":105801,"line_start":288,"line_end":288,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106314,"byte_end":106324,"line_start":305,"line_end":305,"column_start":12,"column_end":22},"name":"difference","qualname":"<IndexSet<T, S>>::difference","value":"pub fn difference<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Difference where\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` but not `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in `self` but not `other`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106146,"byte_end":106220,"line_start":302,"line_end":302,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106225,"byte_end":106228,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ Values are produced in the same order that they appear in `self`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106233,"byte_end":106302,"line_start":304,"line_end":304,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106773,"byte_end":106793,"line_start":320,"line_end":320,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<IndexSet<T, S>>::symmetric_difference","value":"pub fn symmetric_difference<'a, S2>(&'a Self, &'a IndexSet<T, S2>)\n-> SymmetricDifference where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` or `other`,\n but not in both.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in `self` or `other`,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106529,"byte_end":106598,"line_start":315,"line_end":315,"column_start":5,"column_end":74}},{"value":"/ but not in both.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106603,"byte_end":106623,"line_start":316,"line_end":316,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106628,"byte_end":106631,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ Values from `self` are produced in their original order, followed by","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106636,"byte_end":106708,"line_start":318,"line_end":318,"column_start":5,"column_end":77}},{"value":"/ values from `other` in their original order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":106713,"byte_end":106761,"line_start":319,"line_end":319,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107233,"byte_end":107245,"line_start":335,"line_end":335,"column_start":12,"column_end":24},"name":"intersection","qualname":"<IndexSet<T, S>>::intersection","value":"pub fn intersection<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Intersection\nwhere S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in both `self` and `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in both `self` and `other`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107064,"byte_end":107139,"line_start":332,"line_end":332,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107144,"byte_end":107147,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ Values are produced in the same order that they appear in `self`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107152,"byte_end":107221,"line_start":334,"line_end":334,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107687,"byte_end":107692,"line_start":349,"line_end":349,"column_start":12,"column_end":17},"name":"union","qualname":"<IndexSet<T, S>>::union","value":"pub fn union<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Union where\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all values that are in `self` or `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over all values that are in `self` or `other`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107454,"byte_end":107523,"line_start":345,"line_end":345,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107528,"byte_end":107531,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ Values from `self` are produced in their original order, followed by","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107536,"byte_end":107608,"line_start":347,"line_end":347,"column_start":5,"column_end":77}},{"value":"/ values that are unique to `other` in their original order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107613,"byte_end":107675,"line_start":348,"line_end":348,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108026,"byte_end":108034,"line_start":361,"line_end":361,"column_start":12,"column_end":20},"name":"contains","qualname":"<IndexSet<T, S>>::contains","value":"pub fn contains<Q: ?Sized>(&Self, &Q) -> bool where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `value` exists in the set.","sig":null,"attributes":[{"value":"/ Return `true` if an equivalent to `value` exists in the set.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107897,"byte_end":107961,"line_start":358,"line_end":358,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107966,"byte_end":107969,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":107974,"byte_end":108014,"line_start":360,"line_end":360,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108327,"byte_end":108330,"line_start":372,"line_end":372,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexSet<T, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&T> where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored in the set, if it is present,\n else `None`.","sig":null,"attributes":[{"value":"/ Return a reference to the value stored in the set, if it is present,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108169,"byte_end":108241,"line_start":368,"line_end":368,"column_start":5,"column_end":77}},{"value":"/ else `None`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108246,"byte_end":108262,"line_start":369,"line_end":369,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108267,"byte_end":108270,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108275,"byte_end":108315,"line_start":371,"line_end":371,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108533,"byte_end":108541,"line_start":380,"line_end":380,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexSet<T, S>>::get_full","value":"pub fn get_full<Q: ?Sized>(&Self, &Q) -> Option<(usize, &T)> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return item index and value\n","sig":null,"attributes":[{"value":"/ Return item index and value","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108490,"byte_end":108521,"line_start":379,"line_end":379,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108771,"byte_end":108783,"line_start":388,"line_end":388,"column_start":12,"column_end":24},"name":"get_index_of","qualname":"<IndexSet<T, S>>::get_index_of","value":"pub fn get_index_of<Q: ?Sized>(&Self, &Q) -> Option<usize> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, if it exists in the set\n","sig":null,"attributes":[{"value":"/ Return item index, if it exists in the set","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108713,"byte_end":108759,"line_start":387,"line_end":387,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109126,"byte_end":109133,"line_start":399,"line_end":399,"column_start":12,"column_end":19},"name":"replace","qualname":"<IndexSet<T, S>>::replace","value":"pub fn replace(&mut Self, T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is\n equal to the given one. Returns the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":108927,"byte_end":109001,"line_start":395,"line_end":395,"column_start":5,"column_end":79}},{"value":"/ equal to the given one. Returns the replaced value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109006,"byte_end":109061,"line_start":396,"line_end":396,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109066,"byte_end":109069,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109074,"byte_end":109114,"line_start":398,"line_end":398,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109709,"byte_end":109715,"line_start":417,"line_end":417,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexSet<T, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109406,"byte_end":109477,"line_start":411,"line_end":411,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109482,"byte_end":109485,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove(value)`, if you want","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109490,"byte_end":109560,"line_start":413,"line_end":413,"column_start":5,"column_end":75}},{"value":"/ to preserve the order of the values in the set, use `.shift_remove(value)`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109565,"byte_end":109644,"line_start":414,"line_end":414,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109649,"byte_end":109652,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109657,"byte_end":109697,"line_start":416,"line_end":416,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110261,"byte_end":110272,"line_start":433,"line_end":433,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexSet<T, S>>::swap_remove","value":"pub fn swap_remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109849,"byte_end":109920,"line_start":424,"line_end":424,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109925,"byte_end":109928,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":109933,"byte_end":110006,"line_start":426,"line_end":426,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110011,"byte_end":110074,"line_start":427,"line_end":427,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110079,"byte_end":110134,"line_start":428,"line_end":428,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110139,"byte_end":110142,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ Return `false` if `value` was not in the set.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110147,"byte_end":110196,"line_start":430,"line_end":430,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110201,"byte_end":110204,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110209,"byte_end":110249,"line_start":432,"line_end":432,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110826,"byte_end":110838,"line_start":449,"line_end":449,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexSet<T, S>>::shift_remove","value":"pub fn shift_remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110420,"byte_end":110491,"line_start":440,"line_end":440,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110496,"byte_end":110499,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110504,"byte_end":110571,"line_start":442,"line_end":442,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110576,"byte_end":110637,"line_start":443,"line_end":443,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110642,"byte_end":110699,"line_start":444,"line_end":444,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110704,"byte_end":110707,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ Return `false` if `value` was not in the set.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110712,"byte_end":110761,"line_start":446,"line_end":446,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110766,"byte_end":110769,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110774,"byte_end":110814,"line_start":448,"line_end":448,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111324,"byte_end":111328,"line_start":464,"line_end":464,"column_start":12,"column_end":16},"name":"take","qualname":"<IndexSet<T, S>>::take","value":"pub fn take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":110987,"byte_end":111061,"line_start":456,"line_end":456,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111066,"byte_end":111080,"line_start":457,"line_end":457,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111085,"byte_end":111088,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_take(value)`, if you need to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111093,"byte_end":111164,"line_start":459,"line_end":459,"column_start":5,"column_end":76}},{"value":"/ preserve the order of the values in the set, use `.shift_take(value)`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111169,"byte_end":111242,"line_start":460,"line_end":460,"column_start":5,"column_end":78}},{"value":"/ instead.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111247,"byte_end":111259,"line_start":461,"line_end":461,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111264,"byte_end":111267,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111272,"byte_end":111312,"line_start":463,"line_end":463,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111898,"byte_end":111907,"line_start":481,"line_end":481,"column_start":12,"column_end":21},"name":"swap_take","qualname":"<IndexSet<T, S>>::swap_take","value":"pub fn swap_take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111465,"byte_end":111539,"line_start":471,"line_end":471,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111544,"byte_end":111558,"line_start":472,"line_end":472,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111563,"byte_end":111566,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111571,"byte_end":111644,"line_start":474,"line_end":474,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111649,"byte_end":111712,"line_start":475,"line_end":475,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111717,"byte_end":111772,"line_start":476,"line_end":476,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111777,"byte_end":111780,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111785,"byte_end":111833,"line_start":478,"line_end":478,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111838,"byte_end":111841,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":111846,"byte_end":111886,"line_start":480,"line_end":480,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112500,"byte_end":112510,"line_start":498,"line_end":498,"column_start":12,"column_end":22},"name":"shift_take","qualname":"<IndexSet<T, S>>::shift_take","value":"pub fn shift_take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112073,"byte_end":112147,"line_start":488,"line_end":488,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112152,"byte_end":112166,"line_start":489,"line_end":489,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112171,"byte_end":112174,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112179,"byte_end":112246,"line_start":491,"line_end":491,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112251,"byte_end":112312,"line_start":492,"line_end":492,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112317,"byte_end":112374,"line_start":493,"line_end":493,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112379,"byte_end":112382,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112387,"byte_end":112435,"line_start":495,"line_end":495,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112440,"byte_end":112443,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112448,"byte_end":112488,"line_start":497,"line_end":497,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113029,"byte_end":113045,"line_start":512,"line_end":512,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexSet<T, S>>::swap_remove_full","value":"pub fn swap_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, T)> where\nQ: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[{"value":"/ Remove the value from the set return it and the index it had.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112677,"byte_end":112742,"line_start":505,"line_end":505,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112747,"byte_end":112750,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112755,"byte_end":112828,"line_start":507,"line_end":507,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112833,"byte_end":112896,"line_start":508,"line_end":508,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112901,"byte_end":112956,"line_start":509,"line_end":509,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112961,"byte_end":112964,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":112969,"byte_end":113017,"line_start":511,"line_end":511,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113573,"byte_end":113590,"line_start":526,"line_end":526,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexSet<T, S>>::shift_remove_full","value":"pub fn shift_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, T)> where\nQ: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[{"value":"/ Remove the value from the set return it and the index it had.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113227,"byte_end":113292,"line_start":519,"line_end":519,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113297,"byte_end":113300,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113305,"byte_end":113372,"line_start":521,"line_end":521,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113377,"byte_end":113438,"line_start":522,"line_end":522,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113443,"byte_end":113500,"line_start":523,"line_end":523,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113505,"byte_end":113508,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113513,"byte_end":113561,"line_start":525,"line_end":525,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113863,"byte_end":113866,"line_start":536,"line_end":536,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexSet<T, S>>::pop","value":"pub fn pop(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last value","sig":null,"attributes":[{"value":"/ Remove the last value","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113773,"byte_end":113798,"line_start":533,"line_end":533,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113803,"byte_end":113806,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113811,"byte_end":113851,"line_start":535,"line_end":535,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114211,"byte_end":114217,"line_start":547,"line_end":547,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexSet<T, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Scan through each value in the set and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each value in the set and keep those where the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":113944,"byte_end":114007,"line_start":540,"line_end":540,"column_start":5,"column_end":68}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114012,"byte_end":114046,"line_start":541,"line_end":541,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114051,"byte_end":114054,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114059,"byte_end":114131,"line_start":543,"line_end":543,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114136,"byte_end":114146,"line_start":544,"line_end":544,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114151,"byte_end":114154,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114159,"byte_end":114199,"line_start":546,"line_end":546,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114462,"byte_end":114466,"line_start":557,"line_end":557,"column_start":12,"column_end":16},"name":"sort","qualname":"<IndexSet<T, S>>::sort","value":"pub fn sort(&mut Self) where T: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values by their default ordering.","sig":null,"attributes":[{"value":"/ Sort the set’s values by their default ordering.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114353,"byte_end":114407,"line_start":554,"line_end":554,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114412,"byte_end":114415,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ See `sort_by` for details.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114420,"byte_end":114450,"line_start":556,"line_end":556,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114727,"byte_end":114734,"line_start":567,"line_end":567,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexSet<T, S>>::sort_by","value":"pub fn sort_by<F>(&mut Self, F) where F: FnMut(&T, &T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values in place using the comparison function `compare`.","sig":null,"attributes":[{"value":"/ Sort the set’s values in place using the comparison function `compare`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114550,"byte_end":114627,"line_start":564,"line_end":564,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114632,"byte_end":114635,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n)** time and **O(n)** space. The sort is stable.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114640,"byte_end":114715,"line_start":566,"line_end":566,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115037,"byte_end":115046,"line_start":578,"line_end":578,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexSet<T, S>>::sorted_by","value":"pub fn sorted_by<F>(Self, F) -> IntoIter<T> where F: FnMut(&T, &T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the values of the set and return a by value iterator of\n the values with the result.","sig":null,"attributes":[{"value":"/ Sort the values of the set and return a by value iterator of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114889,"byte_end":114953,"line_start":574,"line_end":574,"column_start":5,"column_end":69}},{"value":"/ the values with the result.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114958,"byte_end":114989,"line_start":575,"line_end":575,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":114994,"byte_end":114997,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ The sort is stable.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115002,"byte_end":115025,"line_start":577,"line_end":577,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115381,"byte_end":115388,"line_start":590,"line_end":590,"column_start":12,"column_end":19},"name":"reverse","qualname":"<IndexSet<T, S>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of the set’s values in place.","sig":null,"attributes":[{"value":"/ Reverses the order of the set’s values in place.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115253,"byte_end":115307,"line_start":587,"line_end":587,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115312,"byte_end":115315,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time and **O(1)** space.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115320,"byte_end":115369,"line_start":589,"line_end":589,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115609,"byte_end":115618,"line_start":601,"line_end":601,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexSet<T, S>>::get_index","value":"pub fn get_index(&Self, usize) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get a value by index","sig":null,"attributes":[{"value":"/ Get a value by index","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115470,"byte_end":115494,"line_start":596,"line_end":596,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115499,"byte_end":115502,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115507,"byte_end":115554,"line_start":598,"line_end":598,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115559,"byte_end":115562,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115567,"byte_end":115597,"line_start":600,"line_end":600,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115803,"byte_end":115808,"line_start":608,"line_end":608,"column_start":12,"column_end":17},"name":"first","qualname":"<IndexSet<T, S>>::first","value":"pub fn first(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get the first value","sig":null,"attributes":[{"value":"/ Get the first value","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115725,"byte_end":115748,"line_start":605,"line_end":605,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115753,"byte_end":115756,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115761,"byte_end":115791,"line_start":607,"line_end":607,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115975,"byte_end":115979,"line_start":615,"line_end":615,"column_start":12,"column_end":16},"name":"last","qualname":"<IndexSet<T, S>>::last","value":"pub fn last(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get the last value","sig":null,"attributes":[{"value":"/ Get the last value","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115898,"byte_end":115920,"line_start":612,"line_end":612,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115925,"byte_end":115928,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115933,"byte_end":115963,"line_start":614,"line_end":614,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116436,"byte_end":116453,"line_start":628,"line_end":628,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexSet<T, S>>::swap_remove_index","value":"pub fn swap_remove_index(&mut Self, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value by index","sig":null,"attributes":[{"value":"/ Remove the value by index","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116068,"byte_end":116097,"line_start":619,"line_end":619,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116102,"byte_end":116105,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116110,"byte_end":116157,"line_start":621,"line_end":621,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116162,"byte_end":116165,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116170,"byte_end":116243,"line_start":623,"line_end":623,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116248,"byte_end":116311,"line_start":624,"line_end":624,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116316,"byte_end":116371,"line_start":625,"line_end":625,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116376,"byte_end":116379,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116384,"byte_end":116424,"line_start":627,"line_end":627,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116926,"byte_end":116944,"line_start":641,"line_end":641,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexSet<T, S>>::shift_remove_index","value":"pub fn shift_remove_index(&mut Self, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value by index","sig":null,"attributes":[{"value":"/ Remove the value by index","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116564,"byte_end":116593,"line_start":632,"line_end":632,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116598,"byte_end":116601,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116606,"byte_end":116653,"line_start":634,"line_end":634,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116658,"byte_end":116661,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116666,"byte_end":116733,"line_start":636,"line_end":636,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116738,"byte_end":116799,"line_start":637,"line_end":637,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116804,"byte_end":116861,"line_start":638,"line_end":638,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116866,"byte_end":116869,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":116874,"byte_end":116914,"line_start":640,"line_end":640,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":117178,"byte_end":117190,"line_start":648,"line_end":648,"column_start":12,"column_end":24},"name":"swap_indices","qualname":"<IndexSet<T, S>>::swap_indices","value":"pub fn swap_indices(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps the position of two values in the set.","sig":null,"attributes":[{"value":"/ Swaps the position of two values in the set.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":117056,"byte_end":117104,"line_start":645,"line_end":645,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":117109,"byte_end":117112,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `a` or `b` are out of bounds.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":117117,"byte_end":117166,"line_start":647,"line_end":647,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":934},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118573,"byte_end":118581,"line_start":700,"line_end":700,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":936}],"decl_id":null,"docs":" An owning iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `IndexSet`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118254,"byte_end":118308,"line_start":693,"line_end":693,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118309,"byte_end":118312,"line_start":694,"line_end":694,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`IndexSet`]","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118313,"byte_end":118385,"line_start":695,"line_end":695,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118386,"byte_end":118461,"line_start":696,"line_end":696,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118462,"byte_end":118465,"line_start":697,"line_end":697,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118466,"byte_end":118504,"line_start":698,"line_end":698,"column_start":1,"column_end":39}},{"value":"/ [`into_iter`]: struct.IndexSet.html#method.into_iter","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118505,"byte_end":118561,"line_start":699,"line_end":699,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":949},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119474,"byte_end":119478,"line_start":736,"line_end":736,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":952}],"decl_id":null,"docs":" An iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `IndexSet`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119216,"byte_end":119263,"line_start":729,"line_end":729,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119264,"byte_end":119267,"line_start":730,"line_end":730,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`IndexSet`].","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119268,"byte_end":119336,"line_start":731,"line_end":731,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119337,"byte_end":119372,"line_start":732,"line_end":732,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119373,"byte_end":119376,"line_start":733,"line_end":733,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119377,"byte_end":119415,"line_start":734,"line_end":734,"column_start":1,"column_end":39}},{"value":"/ [`iter`]: struct.IndexSet.html#method.iter","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119416,"byte_end":119462,"line_start":735,"line_end":735,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":969},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120476,"byte_end":120481,"line_start":779,"line_end":779,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":972}],"decl_id":null,"docs":" A draining iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ A draining iterator over the items of a `IndexSet`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120207,"byte_end":120262,"line_start":772,"line_end":772,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120263,"byte_end":120266,"line_start":773,"line_end":773,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`IndexSet`].","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120267,"byte_end":120336,"line_start":774,"line_end":774,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120337,"byte_end":120372,"line_start":775,"line_end":775,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120373,"byte_end":120376,"line_start":776,"line_end":776,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120377,"byte_end":120415,"line_start":777,"line_end":777,"column_start":1,"column_end":39}},{"value":"/ [`drain`]: struct.IndexSet.html#method.drain","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120416,"byte_end":120464,"line_start":778,"line_end":778,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1024},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":122679,"byte_end":122690,"line_start":884,"line_end":884,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<IndexSet<T, S>>::is_disjoint","value":"pub fn is_disjoint<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":122599,"byte_end":122667,"line_start":883,"line_end":883,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":123065,"byte_end":123074,"line_start":896,"line_end":896,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<IndexSet<T, S>>::is_subset","value":"pub fn is_subset<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `self` are contained in `other`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all elements of `self` are contained in `other`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":122983,"byte_end":123053,"line_start":895,"line_end":895,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1031},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":123342,"byte_end":123353,"line_start":904,"line_end":904,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<IndexSet<T, S>>::is_superset","value":"pub fn is_superset<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `other` are contained in `self`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all elements of `other` are contained in `self`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":123260,"byte_end":123330,"line_start":903,"line_end":903,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":1033},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":123779,"byte_end":123789,"line_start":919,"line_end":919,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":1037},{"krate":0,"index":1038}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `IndexSet`s.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":123478,"byte_end":123550,"line_start":912,"line_end":912,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":123551,"byte_end":123554,"line_start":913,"line_end":913,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`IndexSet`].","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":123555,"byte_end":123629,"line_start":914,"line_end":914,"column_start":1,"column_end":75}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":123630,"byte_end":123665,"line_start":915,"line_end":915,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":123666,"byte_end":123669,"line_start":916,"line_end":916,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":123670,"byte_end":123708,"line_start":917,"line_end":917,"column_start":1,"column_end":39}},{"value":"/ [`difference`]: struct.IndexSet.html#method.difference","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":123709,"byte_end":123767,"line_start":918,"line_end":918,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":1058},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":125342,"byte_end":125354,"line_start":986,"line_end":986,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":1062},{"krate":0,"index":1063}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `IndexSet`s.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":125033,"byte_end":125107,"line_start":979,"line_end":979,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":125108,"byte_end":125111,"line_start":980,"line_end":980,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`IndexSet`].","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":125112,"byte_end":125188,"line_start":981,"line_end":981,"column_start":1,"column_end":77}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":125189,"byte_end":125224,"line_start":982,"line_end":982,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":125225,"byte_end":125228,"line_start":983,"line_end":983,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":125229,"byte_end":125267,"line_start":984,"line_end":984,"column_start":1,"column_end":39}},{"value":"/ [`intersection`]: struct.IndexSet.html#method.intersection","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":125268,"byte_end":125330,"line_start":985,"line_end":985,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1083},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":126947,"byte_end":126966,"line_start":1053,"line_end":1053,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":1088}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `IndexSet`s.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":126606,"byte_end":126688,"line_start":1046,"line_end":1046,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":126689,"byte_end":126692,"line_start":1047,"line_end":1047,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":126693,"byte_end":126763,"line_start":1048,"line_end":1048,"column_start":1,"column_end":71}},{"value":"/ [`IndexSet`]. See its documentation for more.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":126764,"byte_end":126813,"line_start":1049,"line_end":1049,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":126814,"byte_end":126817,"line_start":1050,"line_end":1050,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":126818,"byte_end":126856,"line_start":1051,"line_end":1051,"column_start":1,"column_end":39}},{"value":"/ [`symmetric_difference`]: struct.IndexSet.html#method.symmetric_difference","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":126857,"byte_end":126935,"line_start":1052,"line_end":1052,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":1115},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":128484,"byte_end":128489,"line_start":1118,"line_end":1118,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":1119}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `IndexSet`s.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":128203,"byte_end":128270,"line_start":1111,"line_end":1111,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":128271,"byte_end":128274,"line_start":1112,"line_end":1112,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`IndexSet`].","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":128275,"byte_end":128344,"line_start":1113,"line_end":1113,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":128345,"byte_end":128380,"line_start":1114,"line_end":1114,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":128381,"byte_end":128384,"line_start":1115,"line_end":1115,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":128385,"byte_end":128423,"line_start":1116,"line_end":1116,"column_start":1,"column_end":39}},{"value":"/ [`union`]: struct.IndexSet.html#method.union","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":128424,"byte_end":128472,"line_start":1117,"line_end":1117,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":1188},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":5206,"byte_end":5211,"line_start":185,"line_end":185,"column_start":10,"column_end":15},"name":"Entry","qualname":"::Entries::Entry","value":"type Entry;","parent":{"krate":0,"index":1187},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":9263,"byte_end":9264,"line_start":18,"line_end":18,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":11092,"byte_end":11100,"line_start":51,"line_end":51,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde.rs","byte_start":12003,"byte_end":12011,"line_start":14,"line_end":14,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde.rs","byte_start":12345,"byte_end":12360,"line_start":30,"line_end":30,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde.rs","byte_start":13082,"byte_end":13090,"line_start":58,"line_end":58,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde.rs","byte_start":13438,"byte_end":13446,"line_start":72,"line_end":72,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde.rs","byte_start":13870,"byte_end":13878,"line_start":89,"line_end":89,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde.rs","byte_start":14187,"byte_end":14202,"line_start":104,"line_end":104,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde.rs","byte_start":14880,"byte_end":14888,"line_start":131,"line_end":131,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde.rs","byte_start":15205,"byte_end":15213,"line_start":144,"line_end":144,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":17301,"byte_end":17311,"line_start":61,"line_end":61,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":91123,"byte_end":91135,"line_start":13,"line_end":13,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":91435,"byte_end":91447,"line_start":21,"line_end":21,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":225},{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":94496,"byte_end":94509,"line_start":103,"line_end":103,"column_start":40,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":94624,"byte_end":94637,"line_start":106,"line_end":106,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":71112,"byte_end":71124,"line_start":58,"line_end":58,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":71810,"byte_end":71822,"line_start":81,"line_end":81,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":72141,"byte_end":72153,"line_start":94,"line_end":94,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":72656,"byte_end":72668,"line_start":121,"line_end":121,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":336},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":84075,"byte_end":84080,"line_start":447,"line_end":447,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":355},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":87137,"byte_end":87142,"line_start":537,"line_end":537,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":87546,"byte_end":87559,"line_start":549,"line_end":549,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":89120,"byte_end":89133,"line_start":592,"line_end":592,"column_start":51,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":89612,"byte_end":89623,"line_start":611,"line_end":611,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":90326,"byte_end":90337,"line_start":635,"line_end":635,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":397}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22196,"byte_end":22204,"line_start":81,"line_end":81,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22602,"byte_end":22610,"line_start":100,"line_end":100,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23134,"byte_end":23142,"line_start":126,"line_end":126,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":454}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23604,"byte_end":23612,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":458},{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24038,"byte_end":24046,"line_start":161,"line_end":161,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28236,"byte_end":28244,"line_start":302,"line_end":302,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":493},{"krate":0,"index":495},{"krate":0,"index":497},{"krate":0,"index":499},{"krate":0,"index":501},{"krate":0,"index":503},{"krate":0,"index":505},{"krate":0,"index":507},{"krate":0,"index":509},{"krate":0,"index":511},{"krate":0,"index":513},{"krate":0,"index":515},{"krate":0,"index":517},{"krate":0,"index":519},{"krate":0,"index":521},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":527},{"krate":0,"index":529},{"krate":0,"index":532},{"krate":0,"index":536},{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40911,"byte_end":40919,"line_start":701,"line_end":701,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43901,"byte_end":43905,"line_start":793,"line_end":793,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1199}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44020,"byte_end":44024,"line_start":799,"line_end":799,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44182,"byte_end":44186,"line_start":805,"line_end":805,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44337,"byte_end":44341,"line_start":812,"line_end":812,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44493,"byte_end":44497,"line_start":820,"line_end":820,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44990,"byte_end":44996,"line_start":837,"line_end":837,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":588},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":45113,"byte_end":45119,"line_start":843,"line_end":843,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":45279,"byte_end":45285,"line_start":849,"line_end":849,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":45436,"byte_end":45442,"line_start":856,"line_end":856,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":45596,"byte_end":45602,"line_start":864,"line_end":864,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46120,"byte_end":46129,"line_start":881,"line_end":881,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":614},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1212},{"krate":0,"index":1213}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46250,"byte_end":46259,"line_start":887,"line_end":887,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46419,"byte_end":46428,"line_start":893,"line_end":893,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46850,"byte_end":46854,"line_start":910,"line_end":910,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":1215},{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1220}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46975,"byte_end":46979,"line_start":916,"line_end":916,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47134,"byte_end":47138,"line_start":922,"line_end":922,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47289,"byte_end":47293,"line_start":929,"line_end":929,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47457,"byte_end":47461,"line_start":937,"line_end":937,"column_start":51,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47972,"byte_end":47979,"line_start":954,"line_end":954,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":658},{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":48107,"byte_end":48114,"line_start":960,"line_end":960,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":48272,"byte_end":48279,"line_start":966,"line_end":966,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":48769,"byte_end":48777,"line_start":983,"line_end":983,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":674},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1234}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":48891,"byte_end":48899,"line_start":989,"line_end":989,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":49055,"byte_end":49063,"line_start":995,"line_end":995,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":49184,"byte_end":49192,"line_start":1001,"line_end":1001,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":49752,"byte_end":49757,"line_start":1019,"line_end":1019,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":695},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1241}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":49875,"byte_end":49880,"line_start":1025,"line_end":1025,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1243}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":50395,"byte_end":50403,"line_start":1045,"line_end":1045,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":51187,"byte_end":51195,"line_start":1077,"line_end":1077,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":727},{"krate":0,"index":728}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":52363,"byte_end":52371,"line_start":1122,"line_end":1122,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":53448,"byte_end":53456,"line_start":1164,"line_end":1164,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":739},{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":54550,"byte_end":54558,"line_start":1206,"line_end":1206,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":745}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":54906,"byte_end":54914,"line_start":1217,"line_end":1217,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":55498,"byte_end":55506,"line_start":1236,"line_end":1236,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":56805,"byte_end":56813,"line_start":1269,"line_end":1269,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":764}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":57209,"byte_end":57217,"line_start":1283,"line_end":1283,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":57437,"byte_end":57445,"line_start":1293,"line_end":1293,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":57810,"byte_end":57818,"line_start":1310,"line_end":1310,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99797,"byte_end":99805,"line_start":71,"line_end":71,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":819},{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":100067,"byte_end":100075,"line_start":87,"line_end":87,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":100586,"byte_end":100594,"line_start":113,"line_end":113,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":100991,"byte_end":100999,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":836},{"krate":0,"index":837}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101432,"byte_end":101440,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":852}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104476,"byte_end":104484,"line_start":249,"line_end":249,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":861},{"krate":0,"index":864},{"krate":0,"index":867},{"krate":0,"index":870},{"krate":0,"index":873},{"krate":0,"index":875},{"krate":0,"index":878},{"krate":0,"index":881},{"krate":0,"index":883},{"krate":0,"index":885},{"krate":0,"index":887},{"krate":0,"index":889},{"krate":0,"index":891},{"krate":0,"index":893},{"krate":0,"index":896},{"krate":0,"index":899},{"krate":0,"index":902},{"krate":0,"index":905},{"krate":0,"index":907},{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":914},{"krate":0,"index":917}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115449,"byte_end":115457,"line_start":595,"line_end":595,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":926},{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":117957,"byte_end":117965,"line_start":681,"line_end":681,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":932},{"krate":0,"index":933}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118647,"byte_end":118655,"line_start":704,"line_end":704,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":939},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1249}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118752,"byte_end":118760,"line_start":710,"line_end":710,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":942}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118904,"byte_end":118912,"line_start":716,"line_end":716,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":945}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119015,"byte_end":119023,"line_start":722,"line_end":722,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":948}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119554,"byte_end":119558,"line_start":740,"line_end":740,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":956},{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1253},{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1256}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119667,"byte_end":119671,"line_start":746,"line_end":746,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":959}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119823,"byte_end":119827,"line_start":752,"line_end":752,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":962}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119917,"byte_end":119921,"line_start":758,"line_end":758,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":965}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120067,"byte_end":120071,"line_start":766,"line_end":766,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":968}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120552,"byte_end":120557,"line_start":783,"line_end":783,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":975},{"krate":0,"index":1258},{"krate":0,"index":1259},{"krate":0,"index":1260},{"krate":0,"index":1261},{"krate":0,"index":1262},{"krate":0,"index":1263}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120658,"byte_end":120663,"line_start":789,"line_end":789,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1265}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120935,"byte_end":120943,"line_start":802,"line_end":802,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":121162,"byte_end":121170,"line_start":813,"line_end":813,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":994}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":121465,"byte_end":121473,"line_start":826,"line_end":826,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":121724,"byte_end":121732,"line_start":837,"line_end":837,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":122013,"byte_end":122021,"line_start":848,"line_end":848,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1012}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":122237,"byte_end":122245,"line_start":860,"line_end":860,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1017}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":122459,"byte_end":122467,"line_start":871,"line_end":871,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":122534,"byte_end":122542,"line_start":878,"line_end":878,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1024},{"krate":0,"index":1028},{"krate":0,"index":1031}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":123887,"byte_end":123897,"line_start":924,"line_end":924,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1043},{"krate":0,"index":1044},{"krate":0,"index":1045}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":124331,"byte_end":124341,"line_start":945,"line_end":945,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":124651,"byte_end":124661,"line_start":960,"line_end":960,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1053}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":124827,"byte_end":124837,"line_start":969,"line_end":969,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1057}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":125452,"byte_end":125464,"line_start":991,"line_end":991,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1068},{"krate":0,"index":1069},{"krate":0,"index":1070}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":125897,"byte_end":125909,"line_start":1012,"line_end":1012,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1074}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":126218,"byte_end":126230,"line_start":1027,"line_end":1027,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1078}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":126398,"byte_end":126410,"line_start":1036,"line_end":1036,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":127083,"byte_end":127102,"line_start":1057,"line_end":1057,"column_start":34,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":127557,"byte_end":127576,"line_start":1081,"line_end":1081,"column_start":41,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1104}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":127777,"byte_end":127796,"line_start":1092,"line_end":1092,"column_start":27,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1109}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":127961,"byte_end":127980,"line_start":1100,"line_end":1100,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1114}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":128585,"byte_end":128590,"line_start":1122,"line_end":1122,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":129013,"byte_end":129018,"line_start":1145,"line_end":1145,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1133}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":129187,"byte_end":129192,"line_start":1155,"line_end":1155,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1137}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":129333,"byte_end":129338,"line_start":1163,"line_end":1163,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1141}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3933,"byte_end":3942,"line_start":122,"line_end":122,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":4140,"byte_end":4146,"line_start":136,"line_end":136,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1174},{"krate":0,"index":1175}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":4539,"byte_end":4545,"line_start":156,"line_end":156,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1185},{"krate":0,"index":1186}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3420,"byte_end":3429,"line_start":100,"line_end":100,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":140}},{"kind":"Mod","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3450,"byte_end":3453,"line_start":103,"line_end":103,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":197}},{"kind":"Mod","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3463,"byte_end":3466,"line_start":104,"line_end":104,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":785}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/equivalent.rs","byte_start":9263,"byte_end":9264,"line_start":18,"line_end":18,"column_start":46,"column_end":47},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":19},"to":{"krate":0,"index":15}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/mutable_keys.rs","byte_start":11092,"byte_end":11100,"line_start":51,"line_end":51,"column_start":31,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":428},"to":{"krate":0,"index":30}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde.rs","byte_start":12003,"byte_end":12011,"line_start":14,"line_end":14,"column_start":29,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":428},"to":{"krate":18,"index":1765}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde.rs","byte_start":12345,"byte_end":12360,"line_start":30,"line_end":30,"column_start":37,"column_end":52},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":78},"to":{"krate":18,"index":1361}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde.rs","byte_start":13082,"byte_end":13090,"line_start":58,"line_end":58,"column_start":41,"column_end":49},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":428},"to":{"krate":18,"index":1277}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde.rs","byte_start":13438,"byte_end":13446,"line_start":72,"line_end":72,"column_start":52,"column_end":60},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":428},"to":{"krate":18,"index":1493}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde.rs","byte_start":13870,"byte_end":13878,"line_start":89,"line_end":89,"column_start":26,"column_end":34},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":812},"to":{"krate":18,"index":1765}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde.rs","byte_start":14187,"byte_end":14202,"line_start":104,"line_end":104,"column_start":34,"column_end":49},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":114},"to":{"krate":18,"index":1361}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde.rs","byte_start":14880,"byte_end":14888,"line_start":131,"line_end":131,"column_start":38,"column_end":46},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":812},"to":{"krate":18,"index":1277}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde.rs","byte_start":15205,"byte_end":15213,"line_start":144,"line_end":144,"column_start":49,"column_end":57},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":812},"to":{"krate":18,"index":1493}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/serde_seq.rs","byte_start":17301,"byte_end":17311,"line_start":61,"line_end":61,"column_start":37,"column_end":47},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":162},"to":{"krate":18,"index":1361}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":91123,"byte_end":91135,"line_start":13,"line_end":13,"column_start":21,"column_end":33},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":210},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":91435,"byte_end":91447,"line_start":21,"line_end":21,"column_start":12,"column_end":24},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":266},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":94496,"byte_end":94509,"line_start":103,"line_end":103,"column_start":40,"column_end":53},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":228},"to":{"krate":1,"index":2083}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core/raw.rs","byte_start":94624,"byte_end":94637,"line_start":106,"line_end":106,"column_start":16,"column_end":29},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":71112,"byte_end":71124,"line_start":58,"line_end":58,"column_start":22,"column_end":34},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":266},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":71810,"byte_end":71822,"line_start":81,"line_end":81,"column_start":27,"column_end":39},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":266},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":72141,"byte_end":72153,"line_start":94,"line_end":94,"column_start":24,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":266},"to":{"krate":0,"index":1187}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":72656,"byte_end":72668,"line_start":121,"line_end":121,"column_start":12,"column_end":24},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":266},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":84075,"byte_end":84080,"line_start":447,"line_end":447,"column_start":16,"column_end":21},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":338},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":87137,"byte_end":87142,"line_start":537,"line_end":537,"column_start":51,"column_end":56},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":338},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":87546,"byte_end":87559,"line_start":549,"line_end":549,"column_start":12,"column_end":25},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":89120,"byte_end":89133,"line_start":592,"line_end":592,"column_start":51,"column_end":64},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":228},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":89612,"byte_end":89623,"line_start":611,"line_end":611,"column_start":16,"column_end":27},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map/core.rs","byte_start":90326,"byte_end":90337,"line_start":635,"line_end":635,"column_start":39,"column_end":50},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":379},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22196,"byte_end":22204,"line_start":81,"line_end":81,"column_start":25,"column_end":33},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":428},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":22602,"byte_end":22610,"line_start":100,"line_end":100,"column_start":27,"column_end":35},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":428},"to":{"krate":0,"index":1187}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23134,"byte_end":23142,"line_start":126,"line_end":126,"column_start":30,"column_end":38},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":428},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":23604,"byte_end":23612,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":428},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":24038,"byte_end":24046,"line_start":161,"line_end":161,"column_start":15,"column_end":23},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":428},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":28236,"byte_end":28244,"line_start":302,"line_end":302,"column_start":15,"column_end":23},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":428},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":40911,"byte_end":40919,"line_start":701,"line_end":701,"column_start":15,"column_end":23},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":428},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":43901,"byte_end":43905,"line_start":793,"line_end":793,"column_start":29,"column_end":33},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":553},"to":{"krate":1,"index":5536}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44020,"byte_end":44024,"line_start":799,"line_end":799,"column_start":36,"column_end":40},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":553},"to":{"krate":1,"index":5465}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44182,"byte_end":44186,"line_start":805,"line_end":805,"column_start":34,"column_end":38},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":553},"to":{"krate":1,"index":5490}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44337,"byte_end":44341,"line_start":812,"line_end":812,"column_start":22,"column_end":26},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":553},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44493,"byte_end":44497,"line_start":820,"line_end":820,"column_start":39,"column_end":43},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":553},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":44990,"byte_end":44996,"line_start":837,"line_end":837,"column_start":29,"column_end":35},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":579},"to":{"krate":1,"index":5536}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":45113,"byte_end":45119,"line_start":843,"line_end":843,"column_start":36,"column_end":42},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":579},"to":{"krate":1,"index":5465}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":45279,"byte_end":45285,"line_start":849,"line_end":849,"column_start":34,"column_end":40},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":579},"to":{"krate":1,"index":5490}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":45436,"byte_end":45442,"line_start":856,"line_end":856,"column_start":22,"column_end":28},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":579},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":45596,"byte_end":45602,"line_start":864,"line_end":864,"column_start":39,"column_end":45},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":579},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46120,"byte_end":46129,"line_start":881,"line_end":881,"column_start":29,"column_end":38},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":605},"to":{"krate":1,"index":5536}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46250,"byte_end":46259,"line_start":887,"line_end":887,"column_start":36,"column_end":45},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":605},"to":{"krate":1,"index":5465}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46419,"byte_end":46428,"line_start":893,"line_end":893,"column_start":34,"column_end":43},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":605},"to":{"krate":1,"index":5490}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46850,"byte_end":46854,"line_start":910,"line_end":910,"column_start":29,"column_end":33},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":623},"to":{"krate":1,"index":5536}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":46975,"byte_end":46979,"line_start":916,"line_end":916,"column_start":36,"column_end":40},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":623},"to":{"krate":1,"index":5465}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47134,"byte_end":47138,"line_start":922,"line_end":922,"column_start":34,"column_end":38},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":623},"to":{"krate":1,"index":5490}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47289,"byte_end":47293,"line_start":929,"line_end":929,"column_start":22,"column_end":26},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":623},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47457,"byte_end":47461,"line_start":937,"line_end":937,"column_start":51,"column_end":55},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":623},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":47972,"byte_end":47979,"line_start":954,"line_end":954,"column_start":29,"column_end":36},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":649},"to":{"krate":1,"index":5536}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":48107,"byte_end":48114,"line_start":960,"line_end":960,"column_start":36,"column_end":43},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":649},"to":{"krate":1,"index":5465}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":48272,"byte_end":48279,"line_start":966,"line_end":966,"column_start":34,"column_end":41},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":649},"to":{"krate":1,"index":5490}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":48769,"byte_end":48777,"line_start":983,"line_end":983,"column_start":25,"column_end":33},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":667},"to":{"krate":1,"index":5536}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":48891,"byte_end":48899,"line_start":989,"line_end":989,"column_start":36,"column_end":44},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":667},"to":{"krate":1,"index":5465}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":49055,"byte_end":49063,"line_start":995,"line_end":995,"column_start":34,"column_end":42},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":667},"to":{"krate":1,"index":5490}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":49184,"byte_end":49192,"line_start":1001,"line_end":1001,"column_start":51,"column_end":59},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":667},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":49752,"byte_end":49757,"line_start":1019,"line_end":1019,"column_start":25,"column_end":30},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":687},"to":{"krate":1,"index":5536}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":49875,"byte_end":49880,"line_start":1025,"line_end":1025,"column_start":36,"column_end":41},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":687},"to":{"krate":1,"index":5465}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":50395,"byte_end":50403,"line_start":1045,"line_end":1045,"column_start":32,"column_end":40},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":428},"to":{"krate":1,"index":5442}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":51187,"byte_end":51195,"line_start":1077,"line_end":1077,"column_start":40,"column_end":48},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":428},"to":{"krate":1,"index":2352}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":52363,"byte_end":52371,"line_start":1122,"line_end":1122,"column_start":43,"column_end":51},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":428},"to":{"krate":1,"index":2356}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":53448,"byte_end":53456,"line_start":1164,"line_end":1164,"column_start":32,"column_end":40},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":428},"to":{"krate":1,"index":2352}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":54550,"byte_end":54558,"line_start":1206,"line_end":1206,"column_start":35,"column_end":43},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":428},"to":{"krate":1,"index":2356}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":54906,"byte_end":54914,"line_start":1217,"line_end":1217,"column_start":40,"column_end":48},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":428},"to":{"krate":1,"index":5438}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":55498,"byte_end":55506,"line_start":1236,"line_end":1236,"column_start":34,"column_end":42},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":428},"to":{"krate":1,"index":5451}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":56805,"byte_end":56813,"line_start":1269,"line_end":1269,"column_start":46,"column_end":54},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":428},"to":{"krate":1,"index":5451}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":57209,"byte_end":57217,"line_start":1283,"line_end":1283,"column_start":27,"column_end":35},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":428},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":57437,"byte_end":57445,"line_start":1293,"line_end":1293,"column_start":60,"column_end":68},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":428},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/map.rs","byte_start":57810,"byte_end":57818,"line_start":1310,"line_end":1310,"column_start":22,"column_end":30},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":428},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":99797,"byte_end":99805,"line_start":71,"line_end":71,"column_start":22,"column_end":30},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":812},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":100067,"byte_end":100075,"line_start":87,"line_end":87,"column_start":24,"column_end":32},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":812},"to":{"krate":0,"index":1187}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":100586,"byte_end":100594,"line_start":113,"line_end":113,"column_start":27,"column_end":35},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":812},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":100991,"byte_end":100999,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":812},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":101432,"byte_end":101440,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":812},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":104476,"byte_end":104484,"line_start":249,"line_end":249,"column_start":12,"column_end":20},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":812},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":115449,"byte_end":115457,"line_start":595,"line_end":595,"column_start":12,"column_end":20},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":812},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":117957,"byte_end":117965,"line_start":681,"line_end":681,"column_start":29,"column_end":37},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":812},"to":{"krate":1,"index":2352}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118647,"byte_end":118655,"line_start":704,"line_end":704,"column_start":22,"column_end":30},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":934},"to":{"krate":1,"index":5536}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118752,"byte_end":118760,"line_start":710,"line_end":710,"column_start":33,"column_end":41},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":934},"to":{"krate":1,"index":5465}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":118904,"byte_end":118912,"line_start":716,"line_end":716,"column_start":31,"column_end":39},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":934},"to":{"krate":1,"index":5490}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119015,"byte_end":119023,"line_start":722,"line_end":722,"column_start":36,"column_end":44},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":934},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119554,"byte_end":119558,"line_start":740,"line_end":740,"column_start":26,"column_end":30},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":949},"to":{"krate":1,"index":5536}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119667,"byte_end":119671,"line_start":746,"line_end":746,"column_start":33,"column_end":37},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":949},"to":{"krate":1,"index":5465}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119823,"byte_end":119827,"line_start":752,"line_end":752,"column_start":31,"column_end":35},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":949},"to":{"krate":1,"index":5490}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":119917,"byte_end":119921,"line_start":758,"line_end":758,"column_start":19,"column_end":23},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":949},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120067,"byte_end":120071,"line_start":766,"line_end":766,"column_start":36,"column_end":40},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":949},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120552,"byte_end":120557,"line_start":783,"line_end":783,"column_start":22,"column_end":27},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":969},"to":{"krate":1,"index":5536}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120658,"byte_end":120663,"line_start":789,"line_end":789,"column_start":33,"column_end":38},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":969},"to":{"krate":1,"index":5465}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":120935,"byte_end":120943,"line_start":802,"line_end":802,"column_start":29,"column_end":37},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":812},"to":{"krate":1,"index":5442}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":121162,"byte_end":121170,"line_start":813,"line_end":813,"column_start":32,"column_end":40},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":812},"to":{"krate":1,"index":5438}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":121465,"byte_end":121473,"line_start":826,"line_end":826,"column_start":26,"column_end":34},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":812},"to":{"krate":1,"index":5451}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":121724,"byte_end":121732,"line_start":837,"line_end":837,"column_start":34,"column_end":42},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":812},"to":{"krate":1,"index":5451}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":122013,"byte_end":122021,"line_start":848,"line_end":848,"column_start":24,"column_end":32},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":812},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":122237,"byte_end":122245,"line_start":860,"line_end":860,"column_start":48,"column_end":56},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":812},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":122459,"byte_end":122467,"line_start":871,"line_end":871,"column_start":19,"column_end":27},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":812},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":122534,"byte_end":122542,"line_start":878,"line_end":878,"column_start":12,"column_end":20},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":812},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":123887,"byte_end":123897,"line_start":924,"line_end":924,"column_start":29,"column_end":39},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1033},"to":{"krate":1,"index":5536}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":124331,"byte_end":124341,"line_start":945,"line_end":945,"column_start":36,"column_end":46},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1033},"to":{"krate":1,"index":5465}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":124651,"byte_end":124661,"line_start":960,"line_end":960,"column_start":22,"column_end":32},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1033},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":124827,"byte_end":124837,"line_start":969,"line_end":969,"column_start":27,"column_end":37},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1033},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":125452,"byte_end":125464,"line_start":991,"line_end":991,"column_start":29,"column_end":41},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1058},"to":{"krate":1,"index":5536}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":125897,"byte_end":125909,"line_start":1012,"line_end":1012,"column_start":36,"column_end":48},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1058},"to":{"krate":1,"index":5465}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":126218,"byte_end":126230,"line_start":1027,"line_end":1027,"column_start":22,"column_end":34},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1058},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":126398,"byte_end":126410,"line_start":1036,"line_end":1036,"column_start":27,"column_end":39},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1058},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":127083,"byte_end":127102,"line_start":1057,"line_end":1057,"column_start":34,"column_end":53},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1083},"to":{"krate":1,"index":5536}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":127557,"byte_end":127576,"line_start":1081,"line_end":1081,"column_start":41,"column_end":60},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1083},"to":{"krate":1,"index":5465}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":127777,"byte_end":127796,"line_start":1092,"line_end":1092,"column_start":27,"column_end":46},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1083},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":127961,"byte_end":127980,"line_start":1100,"line_end":1100,"column_start":32,"column_end":51},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1083},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":128585,"byte_end":128590,"line_start":1122,"line_end":1122,"column_start":29,"column_end":34},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1115},"to":{"krate":1,"index":5536}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":129013,"byte_end":129018,"line_start":1145,"line_end":1145,"column_start":36,"column_end":41},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1115},"to":{"krate":1,"index":5465}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":129187,"byte_end":129192,"line_start":1155,"line_end":1155,"column_start":22,"column_end":27},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1115},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/set.rs","byte_start":129333,"byte_end":129338,"line_start":1163,"line_end":1163,"column_start":27,"column_end":32},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1115},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":3933,"byte_end":3942,"line_start":122,"line_end":122,"column_start":6,"column_end":15},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1266},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":4140,"byte_end":4146,"line_start":136,"line_end":136,"column_start":22,"column_end":28},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1278},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.6.2/src/lib.rs","byte_start":4539,"byte_end":4545,"line_start":156,"line_end":156,"column_start":12,"column_end":18},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1278},"to":{"krate":4294967295,"index":4294967295}}]}