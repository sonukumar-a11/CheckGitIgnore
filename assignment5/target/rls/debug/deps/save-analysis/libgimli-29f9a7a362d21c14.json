{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0","program":"/home/knoldus/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","gimli","--edition=2018","/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"endian-reader\"","--cfg","feature=\"fallible-iterator\"","--cfg","feature=\"indexmap\"","--cfg","feature=\"read\"","--cfg","feature=\"stable_deref_trait\"","--cfg","feature=\"std\"","--cfg","feature=\"write\"","-C","metadata=29f9a7a362d21c14","-C","extra-filename=-29f9a7a362d21c14","--out-dir","/home/knoldus/CheckGitIgnore/assignment5/target/rls/debug/deps","-L","dependency=/home/knoldus/CheckGitIgnore/assignment5/target/rls/debug/deps","--extern","fallible_iterator=/home/knoldus/CheckGitIgnore/assignment5/target/rls/debug/deps/libfallible_iterator-83d1f2db961e5821.rmeta","--extern","indexmap=/home/knoldus/CheckGitIgnore/assignment5/target/rls/debug/deps/libindexmap-7127a152a4afc7ed.rmeta","--extern","stable_deref_trait=/home/knoldus/CheckGitIgnore/assignment5/target/rls/debug/deps/libstable_deref_trait-d2c5a9e31d915de6.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/knoldus/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/knoldus/CheckGitIgnore/assignment5/target/rls/debug/deps/libgimli-29f9a7a362d21c14.rmeta"},"prelude":{"crate_id":{"name":"gimli","disambiguator":[4732256184506852791,18226740140625889686]},"crate_root":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src","external_crates":[{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[18134888982608726624,15478788479473023395]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[6673302632599048863,4691371433878452070]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11457885127507258025,479752930606968628]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[6007655421670680970,17748288058820543149]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","num":5,"id":{"name":"std","disambiguator":[12933703438800314702,5774803219644544316]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4051320655186846034,14773827427477085591]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3672675044024306215,7179779047398453100]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14739525726177289408,3061276640434149652]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2246841610299105657,12905561680815043912]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4036557704906104068,994131407893854156]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7443407023664770875,11250036483448109314]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[10148669557414888454,6400214184476534778]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4006540472161665961,15205760237192158299]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[16043199729901662453,7825522302763349882]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[5738570549504868290,14845130516100231771]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[6807687926185025542,9498922200428406688]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[6171827839412267364,4338689175470013405]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","num":18,"id":{"name":"stable_deref_trait","disambiguator":[5771900646919667047,12612888422989245355]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/abbrev.rs","num":19,"id":{"name":"indexmap","disambiguator":[7071416697235091349,2557538984661984690]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/abbrev.rs","num":20,"id":{"name":"serde","disambiguator":[5909158681187662501,17131162412888138597]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/abbrev.rs","num":21,"id":{"name":"serde_derive","disambiguator":[17893235928559199534,1741590885616372074]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/abbrev.rs","num":22,"id":{"name":"hashbrown","disambiguator":[3428627531582944327,345110721140972055]}},{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","num":23,"id":{"name":"fallible_iterator","disambiguator":[16084300707492482394,13964254495587390459]}}],"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":0,"byte_end":2134,"line_start":1,"line_end":75,"column_start":1,"column_end":15}},"imports":[{"kind":"Use","ref_id":{"krate":18,"index":7},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1644,"byte_end":1660,"line_start":48,"line_end":48,"column_start":30,"column_end":46},"alias_span":null,"name":"CloneStableDeref","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":6},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1662,"byte_end":1673,"line_start":48,"line_end":48,"column_start":48,"column_end":59},"alias_span":null,"name":"StableDeref","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1712,"byte_end":1713,"line_start":51,"line_end":51,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"Format","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1747,"byte_end":1748,"line_start":54,"line_end":54,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1821,"byte_end":1822,"line_start":58,"line_end":58,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5581},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1867,"byte_end":1876,"line_start":61,"line_end":61,"column_start":28,"column_end":37},"alias_span":null,"name":"BigEndian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5582},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1867,"byte_end":1876,"line_start":61,"line_end":61,"column_start":28,"column_end":37},"alias_span":null,"name":"BigEndian","value":"","parent":{"krate":0,"index":80}},{"kind":"Use","ref_id":{"krate":0,"index":46},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1878,"byte_end":1887,"line_start":61,"line_end":61,"column_start":39,"column_end":48},"alias_span":null,"name":"Endianity","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5565},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1889,"byte_end":1901,"line_start":61,"line_end":61,"column_start":50,"column_end":62},"alias_span":null,"name":"LittleEndian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5566},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1889,"byte_end":1901,"line_start":61,"line_end":61,"column_start":50,"column_end":62},"alias_span":null,"name":"LittleEndian","value":"","parent":{"krate":0,"index":82}},{"kind":"Use","ref_id":{"krate":0,"index":77},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1903,"byte_end":1915,"line_start":61,"line_end":61,"column_start":64,"column_end":76},"alias_span":null,"name":"NativeEndian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":78},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1903,"byte_end":1915,"line_start":61,"line_end":61,"column_start":64,"column_end":76},"alias_span":null,"name":"NativeEndian","value":"","parent":{"krate":0,"index":83}},{"kind":"Use","ref_id":{"krate":0,"index":5546},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1917,"byte_end":1930,"line_start":61,"line_end":61,"column_start":78,"column_end":91},"alias_span":null,"name":"RunTimeEndian","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87016,"byte_end":87017,"line_start":174,"line_end":174,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"DebugAddr","parent":{"krate":0,"index":116}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87048,"byte_end":87049,"line_start":177,"line_end":177,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"BaseAddresses, UnwindOffset, UnwindSection, FrameDescriptionEntry, CommonInformationEntry, Pointer, CieOrFde, CallFrameInstruction","parent":{"krate":0,"index":116}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87084,"byte_end":87085,"line_start":180,"line_end":180,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"Dwarf, Unit","parent":{"krate":0,"index":116}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87134,"byte_end":87135,"line_start":183,"line_end":183,"column_start":29,"column_end":30},"alias_span":null,"name":"*","value":"EndianSlice","parent":{"krate":0,"index":116}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87254,"byte_end":87255,"line_start":188,"line_end":188,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":116}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87292,"byte_end":87293,"line_start":191,"line_end":191,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"ReaderOffsetId, Reader, ReaderOffset","parent":{"krate":0,"index":116}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87330,"byte_end":87331,"line_start":194,"line_end":194,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Abbreviation, Abbreviations, DebugAbbrev, AttributeSpecification","parent":{"krate":0,"index":116}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87370,"byte_end":87371,"line_start":197,"line_end":197,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":116}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87404,"byte_end":87405,"line_start":200,"line_end":200,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"ColumnType, LineInstruction, IncompleteLineProgram, DebugLine, LineRow","parent":{"krate":0,"index":116}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87446,"byte_end":87447,"line_start":203,"line_end":203,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"RawLocListEntry, LocationLists, RawLocListIter, LocListIter","parent":{"krate":0,"index":116}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87489,"byte_end":87490,"line_start":208,"line_end":208,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Operation, DieReference, Expression","parent":{"krate":0,"index":116}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87531,"byte_end":87532,"line_start":211,"line_end":211,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":116}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87573,"byte_end":87574,"line_start":214,"line_end":214,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":116}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87615,"byte_end":87616,"line_start":217,"line_end":217,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"RangeLists, RawRange, Range, RawRngListIter, RngListIter, RawRngListEntry","parent":{"krate":0,"index":116}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87647,"byte_end":87648,"line_start":220,"line_end":220,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"DebugLineStr, DebugStrOffsets, DebugStr","parent":{"krate":0,"index":116}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87681,"byte_end":87682,"line_start":223,"line_end":223,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"UnitOffset, TypeUnitHeader, EntriesTree, DebuggingInformationEntry, AttributeValue, UnitHeader, EntriesRaw, CompilationUnitHeadersIter, DebugInfo, DebugTypes, EntriesTreeNode, TypeUnitHeadersIter, Attribute, EntriesCursor, CompilationUnitHeader, parse_debug_info_offset","parent":{"krate":0,"index":116}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87717,"byte_end":87718,"line_start":226,"line_end":226,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"Value, ValueType","parent":{"krate":0,"index":116}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":2061,"byte_end":2062,"line_start":69,"line_end":69,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"CallFrameInstruction","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132994,"byte_end":1132995,"line_start":68,"line_end":68,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":2217}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1133032,"byte_end":1133033,"line_start":71,"line_end":71,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Writer","parent":{"krate":0,"index":2217}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1133085,"byte_end":1133086,"line_start":75,"line_end":75,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"Section, Sections","parent":{"krate":0,"index":2217}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1134605,"byte_end":1134606,"line_start":136,"line_end":136,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"AbbreviationTable, Abbreviation, DebugAbbrev, AttributeSpecification","parent":{"krate":0,"index":2217}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1134637,"byte_end":1134638,"line_start":139,"line_end":139,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"EhFrame, DebugFrame","parent":{"krate":0,"index":2217}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1134673,"byte_end":1134674,"line_start":142,"line_end":142,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":2217}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1134707,"byte_end":1134708,"line_start":145,"line_end":145,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"FileId, LineProgram, DebugLine","parent":{"krate":0,"index":2217}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1134739,"byte_end":1134740,"line_start":148,"line_end":148,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"LocationListOffsets, DebugLocLists, LocationListTable, LocationListId, LocationList, DebugLoc","parent":{"krate":0,"index":2217}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1134769,"byte_end":1134770,"line_start":151,"line_end":151,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Expression","parent":{"krate":0,"index":2217}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1134805,"byte_end":1134806,"line_start":154,"line_end":154,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"RangeListOffsets, DebugRanges, RangeList, DebugRngLists, RangeListTable, RangeListId","parent":{"krate":0,"index":2217}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1134837,"byte_end":1134838,"line_start":157,"line_end":157,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"StringId, DebugLineStr, DebugLineStrOffsets, LineStringTable, DebugStrOffsets, StringTable, LineStringId, DebugStr","parent":{"krate":0,"index":2217}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1134871,"byte_end":1134872,"line_start":160,"line_end":160,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"UnitEntryId, DebugInfo, Unit, UnitOffsets, DebugInfoReference, UnitId, UnitTable","parent":{"krate":0,"index":2217}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1145287,"byte_end":1145288,"line_start":422,"line_end":422,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"ConvertUnitContext, ConvertError, ConvertResult","parent":{"krate":0,"index":2217}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":0,"byte_end":2134,"line_start":1,"line_end":75,"column_start":1,"column_end":15},"name":"","qualname":"::","value":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":9878},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":9882},{"krate":0,"index":83},{"krate":0,"index":9884},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":116},{"krate":0,"index":2216},{"krate":0,"index":2217}],"decl_id":null,"docs":" `gimli` is a library for reading and writing the\n [DWARF debugging format](http://dwarfstd.org/).","sig":null,"attributes":[{"value":"/ `gimli` is a library for reading and writing the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":0,"byte_end":52,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"/ [DWARF debugging format](http://dwarfstd.org/).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":53,"byte_end":104,"line_start":2,"line_end":2,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":105,"byte_end":108,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ See the [read](./read/index.html) and [write](./write/index.html) modules","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":109,"byte_end":186,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"/ for examples and API documentation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":187,"byte_end":226,"line_start":5,"line_end":5,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":227,"byte_end":230,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ## Cargo Features","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":231,"byte_end":252,"line_start":7,"line_end":7,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":253,"byte_end":256,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Cargo features that can be enabled with `gimli`:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":257,"byte_end":309,"line_start":9,"line_end":9,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":310,"byte_end":313,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `std`: Enabled by default. Use the `std` library. Disabling this feature","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":314,"byte_end":392,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ allows using `gimli` in embedded environments that do not have access to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":393,"byte_end":469,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ `std`. Note that even when `std` is disabled, `gimli` still requires an","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":470,"byte_end":545,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/ implementation of the `alloc` crate.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":546,"byte_end":586,"line_start":14,"line_end":14,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":587,"byte_end":590,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ * `read`: Enabled by default. Enables the `read` module. Use of `std` is","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":591,"byte_end":667,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ optional.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":668,"byte_end":681,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":682,"byte_end":685,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ * `write`: Enabled by default. Enables the `write` module. Always uses","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":686,"byte_end":760,"line_start":19,"line_end":19,"column_start":1,"column_end":75}},{"value":"/ the `std` library.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":761,"byte_end":783,"line_start":20,"line_end":20,"column_start":1,"column_end":23}},{"value":"deny(missing_docs)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":784,"byte_end":806,"line_start":21,"line_end":21,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":807,"byte_end":846,"line_start":22,"line_end":22,"column_start":1,"column_end":40}},{"value":"warn(bare_trait_objects)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":888,"byte_end":916,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"warn(unused_extern_crates)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":917,"byte_end":947,"line_start":25,"line_end":25,"column_start":1,"column_end":31}},{"value":"warn(ellipsis_inclusive_range_patterns)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":948,"byte_end":991,"line_start":26,"line_end":26,"column_start":1,"column_end":44}},{"value":"warn(explicit_outlives_requirements)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1030,"byte_end":1070,"line_start":28,"line_end":28,"column_start":1,"column_end":41}},{"value":"allow(unknown_lints)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1133,"byte_end":1157,"line_start":30,"line_end":30,"column_start":1,"column_end":25}},{"value":"allow(clippy :: should_implement_trait)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1203,"byte_end":1244,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"allow(clippy :: never_loop)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1291,"byte_end":1320,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"allow(clippy :: panic_params)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1393,"byte_end":1424,"line_start":36,"line_end":36,"column_start":1,"column_end":32}},{"value":"no_std","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1425,"byte_end":1435,"line_start":37,"line_end":37,"column_start":1,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2950},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":2293,"byte_end":2300,"line_start":5,"line_end":5,"column_start":5,"column_end":12},"name":"Dwarf64","qualname":"::common::Format::Dwarf64","value":"Format::Dwarf64","parent":{"krate":0,"index":2949},"children":[],"decl_id":null,"docs":" 64-bit DWARF\n","sig":null,"attributes":[{"value":"/ 64-bit DWARF","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":2272,"byte_end":2288,"line_start":4,"line_end":4,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2953},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":2331,"byte_end":2338,"line_start":7,"line_end":7,"column_start":5,"column_end":12},"name":"Dwarf32","qualname":"::common::Format::Dwarf32","value":"Format::Dwarf32","parent":{"krate":0,"index":2949},"children":[],"decl_id":null,"docs":" 32-bit DWARF\n","sig":null,"attributes":[{"value":"/ 32-bit DWARF","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":2310,"byte_end":2326,"line_start":6,"line_end":6,"column_start":5,"column_end":21}}]},{"kind":"Enum","id":{"krate":0,"index":2949},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":2259,"byte_end":2265,"line_start":3,"line_end":3,"column_start":10,"column_end":16},"name":"Format","qualname":"::common::Format","value":"pub enum Format {\n\n    /// 64-bit DWARF\n    Dwarf64 = ,\n\n    /// 32-bit DWARF\n    Dwarf32 = ,\n}","parent":null,"children":[{"krate":0,"index":2950},{"krate":0,"index":2953}],"decl_id":null,"docs":" Whether the format of a compilation unit is 32- or 64-bit.\n","sig":null,"attributes":[{"value":"/ Whether the format of a compilation unit is 32- or 64-bit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":2136,"byte_end":2198,"line_start":1,"line_end":1,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":11},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":2464,"byte_end":2483,"line_start":13,"line_end":13,"column_start":12,"column_end":31},"name":"initial_length_size","qualname":"<Format>::initial_length_size","value":"pub fn initial_length_size(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return the serialized size of an initial length field for the format.\n","sig":null,"attributes":[{"value":"/ Return the serialized size of an initial length field for the format.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":2365,"byte_end":2438,"line_start":11,"line_end":11,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":2443,"byte_end":2452,"line_start":12,"line_end":12,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":2682,"byte_end":2691,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"word_size","qualname":"<Format>::word_size","value":"pub fn word_size(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return the natural word size for the format\n","sig":null,"attributes":[{"value":"/ Return the natural word size for the format","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":2609,"byte_end":2656,"line_start":20,"line_end":20,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":2661,"byte_end":2670,"line_start":21,"line_end":21,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2970},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3115,"byte_end":3123,"line_start":37,"line_end":37,"column_start":12,"column_end":20},"name":"Encoding","qualname":"::common::Encoding","value":"Encoding { address_size, format, version }","parent":null,"children":[{"krate":0,"index":2971},{"krate":0,"index":2972},{"krate":0,"index":2973}],"decl_id":null,"docs":" Encoding parameters that are commonly used for multiple DWARF sections.","sig":null,"attributes":[{"value":"/ Encoding parameters that are commonly used for multiple DWARF sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":2814,"byte_end":2889,"line_start":30,"line_end":30,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":2890,"byte_end":2893,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This is intended to be small enough to pass by value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":2894,"byte_end":2951,"line_start":32,"line_end":32,"column_start":1,"column_end":58}},{"value":"repr(C)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3093,"byte_end":3103,"line_start":36,"line_end":36,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2971},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3166,"byte_end":3178,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"name":"address_size","qualname":"::common::Encoding::address_size","value":"u8","parent":{"krate":0,"index":2970},"children":[],"decl_id":null,"docs":" The size of an address.\n","sig":null,"attributes":[{"value":"/ The size of an address.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3130,"byte_end":3157,"line_start":38,"line_end":38,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":2972},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3318,"byte_end":3324,"line_start":44,"line_end":44,"column_start":9,"column_end":15},"name":"format","qualname":"::common::Encoding::format","value":"common::Format","parent":{"krate":0,"index":2970},"children":[],"decl_id":null,"docs":" Whether the DWARF format is 32- or 64-bit.\n","sig":null,"attributes":[{"value":"/ Whether the DWARF format is 32- or 64-bit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3263,"byte_end":3309,"line_start":43,"line_end":43,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":2973},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3384,"byte_end":3391,"line_start":47,"line_end":47,"column_start":9,"column_end":16},"name":"version","qualname":"::common::Encoding::version","value":"u16","parent":{"krate":0,"index":2970},"children":[],"decl_id":null,"docs":" The DWARF version of the header.\n","sig":null,"attributes":[{"value":"/ The DWARF version of the header.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3339,"byte_end":3375,"line_start":46,"line_end":46,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":2989},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3514,"byte_end":3526,"line_start":52,"line_end":52,"column_start":12,"column_end":24},"name":"LineEncoding","qualname":"::common::LineEncoding","value":"LineEncoding { minimum_instruction_length, maximum_operations_per_instruction, default_is_stmt, line_base, line_range }","parent":null,"children":[{"krate":0,"index":2990},{"krate":0,"index":2991},{"krate":0,"index":2992},{"krate":0,"index":2993},{"krate":0,"index":2994}],"decl_id":null,"docs":" Encoding parameters for a line number program.\n","sig":null,"attributes":[{"value":"/ Encoding parameters for a line number program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3401,"byte_end":3451,"line_start":50,"line_end":50,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":2990},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3607,"byte_end":3633,"line_start":54,"line_end":54,"column_start":9,"column_end":35},"name":"minimum_instruction_length","qualname":"::common::LineEncoding::minimum_instruction_length","value":"u8","parent":{"krate":0,"index":2989},"children":[],"decl_id":null,"docs":" The size in bytes of the smallest target machine instruction.\n","sig":null,"attributes":[{"value":"/ The size in bytes of the smallest target machine instruction.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3533,"byte_end":3598,"line_start":53,"line_end":53,"column_start":5,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":2991},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3747,"byte_end":3781,"line_start":58,"line_end":58,"column_start":9,"column_end":43},"name":"maximum_operations_per_instruction","qualname":"::common::LineEncoding::maximum_operations_per_instruction","value":"u8","parent":{"krate":0,"index":2989},"children":[],"decl_id":null,"docs":" The maximum number of individual operations that may be encoded in an\n instruction.\n","sig":null,"attributes":[{"value":"/ The maximum number of individual operations that may be encoded in an","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3644,"byte_end":3717,"line_start":56,"line_end":56,"column_start":5,"column_end":78}},{"value":"/ instruction.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3722,"byte_end":3738,"line_start":57,"line_end":57,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":2992},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3849,"byte_end":3864,"line_start":61,"line_end":61,"column_start":9,"column_end":24},"name":"default_is_stmt","qualname":"::common::LineEncoding::default_is_stmt","value":"bool","parent":{"krate":0,"index":2989},"children":[],"decl_id":null,"docs":" The initial value of the `is_stmt` register.\n","sig":null,"attributes":[{"value":"/ The initial value of the `is_stmt` register.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3792,"byte_end":3840,"line_start":60,"line_end":60,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":2993},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3960,"byte_end":3969,"line_start":64,"line_end":64,"column_start":9,"column_end":18},"name":"line_base","qualname":"::common::LineEncoding::line_base","value":"i8","parent":{"krate":0,"index":2989},"children":[],"decl_id":null,"docs":" The minimum value which a special opcode can add to the line register.\n","sig":null,"attributes":[{"value":"/ The minimum value which a special opcode can add to the line register.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3877,"byte_end":3951,"line_start":63,"line_end":63,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":2994},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":4065,"byte_end":4075,"line_start":67,"line_end":67,"column_start":9,"column_end":19},"name":"line_range","qualname":"::common::LineEncoding::line_range","value":"u8","parent":{"krate":0,"index":2989},"children":[],"decl_id":null,"docs":" The range of values which a special opcode can add to the line register.\n","sig":null,"attributes":[{"value":"/ The range of values which a special opcode can add to the line register.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":3980,"byte_end":4056,"line_start":66,"line_end":66,"column_start":5,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":3010},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":4652,"byte_end":4660,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"Register","qualname":"::common::Register","value":"","parent":null,"children":[],"decl_id":null,"docs":" A DWARF register number.","sig":null,"attributes":[{"value":"/ A DWARF register number.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":4398,"byte_end":4426,"line_start":83,"line_end":83,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":4427,"byte_end":4430,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ The meaning of this value is ABI dependent. This is generally encoded as","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":4431,"byte_end":4507,"line_start":85,"line_end":85,"column_start":1,"column_end":77}},{"value":"/ a ULEB128, but supported architectures need 16 bits at most.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":4508,"byte_end":4572,"line_start":86,"line_end":86,"column_start":1,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":3012},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":4661,"byte_end":4668,"line_start":88,"line_end":88,"column_start":21,"column_end":28},"name":"0","qualname":"::common::Register::0","value":"u16","parent":{"krate":0,"index":3010},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3036},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":4782,"byte_end":4799,"line_start":92,"line_end":92,"column_start":12,"column_end":29},"name":"DebugAbbrevOffset","qualname":"::common::DebugAbbrevOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_abbrev` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_abbrev` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":4672,"byte_end":4719,"line_start":90,"line_end":90,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":3039},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":4811,"byte_end":4816,"line_start":92,"line_end":92,"column_start":41,"column_end":46},"name":"0","qualname":"::common::DebugAbbrevOffset::0","value":"T","parent":{"krate":0,"index":3036},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3063},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":4940,"byte_end":4953,"line_start":96,"line_end":96,"column_start":12,"column_end":25},"name":"DebugAddrBase","qualname":"::common::DebugAddrBase","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset to a set of entries in the `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of entries in the `.debug_addr` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":4820,"byte_end":4883,"line_start":94,"line_end":94,"column_start":1,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":3066},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":4965,"byte_end":4970,"line_start":96,"line_end":96,"column_start":37,"column_end":42},"name":"0","qualname":"::common::DebugAddrBase::0","value":"T","parent":{"krate":0,"index":3063},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3086},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":5097,"byte_end":5111,"line_start":100,"line_end":100,"column_start":12,"column_end":26},"name":"DebugAddrIndex","qualname":"::common::DebugAddrIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" An index into a set of addresses in the `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of addresses in the `.debug_addr` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":4974,"byte_end":5040,"line_start":98,"line_end":98,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":3089},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":5123,"byte_end":5128,"line_start":100,"line_end":100,"column_start":38,"column_end":43},"name":"0","qualname":"::common::DebugAddrIndex::0","value":"T","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3109},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":5257,"byte_end":5272,"line_start":104,"line_end":104,"column_start":12,"column_end":27},"name":"DebugInfoOffset","qualname":"::common::DebugInfoOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_info` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":5132,"byte_end":5177,"line_start":102,"line_end":102,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":3112},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":5284,"byte_end":5289,"line_start":104,"line_end":104,"column_start":39,"column_end":44},"name":"0","qualname":"::common::DebugInfoOffset::0","value":"T","parent":{"krate":0,"index":3109},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3146},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":5395,"byte_end":5410,"line_start":108,"line_end":108,"column_start":12,"column_end":27},"name":"DebugLineOffset","qualname":"::common::DebugLineOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_line` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_line` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":5293,"byte_end":5338,"line_start":106,"line_end":106,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":3149},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":5422,"byte_end":5427,"line_start":108,"line_end":108,"column_start":39,"column_end":44},"name":"0","qualname":"::common::DebugLineOffset::0","value":"T","parent":{"krate":0,"index":3146},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3169},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":5537,"byte_end":5555,"line_start":112,"line_end":112,"column_start":12,"column_end":30},"name":"DebugLineStrOffset","qualname":"::common::DebugLineStrOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_line_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":5431,"byte_end":5480,"line_start":110,"line_end":110,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":3172},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":5567,"byte_end":5572,"line_start":112,"line_end":112,"column_start":42,"column_end":47},"name":"0","qualname":"::common::DebugLineStrOffset::0","value":"T","parent":{"krate":0,"index":3169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3192},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":5793,"byte_end":5812,"line_start":117,"line_end":117,"column_start":12,"column_end":31},"name":"LocationListsOffset","qualname":"::common::LocationListsOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into either the `.debug_loc` section or the `.debug_loclists` section,\n depending on the version of the unit the offset was contained in.\n","sig":null,"attributes":[{"value":"/ An offset into either the `.debug_loc` section or the `.debug_loclists` section,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":5576,"byte_end":5660,"line_start":114,"line_end":114,"column_start":1,"column_end":85}},{"value":"/ depending on the version of the unit the offset was contained in.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":5661,"byte_end":5730,"line_start":115,"line_end":115,"column_start":1,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":3195},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":5824,"byte_end":5829,"line_start":117,"line_end":117,"column_start":43,"column_end":48},"name":"0","qualname":"::common::LocationListsOffset::0","value":"T","parent":{"krate":0,"index":3192},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3219},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":5971,"byte_end":5988,"line_start":121,"line_end":121,"column_start":12,"column_end":29},"name":"DebugLocListsBase","qualname":"::common::DebugLocListsBase","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset to a set of location list offsets in the `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of location list offsets in the `.debug_loclists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":5833,"byte_end":5914,"line_start":119,"line_end":119,"column_start":1,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":3222},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":6000,"byte_end":6005,"line_start":121,"line_end":121,"column_start":41,"column_end":46},"name":"0","qualname":"::common::DebugLocListsBase::0","value":"T","parent":{"krate":0,"index":3219},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3242},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":6148,"byte_end":6166,"line_start":125,"line_end":125,"column_start":12,"column_end":30},"name":"DebugLocListsIndex","qualname":"::common::DebugLocListsIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" An index into a set of location list offsets in the `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of location list offsets in the `.debug_loclists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":6009,"byte_end":6091,"line_start":123,"line_end":123,"column_start":1,"column_end":83}}]},{"kind":"Field","id":{"krate":0,"index":3245},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":6178,"byte_end":6183,"line_start":125,"line_end":125,"column_start":42,"column_end":47},"name":"0","qualname":"::common::DebugLocListsIndex::0","value":"T","parent":{"krate":0,"index":3242},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3265},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":6298,"byte_end":6316,"line_start":129,"line_end":129,"column_start":12,"column_end":30},"name":"DebugMacinfoOffset","qualname":"::common::DebugMacinfoOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_macinfo` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_macinfo` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":6187,"byte_end":6235,"line_start":127,"line_end":127,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":3268},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":6328,"byte_end":6333,"line_start":129,"line_end":129,"column_start":42,"column_end":47},"name":"0","qualname":"::common::DebugMacinfoOffset::0","value":"T","parent":{"krate":0,"index":3265},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3292},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":6446,"byte_end":6462,"line_start":133,"line_end":133,"column_start":12,"column_end":28},"name":"DebugMacroOffset","qualname":"::common::DebugMacroOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_macro` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_macro` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":6337,"byte_end":6383,"line_start":131,"line_end":131,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":3295},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":6474,"byte_end":6479,"line_start":133,"line_end":133,"column_start":40,"column_end":45},"name":"0","qualname":"::common::DebugMacroOffset::0","value":"T","parent":{"krate":0,"index":3292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3319},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":6703,"byte_end":6719,"line_start":138,"line_end":138,"column_start":12,"column_end":28},"name":"RangeListsOffset","qualname":"::common::RangeListsOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into either the `.debug_ranges` section or the `.debug_rnglists` section,\n depending on the version of the unit the offset was contained in.\n","sig":null,"attributes":[{"value":"/ An offset into either the `.debug_ranges` section or the `.debug_rnglists` section,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":6483,"byte_end":6570,"line_start":135,"line_end":135,"column_start":1,"column_end":88}},{"value":"/ depending on the version of the unit the offset was contained in.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":6571,"byte_end":6640,"line_start":136,"line_end":136,"column_start":1,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":3322},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":6731,"byte_end":6736,"line_start":138,"line_end":138,"column_start":40,"column_end":45},"name":"0","qualname":"::common::RangeListsOffset::0","value":"T","parent":{"krate":0,"index":3319},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3346},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":6875,"byte_end":6892,"line_start":142,"line_end":142,"column_start":12,"column_end":29},"name":"DebugRngListsBase","qualname":"::common::DebugRngListsBase","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset to a set of range list offsets in the `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of range list offsets in the `.debug_rnglists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":6740,"byte_end":6818,"line_start":140,"line_end":140,"column_start":1,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":3349},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":6904,"byte_end":6909,"line_start":142,"line_end":142,"column_start":41,"column_end":46},"name":"0","qualname":"::common::DebugRngListsBase::0","value":"T","parent":{"krate":0,"index":3346},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3369},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":7049,"byte_end":7067,"line_start":146,"line_end":146,"column_start":12,"column_end":30},"name":"DebugRngListsIndex","qualname":"::common::DebugRngListsIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" An index into a set of range list offsets in the `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of range list offsets in the `.debug_rnglists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":6913,"byte_end":6992,"line_start":144,"line_end":144,"column_start":1,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":3372},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":7079,"byte_end":7084,"line_start":146,"line_end":146,"column_start":42,"column_end":47},"name":"0","qualname":"::common::DebugRngListsIndex::0","value":"T","parent":{"krate":0,"index":3369},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3392},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":7189,"byte_end":7203,"line_start":150,"line_end":150,"column_start":12,"column_end":26},"name":"DebugStrOffset","qualname":"::common::DebugStrOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":7088,"byte_end":7132,"line_start":148,"line_end":148,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":3395},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":7215,"byte_end":7220,"line_start":150,"line_end":150,"column_start":38,"column_end":43},"name":"0","qualname":"::common::DebugStrOffset::0","value":"T","parent":{"krate":0,"index":3392},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3415},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":7351,"byte_end":7370,"line_start":154,"line_end":154,"column_start":12,"column_end":31},"name":"DebugStrOffsetsBase","qualname":"::common::DebugStrOffsetsBase","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset to a set of entries in the `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of entries in the `.debug_str_offsets` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":7224,"byte_end":7294,"line_start":152,"line_end":152,"column_start":1,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":3418},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":7382,"byte_end":7387,"line_start":154,"line_end":154,"column_start":43,"column_end":48},"name":"0","qualname":"::common::DebugStrOffsetsBase::0","value":"T","parent":{"krate":0,"index":3415},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3438},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":7519,"byte_end":7539,"line_start":158,"line_end":158,"column_start":12,"column_end":32},"name":"DebugStrOffsetsIndex","qualname":"::common::DebugStrOffsetsIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" An index into a set of entries in the `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of entries in the `.debug_str_offsets` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":7391,"byte_end":7462,"line_start":156,"line_end":156,"column_start":1,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":3441},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":7551,"byte_end":7556,"line_start":158,"line_end":158,"column_start":44,"column_end":49},"name":"0","qualname":"::common::DebugStrOffsetsIndex::0","value":"T","parent":{"krate":0,"index":3438},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3461},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":7686,"byte_end":7702,"line_start":162,"line_end":162,"column_start":12,"column_end":28},"name":"DebugTypesOffset","qualname":"::common::DebugTypesOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_types` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_types` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":7560,"byte_end":7606,"line_start":160,"line_end":160,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":3464},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":7714,"byte_end":7719,"line_start":162,"line_end":162,"column_start":40,"column_end":45},"name":"0","qualname":"::common::DebugTypesOffset::0","value":"T","parent":{"krate":0,"index":3461},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3498},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":7845,"byte_end":7863,"line_start":166,"line_end":166,"column_start":12,"column_end":30},"name":"DebugTypeSignature","qualname":"::common::DebugTypeSignature","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type signature as used in the `.debug_types` section.\n","sig":null,"attributes":[{"value":"/ A type signature as used in the `.debug_types` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":7723,"byte_end":7782,"line_start":164,"line_end":164,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":3500},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":7864,"byte_end":7871,"line_start":166,"line_end":166,"column_start":31,"column_end":38},"name":"0","qualname":"::common::DebugTypeSignature::0","value":"u64","parent":{"krate":0,"index":3498},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3516},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":7984,"byte_end":8000,"line_start":170,"line_end":170,"column_start":12,"column_end":28},"name":"DebugFrameOffset","qualname":"::common::DebugFrameOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_frame` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_frame` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":7875,"byte_end":7921,"line_start":168,"line_end":168,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":3519},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8012,"byte_end":8017,"line_start":170,"line_end":170,"column_start":40,"column_end":45},"name":"0","qualname":"::common::DebugFrameOffset::0","value":"T","parent":{"krate":0,"index":3516},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3543},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8248,"byte_end":8261,"line_start":181,"line_end":181,"column_start":12,"column_end":25},"name":"EhFrameOffset","qualname":"::common::EhFrameOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.eh_frame` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.eh_frame` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8142,"byte_end":8185,"line_start":179,"line_end":179,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":3546},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8273,"byte_end":8278,"line_start":181,"line_end":181,"column_start":37,"column_end":42},"name":"0","qualname":"::common::EhFrameOffset::0","value":"T","parent":{"krate":0,"index":3543},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3572},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8624,"byte_end":8639,"line_start":194,"line_end":194,"column_start":5,"column_end":20},"name":"DebugInfoOffset","qualname":"::common::UnitSectionOffset::DebugInfoOffset","value":"UnitSectionOffset::DebugInfoOffset(DebugInfoOffset<T>)","parent":{"krate":0,"index":3570},"children":[],"decl_id":null,"docs":" An offset into the `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_info` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8574,"byte_end":8619,"line_start":193,"line_end":193,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3575},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8716,"byte_end":8732,"line_start":196,"line_end":196,"column_start":5,"column_end":21},"name":"DebugTypesOffset","qualname":"::common::UnitSectionOffset::DebugTypesOffset","value":"UnitSectionOffset::DebugTypesOffset(DebugTypesOffset<T>)","parent":{"krate":0,"index":3570},"children":[],"decl_id":null,"docs":" An offset into the `.debug_types` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_types` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8665,"byte_end":8711,"line_start":195,"line_end":195,"column_start":5,"column_end":51}}]},{"kind":"Enum","id":{"krate":0,"index":3570},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8539,"byte_end":8556,"line_start":192,"line_end":192,"column_start":10,"column_end":27},"name":"UnitSectionOffset","qualname":"::common::UnitSectionOffset","value":"pub enum UnitSectionOffset<T = usize> {\n\n    /// An offset into the `.debug_info` section.\n    DebugInfoOffset(DebugInfoOffset<T>),\n\n    /// An offset into the `.debug_types` section.\n    DebugTypesOffset(DebugTypesOffset<T>),\n}","parent":null,"children":[{"krate":0,"index":3572},{"krate":0,"index":3575}],"decl_id":null,"docs":" An offset into the `.debug_info` or `.debug_types` sections.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_info` or `.debug_types` sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8397,"byte_end":8461,"line_start":190,"line_end":190,"column_start":1,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3612},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8927,"byte_end":8938,"line_start":203,"line_end":203,"column_start":5,"column_end":16},"name":"DebugAbbrev","qualname":"::common::SectionId::DebugAbbrev","value":"SectionId::DebugAbbrev","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.debug_abbrev` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_abbrev` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8890,"byte_end":8922,"line_start":202,"line_end":202,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3614},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8979,"byte_end":8988,"line_start":205,"line_end":205,"column_start":5,"column_end":14},"name":"DebugAddr","qualname":"::common::SectionId::DebugAddr","value":"SectionId::DebugAddr","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_addr` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8944,"byte_end":8974,"line_start":204,"line_end":204,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3616},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9032,"byte_end":9044,"line_start":207,"line_end":207,"column_start":5,"column_end":17},"name":"DebugAranges","qualname":"::common::SectionId::DebugAranges","value":"SectionId::DebugAranges","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.debug_aranges` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_aranges` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8994,"byte_end":9027,"line_start":206,"line_end":206,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3618},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9086,"byte_end":9096,"line_start":209,"line_end":209,"column_start":5,"column_end":15},"name":"DebugFrame","qualname":"::common::SectionId::DebugFrame","value":"SectionId::DebugFrame","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.debug_frame` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_frame` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9050,"byte_end":9081,"line_start":208,"line_end":208,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3620},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9135,"byte_end":9142,"line_start":211,"line_end":211,"column_start":5,"column_end":12},"name":"EhFrame","qualname":"::common::SectionId::EhFrame","value":"SectionId::EhFrame","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.eh_frame` section.\n","sig":null,"attributes":[{"value":"/ The `.eh_frame` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9102,"byte_end":9130,"line_start":210,"line_end":210,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3622},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9185,"byte_end":9195,"line_start":213,"line_end":213,"column_start":5,"column_end":15},"name":"EhFrameHdr","qualname":"::common::SectionId::EhFrameHdr","value":"SectionId::EhFrameHdr","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.eh_frame_hdr` section.\n","sig":null,"attributes":[{"value":"/ The `.eh_frame_hdr` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9148,"byte_end":9180,"line_start":212,"line_end":212,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3624},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9236,"byte_end":9245,"line_start":215,"line_end":215,"column_start":5,"column_end":14},"name":"DebugInfo","qualname":"::common::SectionId::DebugInfo","value":"SectionId::DebugInfo","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_info` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9201,"byte_end":9231,"line_start":214,"line_end":214,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3626},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9286,"byte_end":9295,"line_start":217,"line_end":217,"column_start":5,"column_end":14},"name":"DebugLine","qualname":"::common::SectionId::DebugLine","value":"SectionId::DebugLine","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.debug_line` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_line` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9251,"byte_end":9281,"line_start":216,"line_end":216,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3628},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9340,"byte_end":9352,"line_start":219,"line_end":219,"column_start":5,"column_end":17},"name":"DebugLineStr","qualname":"::common::SectionId::DebugLineStr","value":"SectionId::DebugLineStr","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_line_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9301,"byte_end":9335,"line_start":218,"line_end":218,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3630},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9392,"byte_end":9400,"line_start":221,"line_end":221,"column_start":5,"column_end":13},"name":"DebugLoc","qualname":"::common::SectionId::DebugLoc","value":"SectionId::DebugLoc","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.debug_loc` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_loc` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9358,"byte_end":9387,"line_start":220,"line_end":220,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3632},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9445,"byte_end":9458,"line_start":223,"line_end":223,"column_start":5,"column_end":18},"name":"DebugLocLists","qualname":"::common::SectionId::DebugLocLists","value":"SectionId::DebugLocLists","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_loclists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9406,"byte_end":9440,"line_start":222,"line_end":222,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3634},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9502,"byte_end":9514,"line_start":225,"line_end":225,"column_start":5,"column_end":17},"name":"DebugMacinfo","qualname":"::common::SectionId::DebugMacinfo","value":"SectionId::DebugMacinfo","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.debug_macinfo` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_macinfo` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9464,"byte_end":9497,"line_start":224,"line_end":224,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3636},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9556,"byte_end":9566,"line_start":227,"line_end":227,"column_start":5,"column_end":15},"name":"DebugMacro","qualname":"::common::SectionId::DebugMacro","value":"SectionId::DebugMacro","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.debug_macro` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_macro` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9520,"byte_end":9551,"line_start":226,"line_end":226,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3638},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9611,"byte_end":9624,"line_start":229,"line_end":229,"column_start":5,"column_end":18},"name":"DebugPubNames","qualname":"::common::SectionId::DebugPubNames","value":"SectionId::DebugPubNames","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.debug_pubnames` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_pubnames` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9572,"byte_end":9606,"line_start":228,"line_end":228,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3640},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9669,"byte_end":9682,"line_start":231,"line_end":231,"column_start":5,"column_end":18},"name":"DebugPubTypes","qualname":"::common::SectionId::DebugPubTypes","value":"SectionId::DebugPubTypes","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.debug_pubtypes` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_pubtypes` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9630,"byte_end":9664,"line_start":230,"line_end":230,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3642},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9725,"byte_end":9736,"line_start":233,"line_end":233,"column_start":5,"column_end":16},"name":"DebugRanges","qualname":"::common::SectionId::DebugRanges","value":"SectionId::DebugRanges","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.debug_ranges` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_ranges` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9688,"byte_end":9720,"line_start":232,"line_end":232,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3644},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9781,"byte_end":9794,"line_start":235,"line_end":235,"column_start":5,"column_end":18},"name":"DebugRngLists","qualname":"::common::SectionId::DebugRngLists","value":"SectionId::DebugRngLists","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_rnglists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9742,"byte_end":9776,"line_start":234,"line_end":234,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3646},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9834,"byte_end":9842,"line_start":237,"line_end":237,"column_start":5,"column_end":13},"name":"DebugStr","qualname":"::common::SectionId::DebugStr","value":"SectionId::DebugStr","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9800,"byte_end":9829,"line_start":236,"line_end":236,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3648},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9890,"byte_end":9905,"line_start":239,"line_end":239,"column_start":5,"column_end":20},"name":"DebugStrOffsets","qualname":"::common::SectionId::DebugStrOffsets","value":"SectionId::DebugStrOffsets","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_str_offsets` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9848,"byte_end":9885,"line_start":238,"line_end":238,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3650},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9947,"byte_end":9957,"line_start":241,"line_end":241,"column_start":5,"column_end":15},"name":"DebugTypes","qualname":"::common::SectionId::DebugTypes","value":"SectionId::DebugTypes","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":" The `.debug_types` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_types` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9911,"byte_end":9942,"line_start":240,"line_end":240,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":3611},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8874,"byte_end":8883,"line_start":201,"line_end":201,"column_start":10,"column_end":19},"name":"SectionId","qualname":"::common::SectionId","value":"pub enum SectionId {\n\n    /// The `.debug_abbrev` section.\n    DebugAbbrev,\n\n    /// The `.debug_addr` section.\n    DebugAddr,\n\n    /// The `.debug_aranges` section.\n    DebugAranges,\n\n    /// The `.debug_frame` section.\n    DebugFrame,\n\n    /// The `.eh_frame` section.\n    EhFrame,\n\n    /// The `.eh_frame_hdr` section.\n    EhFrameHdr,\n\n    /// The `.debug_info` section.\n    DebugInfo,\n\n    /// The `.debug_line` section.\n    DebugLine,\n\n    /// The `.debug_line_str` section.\n    DebugLineStr,\n\n    /// The `.debug_loc` section.\n    DebugLoc,\n\n    /// The `.debug_loclists` section.\n    DebugLocLists,\n\n    /// The `.debug_macinfo` section.\n    DebugMacinfo,\n\n    /// The `.debug_macro` section.\n    DebugMacro,\n\n    /// The `.debug_pubnames` section.\n    DebugPubNames,\n\n    /// The `.debug_pubtypes` section.\n    DebugPubTypes,\n\n    /// The `.debug_ranges` section.\n    DebugRanges,\n\n    /// The `.debug_rnglists` section.\n    DebugRngLists,\n\n    /// The `.debug_str` section.\n    DebugStr,\n\n    /// The `.debug_str_offsets` section.\n    DebugStrOffsets,\n\n    /// The `.debug_types` section.\n    DebugTypes,\n}","parent":null,"children":[{"krate":0,"index":3612},{"krate":0,"index":3614},{"krate":0,"index":3616},{"krate":0,"index":3618},{"krate":0,"index":3620},{"krate":0,"index":3622},{"krate":0,"index":3624},{"krate":0,"index":3626},{"krate":0,"index":3628},{"krate":0,"index":3630},{"krate":0,"index":3632},{"krate":0,"index":3634},{"krate":0,"index":3636},{"krate":0,"index":3638},{"krate":0,"index":3640},{"krate":0,"index":3642},{"krate":0,"index":3644},{"krate":0,"index":3646},{"krate":0,"index":3648},{"krate":0,"index":3650}],"decl_id":null,"docs":" An identifier for a DWARF section.\n","sig":null,"attributes":[{"value":"/ An identifier for a DWARF section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8758,"byte_end":8796,"line_start":199,"line_end":199,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":10042,"byte_end":10046,"line_start":246,"line_end":246,"column_start":12,"column_end":16},"name":"name","qualname":"<SectionId>::name","value":"pub fn name(Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Returns the ELF section name for this kind.\n","sig":null,"attributes":[{"value":"/ Returns the ELF section name for this kind.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9983,"byte_end":10030,"line_start":245,"line_end":245,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":11292,"byte_end":11300,"line_start":272,"line_end":272,"column_start":12,"column_end":20},"name":"dwo_name","qualname":"<SectionId>::dwo_name","value":"pub fn dwo_name(Self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the ELF section name for this kind, when found in a .dwo file.\n","sig":null,"attributes":[{"value":"/ Returns the ELF section name for this kind, when found in a .dwo file.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":11206,"byte_end":11280,"line_start":271,"line_end":271,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":3670},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":12741,"byte_end":12744,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"Arm","qualname":"::arch::Arm","value":"","parent":null,"children":[],"decl_id":null,"docs":" ARM architecture specific definitions.","sig":null,"attributes":[{"value":"/ ARM architecture specific definitions.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":12531,"byte_end":12573,"line_start":26,"line_end":26,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":12574,"byte_end":12577,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ See [DWARF for the ARM Architecture](http://infocenter.arm.com/help/topic/com.arm.doc.ihi0040b/IHI0040B_aadwarf.pdf).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":12578,"byte_end":12699,"line_start":28,"line_end":28,"column_start":1,"column_end":122}}]},{"kind":"Const","id":{"krate":0,"index":3678},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":12798,"byte_end":12800,"line_start":34,"line_end":34,"column_start":5,"column_end":7},"name":"R0","qualname":"::arch::Arm::R0","value":"Register","parent":{"krate":0,"index":3677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3679},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":12818,"byte_end":12820,"line_start":35,"line_end":35,"column_start":5,"column_end":7},"name":"R1","qualname":"::arch::Arm::R1","value":"Register","parent":{"krate":0,"index":3677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3680},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":12838,"byte_end":12840,"line_start":36,"line_end":36,"column_start":5,"column_end":7},"name":"R2","qualname":"::arch::Arm::R2","value":"Register","parent":{"krate":0,"index":3677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3681},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":12858,"byte_end":12860,"line_start":37,"line_end":37,"column_start":5,"column_end":7},"name":"R3","qualname":"::arch::Arm::R3","value":"Register","parent":{"krate":0,"index":3677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3682},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":12878,"byte_end":12880,"line_start":38,"line_end":38,"column_start":5,"column_end":7},"name":"R4","qualname":"::arch::Arm::R4","value":"Register","parent":{"krate":0,"index":3677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3683},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":12898,"byte_end":12900,"line_start":39,"line_end":39,"column_start":5,"column_end":7},"name":"R5","qualname":"::arch::Arm::R5","value":"Register","parent":{"krate":0,"index":3677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3684},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":12918,"byte_end":12920,"line_start":40,"line_end":40,"column_start":5,"column_end":7},"name":"R6","qualname":"::arch::Arm::R6","value":"Register","parent":{"krate":0,"index":3677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3685},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":12938,"byte_end":12940,"line_start":41,"line_end":41,"column_start":5,"column_end":7},"name":"R7","qualname":"::arch::Arm::R7","value":"Register","parent":{"krate":0,"index":3677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3686},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":12958,"byte_end":12960,"line_start":42,"line_end":42,"column_start":5,"column_end":7},"name":"R8","qualname":"::arch::Arm::R8","value":"Register","parent":{"krate":0,"index":3677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3687},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":12978,"byte_end":12980,"line_start":43,"line_end":43,"column_start":5,"column_end":7},"name":"R9","qualname":"::arch::Arm::R9","value":"Register","parent":{"krate":0,"index":3677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3688},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":12998,"byte_end":13001,"line_start":44,"line_end":44,"column_start":5,"column_end":8},"name":"R10","qualname":"::arch::Arm::R10","value":"Register","parent":{"krate":0,"index":3677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3689},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13021,"byte_end":13024,"line_start":45,"line_end":45,"column_start":5,"column_end":8},"name":"R11","qualname":"::arch::Arm::R11","value":"Register","parent":{"krate":0,"index":3677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3690},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13044,"byte_end":13047,"line_start":46,"line_end":46,"column_start":5,"column_end":8},"name":"R12","qualname":"::arch::Arm::R12","value":"Register","parent":{"krate":0,"index":3677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3691},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13067,"byte_end":13070,"line_start":47,"line_end":47,"column_start":5,"column_end":8},"name":"R13","qualname":"::arch::Arm::R13","value":"Register","parent":{"krate":0,"index":3677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3692},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13090,"byte_end":13093,"line_start":48,"line_end":48,"column_start":5,"column_end":8},"name":"R14","qualname":"::arch::Arm::R14","value":"Register","parent":{"krate":0,"index":3677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3693},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13113,"byte_end":13116,"line_start":49,"line_end":49,"column_start":5,"column_end":8},"name":"R15","qualname":"::arch::Arm::R15","value":"Register","parent":{"krate":0,"index":3677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3696},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13347,"byte_end":13350,"line_start":56,"line_end":56,"column_start":12,"column_end":15},"name":"X86","qualname":"::arch::X86","value":"","parent":null,"children":[],"decl_id":null,"docs":" Intel i386 architecture specific definitions.","sig":null,"attributes":[{"value":"/ Intel i386 architecture specific definitions.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13137,"byte_end":13186,"line_start":52,"line_end":52,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13187,"byte_end":13190,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ See Intel386 psABi version 1.1 at the [X86 psABI wiki](https://github.com/hjl-tools/x86-psABI/wiki/X86-psABI).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13191,"byte_end":13305,"line_start":54,"line_end":54,"column_start":1,"column_end":115}}]},{"kind":"Const","id":{"krate":0,"index":3704},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13375,"byte_end":13378,"line_start":59,"line_end":59,"column_start":5,"column_end":8},"name":"EAX","qualname":"::arch::X86::EAX","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3705},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13397,"byte_end":13400,"line_start":60,"line_end":60,"column_start":5,"column_end":8},"name":"ECX","qualname":"::arch::X86::ECX","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3706},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13419,"byte_end":13422,"line_start":61,"line_end":61,"column_start":5,"column_end":8},"name":"EDX","qualname":"::arch::X86::EDX","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3707},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13441,"byte_end":13444,"line_start":62,"line_end":62,"column_start":5,"column_end":8},"name":"EBX","qualname":"::arch::X86::EBX","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3708},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13463,"byte_end":13466,"line_start":63,"line_end":63,"column_start":5,"column_end":8},"name":"ESP","qualname":"::arch::X86::ESP","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3709},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13485,"byte_end":13488,"line_start":64,"line_end":64,"column_start":5,"column_end":8},"name":"EBP","qualname":"::arch::X86::EBP","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3710},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13507,"byte_end":13510,"line_start":65,"line_end":65,"column_start":5,"column_end":8},"name":"ESI","qualname":"::arch::X86::ESI","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3711},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13529,"byte_end":13532,"line_start":66,"line_end":66,"column_start":5,"column_end":8},"name":"EDI","qualname":"::arch::X86::EDI","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3712},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13648,"byte_end":13650,"line_start":69,"line_end":69,"column_start":5,"column_end":7},"name":"RA","qualname":"::arch::X86::RA","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3713},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13669,"byte_end":13672,"line_start":71,"line_end":71,"column_start":5,"column_end":8},"name":"ST0","qualname":"::arch::X86::ST0","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3714},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13692,"byte_end":13695,"line_start":72,"line_end":72,"column_start":5,"column_end":8},"name":"ST1","qualname":"::arch::X86::ST1","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3715},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13715,"byte_end":13718,"line_start":73,"line_end":73,"column_start":5,"column_end":8},"name":"ST2","qualname":"::arch::X86::ST2","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3716},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13738,"byte_end":13741,"line_start":74,"line_end":74,"column_start":5,"column_end":8},"name":"ST3","qualname":"::arch::X86::ST3","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3717},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13761,"byte_end":13764,"line_start":75,"line_end":75,"column_start":5,"column_end":8},"name":"ST4","qualname":"::arch::X86::ST4","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3718},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13784,"byte_end":13787,"line_start":76,"line_end":76,"column_start":5,"column_end":8},"name":"ST5","qualname":"::arch::X86::ST5","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3719},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13807,"byte_end":13810,"line_start":77,"line_end":77,"column_start":5,"column_end":8},"name":"ST6","qualname":"::arch::X86::ST6","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3720},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13830,"byte_end":13833,"line_start":78,"line_end":78,"column_start":5,"column_end":8},"name":"ST7","qualname":"::arch::X86::ST7","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3721},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13854,"byte_end":13858,"line_start":80,"line_end":80,"column_start":5,"column_end":9},"name":"XMM0","qualname":"::arch::X86::XMM0","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3722},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13879,"byte_end":13883,"line_start":81,"line_end":81,"column_start":5,"column_end":9},"name":"XMM1","qualname":"::arch::X86::XMM1","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3723},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13904,"byte_end":13908,"line_start":82,"line_end":82,"column_start":5,"column_end":9},"name":"XMM2","qualname":"::arch::X86::XMM2","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3724},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13929,"byte_end":13933,"line_start":83,"line_end":83,"column_start":5,"column_end":9},"name":"XMM3","qualname":"::arch::X86::XMM3","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3725},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13954,"byte_end":13958,"line_start":84,"line_end":84,"column_start":5,"column_end":9},"name":"XMM4","qualname":"::arch::X86::XMM4","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3726},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":13979,"byte_end":13983,"line_start":85,"line_end":85,"column_start":5,"column_end":9},"name":"XMM5","qualname":"::arch::X86::XMM5","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3727},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14004,"byte_end":14008,"line_start":86,"line_end":86,"column_start":5,"column_end":9},"name":"XMM6","qualname":"::arch::X86::XMM6","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3728},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14029,"byte_end":14033,"line_start":87,"line_end":87,"column_start":5,"column_end":9},"name":"XMM7","qualname":"::arch::X86::XMM7","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3729},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14055,"byte_end":14058,"line_start":89,"line_end":89,"column_start":5,"column_end":8},"name":"MM0","qualname":"::arch::X86::MM0","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3730},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14078,"byte_end":14081,"line_start":90,"line_end":90,"column_start":5,"column_end":8},"name":"MM1","qualname":"::arch::X86::MM1","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3731},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14101,"byte_end":14104,"line_start":91,"line_end":91,"column_start":5,"column_end":8},"name":"MM2","qualname":"::arch::X86::MM2","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3732},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14124,"byte_end":14127,"line_start":92,"line_end":92,"column_start":5,"column_end":8},"name":"MM3","qualname":"::arch::X86::MM3","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3733},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14147,"byte_end":14150,"line_start":93,"line_end":93,"column_start":5,"column_end":8},"name":"MM4","qualname":"::arch::X86::MM4","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3734},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14170,"byte_end":14173,"line_start":94,"line_end":94,"column_start":5,"column_end":8},"name":"MM5","qualname":"::arch::X86::MM5","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3735},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14193,"byte_end":14196,"line_start":95,"line_end":95,"column_start":5,"column_end":8},"name":"MM6","qualname":"::arch::X86::MM6","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3736},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14216,"byte_end":14219,"line_start":96,"line_end":96,"column_start":5,"column_end":8},"name":"MM7","qualname":"::arch::X86::MM7","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3737},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14240,"byte_end":14245,"line_start":98,"line_end":98,"column_start":5,"column_end":10},"name":"MXCSR","qualname":"::arch::X86::MXCSR","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3738},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14268,"byte_end":14270,"line_start":100,"line_end":100,"column_start":5,"column_end":7},"name":"ES","qualname":"::arch::X86::ES","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3739},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14289,"byte_end":14291,"line_start":101,"line_end":101,"column_start":5,"column_end":7},"name":"CS","qualname":"::arch::X86::CS","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3740},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14310,"byte_end":14312,"line_start":102,"line_end":102,"column_start":5,"column_end":7},"name":"SS","qualname":"::arch::X86::SS","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3741},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14331,"byte_end":14333,"line_start":103,"line_end":103,"column_start":5,"column_end":7},"name":"DS","qualname":"::arch::X86::DS","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3742},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14352,"byte_end":14354,"line_start":104,"line_end":104,"column_start":5,"column_end":7},"name":"FS","qualname":"::arch::X86::FS","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3743},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14373,"byte_end":14375,"line_start":105,"line_end":105,"column_start":5,"column_end":7},"name":"GS","qualname":"::arch::X86::GS","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3744},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14395,"byte_end":14397,"line_start":107,"line_end":107,"column_start":5,"column_end":7},"name":"TR","qualname":"::arch::X86::TR","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3745},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14416,"byte_end":14420,"line_start":108,"line_end":108,"column_start":5,"column_end":9},"name":"LDTR","qualname":"::arch::X86::LDTR","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3746},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14442,"byte_end":14449,"line_start":110,"line_end":110,"column_start":5,"column_end":12},"name":"FS_BASE","qualname":"::arch::X86::FS_BASE","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3747},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14473,"byte_end":14480,"line_start":111,"line_end":111,"column_start":5,"column_end":12},"name":"GS_BASE","qualname":"::arch::X86::GS_BASE","value":"Register","parent":{"krate":0,"index":3703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3750},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14708,"byte_end":14714,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"X86_64","qualname":"::arch::X86_64","value":"","parent":null,"children":[],"decl_id":null,"docs":" AMD64 architecture specific definitions.","sig":null,"attributes":[{"value":"/ AMD64 architecture specific definitions.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14505,"byte_end":14549,"line_start":114,"line_end":114,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14550,"byte_end":14553,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ See x86-64 psABI version 1.0 at the [X86 psABI wiki](https://github.com/hjl-tools/x86-psABI/wiki/X86-psABI).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14554,"byte_end":14666,"line_start":116,"line_end":116,"column_start":1,"column_end":113}}]},{"kind":"Const","id":{"krate":0,"index":3758},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14742,"byte_end":14745,"line_start":121,"line_end":121,"column_start":5,"column_end":8},"name":"RAX","qualname":"::arch::X86_64::RAX","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3759},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14764,"byte_end":14767,"line_start":122,"line_end":122,"column_start":5,"column_end":8},"name":"RDX","qualname":"::arch::X86_64::RDX","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3760},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14786,"byte_end":14789,"line_start":123,"line_end":123,"column_start":5,"column_end":8},"name":"RCX","qualname":"::arch::X86_64::RCX","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3761},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14808,"byte_end":14811,"line_start":124,"line_end":124,"column_start":5,"column_end":8},"name":"RBX","qualname":"::arch::X86_64::RBX","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3762},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14830,"byte_end":14833,"line_start":125,"line_end":125,"column_start":5,"column_end":8},"name":"RSI","qualname":"::arch::X86_64::RSI","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3763},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14852,"byte_end":14855,"line_start":126,"line_end":126,"column_start":5,"column_end":8},"name":"RDI","qualname":"::arch::X86_64::RDI","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3764},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14874,"byte_end":14877,"line_start":127,"line_end":127,"column_start":5,"column_end":8},"name":"RBP","qualname":"::arch::X86_64::RBP","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3765},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14896,"byte_end":14899,"line_start":128,"line_end":128,"column_start":5,"column_end":8},"name":"RSP","qualname":"::arch::X86_64::RSP","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3766},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14919,"byte_end":14921,"line_start":130,"line_end":130,"column_start":5,"column_end":7},"name":"R8","qualname":"::arch::X86_64::R8","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3767},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14939,"byte_end":14941,"line_start":131,"line_end":131,"column_start":5,"column_end":7},"name":"R9","qualname":"::arch::X86_64::R9","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3768},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14959,"byte_end":14962,"line_start":132,"line_end":132,"column_start":5,"column_end":8},"name":"R10","qualname":"::arch::X86_64::R10","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3769},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":14982,"byte_end":14985,"line_start":133,"line_end":133,"column_start":5,"column_end":8},"name":"R11","qualname":"::arch::X86_64::R11","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3770},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15005,"byte_end":15008,"line_start":134,"line_end":134,"column_start":5,"column_end":8},"name":"R12","qualname":"::arch::X86_64::R12","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3771},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15028,"byte_end":15031,"line_start":135,"line_end":135,"column_start":5,"column_end":8},"name":"R13","qualname":"::arch::X86_64::R13","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3772},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15051,"byte_end":15054,"line_start":136,"line_end":136,"column_start":5,"column_end":8},"name":"R14","qualname":"::arch::X86_64::R14","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3773},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15074,"byte_end":15077,"line_start":137,"line_end":137,"column_start":5,"column_end":8},"name":"R15","qualname":"::arch::X86_64::R15","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3774},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15194,"byte_end":15196,"line_start":140,"line_end":140,"column_start":5,"column_end":7},"name":"RA","qualname":"::arch::X86_64::RA","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3775},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15216,"byte_end":15220,"line_start":142,"line_end":142,"column_start":5,"column_end":9},"name":"XMM0","qualname":"::arch::X86_64::XMM0","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3776},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15241,"byte_end":15245,"line_start":143,"line_end":143,"column_start":5,"column_end":9},"name":"XMM1","qualname":"::arch::X86_64::XMM1","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3777},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15266,"byte_end":15270,"line_start":144,"line_end":144,"column_start":5,"column_end":9},"name":"XMM2","qualname":"::arch::X86_64::XMM2","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3778},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15291,"byte_end":15295,"line_start":145,"line_end":145,"column_start":5,"column_end":9},"name":"XMM3","qualname":"::arch::X86_64::XMM3","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3779},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15316,"byte_end":15320,"line_start":146,"line_end":146,"column_start":5,"column_end":9},"name":"XMM4","qualname":"::arch::X86_64::XMM4","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3780},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15341,"byte_end":15345,"line_start":147,"line_end":147,"column_start":5,"column_end":9},"name":"XMM5","qualname":"::arch::X86_64::XMM5","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3781},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15366,"byte_end":15370,"line_start":148,"line_end":148,"column_start":5,"column_end":9},"name":"XMM6","qualname":"::arch::X86_64::XMM6","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3782},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15391,"byte_end":15395,"line_start":149,"line_end":149,"column_start":5,"column_end":9},"name":"XMM7","qualname":"::arch::X86_64::XMM7","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3783},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15417,"byte_end":15421,"line_start":151,"line_end":151,"column_start":5,"column_end":9},"name":"XMM8","qualname":"::arch::X86_64::XMM8","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3784},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15442,"byte_end":15446,"line_start":152,"line_end":152,"column_start":5,"column_end":9},"name":"XMM9","qualname":"::arch::X86_64::XMM9","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3785},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15467,"byte_end":15472,"line_start":153,"line_end":153,"column_start":5,"column_end":10},"name":"XMM10","qualname":"::arch::X86_64::XMM10","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3786},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15494,"byte_end":15499,"line_start":154,"line_end":154,"column_start":5,"column_end":10},"name":"XMM11","qualname":"::arch::X86_64::XMM11","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3787},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15521,"byte_end":15526,"line_start":155,"line_end":155,"column_start":5,"column_end":10},"name":"XMM12","qualname":"::arch::X86_64::XMM12","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3788},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15548,"byte_end":15553,"line_start":156,"line_end":156,"column_start":5,"column_end":10},"name":"XMM13","qualname":"::arch::X86_64::XMM13","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3789},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15575,"byte_end":15580,"line_start":157,"line_end":157,"column_start":5,"column_end":10},"name":"XMM14","qualname":"::arch::X86_64::XMM14","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3790},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15602,"byte_end":15607,"line_start":158,"line_end":158,"column_start":5,"column_end":10},"name":"XMM15","qualname":"::arch::X86_64::XMM15","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3791},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15630,"byte_end":15633,"line_start":160,"line_end":160,"column_start":5,"column_end":8},"name":"ST0","qualname":"::arch::X86_64::ST0","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3792},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15653,"byte_end":15656,"line_start":161,"line_end":161,"column_start":5,"column_end":8},"name":"ST1","qualname":"::arch::X86_64::ST1","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3793},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15676,"byte_end":15679,"line_start":162,"line_end":162,"column_start":5,"column_end":8},"name":"ST2","qualname":"::arch::X86_64::ST2","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3794},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15699,"byte_end":15702,"line_start":163,"line_end":163,"column_start":5,"column_end":8},"name":"ST3","qualname":"::arch::X86_64::ST3","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3795},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15722,"byte_end":15725,"line_start":164,"line_end":164,"column_start":5,"column_end":8},"name":"ST4","qualname":"::arch::X86_64::ST4","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3796},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15745,"byte_end":15748,"line_start":165,"line_end":165,"column_start":5,"column_end":8},"name":"ST5","qualname":"::arch::X86_64::ST5","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3797},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15768,"byte_end":15771,"line_start":166,"line_end":166,"column_start":5,"column_end":8},"name":"ST6","qualname":"::arch::X86_64::ST6","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3798},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15791,"byte_end":15794,"line_start":167,"line_end":167,"column_start":5,"column_end":8},"name":"ST7","qualname":"::arch::X86_64::ST7","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3799},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15815,"byte_end":15818,"line_start":169,"line_end":169,"column_start":5,"column_end":8},"name":"MM0","qualname":"::arch::X86_64::MM0","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3800},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15838,"byte_end":15841,"line_start":170,"line_end":170,"column_start":5,"column_end":8},"name":"MM1","qualname":"::arch::X86_64::MM1","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3801},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15861,"byte_end":15864,"line_start":171,"line_end":171,"column_start":5,"column_end":8},"name":"MM2","qualname":"::arch::X86_64::MM2","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3802},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15884,"byte_end":15887,"line_start":172,"line_end":172,"column_start":5,"column_end":8},"name":"MM3","qualname":"::arch::X86_64::MM3","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3803},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15907,"byte_end":15910,"line_start":173,"line_end":173,"column_start":5,"column_end":8},"name":"MM4","qualname":"::arch::X86_64::MM4","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3804},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15930,"byte_end":15933,"line_start":174,"line_end":174,"column_start":5,"column_end":8},"name":"MM5","qualname":"::arch::X86_64::MM5","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3805},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15953,"byte_end":15956,"line_start":175,"line_end":175,"column_start":5,"column_end":8},"name":"MM6","qualname":"::arch::X86_64::MM6","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3806},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":15976,"byte_end":15979,"line_start":176,"line_end":176,"column_start":5,"column_end":8},"name":"MM7","qualname":"::arch::X86_64::MM7","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3807},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16000,"byte_end":16006,"line_start":178,"line_end":178,"column_start":5,"column_end":11},"name":"RFLAGS","qualname":"::arch::X86_64::RFLAGS","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3808},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16029,"byte_end":16031,"line_start":179,"line_end":179,"column_start":5,"column_end":7},"name":"ES","qualname":"::arch::X86_64::ES","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3809},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16050,"byte_end":16052,"line_start":180,"line_end":180,"column_start":5,"column_end":7},"name":"CS","qualname":"::arch::X86_64::CS","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3810},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16071,"byte_end":16073,"line_start":181,"line_end":181,"column_start":5,"column_end":7},"name":"SS","qualname":"::arch::X86_64::SS","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3811},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16092,"byte_end":16094,"line_start":182,"line_end":182,"column_start":5,"column_end":7},"name":"DS","qualname":"::arch::X86_64::DS","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3812},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16113,"byte_end":16115,"line_start":183,"line_end":183,"column_start":5,"column_end":7},"name":"FS","qualname":"::arch::X86_64::FS","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3813},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16134,"byte_end":16136,"line_start":184,"line_end":184,"column_start":5,"column_end":7},"name":"GS","qualname":"::arch::X86_64::GS","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3814},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16156,"byte_end":16163,"line_start":186,"line_end":186,"column_start":5,"column_end":12},"name":"FS_BASE","qualname":"::arch::X86_64::FS_BASE","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3815},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16187,"byte_end":16194,"line_start":187,"line_end":187,"column_start":5,"column_end":12},"name":"GS_BASE","qualname":"::arch::X86_64::GS_BASE","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3816},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16219,"byte_end":16221,"line_start":189,"line_end":189,"column_start":5,"column_end":7},"name":"TR","qualname":"::arch::X86_64::TR","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3817},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16240,"byte_end":16244,"line_start":190,"line_end":190,"column_start":5,"column_end":9},"name":"LDTR","qualname":"::arch::X86_64::LDTR","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3818},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16265,"byte_end":16270,"line_start":191,"line_end":191,"column_start":5,"column_end":10},"name":"MXCSR","qualname":"::arch::X86_64::MXCSR","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3819},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16292,"byte_end":16295,"line_start":192,"line_end":192,"column_start":5,"column_end":8},"name":"FCW","qualname":"::arch::X86_64::FCW","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3820},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16315,"byte_end":16318,"line_start":193,"line_end":193,"column_start":5,"column_end":8},"name":"FSW","qualname":"::arch::X86_64::FSW","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3821},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16339,"byte_end":16344,"line_start":195,"line_end":195,"column_start":5,"column_end":10},"name":"XMM16","qualname":"::arch::X86_64::XMM16","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3822},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16366,"byte_end":16371,"line_start":196,"line_end":196,"column_start":5,"column_end":10},"name":"XMM17","qualname":"::arch::X86_64::XMM17","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3823},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16393,"byte_end":16398,"line_start":197,"line_end":197,"column_start":5,"column_end":10},"name":"XMM18","qualname":"::arch::X86_64::XMM18","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3824},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16420,"byte_end":16425,"line_start":198,"line_end":198,"column_start":5,"column_end":10},"name":"XMM19","qualname":"::arch::X86_64::XMM19","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3825},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16447,"byte_end":16452,"line_start":199,"line_end":199,"column_start":5,"column_end":10},"name":"XMM20","qualname":"::arch::X86_64::XMM20","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3826},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16474,"byte_end":16479,"line_start":200,"line_end":200,"column_start":5,"column_end":10},"name":"XMM21","qualname":"::arch::X86_64::XMM21","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3827},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16501,"byte_end":16506,"line_start":201,"line_end":201,"column_start":5,"column_end":10},"name":"XMM22","qualname":"::arch::X86_64::XMM22","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3828},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16528,"byte_end":16533,"line_start":202,"line_end":202,"column_start":5,"column_end":10},"name":"XMM23","qualname":"::arch::X86_64::XMM23","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3829},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16555,"byte_end":16560,"line_start":203,"line_end":203,"column_start":5,"column_end":10},"name":"XMM24","qualname":"::arch::X86_64::XMM24","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3830},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16582,"byte_end":16587,"line_start":204,"line_end":204,"column_start":5,"column_end":10},"name":"XMM25","qualname":"::arch::X86_64::XMM25","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3831},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16609,"byte_end":16614,"line_start":205,"line_end":205,"column_start":5,"column_end":10},"name":"XMM26","qualname":"::arch::X86_64::XMM26","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3832},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16636,"byte_end":16641,"line_start":206,"line_end":206,"column_start":5,"column_end":10},"name":"XMM27","qualname":"::arch::X86_64::XMM27","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3833},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16663,"byte_end":16668,"line_start":207,"line_end":207,"column_start":5,"column_end":10},"name":"XMM28","qualname":"::arch::X86_64::XMM28","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3834},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16690,"byte_end":16695,"line_start":208,"line_end":208,"column_start":5,"column_end":10},"name":"XMM29","qualname":"::arch::X86_64::XMM29","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3835},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16717,"byte_end":16722,"line_start":209,"line_end":209,"column_start":5,"column_end":10},"name":"XMM30","qualname":"::arch::X86_64::XMM30","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3836},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16744,"byte_end":16749,"line_start":210,"line_end":210,"column_start":5,"column_end":10},"name":"XMM31","qualname":"::arch::X86_64::XMM31","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3837},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16772,"byte_end":16774,"line_start":212,"line_end":212,"column_start":5,"column_end":7},"name":"K0","qualname":"::arch::X86_64::K0","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3838},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16794,"byte_end":16796,"line_start":213,"line_end":213,"column_start":5,"column_end":7},"name":"K1","qualname":"::arch::X86_64::K1","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3839},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16816,"byte_end":16818,"line_start":214,"line_end":214,"column_start":5,"column_end":7},"name":"K2","qualname":"::arch::X86_64::K2","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3840},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16838,"byte_end":16840,"line_start":215,"line_end":215,"column_start":5,"column_end":7},"name":"K3","qualname":"::arch::X86_64::K3","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3841},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16860,"byte_end":16862,"line_start":216,"line_end":216,"column_start":5,"column_end":7},"name":"K4","qualname":"::arch::X86_64::K4","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3842},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16882,"byte_end":16884,"line_start":217,"line_end":217,"column_start":5,"column_end":7},"name":"K5","qualname":"::arch::X86_64::K5","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3843},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16904,"byte_end":16906,"line_start":218,"line_end":218,"column_start":5,"column_end":7},"name":"K6","qualname":"::arch::X86_64::K6","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3844},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/arch.rs","byte_start":16926,"byte_end":16928,"line_start":219,"line_end":219,"column_start":5,"column_end":7},"name":"K7","qualname":"::arch::X86_64::K7","value":"Register","parent":{"krate":0,"index":3757},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":29},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"constants","qualname":"::constants","value":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":3859},{"krate":0,"index":3883},{"krate":0,"index":3881},{"krate":0,"index":3880},{"krate":0,"index":3876},{"krate":0,"index":3877},{"krate":0,"index":3873},{"krate":0,"index":3874},{"krate":0,"index":3870},{"krate":0,"index":3864},{"krate":0,"index":3862},{"krate":0,"index":3847},{"krate":0,"index":3848},{"krate":0,"index":3849},{"krate":0,"index":3850},{"krate":0,"index":3851},{"krate":0,"index":3852},{"krate":0,"index":3853},{"krate":0,"index":3854},{"krate":0,"index":3855},{"krate":0,"index":3857},{"krate":0,"index":3921},{"krate":0,"index":3945},{"krate":0,"index":3943},{"krate":0,"index":3942},{"krate":0,"index":3938},{"krate":0,"index":3939},{"krate":0,"index":3935},{"krate":0,"index":3936},{"krate":0,"index":3932},{"krate":0,"index":3926},{"krate":0,"index":3924},{"krate":0,"index":3885},{"krate":0,"index":3886},{"krate":0,"index":3887},{"krate":0,"index":3888},{"krate":0,"index":3889},{"krate":0,"index":3890},{"krate":0,"index":3891},{"krate":0,"index":3892},{"krate":0,"index":3893},{"krate":0,"index":3894},{"krate":0,"index":3895},{"krate":0,"index":3896},{"krate":0,"index":3897},{"krate":0,"index":3898},{"krate":0,"index":3899},{"krate":0,"index":3900},{"krate":0,"index":3901},{"krate":0,"index":3902},{"krate":0,"index":3903},{"krate":0,"index":3904},{"krate":0,"index":3905},{"krate":0,"index":3906},{"krate":0,"index":3907},{"krate":0,"index":3908},{"krate":0,"index":3909},{"krate":0,"index":3910},{"krate":0,"index":3911},{"krate":0,"index":3912},{"krate":0,"index":3913},{"krate":0,"index":3914},{"krate":0,"index":3915},{"krate":0,"index":3916},{"krate":0,"index":3917},{"krate":0,"index":3919},{"krate":0,"index":3953},{"krate":0,"index":3977},{"krate":0,"index":3975},{"krate":0,"index":3974},{"krate":0,"index":3970},{"krate":0,"index":3971},{"krate":0,"index":3967},{"krate":0,"index":3968},{"krate":0,"index":3964},{"krate":0,"index":3958},{"krate":0,"index":3956},{"krate":0,"index":3947},{"krate":0,"index":3948},{"krate":0,"index":3949},{"krate":0,"index":3951},{"krate":0,"index":4096},{"krate":0,"index":4120},{"krate":0,"index":4118},{"krate":0,"index":4117},{"krate":0,"index":4113},{"krate":0,"index":4114},{"krate":0,"index":4110},{"krate":0,"index":4111},{"krate":0,"index":4107},{"krate":0,"index":4101},{"krate":0,"index":4099},{"krate":0,"index":3979},{"krate":0,"index":3980},{"krate":0,"index":3981},{"krate":0,"index":3982},{"krate":0,"index":3983},{"krate":0,"index":3984},{"krate":0,"index":3985},{"krate":0,"index":3986},{"krate":0,"index":3987},{"krate":0,"index":3988},{"krate":0,"index":3989},{"krate":0,"index":3990},{"krate":0,"index":3991},{"krate":0,"index":3992},{"krate":0,"index":3993},{"krate":0,"index":3994},{"krate":0,"index":3995},{"krate":0,"index":3996},{"krate":0,"index":3997},{"krate":0,"index":3998},{"krate":0,"index":3999},{"krate":0,"index":4000},{"krate":0,"index":4001},{"krate":0,"index":4002},{"krate":0,"index":4003},{"krate":0,"index":4004},{"krate":0,"index":4005},{"krate":0,"index":4006},{"krate":0,"index":4007},{"krate":0,"index":4008},{"krate":0,"index":4009},{"krate":0,"index":4010},{"krate":0,"index":4011},{"krate":0,"index":4012},{"krate":0,"index":4013},{"krate":0,"index":4014},{"krate":0,"index":4015},{"krate":0,"index":4016},{"krate":0,"index":4017},{"krate":0,"index":4018},{"krate":0,"index":4019},{"krate":0,"index":4020},{"krate":0,"index":4021},{"krate":0,"index":4022},{"krate":0,"index":4023},{"krate":0,"index":4024},{"krate":0,"index":4025},{"krate":0,"index":4026},{"krate":0,"index":4027},{"krate":0,"index":4028},{"krate":0,"index":4029},{"krate":0,"index":4030},{"krate":0,"index":4031},{"krate":0,"index":4032},{"krate":0,"index":4033},{"krate":0,"index":4034},{"krate":0,"index":4035},{"krate":0,"index":4036},{"krate":0,"index":4037},{"krate":0,"index":4038},{"krate":0,"index":4039},{"krate":0,"index":4040},{"krate":0,"index":4041},{"krate":0,"index":4042},{"krate":0,"index":4043},{"krate":0,"index":4044},{"krate":0,"index":4045},{"krate":0,"index":4046},{"krate":0,"index":4047},{"krate":0,"index":4048},{"krate":0,"index":4049},{"krate":0,"index":4050},{"krate":0,"index":4051},{"krate":0,"index":4052},{"krate":0,"index":4053},{"krate":0,"index":4054},{"krate":0,"index":4055},{"krate":0,"index":4056},{"krate":0,"index":4057},{"krate":0,"index":4058},{"krate":0,"index":4059},{"krate":0,"index":4060},{"krate":0,"index":4061},{"krate":0,"index":4062},{"krate":0,"index":4063},{"krate":0,"index":4064},{"krate":0,"index":4065},{"krate":0,"index":4066},{"krate":0,"index":4067},{"krate":0,"index":4068},{"krate":0,"index":4069},{"krate":0,"index":4070},{"krate":0,"index":4071},{"krate":0,"index":4072},{"krate":0,"index":4073},{"krate":0,"index":4074},{"krate":0,"index":4075},{"krate":0,"index":4076},{"krate":0,"index":4077},{"krate":0,"index":4078},{"krate":0,"index":4079},{"krate":0,"index":4080},{"krate":0,"index":4081},{"krate":0,"index":4082},{"krate":0,"index":4083},{"krate":0,"index":4084},{"krate":0,"index":4085},{"krate":0,"index":4086},{"krate":0,"index":4087},{"krate":0,"index":4088},{"krate":0,"index":4089},{"krate":0,"index":4090},{"krate":0,"index":4091},{"krate":0,"index":4092},{"krate":0,"index":4094},{"krate":0,"index":4391},{"krate":0,"index":4415},{"krate":0,"index":4413},{"krate":0,"index":4412},{"krate":0,"index":4408},{"krate":0,"index":4409},{"krate":0,"index":4405},{"krate":0,"index":4406},{"krate":0,"index":4402},{"krate":0,"index":4396},{"krate":0,"index":4394},{"krate":0,"index":4122},{"krate":0,"index":4123},{"krate":0,"index":4124},{"krate":0,"index":4125},{"krate":0,"index":4126},{"krate":0,"index":4127},{"krate":0,"index":4128},{"krate":0,"index":4129},{"krate":0,"index":4130},{"krate":0,"index":4131},{"krate":0,"index":4132},{"krate":0,"index":4133},{"krate":0,"index":4134},{"krate":0,"index":4135},{"krate":0,"index":4136},{"krate":0,"index":4137},{"krate":0,"index":4138},{"krate":0,"index":4139},{"krate":0,"index":4140},{"krate":0,"index":4141},{"krate":0,"index":4142},{"krate":0,"index":4143},{"krate":0,"index":4144},{"krate":0,"index":4145},{"krate":0,"index":4146},{"krate":0,"index":4147},{"krate":0,"index":4148},{"krate":0,"index":4149},{"krate":0,"index":4150},{"krate":0,"index":4151},{"krate":0,"index":4152},{"krate":0,"index":4153},{"krate":0,"index":4154},{"krate":0,"index":4155},{"krate":0,"index":4156},{"krate":0,"index":4157},{"krate":0,"index":4158},{"krate":0,"index":4159},{"krate":0,"index":4160},{"krate":0,"index":4161},{"krate":0,"index":4162},{"krate":0,"index":4163},{"krate":0,"index":4164},{"krate":0,"index":4165},{"krate":0,"index":4166},{"krate":0,"index":4167},{"krate":0,"index":4168},{"krate":0,"index":4169},{"krate":0,"index":4170},{"krate":0,"index":4171},{"krate":0,"index":4172},{"krate":0,"index":4173},{"krate":0,"index":4174},{"krate":0,"index":4175},{"krate":0,"index":4176},{"krate":0,"index":4177},{"krate":0,"index":4178},{"krate":0,"index":4179},{"krate":0,"index":4180},{"krate":0,"index":4181},{"krate":0,"index":4182},{"krate":0,"index":4183},{"krate":0,"index":4184},{"krate":0,"index":4185},{"krate":0,"index":4186},{"krate":0,"index":4187},{"krate":0,"index":4188},{"krate":0,"index":4189},{"krate":0,"index":4190},{"krate":0,"index":4191},{"krate":0,"index":4192},{"krate":0,"index":4193},{"krate":0,"index":4194},{"krate":0,"index":4195},{"krate":0,"index":4196},{"krate":0,"index":4197},{"krate":0,"index":4198},{"krate":0,"index":4199},{"krate":0,"index":4200},{"krate":0,"index":4201},{"krate":0,"index":4202},{"krate":0,"index":4203},{"krate":0,"index":4204},{"krate":0,"index":4205},{"krate":0,"index":4206},{"krate":0,"index":4207},{"krate":0,"index":4208},{"krate":0,"index":4209},{"krate":0,"index":4210},{"krate":0,"index":4211},{"krate":0,"index":4212},{"krate":0,"index":4213},{"krate":0,"index":4214},{"krate":0,"index":4215},{"krate":0,"index":4216},{"krate":0,"index":4217},{"krate":0,"index":4218},{"krate":0,"index":4219},{"krate":0,"index":4220},{"krate":0,"index":4221},{"krate":0,"index":4222},{"krate":0,"index":4223},{"krate":0,"index":4224},{"krate":0,"index":4225},{"krate":0,"index":4226},{"krate":0,"index":4227},{"krate":0,"index":4228},{"krate":0,"index":4229},{"krate":0,"index":4230},{"krate":0,"index":4231},{"krate":0,"index":4232},{"krate":0,"index":4233},{"krate":0,"index":4234},{"krate":0,"index":4235},{"krate":0,"index":4236},{"krate":0,"index":4237},{"krate":0,"index":4238},{"krate":0,"index":4239},{"krate":0,"index":4240},{"krate":0,"index":4241},{"krate":0,"index":4242},{"krate":0,"index":4243},{"krate":0,"index":4244},{"krate":0,"index":4245},{"krate":0,"index":4246},{"krate":0,"index":4247},{"krate":0,"index":4248},{"krate":0,"index":4249},{"krate":0,"index":4250},{"krate":0,"index":4251},{"krate":0,"index":4252},{"krate":0,"index":4253},{"krate":0,"index":4254},{"krate":0,"index":4255},{"krate":0,"index":4256},{"krate":0,"index":4257},{"krate":0,"index":4258},{"krate":0,"index":4259},{"krate":0,"index":4260},{"krate":0,"index":4261},{"krate":0,"index":4262},{"krate":0,"index":4263},{"krate":0,"index":4264},{"krate":0,"index":4265},{"krate":0,"index":4266},{"krate":0,"index":4267},{"krate":0,"index":4268},{"krate":0,"index":4269},{"krate":0,"index":4270},{"krate":0,"index":4271},{"krate":0,"index":4272},{"krate":0,"index":4273},{"krate":0,"index":4274},{"krate":0,"index":4275},{"krate":0,"index":4276},{"krate":0,"index":4277},{"krate":0,"index":4278},{"krate":0,"index":4279},{"krate":0,"index":4280},{"krate":0,"index":4281},{"krate":0,"index":4282},{"krate":0,"index":4283},{"krate":0,"index":4284},{"krate":0,"index":4285},{"krate":0,"index":4286},{"krate":0,"index":4287},{"krate":0,"index":4288},{"krate":0,"index":4289},{"krate":0,"index":4290},{"krate":0,"index":4291},{"krate":0,"index":4292},{"krate":0,"index":4293},{"krate":0,"index":4294},{"krate":0,"index":4295},{"krate":0,"index":4296},{"krate":0,"index":4297},{"krate":0,"index":4298},{"krate":0,"index":4299},{"krate":0,"index":4300},{"krate":0,"index":4301},{"krate":0,"index":4302},{"krate":0,"index":4303},{"krate":0,"index":4304},{"krate":0,"index":4305},{"krate":0,"index":4306},{"krate":0,"index":4307},{"krate":0,"index":4308},{"krate":0,"index":4309},{"krate":0,"index":4310},{"krate":0,"index":4311},{"krate":0,"index":4312},{"krate":0,"index":4313},{"krate":0,"index":4314},{"krate":0,"index":4315},{"krate":0,"index":4316},{"krate":0,"index":4317},{"krate":0,"index":4318},{"krate":0,"index":4319},{"krate":0,"index":4320},{"krate":0,"index":4321},{"krate":0,"index":4322},{"krate":0,"index":4323},{"krate":0,"index":4324},{"krate":0,"index":4325},{"krate":0,"index":4326},{"krate":0,"index":4327},{"krate":0,"index":4328},{"krate":0,"index":4329},{"krate":0,"index":4330},{"krate":0,"index":4331},{"krate":0,"index":4332},{"krate":0,"index":4333},{"krate":0,"index":4334},{"krate":0,"index":4335},{"krate":0,"index":4336},{"krate":0,"index":4337},{"krate":0,"index":4338},{"krate":0,"index":4339},{"krate":0,"index":4340},{"krate":0,"index":4341},{"krate":0,"index":4342},{"krate":0,"index":4343},{"krate":0,"index":4344},{"krate":0,"index":4345},{"krate":0,"index":4346},{"krate":0,"index":4347},{"krate":0,"index":4348},{"krate":0,"index":4349},{"krate":0,"index":4350},{"krate":0,"index":4351},{"krate":0,"index":4352},{"krate":0,"index":4353},{"krate":0,"index":4354},{"krate":0,"index":4355},{"krate":0,"index":4356},{"krate":0,"index":4357},{"krate":0,"index":4358},{"krate":0,"index":4359},{"krate":0,"index":4360},{"krate":0,"index":4361},{"krate":0,"index":4362},{"krate":0,"index":4363},{"krate":0,"index":4364},{"krate":0,"index":4365},{"krate":0,"index":4366},{"krate":0,"index":4367},{"krate":0,"index":4368},{"krate":0,"index":4369},{"krate":0,"index":4370},{"krate":0,"index":4371},{"krate":0,"index":4372},{"krate":0,"index":4373},{"krate":0,"index":4374},{"krate":0,"index":4375},{"krate":0,"index":4376},{"krate":0,"index":4377},{"krate":0,"index":4378},{"krate":0,"index":4379},{"krate":0,"index":4380},{"krate":0,"index":4381},{"krate":0,"index":4382},{"krate":0,"index":4383},{"krate":0,"index":4384},{"krate":0,"index":4385},{"krate":0,"index":4386},{"krate":0,"index":4387},{"krate":0,"index":4389},{"krate":0,"index":4469},{"krate":0,"index":4493},{"krate":0,"index":4491},{"krate":0,"index":4490},{"krate":0,"index":4486},{"krate":0,"index":4487},{"krate":0,"index":4483},{"krate":0,"index":4484},{"krate":0,"index":4480},{"krate":0,"index":4474},{"krate":0,"index":4472},{"krate":0,"index":4417},{"krate":0,"index":4418},{"krate":0,"index":4419},{"krate":0,"index":4420},{"krate":0,"index":4421},{"krate":0,"index":4422},{"krate":0,"index":4423},{"krate":0,"index":4424},{"krate":0,"index":4425},{"krate":0,"index":4426},{"krate":0,"index":4427},{"krate":0,"index":4428},{"krate":0,"index":4429},{"krate":0,"index":4430},{"krate":0,"index":4431},{"krate":0,"index":4432},{"krate":0,"index":4433},{"krate":0,"index":4434},{"krate":0,"index":4435},{"krate":0,"index":4436},{"krate":0,"index":4437},{"krate":0,"index":4438},{"krate":0,"index":4439},{"krate":0,"index":4440},{"krate":0,"index":4441},{"krate":0,"index":4442},{"krate":0,"index":4443},{"krate":0,"index":4444},{"krate":0,"index":4445},{"krate":0,"index":4446},{"krate":0,"index":4447},{"krate":0,"index":4448},{"krate":0,"index":4449},{"krate":0,"index":4450},{"krate":0,"index":4451},{"krate":0,"index":4452},{"krate":0,"index":4453},{"krate":0,"index":4454},{"krate":0,"index":4455},{"krate":0,"index":4456},{"krate":0,"index":4457},{"krate":0,"index":4458},{"krate":0,"index":4459},{"krate":0,"index":4460},{"krate":0,"index":4461},{"krate":0,"index":4462},{"krate":0,"index":4463},{"krate":0,"index":4464},{"krate":0,"index":4465},{"krate":0,"index":4467},{"krate":0,"index":4519},{"krate":0,"index":4543},{"krate":0,"index":4541},{"krate":0,"index":4540},{"krate":0,"index":4536},{"krate":0,"index":4537},{"krate":0,"index":4533},{"krate":0,"index":4534},{"krate":0,"index":4530},{"krate":0,"index":4524},{"krate":0,"index":4522},{"krate":0,"index":4495},{"krate":0,"index":4496},{"krate":0,"index":4497},{"krate":0,"index":4498},{"krate":0,"index":4499},{"krate":0,"index":4500},{"krate":0,"index":4501},{"krate":0,"index":4502},{"krate":0,"index":4503},{"krate":0,"index":4504},{"krate":0,"index":4505},{"krate":0,"index":4506},{"krate":0,"index":4507},{"krate":0,"index":4508},{"krate":0,"index":4509},{"krate":0,"index":4510},{"krate":0,"index":4511},{"krate":0,"index":4512},{"krate":0,"index":4513},{"krate":0,"index":4514},{"krate":0,"index":4515},{"krate":0,"index":4517},{"krate":0,"index":4559},{"krate":0,"index":4583},{"krate":0,"index":4581},{"krate":0,"index":4580},{"krate":0,"index":4576},{"krate":0,"index":4577},{"krate":0,"index":4573},{"krate":0,"index":4574},{"krate":0,"index":4570},{"krate":0,"index":4564},{"krate":0,"index":4562},{"krate":0,"index":4545},{"krate":0,"index":4546},{"krate":0,"index":4547},{"krate":0,"index":4548},{"krate":0,"index":4549},{"krate":0,"index":4550},{"krate":0,"index":4551},{"krate":0,"index":4552},{"krate":0,"index":4553},{"krate":0,"index":4554},{"krate":0,"index":4555},{"krate":0,"index":4557},{"krate":0,"index":4594},{"krate":0,"index":4618},{"krate":0,"index":4616},{"krate":0,"index":4615},{"krate":0,"index":4611},{"krate":0,"index":4612},{"krate":0,"index":4608},{"krate":0,"index":4609},{"krate":0,"index":4605},{"krate":0,"index":4599},{"krate":0,"index":4597},{"krate":0,"index":4585},{"krate":0,"index":4586},{"krate":0,"index":4587},{"krate":0,"index":4588},{"krate":0,"index":4589},{"krate":0,"index":4590},{"krate":0,"index":4592},{"krate":0,"index":4629},{"krate":0,"index":4653},{"krate":0,"index":4651},{"krate":0,"index":4650},{"krate":0,"index":4646},{"krate":0,"index":4647},{"krate":0,"index":4643},{"krate":0,"index":4644},{"krate":0,"index":4640},{"krate":0,"index":4634},{"krate":0,"index":4632},{"krate":0,"index":4620},{"krate":0,"index":4621},{"krate":0,"index":4622},{"krate":0,"index":4623},{"krate":0,"index":4624},{"krate":0,"index":4625},{"krate":0,"index":4627},{"krate":0,"index":4662},{"krate":0,"index":4686},{"krate":0,"index":4684},{"krate":0,"index":4683},{"krate":0,"index":4679},{"krate":0,"index":4680},{"krate":0,"index":4676},{"krate":0,"index":4677},{"krate":0,"index":4673},{"krate":0,"index":4667},{"krate":0,"index":4665},{"krate":0,"index":4655},{"krate":0,"index":4656},{"krate":0,"index":4657},{"krate":0,"index":4658},{"krate":0,"index":4660},{"krate":0,"index":4695},{"krate":0,"index":4719},{"krate":0,"index":4717},{"krate":0,"index":4716},{"krate":0,"index":4712},{"krate":0,"index":4713},{"krate":0,"index":4709},{"krate":0,"index":4710},{"krate":0,"index":4706},{"krate":0,"index":4700},{"krate":0,"index":4698},{"krate":0,"index":4688},{"krate":0,"index":4689},{"krate":0,"index":4690},{"krate":0,"index":4691},{"krate":0,"index":4693},{"krate":0,"index":4728},{"krate":0,"index":4752},{"krate":0,"index":4750},{"krate":0,"index":4749},{"krate":0,"index":4745},{"krate":0,"index":4746},{"krate":0,"index":4742},{"krate":0,"index":4743},{"krate":0,"index":4739},{"krate":0,"index":4733},{"krate":0,"index":4731},{"krate":0,"index":4721},{"krate":0,"index":4722},{"krate":0,"index":4723},{"krate":0,"index":4724},{"krate":0,"index":4726},{"krate":0,"index":4802},{"krate":0,"index":4826},{"krate":0,"index":4824},{"krate":0,"index":4823},{"krate":0,"index":4819},{"krate":0,"index":4820},{"krate":0,"index":4816},{"krate":0,"index":4817},{"krate":0,"index":4813},{"krate":0,"index":4807},{"krate":0,"index":4805},{"krate":0,"index":4754},{"krate":0,"index":4755},{"krate":0,"index":4756},{"krate":0,"index":4757},{"krate":0,"index":4758},{"krate":0,"index":4759},{"krate":0,"index":4760},{"krate":0,"index":4761},{"krate":0,"index":4762},{"krate":0,"index":4763},{"krate":0,"index":4764},{"krate":0,"index":4765},{"krate":0,"index":4766},{"krate":0,"index":4767},{"krate":0,"index":4768},{"krate":0,"index":4769},{"krate":0,"index":4770},{"krate":0,"index":4771},{"krate":0,"index":4772},{"krate":0,"index":4773},{"krate":0,"index":4774},{"krate":0,"index":4775},{"krate":0,"index":4776},{"krate":0,"index":4777},{"krate":0,"index":4778},{"krate":0,"index":4779},{"krate":0,"index":4780},{"krate":0,"index":4781},{"krate":0,"index":4782},{"krate":0,"index":4783},{"krate":0,"index":4784},{"krate":0,"index":4785},{"krate":0,"index":4786},{"krate":0,"index":4787},{"krate":0,"index":4788},{"krate":0,"index":4789},{"krate":0,"index":4790},{"krate":0,"index":4791},{"krate":0,"index":4792},{"krate":0,"index":4793},{"krate":0,"index":4794},{"krate":0,"index":4795},{"krate":0,"index":4796},{"krate":0,"index":4797},{"krate":0,"index":4798},{"krate":0,"index":4800},{"krate":0,"index":32},{"krate":0,"index":4833},{"krate":0,"index":4857},{"krate":0,"index":4855},{"krate":0,"index":4854},{"krate":0,"index":4850},{"krate":0,"index":4851},{"krate":0,"index":4847},{"krate":0,"index":4848},{"krate":0,"index":4844},{"krate":0,"index":4838},{"krate":0,"index":4836},{"krate":0,"index":4828},{"krate":0,"index":4829},{"krate":0,"index":4831},{"krate":0,"index":4867},{"krate":0,"index":4891},{"krate":0,"index":4889},{"krate":0,"index":4888},{"krate":0,"index":4884},{"krate":0,"index":4885},{"krate":0,"index":4881},{"krate":0,"index":4882},{"krate":0,"index":4878},{"krate":0,"index":4872},{"krate":0,"index":4870},{"krate":0,"index":4859},{"krate":0,"index":4860},{"krate":0,"index":4861},{"krate":0,"index":4862},{"krate":0,"index":4863},{"krate":0,"index":4865},{"krate":0,"index":4904},{"krate":0,"index":4928},{"krate":0,"index":4926},{"krate":0,"index":4925},{"krate":0,"index":4921},{"krate":0,"index":4922},{"krate":0,"index":4918},{"krate":0,"index":4919},{"krate":0,"index":4915},{"krate":0,"index":4909},{"krate":0,"index":4907},{"krate":0,"index":4893},{"krate":0,"index":4894},{"krate":0,"index":4895},{"krate":0,"index":4896},{"krate":0,"index":4897},{"krate":0,"index":4898},{"krate":0,"index":4899},{"krate":0,"index":4900},{"krate":0,"index":4902},{"krate":0,"index":4938},{"krate":0,"index":4962},{"krate":0,"index":4960},{"krate":0,"index":4959},{"krate":0,"index":4955},{"krate":0,"index":4956},{"krate":0,"index":4952},{"krate":0,"index":4953},{"krate":0,"index":4949},{"krate":0,"index":4943},{"krate":0,"index":4941},{"krate":0,"index":4930},{"krate":0,"index":4931},{"krate":0,"index":4932},{"krate":0,"index":4933},{"krate":0,"index":4934},{"krate":0,"index":4936},{"krate":0,"index":4970},{"krate":0,"index":4994},{"krate":0,"index":4992},{"krate":0,"index":4991},{"krate":0,"index":4987},{"krate":0,"index":4988},{"krate":0,"index":4984},{"krate":0,"index":4985},{"krate":0,"index":4981},{"krate":0,"index":4975},{"krate":0,"index":4973},{"krate":0,"index":4964},{"krate":0,"index":4965},{"krate":0,"index":4966},{"krate":0,"index":4968},{"krate":0,"index":5002},{"krate":0,"index":5026},{"krate":0,"index":5024},{"krate":0,"index":5023},{"krate":0,"index":5019},{"krate":0,"index":5020},{"krate":0,"index":5016},{"krate":0,"index":5017},{"krate":0,"index":5013},{"krate":0,"index":5007},{"krate":0,"index":5005},{"krate":0,"index":4996},{"krate":0,"index":4997},{"krate":0,"index":4998},{"krate":0,"index":5000},{"krate":0,"index":5039},{"krate":0,"index":5063},{"krate":0,"index":5061},{"krate":0,"index":5060},{"krate":0,"index":5056},{"krate":0,"index":5057},{"krate":0,"index":5053},{"krate":0,"index":5054},{"krate":0,"index":5050},{"krate":0,"index":5044},{"krate":0,"index":5042},{"krate":0,"index":5028},{"krate":0,"index":5029},{"krate":0,"index":5030},{"krate":0,"index":5031},{"krate":0,"index":5032},{"krate":0,"index":5033},{"krate":0,"index":5034},{"krate":0,"index":5035},{"krate":0,"index":5037},{"krate":0,"index":5072},{"krate":0,"index":5096},{"krate":0,"index":5094},{"krate":0,"index":5093},{"krate":0,"index":5089},{"krate":0,"index":5090},{"krate":0,"index":5086},{"krate":0,"index":5087},{"krate":0,"index":5083},{"krate":0,"index":5077},{"krate":0,"index":5075},{"krate":0,"index":5065},{"krate":0,"index":5066},{"krate":0,"index":5067},{"krate":0,"index":5068},{"krate":0,"index":5070},{"krate":0,"index":5114},{"krate":0,"index":5138},{"krate":0,"index":5136},{"krate":0,"index":5135},{"krate":0,"index":5131},{"krate":0,"index":5132},{"krate":0,"index":5128},{"krate":0,"index":5129},{"krate":0,"index":5125},{"krate":0,"index":5119},{"krate":0,"index":5117},{"krate":0,"index":5098},{"krate":0,"index":5099},{"krate":0,"index":5100},{"krate":0,"index":5101},{"krate":0,"index":5102},{"krate":0,"index":5103},{"krate":0,"index":5104},{"krate":0,"index":5105},{"krate":0,"index":5106},{"krate":0,"index":5107},{"krate":0,"index":5108},{"krate":0,"index":5109},{"krate":0,"index":5110},{"krate":0,"index":5112},{"krate":0,"index":5150},{"krate":0,"index":5174},{"krate":0,"index":5172},{"krate":0,"index":5171},{"krate":0,"index":5167},{"krate":0,"index":5168},{"krate":0,"index":5164},{"krate":0,"index":5165},{"krate":0,"index":5161},{"krate":0,"index":5155},{"krate":0,"index":5153},{"krate":0,"index":5140},{"krate":0,"index":5141},{"krate":0,"index":5142},{"krate":0,"index":5143},{"krate":0,"index":5144},{"krate":0,"index":5145},{"krate":0,"index":5146},{"krate":0,"index":5148},{"krate":0,"index":5187},{"krate":0,"index":5211},{"krate":0,"index":5209},{"krate":0,"index":5208},{"krate":0,"index":5204},{"krate":0,"index":5205},{"krate":0,"index":5201},{"krate":0,"index":5202},{"krate":0,"index":5198},{"krate":0,"index":5192},{"krate":0,"index":5190},{"krate":0,"index":5176},{"krate":0,"index":5177},{"krate":0,"index":5178},{"krate":0,"index":5179},{"krate":0,"index":5180},{"krate":0,"index":5181},{"krate":0,"index":5182},{"krate":0,"index":5183},{"krate":0,"index":5185},{"krate":0,"index":5231},{"krate":0,"index":5255},{"krate":0,"index":5253},{"krate":0,"index":5252},{"krate":0,"index":5248},{"krate":0,"index":5249},{"krate":0,"index":5245},{"krate":0,"index":5246},{"krate":0,"index":5242},{"krate":0,"index":5236},{"krate":0,"index":5234},{"krate":0,"index":5213},{"krate":0,"index":5214},{"krate":0,"index":5215},{"krate":0,"index":5216},{"krate":0,"index":5217},{"krate":0,"index":5218},{"krate":0,"index":5219},{"krate":0,"index":5220},{"krate":0,"index":5221},{"krate":0,"index":5222},{"krate":0,"index":5223},{"krate":0,"index":5224},{"krate":0,"index":5225},{"krate":0,"index":5226},{"krate":0,"index":5227},{"krate":0,"index":5229},{"krate":0,"index":5269},{"krate":0,"index":5293},{"krate":0,"index":5291},{"krate":0,"index":5290},{"krate":0,"index":5286},{"krate":0,"index":5287},{"krate":0,"index":5283},{"krate":0,"index":5284},{"krate":0,"index":5280},{"krate":0,"index":5274},{"krate":0,"index":5272},{"krate":0,"index":5257},{"krate":0,"index":5258},{"krate":0,"index":5259},{"krate":0,"index":5260},{"krate":0,"index":5261},{"krate":0,"index":5262},{"krate":0,"index":5263},{"krate":0,"index":5264},{"krate":0,"index":5265},{"krate":0,"index":5267},{"krate":0,"index":5474},{"krate":0,"index":5498},{"krate":0,"index":5496},{"krate":0,"index":5495},{"krate":0,"index":5491},{"krate":0,"index":5492},{"krate":0,"index":5488},{"krate":0,"index":5489},{"krate":0,"index":5485},{"krate":0,"index":5479},{"krate":0,"index":5477},{"krate":0,"index":5295},{"krate":0,"index":5296},{"krate":0,"index":5297},{"krate":0,"index":5298},{"krate":0,"index":5299},{"krate":0,"index":5300},{"krate":0,"index":5301},{"krate":0,"index":5302},{"krate":0,"index":5303},{"krate":0,"index":5304},{"krate":0,"index":5305},{"krate":0,"index":5306},{"krate":0,"index":5307},{"krate":0,"index":5308},{"krate":0,"index":5309},{"krate":0,"index":5310},{"krate":0,"index":5311},{"krate":0,"index":5312},{"krate":0,"index":5313},{"krate":0,"index":5314},{"krate":0,"index":5315},{"krate":0,"index":5316},{"krate":0,"index":5317},{"krate":0,"index":5318},{"krate":0,"index":5319},{"krate":0,"index":5320},{"krate":0,"index":5321},{"krate":0,"index":5322},{"krate":0,"index":5323},{"krate":0,"index":5324},{"krate":0,"index":5325},{"krate":0,"index":5326},{"krate":0,"index":5327},{"krate":0,"index":5328},{"krate":0,"index":5329},{"krate":0,"index":5330},{"krate":0,"index":5331},{"krate":0,"index":5332},{"krate":0,"index":5333},{"krate":0,"index":5334},{"krate":0,"index":5335},{"krate":0,"index":5336},{"krate":0,"index":5337},{"krate":0,"index":5338},{"krate":0,"index":5339},{"krate":0,"index":5340},{"krate":0,"index":5341},{"krate":0,"index":5342},{"krate":0,"index":5343},{"krate":0,"index":5344},{"krate":0,"index":5345},{"krate":0,"index":5346},{"krate":0,"index":5347},{"krate":0,"index":5348},{"krate":0,"index":5349},{"krate":0,"index":5350},{"krate":0,"index":5351},{"krate":0,"index":5352},{"krate":0,"index":5353},{"krate":0,"index":5354},{"krate":0,"index":5355},{"krate":0,"index":5356},{"krate":0,"index":5357},{"krate":0,"index":5358},{"krate":0,"index":5359},{"krate":0,"index":5360},{"krate":0,"index":5361},{"krate":0,"index":5362},{"krate":0,"index":5363},{"krate":0,"index":5364},{"krate":0,"index":5365},{"krate":0,"index":5366},{"krate":0,"index":5367},{"krate":0,"index":5368},{"krate":0,"index":5369},{"krate":0,"index":5370},{"krate":0,"index":5371},{"krate":0,"index":5372},{"krate":0,"index":5373},{"krate":0,"index":5374},{"krate":0,"index":5375},{"krate":0,"index":5376},{"krate":0,"index":5377},{"krate":0,"index":5378},{"krate":0,"index":5379},{"krate":0,"index":5380},{"krate":0,"index":5381},{"krate":0,"index":5382},{"krate":0,"index":5383},{"krate":0,"index":5384},{"krate":0,"index":5385},{"krate":0,"index":5386},{"krate":0,"index":5387},{"krate":0,"index":5388},{"krate":0,"index":5389},{"krate":0,"index":5390},{"krate":0,"index":5391},{"krate":0,"index":5392},{"krate":0,"index":5393},{"krate":0,"index":5394},{"krate":0,"index":5395},{"krate":0,"index":5396},{"krate":0,"index":5397},{"krate":0,"index":5398},{"krate":0,"index":5399},{"krate":0,"index":5400},{"krate":0,"index":5401},{"krate":0,"index":5402},{"krate":0,"index":5403},{"krate":0,"index":5404},{"krate":0,"index":5405},{"krate":0,"index":5406},{"krate":0,"index":5407},{"krate":0,"index":5408},{"krate":0,"index":5409},{"krate":0,"index":5410},{"krate":0,"index":5411},{"krate":0,"index":5412},{"krate":0,"index":5413},{"krate":0,"index":5414},{"krate":0,"index":5415},{"krate":0,"index":5416},{"krate":0,"index":5417},{"krate":0,"index":5418},{"krate":0,"index":5419},{"krate":0,"index":5420},{"krate":0,"index":5421},{"krate":0,"index":5422},{"krate":0,"index":5423},{"krate":0,"index":5424},{"krate":0,"index":5425},{"krate":0,"index":5426},{"krate":0,"index":5427},{"krate":0,"index":5428},{"krate":0,"index":5429},{"krate":0,"index":5430},{"krate":0,"index":5431},{"krate":0,"index":5432},{"krate":0,"index":5433},{"krate":0,"index":5434},{"krate":0,"index":5435},{"krate":0,"index":5436},{"krate":0,"index":5437},{"krate":0,"index":5438},{"krate":0,"index":5439},{"krate":0,"index":5440},{"krate":0,"index":5441},{"krate":0,"index":5442},{"krate":0,"index":5443},{"krate":0,"index":5444},{"krate":0,"index":5445},{"krate":0,"index":5446},{"krate":0,"index":5447},{"krate":0,"index":5448},{"krate":0,"index":5449},{"krate":0,"index":5450},{"krate":0,"index":5451},{"krate":0,"index":5452},{"krate":0,"index":5453},{"krate":0,"index":5454},{"krate":0,"index":5455},{"krate":0,"index":5456},{"krate":0,"index":5457},{"krate":0,"index":5458},{"krate":0,"index":5459},{"krate":0,"index":5460},{"krate":0,"index":5461},{"krate":0,"index":5462},{"krate":0,"index":5463},{"krate":0,"index":5464},{"krate":0,"index":5465},{"krate":0,"index":5466},{"krate":0,"index":5467},{"krate":0,"index":5468},{"krate":0,"index":5469},{"krate":0,"index":5470},{"krate":0,"index":5472},{"krate":0,"index":5520},{"krate":0,"index":5544},{"krate":0,"index":5542},{"krate":0,"index":5541},{"krate":0,"index":5537},{"krate":0,"index":5538},{"krate":0,"index":5534},{"krate":0,"index":5535},{"krate":0,"index":5531},{"krate":0,"index":5525},{"krate":0,"index":5523},{"krate":0,"index":5500},{"krate":0,"index":5501},{"krate":0,"index":5502},{"krate":0,"index":5503},{"krate":0,"index":5504},{"krate":0,"index":5505},{"krate":0,"index":5506},{"krate":0,"index":5507},{"krate":0,"index":5508},{"krate":0,"index":5509},{"krate":0,"index":5510},{"krate":0,"index":5511},{"krate":0,"index":5512},{"krate":0,"index":5513},{"krate":0,"index":5514},{"krate":0,"index":5515},{"krate":0,"index":5516},{"krate":0,"index":5518},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36}],"decl_id":null,"docs":" Constant definitions.","sig":null,"attributes":[{"value":"/ Constant definitions.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":17683,"byte_end":17708,"line_start":18,"line_end":18,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":17709,"byte_end":17712,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The DWARF spec's `DW_AT_*` type is represented as `struct DwAt(u16)`,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":17713,"byte_end":17786,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ `DW_FORM_*` as `DwForm(u16)`, etc.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":17787,"byte_end":17825,"line_start":21,"line_end":21,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":17826,"byte_end":17829,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ There are also exported const definitions for each constant.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":17830,"byte_end":17894,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"allow(non_upper_case_globals)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":17896,"byte_end":17929,"line_start":25,"line_end":25,"column_start":1,"column_end":34}},{"value":"allow(missing_docs)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":17930,"byte_end":17953,"line_start":26,"line_end":26,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":3859},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":19878,"byte_end":19882,"line_start":97,"line_end":97,"column_start":1,"column_end":5},"name":"DwUt","qualname":"::constants::DwUt","value":"","parent":null,"children":[],"decl_id":null,"docs":" The unit type field in a unit header.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3847},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":19893,"byte_end":19906,"line_start":98,"line_end":98,"column_start":5,"column_end":18},"name":"DW_UT_compile","qualname":"::constants::DW_UT_compile","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3848},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":19919,"byte_end":19929,"line_start":99,"line_end":99,"column_start":5,"column_end":15},"name":"DW_UT_type","qualname":"::constants::DW_UT_type","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3849},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":19942,"byte_end":19955,"line_start":100,"line_end":100,"column_start":5,"column_end":18},"name":"DW_UT_partial","qualname":"::constants::DW_UT_partial","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3850},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":19968,"byte_end":19982,"line_start":101,"line_end":101,"column_start":5,"column_end":19},"name":"DW_UT_skeleton","qualname":"::constants::DW_UT_skeleton","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3851},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":19995,"byte_end":20014,"line_start":102,"line_end":102,"column_start":5,"column_end":24},"name":"DW_UT_split_compile","qualname":"::constants::DW_UT_split_compile","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3852},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20027,"byte_end":20043,"line_start":103,"line_end":103,"column_start":5,"column_end":21},"name":"DW_UT_split_type","qualname":"::constants::DW_UT_split_type","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3853},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20056,"byte_end":20069,"line_start":104,"line_end":104,"column_start":5,"column_end":18},"name":"DW_UT_lo_user","qualname":"::constants::DW_UT_lo_user","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3854},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20082,"byte_end":20095,"line_start":105,"line_end":105,"column_start":5,"column_end":18},"name":"DW_UT_hi_user","qualname":"::constants::DW_UT_hi_user","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3921},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20492,"byte_end":20497,"line_start":116,"line_end":116,"column_start":1,"column_end":6},"name":"DwCfa","qualname":"::constants::DwCfa","value":"","parent":null,"children":[],"decl_id":null,"docs":" The opcode for a call frame instruction.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3885},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20508,"byte_end":20526,"line_start":117,"line_end":117,"column_start":5,"column_end":23},"name":"DW_CFA_advance_loc","qualname":"::constants::DW_CFA_advance_loc","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3886},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20544,"byte_end":20557,"line_start":118,"line_end":118,"column_start":5,"column_end":18},"name":"DW_CFA_offset","qualname":"::constants::DW_CFA_offset","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3887},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20575,"byte_end":20589,"line_start":119,"line_end":119,"column_start":5,"column_end":19},"name":"DW_CFA_restore","qualname":"::constants::DW_CFA_restore","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3888},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20607,"byte_end":20617,"line_start":120,"line_end":120,"column_start":5,"column_end":15},"name":"DW_CFA_nop","qualname":"::constants::DW_CFA_nop","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3889},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20627,"byte_end":20641,"line_start":121,"line_end":121,"column_start":5,"column_end":19},"name":"DW_CFA_set_loc","qualname":"::constants::DW_CFA_set_loc","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3890},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20654,"byte_end":20673,"line_start":122,"line_end":122,"column_start":5,"column_end":24},"name":"DW_CFA_advance_loc1","qualname":"::constants::DW_CFA_advance_loc1","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3891},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20686,"byte_end":20705,"line_start":123,"line_end":123,"column_start":5,"column_end":24},"name":"DW_CFA_advance_loc2","qualname":"::constants::DW_CFA_advance_loc2","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3892},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20718,"byte_end":20737,"line_start":124,"line_end":124,"column_start":5,"column_end":24},"name":"DW_CFA_advance_loc4","qualname":"::constants::DW_CFA_advance_loc4","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3893},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20750,"byte_end":20772,"line_start":125,"line_end":125,"column_start":5,"column_end":27},"name":"DW_CFA_offset_extended","qualname":"::constants::DW_CFA_offset_extended","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3894},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20785,"byte_end":20808,"line_start":126,"line_end":126,"column_start":5,"column_end":28},"name":"DW_CFA_restore_extended","qualname":"::constants::DW_CFA_restore_extended","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3895},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20821,"byte_end":20837,"line_start":127,"line_end":127,"column_start":5,"column_end":21},"name":"DW_CFA_undefined","qualname":"::constants::DW_CFA_undefined","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3896},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20850,"byte_end":20867,"line_start":128,"line_end":128,"column_start":5,"column_end":22},"name":"DW_CFA_same_value","qualname":"::constants::DW_CFA_same_value","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3897},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20880,"byte_end":20895,"line_start":129,"line_end":129,"column_start":5,"column_end":20},"name":"DW_CFA_register","qualname":"::constants::DW_CFA_register","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3898},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20908,"byte_end":20929,"line_start":130,"line_end":130,"column_start":5,"column_end":26},"name":"DW_CFA_remember_state","qualname":"::constants::DW_CFA_remember_state","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3899},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20942,"byte_end":20962,"line_start":131,"line_end":131,"column_start":5,"column_end":25},"name":"DW_CFA_restore_state","qualname":"::constants::DW_CFA_restore_state","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3900},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":20975,"byte_end":20989,"line_start":132,"line_end":132,"column_start":5,"column_end":19},"name":"DW_CFA_def_cfa","qualname":"::constants::DW_CFA_def_cfa","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3901},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21002,"byte_end":21025,"line_start":133,"line_end":133,"column_start":5,"column_end":28},"name":"DW_CFA_def_cfa_register","qualname":"::constants::DW_CFA_def_cfa_register","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3902},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21038,"byte_end":21059,"line_start":134,"line_end":134,"column_start":5,"column_end":26},"name":"DW_CFA_def_cfa_offset","qualname":"::constants::DW_CFA_def_cfa_offset","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3903},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21072,"byte_end":21097,"line_start":135,"line_end":135,"column_start":5,"column_end":30},"name":"DW_CFA_def_cfa_expression","qualname":"::constants::DW_CFA_def_cfa_expression","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3904},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21110,"byte_end":21127,"line_start":136,"line_end":136,"column_start":5,"column_end":22},"name":"DW_CFA_expression","qualname":"::constants::DW_CFA_expression","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3905},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21140,"byte_end":21165,"line_start":137,"line_end":137,"column_start":5,"column_end":30},"name":"DW_CFA_offset_extended_sf","qualname":"::constants::DW_CFA_offset_extended_sf","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3906},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21178,"byte_end":21195,"line_start":138,"line_end":138,"column_start":5,"column_end":22},"name":"DW_CFA_def_cfa_sf","qualname":"::constants::DW_CFA_def_cfa_sf","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3907},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21208,"byte_end":21232,"line_start":139,"line_end":139,"column_start":5,"column_end":29},"name":"DW_CFA_def_cfa_offset_sf","qualname":"::constants::DW_CFA_def_cfa_offset_sf","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3908},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21245,"byte_end":21262,"line_start":140,"line_end":140,"column_start":5,"column_end":22},"name":"DW_CFA_val_offset","qualname":"::constants::DW_CFA_val_offset","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3909},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21275,"byte_end":21295,"line_start":141,"line_end":141,"column_start":5,"column_end":25},"name":"DW_CFA_val_offset_sf","qualname":"::constants::DW_CFA_val_offset_sf","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3910},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21308,"byte_end":21329,"line_start":142,"line_end":142,"column_start":5,"column_end":26},"name":"DW_CFA_val_expression","qualname":"::constants::DW_CFA_val_expression","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3911},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21343,"byte_end":21357,"line_start":144,"line_end":144,"column_start":5,"column_end":19},"name":"DW_CFA_lo_user","qualname":"::constants::DW_CFA_lo_user","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3912},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21370,"byte_end":21384,"line_start":145,"line_end":145,"column_start":5,"column_end":19},"name":"DW_CFA_hi_user","qualname":"::constants::DW_CFA_hi_user","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3913},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21398,"byte_end":21422,"line_start":147,"line_end":147,"column_start":5,"column_end":29},"name":"DW_CFA_MIPS_advance_loc8","qualname":"::constants::DW_CFA_MIPS_advance_loc8","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3914},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21435,"byte_end":21457,"line_start":148,"line_end":148,"column_start":5,"column_end":27},"name":"DW_CFA_GNU_window_save","qualname":"::constants::DW_CFA_GNU_window_save","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3915},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21470,"byte_end":21490,"line_start":149,"line_end":149,"column_start":5,"column_end":25},"name":"DW_CFA_GNU_args_size","qualname":"::constants::DW_CFA_GNU_args_size","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3916},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21503,"byte_end":21538,"line_start":150,"line_end":150,"column_start":5,"column_end":40},"name":"DW_CFA_GNU_negative_offset_extended","qualname":"::constants::DW_CFA_GNU_negative_offset_extended","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3953},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21653,"byte_end":21663,"line_start":157,"line_end":157,"column_start":1,"column_end":11},"name":"DwChildren","qualname":"::constants::DwChildren","value":"","parent":null,"children":[],"decl_id":null,"docs":" The child determination encodings for DIE attributes.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3947},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21674,"byte_end":21688,"line_start":158,"line_end":158,"column_start":5,"column_end":19},"name":"DW_CHILDREN_no","qualname":"::constants::DW_CHILDREN_no","value":"DwChildren","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3948},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21698,"byte_end":21713,"line_start":159,"line_end":159,"column_start":5,"column_end":20},"name":"DW_CHILDREN_yes","qualname":"::constants::DW_CHILDREN_yes","value":"DwChildren","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4096},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21809,"byte_end":21814,"line_start":166,"line_end":166,"column_start":1,"column_end":6},"name":"DwTag","qualname":"::constants::DwTag","value":"","parent":null,"children":[],"decl_id":null,"docs":" The tag encodings for DIE attributes.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3979},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21826,"byte_end":21837,"line_start":167,"line_end":167,"column_start":5,"column_end":16},"name":"DW_TAG_null","qualname":"::constants::DW_TAG_null","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3980},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21851,"byte_end":21868,"line_start":169,"line_end":169,"column_start":5,"column_end":22},"name":"DW_TAG_array_type","qualname":"::constants::DW_TAG_array_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3981},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21881,"byte_end":21898,"line_start":170,"line_end":170,"column_start":5,"column_end":22},"name":"DW_TAG_class_type","qualname":"::constants::DW_TAG_class_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3982},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21911,"byte_end":21929,"line_start":171,"line_end":171,"column_start":5,"column_end":23},"name":"DW_TAG_entry_point","qualname":"::constants::DW_TAG_entry_point","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3983},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21942,"byte_end":21965,"line_start":172,"line_end":172,"column_start":5,"column_end":28},"name":"DW_TAG_enumeration_type","qualname":"::constants::DW_TAG_enumeration_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3984},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":21978,"byte_end":22001,"line_start":173,"line_end":173,"column_start":5,"column_end":28},"name":"DW_TAG_formal_parameter","qualname":"::constants::DW_TAG_formal_parameter","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3985},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22014,"byte_end":22041,"line_start":174,"line_end":174,"column_start":5,"column_end":32},"name":"DW_TAG_imported_declaration","qualname":"::constants::DW_TAG_imported_declaration","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3986},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22054,"byte_end":22066,"line_start":175,"line_end":175,"column_start":5,"column_end":17},"name":"DW_TAG_label","qualname":"::constants::DW_TAG_label","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3987},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22079,"byte_end":22099,"line_start":176,"line_end":176,"column_start":5,"column_end":25},"name":"DW_TAG_lexical_block","qualname":"::constants::DW_TAG_lexical_block","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3988},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22112,"byte_end":22125,"line_start":177,"line_end":177,"column_start":5,"column_end":18},"name":"DW_TAG_member","qualname":"::constants::DW_TAG_member","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3989},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22138,"byte_end":22157,"line_start":178,"line_end":178,"column_start":5,"column_end":24},"name":"DW_TAG_pointer_type","qualname":"::constants::DW_TAG_pointer_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3990},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22170,"byte_end":22191,"line_start":179,"line_end":179,"column_start":5,"column_end":26},"name":"DW_TAG_reference_type","qualname":"::constants::DW_TAG_reference_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3991},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22204,"byte_end":22223,"line_start":180,"line_end":180,"column_start":5,"column_end":24},"name":"DW_TAG_compile_unit","qualname":"::constants::DW_TAG_compile_unit","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3992},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22236,"byte_end":22254,"line_start":181,"line_end":181,"column_start":5,"column_end":23},"name":"DW_TAG_string_type","qualname":"::constants::DW_TAG_string_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3993},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22267,"byte_end":22288,"line_start":182,"line_end":182,"column_start":5,"column_end":26},"name":"DW_TAG_structure_type","qualname":"::constants::DW_TAG_structure_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3994},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22301,"byte_end":22323,"line_start":183,"line_end":183,"column_start":5,"column_end":27},"name":"DW_TAG_subroutine_type","qualname":"::constants::DW_TAG_subroutine_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3995},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22336,"byte_end":22350,"line_start":184,"line_end":184,"column_start":5,"column_end":19},"name":"DW_TAG_typedef","qualname":"::constants::DW_TAG_typedef","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3996},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22363,"byte_end":22380,"line_start":185,"line_end":185,"column_start":5,"column_end":22},"name":"DW_TAG_union_type","qualname":"::constants::DW_TAG_union_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3997},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22393,"byte_end":22422,"line_start":186,"line_end":186,"column_start":5,"column_end":34},"name":"DW_TAG_unspecified_parameters","qualname":"::constants::DW_TAG_unspecified_parameters","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3998},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22435,"byte_end":22449,"line_start":187,"line_end":187,"column_start":5,"column_end":19},"name":"DW_TAG_variant","qualname":"::constants::DW_TAG_variant","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3999},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22462,"byte_end":22481,"line_start":188,"line_end":188,"column_start":5,"column_end":24},"name":"DW_TAG_common_block","qualname":"::constants::DW_TAG_common_block","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4000},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22494,"byte_end":22517,"line_start":189,"line_end":189,"column_start":5,"column_end":28},"name":"DW_TAG_common_inclusion","qualname":"::constants::DW_TAG_common_inclusion","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4001},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22530,"byte_end":22548,"line_start":190,"line_end":190,"column_start":5,"column_end":23},"name":"DW_TAG_inheritance","qualname":"::constants::DW_TAG_inheritance","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4002},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22561,"byte_end":22586,"line_start":191,"line_end":191,"column_start":5,"column_end":30},"name":"DW_TAG_inlined_subroutine","qualname":"::constants::DW_TAG_inlined_subroutine","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4003},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22599,"byte_end":22612,"line_start":192,"line_end":192,"column_start":5,"column_end":18},"name":"DW_TAG_module","qualname":"::constants::DW_TAG_module","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4004},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22625,"byte_end":22650,"line_start":193,"line_end":193,"column_start":5,"column_end":30},"name":"DW_TAG_ptr_to_member_type","qualname":"::constants::DW_TAG_ptr_to_member_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4005},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22663,"byte_end":22678,"line_start":194,"line_end":194,"column_start":5,"column_end":20},"name":"DW_TAG_set_type","qualname":"::constants::DW_TAG_set_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4006},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22691,"byte_end":22711,"line_start":195,"line_end":195,"column_start":5,"column_end":25},"name":"DW_TAG_subrange_type","qualname":"::constants::DW_TAG_subrange_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4007},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22724,"byte_end":22740,"line_start":196,"line_end":196,"column_start":5,"column_end":21},"name":"DW_TAG_with_stmt","qualname":"::constants::DW_TAG_with_stmt","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4008},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22753,"byte_end":22778,"line_start":197,"line_end":197,"column_start":5,"column_end":30},"name":"DW_TAG_access_declaration","qualname":"::constants::DW_TAG_access_declaration","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4009},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22791,"byte_end":22807,"line_start":198,"line_end":198,"column_start":5,"column_end":21},"name":"DW_TAG_base_type","qualname":"::constants::DW_TAG_base_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4010},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22820,"byte_end":22838,"line_start":199,"line_end":199,"column_start":5,"column_end":23},"name":"DW_TAG_catch_block","qualname":"::constants::DW_TAG_catch_block","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4011},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22851,"byte_end":22868,"line_start":200,"line_end":200,"column_start":5,"column_end":22},"name":"DW_TAG_const_type","qualname":"::constants::DW_TAG_const_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4012},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22881,"byte_end":22896,"line_start":201,"line_end":201,"column_start":5,"column_end":20},"name":"DW_TAG_constant","qualname":"::constants::DW_TAG_constant","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4013},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22909,"byte_end":22926,"line_start":202,"line_end":202,"column_start":5,"column_end":22},"name":"DW_TAG_enumerator","qualname":"::constants::DW_TAG_enumerator","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4014},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22939,"byte_end":22955,"line_start":203,"line_end":203,"column_start":5,"column_end":21},"name":"DW_TAG_file_type","qualname":"::constants::DW_TAG_file_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4015},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22968,"byte_end":22981,"line_start":204,"line_end":204,"column_start":5,"column_end":18},"name":"DW_TAG_friend","qualname":"::constants::DW_TAG_friend","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4016},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":22994,"byte_end":23009,"line_start":205,"line_end":205,"column_start":5,"column_end":20},"name":"DW_TAG_namelist","qualname":"::constants::DW_TAG_namelist","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4017},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23022,"byte_end":23042,"line_start":206,"line_end":206,"column_start":5,"column_end":25},"name":"DW_TAG_namelist_item","qualname":"::constants::DW_TAG_namelist_item","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4018},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23055,"byte_end":23073,"line_start":207,"line_end":207,"column_start":5,"column_end":23},"name":"DW_TAG_packed_type","qualname":"::constants::DW_TAG_packed_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4019},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23086,"byte_end":23103,"line_start":208,"line_end":208,"column_start":5,"column_end":22},"name":"DW_TAG_subprogram","qualname":"::constants::DW_TAG_subprogram","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4020},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23116,"byte_end":23146,"line_start":209,"line_end":209,"column_start":5,"column_end":35},"name":"DW_TAG_template_type_parameter","qualname":"::constants::DW_TAG_template_type_parameter","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4021},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23159,"byte_end":23190,"line_start":210,"line_end":210,"column_start":5,"column_end":36},"name":"DW_TAG_template_value_parameter","qualname":"::constants::DW_TAG_template_value_parameter","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4022},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23203,"byte_end":23221,"line_start":211,"line_end":211,"column_start":5,"column_end":23},"name":"DW_TAG_thrown_type","qualname":"::constants::DW_TAG_thrown_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4023},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23234,"byte_end":23250,"line_start":212,"line_end":212,"column_start":5,"column_end":21},"name":"DW_TAG_try_block","qualname":"::constants::DW_TAG_try_block","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4024},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23263,"byte_end":23282,"line_start":213,"line_end":213,"column_start":5,"column_end":24},"name":"DW_TAG_variant_part","qualname":"::constants::DW_TAG_variant_part","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4025},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23295,"byte_end":23310,"line_start":214,"line_end":214,"column_start":5,"column_end":20},"name":"DW_TAG_variable","qualname":"::constants::DW_TAG_variable","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4026},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23323,"byte_end":23343,"line_start":215,"line_end":215,"column_start":5,"column_end":25},"name":"DW_TAG_volatile_type","qualname":"::constants::DW_TAG_volatile_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4027},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23369,"byte_end":23391,"line_start":218,"line_end":218,"column_start":5,"column_end":27},"name":"DW_TAG_dwarf_procedure","qualname":"::constants::DW_TAG_dwarf_procedure","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4028},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23404,"byte_end":23424,"line_start":219,"line_end":219,"column_start":5,"column_end":25},"name":"DW_TAG_restrict_type","qualname":"::constants::DW_TAG_restrict_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4029},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23437,"byte_end":23458,"line_start":220,"line_end":220,"column_start":5,"column_end":26},"name":"DW_TAG_interface_type","qualname":"::constants::DW_TAG_interface_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4030},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23471,"byte_end":23487,"line_start":221,"line_end":221,"column_start":5,"column_end":21},"name":"DW_TAG_namespace","qualname":"::constants::DW_TAG_namespace","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4031},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23500,"byte_end":23522,"line_start":222,"line_end":222,"column_start":5,"column_end":27},"name":"DW_TAG_imported_module","qualname":"::constants::DW_TAG_imported_module","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4032},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23535,"byte_end":23558,"line_start":223,"line_end":223,"column_start":5,"column_end":28},"name":"DW_TAG_unspecified_type","qualname":"::constants::DW_TAG_unspecified_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4033},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23571,"byte_end":23590,"line_start":224,"line_end":224,"column_start":5,"column_end":24},"name":"DW_TAG_partial_unit","qualname":"::constants::DW_TAG_partial_unit","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4034},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23603,"byte_end":23623,"line_start":225,"line_end":225,"column_start":5,"column_end":25},"name":"DW_TAG_imported_unit","qualname":"::constants::DW_TAG_imported_unit","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4035},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23636,"byte_end":23652,"line_start":226,"line_end":226,"column_start":5,"column_end":21},"name":"DW_TAG_condition","qualname":"::constants::DW_TAG_condition","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4036},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23665,"byte_end":23683,"line_start":227,"line_end":227,"column_start":5,"column_end":23},"name":"DW_TAG_shared_type","qualname":"::constants::DW_TAG_shared_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4037},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23709,"byte_end":23725,"line_start":230,"line_end":230,"column_start":5,"column_end":21},"name":"DW_TAG_type_unit","qualname":"::constants::DW_TAG_type_unit","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4038},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23738,"byte_end":23766,"line_start":231,"line_end":231,"column_start":5,"column_end":33},"name":"DW_TAG_rvalue_reference_type","qualname":"::constants::DW_TAG_rvalue_reference_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4039},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23779,"byte_end":23800,"line_start":232,"line_end":232,"column_start":5,"column_end":26},"name":"DW_TAG_template_alias","qualname":"::constants::DW_TAG_template_alias","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4040},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23826,"byte_end":23845,"line_start":235,"line_end":235,"column_start":5,"column_end":24},"name":"DW_TAG_coarray_type","qualname":"::constants::DW_TAG_coarray_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4041},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23858,"byte_end":23881,"line_start":236,"line_end":236,"column_start":5,"column_end":28},"name":"DW_TAG_generic_subrange","qualname":"::constants::DW_TAG_generic_subrange","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4042},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23894,"byte_end":23913,"line_start":237,"line_end":237,"column_start":5,"column_end":24},"name":"DW_TAG_dynamic_type","qualname":"::constants::DW_TAG_dynamic_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4043},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23926,"byte_end":23944,"line_start":238,"line_end":238,"column_start":5,"column_end":23},"name":"DW_TAG_atomic_type","qualname":"::constants::DW_TAG_atomic_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4044},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23957,"byte_end":23973,"line_start":239,"line_end":239,"column_start":5,"column_end":21},"name":"DW_TAG_call_site","qualname":"::constants::DW_TAG_call_site","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4045},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":23986,"byte_end":24012,"line_start":240,"line_end":240,"column_start":5,"column_end":31},"name":"DW_TAG_call_site_parameter","qualname":"::constants::DW_TAG_call_site_parameter","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4046},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24025,"byte_end":24045,"line_start":241,"line_end":241,"column_start":5,"column_end":25},"name":"DW_TAG_skeleton_unit","qualname":"::constants::DW_TAG_skeleton_unit","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4047},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24058,"byte_end":24079,"line_start":242,"line_end":242,"column_start":5,"column_end":26},"name":"DW_TAG_immutable_type","qualname":"::constants::DW_TAG_immutable_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4048},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24093,"byte_end":24107,"line_start":244,"line_end":244,"column_start":5,"column_end":19},"name":"DW_TAG_lo_user","qualname":"::constants::DW_TAG_lo_user","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4049},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24122,"byte_end":24136,"line_start":245,"line_end":245,"column_start":5,"column_end":19},"name":"DW_TAG_hi_user","qualname":"::constants::DW_TAG_hi_user","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4050},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24176,"byte_end":24192,"line_start":248,"line_end":248,"column_start":5,"column_end":21},"name":"DW_TAG_MIPS_loop","qualname":"::constants::DW_TAG_MIPS_loop","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4051},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24226,"byte_end":24252,"line_start":251,"line_end":251,"column_start":5,"column_end":31},"name":"DW_TAG_HP_array_descriptor","qualname":"::constants::DW_TAG_HP_array_descriptor","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4052},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24267,"byte_end":24288,"line_start":252,"line_end":252,"column_start":5,"column_end":26},"name":"DW_TAG_HP_Bliss_field","qualname":"::constants::DW_TAG_HP_Bliss_field","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4053},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24303,"byte_end":24328,"line_start":253,"line_end":253,"column_start":5,"column_end":30},"name":"DW_TAG_HP_Bliss_field_set","qualname":"::constants::DW_TAG_HP_Bliss_field_set","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4054},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24363,"byte_end":24382,"line_start":256,"line_end":256,"column_start":5,"column_end":24},"name":"DW_TAG_format_label","qualname":"::constants::DW_TAG_format_label","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4055},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24397,"byte_end":24421,"line_start":257,"line_end":257,"column_start":5,"column_end":29},"name":"DW_TAG_function_template","qualname":"::constants::DW_TAG_function_template","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4056},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24436,"byte_end":24457,"line_start":258,"line_end":258,"column_start":5,"column_end":26},"name":"DW_TAG_class_template","qualname":"::constants::DW_TAG_class_template","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4057},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24472,"byte_end":24488,"line_start":259,"line_end":259,"column_start":5,"column_end":21},"name":"DW_TAG_GNU_BINCL","qualname":"::constants::DW_TAG_GNU_BINCL","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4058},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24503,"byte_end":24519,"line_start":260,"line_end":260,"column_start":5,"column_end":21},"name":"DW_TAG_GNU_EINCL","qualname":"::constants::DW_TAG_GNU_EINCL","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4059},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24534,"byte_end":24568,"line_start":261,"line_end":261,"column_start":5,"column_end":39},"name":"DW_TAG_GNU_template_template_param","qualname":"::constants::DW_TAG_GNU_template_template_param","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4060},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24583,"byte_end":24617,"line_start":262,"line_end":262,"column_start":5,"column_end":39},"name":"DW_TAG_GNU_template_parameter_pack","qualname":"::constants::DW_TAG_GNU_template_parameter_pack","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4061},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24632,"byte_end":24664,"line_start":263,"line_end":263,"column_start":5,"column_end":37},"name":"DW_TAG_GNU_formal_parameter_pack","qualname":"::constants::DW_TAG_GNU_formal_parameter_pack","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4062},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24679,"byte_end":24699,"line_start":264,"line_end":264,"column_start":5,"column_end":25},"name":"DW_TAG_GNU_call_site","qualname":"::constants::DW_TAG_GNU_call_site","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4063},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24714,"byte_end":24744,"line_start":265,"line_end":265,"column_start":5,"column_end":35},"name":"DW_TAG_GNU_call_site_parameter","qualname":"::constants::DW_TAG_GNU_call_site_parameter","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4064},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24760,"byte_end":24781,"line_start":267,"line_end":267,"column_start":5,"column_end":26},"name":"DW_TAG_APPLE_property","qualname":"::constants::DW_TAG_APPLE_property","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4065},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24816,"byte_end":24844,"line_start":270,"line_end":270,"column_start":5,"column_end":33},"name":"DW_TAG_SUN_function_template","qualname":"::constants::DW_TAG_SUN_function_template","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4066},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24859,"byte_end":24884,"line_start":271,"line_end":271,"column_start":5,"column_end":30},"name":"DW_TAG_SUN_class_template","qualname":"::constants::DW_TAG_SUN_class_template","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4067},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24899,"byte_end":24925,"line_start":272,"line_end":272,"column_start":5,"column_end":31},"name":"DW_TAG_SUN_struct_template","qualname":"::constants::DW_TAG_SUN_struct_template","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4068},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24940,"byte_end":24965,"line_start":273,"line_end":273,"column_start":5,"column_end":30},"name":"DW_TAG_SUN_union_template","qualname":"::constants::DW_TAG_SUN_union_template","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4069},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":24980,"byte_end":25011,"line_start":274,"line_end":274,"column_start":5,"column_end":36},"name":"DW_TAG_SUN_indirect_inheritance","qualname":"::constants::DW_TAG_SUN_indirect_inheritance","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4070},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25026,"byte_end":25046,"line_start":275,"line_end":275,"column_start":5,"column_end":25},"name":"DW_TAG_SUN_codeflags","qualname":"::constants::DW_TAG_SUN_codeflags","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4071},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25061,"byte_end":25082,"line_start":276,"line_end":276,"column_start":5,"column_end":26},"name":"DW_TAG_SUN_memop_info","qualname":"::constants::DW_TAG_SUN_memop_info","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4072},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25097,"byte_end":25122,"line_start":277,"line_end":277,"column_start":5,"column_end":30},"name":"DW_TAG_SUN_omp_child_func","qualname":"::constants::DW_TAG_SUN_omp_child_func","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4073},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25137,"byte_end":25163,"line_start":278,"line_end":278,"column_start":5,"column_end":31},"name":"DW_TAG_SUN_rtti_descriptor","qualname":"::constants::DW_TAG_SUN_rtti_descriptor","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4074},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25178,"byte_end":25198,"line_start":279,"line_end":279,"column_start":5,"column_end":25},"name":"DW_TAG_SUN_dtor_info","qualname":"::constants::DW_TAG_SUN_dtor_info","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4075},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25213,"byte_end":25228,"line_start":280,"line_end":280,"column_start":5,"column_end":20},"name":"DW_TAG_SUN_dtor","qualname":"::constants::DW_TAG_SUN_dtor","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4076},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25243,"byte_end":25267,"line_start":281,"line_end":281,"column_start":5,"column_end":29},"name":"DW_TAG_SUN_f90_interface","qualname":"::constants::DW_TAG_SUN_f90_interface","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4077},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25282,"byte_end":25314,"line_start":282,"line_end":282,"column_start":5,"column_end":37},"name":"DW_TAG_SUN_fortran_vax_structure","qualname":"::constants::DW_TAG_SUN_fortran_vax_structure","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4078},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25352,"byte_end":25375,"line_start":285,"line_end":285,"column_start":5,"column_end":28},"name":"DW_TAG_ALTIUM_circ_type","qualname":"::constants::DW_TAG_ALTIUM_circ_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4079},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25390,"byte_end":25417,"line_start":286,"line_end":286,"column_start":5,"column_end":32},"name":"DW_TAG_ALTIUM_mwa_circ_type","qualname":"::constants::DW_TAG_ALTIUM_mwa_circ_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4080},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25432,"byte_end":25460,"line_start":287,"line_end":287,"column_start":5,"column_end":33},"name":"DW_TAG_ALTIUM_rev_carry_type","qualname":"::constants::DW_TAG_ALTIUM_rev_carry_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4081},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25475,"byte_end":25492,"line_start":288,"line_end":288,"column_start":5,"column_end":22},"name":"DW_TAG_ALTIUM_rom","qualname":"::constants::DW_TAG_ALTIUM_rom","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4082},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25531,"byte_end":25553,"line_start":291,"line_end":291,"column_start":5,"column_end":27},"name":"DW_TAG_upc_shared_type","qualname":"::constants::DW_TAG_upc_shared_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4083},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25568,"byte_end":25590,"line_start":292,"line_end":292,"column_start":5,"column_end":27},"name":"DW_TAG_upc_strict_type","qualname":"::constants::DW_TAG_upc_strict_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4084},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25605,"byte_end":25628,"line_start":293,"line_end":293,"column_start":5,"column_end":28},"name":"DW_TAG_upc_relaxed_type","qualname":"::constants::DW_TAG_upc_relaxed_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4085},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25684,"byte_end":25705,"line_start":296,"line_end":296,"column_start":5,"column_end":26},"name":"DW_TAG_PGI_kanji_type","qualname":"::constants::DW_TAG_PGI_kanji_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4086},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25720,"byte_end":25746,"line_start":297,"line_end":297,"column_start":5,"column_end":31},"name":"DW_TAG_PGI_interface_block","qualname":"::constants::DW_TAG_PGI_interface_block","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4087},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25785,"byte_end":25808,"line_start":300,"line_end":300,"column_start":5,"column_end":28},"name":"DW_TAG_BORLAND_property","qualname":"::constants::DW_TAG_BORLAND_property","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4088},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25823,"byte_end":25851,"line_start":301,"line_end":301,"column_start":5,"column_end":33},"name":"DW_TAG_BORLAND_Delphi_string","qualname":"::constants::DW_TAG_BORLAND_Delphi_string","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4089},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25866,"byte_end":25901,"line_start":302,"line_end":302,"column_start":5,"column_end":40},"name":"DW_TAG_BORLAND_Delphi_dynamic_array","qualname":"::constants::DW_TAG_BORLAND_Delphi_dynamic_array","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4090},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25916,"byte_end":25941,"line_start":303,"line_end":303,"column_start":5,"column_end":30},"name":"DW_TAG_BORLAND_Delphi_set","qualname":"::constants::DW_TAG_BORLAND_Delphi_set","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4091},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":25956,"byte_end":25985,"line_start":304,"line_end":304,"column_start":5,"column_end":34},"name":"DW_TAG_BORLAND_Delphi_variant","qualname":"::constants::DW_TAG_BORLAND_Delphi_variant","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4391},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26092,"byte_end":26096,"line_start":311,"line_end":311,"column_start":1,"column_end":5},"name":"DwAt","qualname":"::constants::DwAt","value":"","parent":null,"children":[],"decl_id":null,"docs":" The attribute encodings for DIE attributes.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4122},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26108,"byte_end":26118,"line_start":312,"line_end":312,"column_start":5,"column_end":15},"name":"DW_AT_null","qualname":"::constants::DW_AT_null","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4123},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26132,"byte_end":26145,"line_start":314,"line_end":314,"column_start":5,"column_end":18},"name":"DW_AT_sibling","qualname":"::constants::DW_AT_sibling","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4124},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26158,"byte_end":26172,"line_start":315,"line_end":315,"column_start":5,"column_end":19},"name":"DW_AT_location","qualname":"::constants::DW_AT_location","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4125},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26185,"byte_end":26195,"line_start":316,"line_end":316,"column_start":5,"column_end":15},"name":"DW_AT_name","qualname":"::constants::DW_AT_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4126},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26208,"byte_end":26222,"line_start":317,"line_end":317,"column_start":5,"column_end":19},"name":"DW_AT_ordering","qualname":"::constants::DW_AT_ordering","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4127},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26235,"byte_end":26250,"line_start":318,"line_end":318,"column_start":5,"column_end":20},"name":"DW_AT_byte_size","qualname":"::constants::DW_AT_byte_size","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4128},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26263,"byte_end":26279,"line_start":319,"line_end":319,"column_start":5,"column_end":21},"name":"DW_AT_bit_offset","qualname":"::constants::DW_AT_bit_offset","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4129},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26292,"byte_end":26306,"line_start":320,"line_end":320,"column_start":5,"column_end":19},"name":"DW_AT_bit_size","qualname":"::constants::DW_AT_bit_size","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4130},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26319,"byte_end":26334,"line_start":321,"line_end":321,"column_start":5,"column_end":20},"name":"DW_AT_stmt_list","qualname":"::constants::DW_AT_stmt_list","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4131},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26347,"byte_end":26359,"line_start":322,"line_end":322,"column_start":5,"column_end":17},"name":"DW_AT_low_pc","qualname":"::constants::DW_AT_low_pc","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4132},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26372,"byte_end":26385,"line_start":323,"line_end":323,"column_start":5,"column_end":18},"name":"DW_AT_high_pc","qualname":"::constants::DW_AT_high_pc","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4133},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26398,"byte_end":26412,"line_start":324,"line_end":324,"column_start":5,"column_end":19},"name":"DW_AT_language","qualname":"::constants::DW_AT_language","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4134},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26425,"byte_end":26436,"line_start":325,"line_end":325,"column_start":5,"column_end":16},"name":"DW_AT_discr","qualname":"::constants::DW_AT_discr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4135},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26449,"byte_end":26466,"line_start":326,"line_end":326,"column_start":5,"column_end":22},"name":"DW_AT_discr_value","qualname":"::constants::DW_AT_discr_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4136},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26479,"byte_end":26495,"line_start":327,"line_end":327,"column_start":5,"column_end":21},"name":"DW_AT_visibility","qualname":"::constants::DW_AT_visibility","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4137},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26508,"byte_end":26520,"line_start":328,"line_end":328,"column_start":5,"column_end":17},"name":"DW_AT_import","qualname":"::constants::DW_AT_import","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4138},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26533,"byte_end":26552,"line_start":329,"line_end":329,"column_start":5,"column_end":24},"name":"DW_AT_string_length","qualname":"::constants::DW_AT_string_length","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4139},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26565,"byte_end":26587,"line_start":330,"line_end":330,"column_start":5,"column_end":27},"name":"DW_AT_common_reference","qualname":"::constants::DW_AT_common_reference","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4140},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26600,"byte_end":26614,"line_start":331,"line_end":331,"column_start":5,"column_end":19},"name":"DW_AT_comp_dir","qualname":"::constants::DW_AT_comp_dir","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4141},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26627,"byte_end":26644,"line_start":332,"line_end":332,"column_start":5,"column_end":22},"name":"DW_AT_const_value","qualname":"::constants::DW_AT_const_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4142},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26657,"byte_end":26678,"line_start":333,"line_end":333,"column_start":5,"column_end":26},"name":"DW_AT_containing_type","qualname":"::constants::DW_AT_containing_type","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4143},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26691,"byte_end":26710,"line_start":334,"line_end":334,"column_start":5,"column_end":24},"name":"DW_AT_default_value","qualname":"::constants::DW_AT_default_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4144},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26723,"byte_end":26735,"line_start":335,"line_end":335,"column_start":5,"column_end":17},"name":"DW_AT_inline","qualname":"::constants::DW_AT_inline","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4145},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26748,"byte_end":26765,"line_start":336,"line_end":336,"column_start":5,"column_end":22},"name":"DW_AT_is_optional","qualname":"::constants::DW_AT_is_optional","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4146},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26778,"byte_end":26795,"line_start":337,"line_end":337,"column_start":5,"column_end":22},"name":"DW_AT_lower_bound","qualname":"::constants::DW_AT_lower_bound","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4147},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26808,"byte_end":26822,"line_start":338,"line_end":338,"column_start":5,"column_end":19},"name":"DW_AT_producer","qualname":"::constants::DW_AT_producer","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4148},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26835,"byte_end":26851,"line_start":339,"line_end":339,"column_start":5,"column_end":21},"name":"DW_AT_prototyped","qualname":"::constants::DW_AT_prototyped","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4149},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26864,"byte_end":26881,"line_start":340,"line_end":340,"column_start":5,"column_end":22},"name":"DW_AT_return_addr","qualname":"::constants::DW_AT_return_addr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4150},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26894,"byte_end":26911,"line_start":341,"line_end":341,"column_start":5,"column_end":22},"name":"DW_AT_start_scope","qualname":"::constants::DW_AT_start_scope","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4151},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26924,"byte_end":26940,"line_start":342,"line_end":342,"column_start":5,"column_end":21},"name":"DW_AT_bit_stride","qualname":"::constants::DW_AT_bit_stride","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4152},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26953,"byte_end":26970,"line_start":343,"line_end":343,"column_start":5,"column_end":22},"name":"DW_AT_upper_bound","qualname":"::constants::DW_AT_upper_bound","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4153},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":26983,"byte_end":27004,"line_start":344,"line_end":344,"column_start":5,"column_end":26},"name":"DW_AT_abstract_origin","qualname":"::constants::DW_AT_abstract_origin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4154},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27017,"byte_end":27036,"line_start":345,"line_end":345,"column_start":5,"column_end":24},"name":"DW_AT_accessibility","qualname":"::constants::DW_AT_accessibility","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4155},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27049,"byte_end":27068,"line_start":346,"line_end":346,"column_start":5,"column_end":24},"name":"DW_AT_address_class","qualname":"::constants::DW_AT_address_class","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4156},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27081,"byte_end":27097,"line_start":347,"line_end":347,"column_start":5,"column_end":21},"name":"DW_AT_artificial","qualname":"::constants::DW_AT_artificial","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4157},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27110,"byte_end":27126,"line_start":348,"line_end":348,"column_start":5,"column_end":21},"name":"DW_AT_base_types","qualname":"::constants::DW_AT_base_types","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4158},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27139,"byte_end":27163,"line_start":349,"line_end":349,"column_start":5,"column_end":29},"name":"DW_AT_calling_convention","qualname":"::constants::DW_AT_calling_convention","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4159},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27176,"byte_end":27187,"line_start":350,"line_end":350,"column_start":5,"column_end":16},"name":"DW_AT_count","qualname":"::constants::DW_AT_count","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4160},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27200,"byte_end":27226,"line_start":351,"line_end":351,"column_start":5,"column_end":31},"name":"DW_AT_data_member_location","qualname":"::constants::DW_AT_data_member_location","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4161},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27239,"byte_end":27256,"line_start":352,"line_end":352,"column_start":5,"column_end":22},"name":"DW_AT_decl_column","qualname":"::constants::DW_AT_decl_column","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4162},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27269,"byte_end":27284,"line_start":353,"line_end":353,"column_start":5,"column_end":20},"name":"DW_AT_decl_file","qualname":"::constants::DW_AT_decl_file","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4163},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27297,"byte_end":27312,"line_start":354,"line_end":354,"column_start":5,"column_end":20},"name":"DW_AT_decl_line","qualname":"::constants::DW_AT_decl_line","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4164},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27325,"byte_end":27342,"line_start":355,"line_end":355,"column_start":5,"column_end":22},"name":"DW_AT_declaration","qualname":"::constants::DW_AT_declaration","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4165},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27355,"byte_end":27371,"line_start":356,"line_end":356,"column_start":5,"column_end":21},"name":"DW_AT_discr_list","qualname":"::constants::DW_AT_discr_list","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4166},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27384,"byte_end":27398,"line_start":357,"line_end":357,"column_start":5,"column_end":19},"name":"DW_AT_encoding","qualname":"::constants::DW_AT_encoding","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4167},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27411,"byte_end":27425,"line_start":358,"line_end":358,"column_start":5,"column_end":19},"name":"DW_AT_external","qualname":"::constants::DW_AT_external","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4168},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27438,"byte_end":27454,"line_start":359,"line_end":359,"column_start":5,"column_end":21},"name":"DW_AT_frame_base","qualname":"::constants::DW_AT_frame_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4169},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27467,"byte_end":27479,"line_start":360,"line_end":360,"column_start":5,"column_end":17},"name":"DW_AT_friend","qualname":"::constants::DW_AT_friend","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4170},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27492,"byte_end":27513,"line_start":361,"line_end":361,"column_start":5,"column_end":26},"name":"DW_AT_identifier_case","qualname":"::constants::DW_AT_identifier_case","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4171},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27526,"byte_end":27542,"line_start":362,"line_end":362,"column_start":5,"column_end":21},"name":"DW_AT_macro_info","qualname":"::constants::DW_AT_macro_info","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4172},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27555,"byte_end":27574,"line_start":363,"line_end":363,"column_start":5,"column_end":24},"name":"DW_AT_namelist_item","qualname":"::constants::DW_AT_namelist_item","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4173},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27587,"byte_end":27601,"line_start":364,"line_end":364,"column_start":5,"column_end":19},"name":"DW_AT_priority","qualname":"::constants::DW_AT_priority","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4174},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27614,"byte_end":27627,"line_start":365,"line_end":365,"column_start":5,"column_end":18},"name":"DW_AT_segment","qualname":"::constants::DW_AT_segment","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4175},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27640,"byte_end":27659,"line_start":366,"line_end":366,"column_start":5,"column_end":24},"name":"DW_AT_specification","qualname":"::constants::DW_AT_specification","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4176},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27672,"byte_end":27689,"line_start":367,"line_end":367,"column_start":5,"column_end":22},"name":"DW_AT_static_link","qualname":"::constants::DW_AT_static_link","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4177},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27702,"byte_end":27712,"line_start":368,"line_end":368,"column_start":5,"column_end":15},"name":"DW_AT_type","qualname":"::constants::DW_AT_type","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4178},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27725,"byte_end":27743,"line_start":369,"line_end":369,"column_start":5,"column_end":23},"name":"DW_AT_use_location","qualname":"::constants::DW_AT_use_location","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4179},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27756,"byte_end":27780,"line_start":370,"line_end":370,"column_start":5,"column_end":29},"name":"DW_AT_variable_parameter","qualname":"::constants::DW_AT_variable_parameter","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4180},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27793,"byte_end":27809,"line_start":371,"line_end":371,"column_start":5,"column_end":21},"name":"DW_AT_virtuality","qualname":"::constants::DW_AT_virtuality","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4181},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27822,"byte_end":27848,"line_start":372,"line_end":372,"column_start":5,"column_end":31},"name":"DW_AT_vtable_elem_location","qualname":"::constants::DW_AT_vtable_elem_location","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4182},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27874,"byte_end":27889,"line_start":375,"line_end":375,"column_start":5,"column_end":20},"name":"DW_AT_allocated","qualname":"::constants::DW_AT_allocated","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4183},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27902,"byte_end":27918,"line_start":376,"line_end":376,"column_start":5,"column_end":21},"name":"DW_AT_associated","qualname":"::constants::DW_AT_associated","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4184},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27931,"byte_end":27950,"line_start":377,"line_end":377,"column_start":5,"column_end":24},"name":"DW_AT_data_location","qualname":"::constants::DW_AT_data_location","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4185},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27963,"byte_end":27980,"line_start":378,"line_end":378,"column_start":5,"column_end":22},"name":"DW_AT_byte_stride","qualname":"::constants::DW_AT_byte_stride","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4186},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":27993,"byte_end":28007,"line_start":379,"line_end":379,"column_start":5,"column_end":19},"name":"DW_AT_entry_pc","qualname":"::constants::DW_AT_entry_pc","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4187},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28020,"byte_end":28034,"line_start":380,"line_end":380,"column_start":5,"column_end":19},"name":"DW_AT_use_UTF8","qualname":"::constants::DW_AT_use_UTF8","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4188},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28047,"byte_end":28062,"line_start":381,"line_end":381,"column_start":5,"column_end":20},"name":"DW_AT_extension","qualname":"::constants::DW_AT_extension","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4189},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28075,"byte_end":28087,"line_start":382,"line_end":382,"column_start":5,"column_end":17},"name":"DW_AT_ranges","qualname":"::constants::DW_AT_ranges","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4190},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28100,"byte_end":28116,"line_start":383,"line_end":383,"column_start":5,"column_end":21},"name":"DW_AT_trampoline","qualname":"::constants::DW_AT_trampoline","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4191},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28129,"byte_end":28146,"line_start":384,"line_end":384,"column_start":5,"column_end":22},"name":"DW_AT_call_column","qualname":"::constants::DW_AT_call_column","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4192},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28159,"byte_end":28174,"line_start":385,"line_end":385,"column_start":5,"column_end":20},"name":"DW_AT_call_file","qualname":"::constants::DW_AT_call_file","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4193},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28187,"byte_end":28202,"line_start":386,"line_end":386,"column_start":5,"column_end":20},"name":"DW_AT_call_line","qualname":"::constants::DW_AT_call_line","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4194},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28215,"byte_end":28232,"line_start":387,"line_end":387,"column_start":5,"column_end":22},"name":"DW_AT_description","qualname":"::constants::DW_AT_description","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4195},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28245,"byte_end":28263,"line_start":388,"line_end":388,"column_start":5,"column_end":23},"name":"DW_AT_binary_scale","qualname":"::constants::DW_AT_binary_scale","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4196},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28276,"byte_end":28295,"line_start":389,"line_end":389,"column_start":5,"column_end":24},"name":"DW_AT_decimal_scale","qualname":"::constants::DW_AT_decimal_scale","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4197},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28308,"byte_end":28319,"line_start":390,"line_end":390,"column_start":5,"column_end":16},"name":"DW_AT_small","qualname":"::constants::DW_AT_small","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4198},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28332,"byte_end":28350,"line_start":391,"line_end":391,"column_start":5,"column_end":23},"name":"DW_AT_decimal_sign","qualname":"::constants::DW_AT_decimal_sign","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4199},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28363,"byte_end":28380,"line_start":392,"line_end":392,"column_start":5,"column_end":22},"name":"DW_AT_digit_count","qualname":"::constants::DW_AT_digit_count","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4200},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28393,"byte_end":28413,"line_start":393,"line_end":393,"column_start":5,"column_end":25},"name":"DW_AT_picture_string","qualname":"::constants::DW_AT_picture_string","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4201},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28426,"byte_end":28439,"line_start":394,"line_end":394,"column_start":5,"column_end":18},"name":"DW_AT_mutable","qualname":"::constants::DW_AT_mutable","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4202},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28452,"byte_end":28472,"line_start":395,"line_end":395,"column_start":5,"column_end":25},"name":"DW_AT_threads_scaled","qualname":"::constants::DW_AT_threads_scaled","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4203},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28485,"byte_end":28499,"line_start":396,"line_end":396,"column_start":5,"column_end":19},"name":"DW_AT_explicit","qualname":"::constants::DW_AT_explicit","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4204},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28512,"byte_end":28532,"line_start":397,"line_end":397,"column_start":5,"column_end":25},"name":"DW_AT_object_pointer","qualname":"::constants::DW_AT_object_pointer","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4205},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28545,"byte_end":28560,"line_start":398,"line_end":398,"column_start":5,"column_end":20},"name":"DW_AT_endianity","qualname":"::constants::DW_AT_endianity","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4206},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28573,"byte_end":28588,"line_start":399,"line_end":399,"column_start":5,"column_end":20},"name":"DW_AT_elemental","qualname":"::constants::DW_AT_elemental","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4207},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28601,"byte_end":28611,"line_start":400,"line_end":400,"column_start":5,"column_end":15},"name":"DW_AT_pure","qualname":"::constants::DW_AT_pure","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4208},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28624,"byte_end":28639,"line_start":401,"line_end":401,"column_start":5,"column_end":20},"name":"DW_AT_recursive","qualname":"::constants::DW_AT_recursive","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4209},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28665,"byte_end":28680,"line_start":404,"line_end":404,"column_start":5,"column_end":20},"name":"DW_AT_signature","qualname":"::constants::DW_AT_signature","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4210},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28693,"byte_end":28714,"line_start":405,"line_end":405,"column_start":5,"column_end":26},"name":"DW_AT_main_subprogram","qualname":"::constants::DW_AT_main_subprogram","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4211},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28727,"byte_end":28748,"line_start":406,"line_end":406,"column_start":5,"column_end":26},"name":"DW_AT_data_bit_offset","qualname":"::constants::DW_AT_data_bit_offset","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4212},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28761,"byte_end":28777,"line_start":407,"line_end":407,"column_start":5,"column_end":21},"name":"DW_AT_const_expr","qualname":"::constants::DW_AT_const_expr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4213},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28790,"byte_end":28806,"line_start":408,"line_end":408,"column_start":5,"column_end":21},"name":"DW_AT_enum_class","qualname":"::constants::DW_AT_enum_class","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4214},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28819,"byte_end":28837,"line_start":409,"line_end":409,"column_start":5,"column_end":23},"name":"DW_AT_linkage_name","qualname":"::constants::DW_AT_linkage_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4215},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28863,"byte_end":28891,"line_start":412,"line_end":412,"column_start":5,"column_end":33},"name":"DW_AT_string_length_bit_size","qualname":"::constants::DW_AT_string_length_bit_size","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4216},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28904,"byte_end":28933,"line_start":413,"line_end":413,"column_start":5,"column_end":34},"name":"DW_AT_string_length_byte_size","qualname":"::constants::DW_AT_string_length_byte_size","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4217},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28946,"byte_end":28956,"line_start":414,"line_end":414,"column_start":5,"column_end":15},"name":"DW_AT_rank","qualname":"::constants::DW_AT_rank","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4218},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":28969,"byte_end":28991,"line_start":415,"line_end":415,"column_start":5,"column_end":27},"name":"DW_AT_str_offsets_base","qualname":"::constants::DW_AT_str_offsets_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4219},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29004,"byte_end":29019,"line_start":416,"line_end":416,"column_start":5,"column_end":20},"name":"DW_AT_addr_base","qualname":"::constants::DW_AT_addr_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4220},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29032,"byte_end":29051,"line_start":417,"line_end":417,"column_start":5,"column_end":24},"name":"DW_AT_rnglists_base","qualname":"::constants::DW_AT_rnglists_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4221},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29064,"byte_end":29078,"line_start":418,"line_end":418,"column_start":5,"column_end":19},"name":"DW_AT_dwo_name","qualname":"::constants::DW_AT_dwo_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4222},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29091,"byte_end":29106,"line_start":419,"line_end":419,"column_start":5,"column_end":20},"name":"DW_AT_reference","qualname":"::constants::DW_AT_reference","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4223},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29119,"byte_end":29141,"line_start":420,"line_end":420,"column_start":5,"column_end":27},"name":"DW_AT_rvalue_reference","qualname":"::constants::DW_AT_rvalue_reference","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4224},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29154,"byte_end":29166,"line_start":421,"line_end":421,"column_start":5,"column_end":17},"name":"DW_AT_macros","qualname":"::constants::DW_AT_macros","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4225},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29179,"byte_end":29199,"line_start":422,"line_end":422,"column_start":5,"column_end":25},"name":"DW_AT_call_all_calls","qualname":"::constants::DW_AT_call_all_calls","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4226},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29212,"byte_end":29239,"line_start":423,"line_end":423,"column_start":5,"column_end":32},"name":"DW_AT_call_all_source_calls","qualname":"::constants::DW_AT_call_all_source_calls","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4227},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29252,"byte_end":29277,"line_start":424,"line_end":424,"column_start":5,"column_end":30},"name":"DW_AT_call_all_tail_calls","qualname":"::constants::DW_AT_call_all_tail_calls","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4228},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29290,"byte_end":29310,"line_start":425,"line_end":425,"column_start":5,"column_end":25},"name":"DW_AT_call_return_pc","qualname":"::constants::DW_AT_call_return_pc","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4229},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29323,"byte_end":29339,"line_start":426,"line_end":426,"column_start":5,"column_end":21},"name":"DW_AT_call_value","qualname":"::constants::DW_AT_call_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4230},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29352,"byte_end":29369,"line_start":427,"line_end":427,"column_start":5,"column_end":22},"name":"DW_AT_call_origin","qualname":"::constants::DW_AT_call_origin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4231},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29382,"byte_end":29402,"line_start":428,"line_end":428,"column_start":5,"column_end":25},"name":"DW_AT_call_parameter","qualname":"::constants::DW_AT_call_parameter","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4232},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29415,"byte_end":29428,"line_start":429,"line_end":429,"column_start":5,"column_end":18},"name":"DW_AT_call_pc","qualname":"::constants::DW_AT_call_pc","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4233},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29441,"byte_end":29461,"line_start":430,"line_end":430,"column_start":5,"column_end":25},"name":"DW_AT_call_tail_call","qualname":"::constants::DW_AT_call_tail_call","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4234},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29474,"byte_end":29491,"line_start":431,"line_end":431,"column_start":5,"column_end":22},"name":"DW_AT_call_target","qualname":"::constants::DW_AT_call_target","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4235},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29504,"byte_end":29531,"line_start":432,"line_end":432,"column_start":5,"column_end":32},"name":"DW_AT_call_target_clobbered","qualname":"::constants::DW_AT_call_target_clobbered","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4236},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29544,"byte_end":29568,"line_start":433,"line_end":433,"column_start":5,"column_end":29},"name":"DW_AT_call_data_location","qualname":"::constants::DW_AT_call_data_location","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4237},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29581,"byte_end":29602,"line_start":434,"line_end":434,"column_start":5,"column_end":26},"name":"DW_AT_call_data_value","qualname":"::constants::DW_AT_call_data_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4238},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29615,"byte_end":29629,"line_start":435,"line_end":435,"column_start":5,"column_end":19},"name":"DW_AT_noreturn","qualname":"::constants::DW_AT_noreturn","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4239},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29642,"byte_end":29657,"line_start":436,"line_end":436,"column_start":5,"column_end":20},"name":"DW_AT_alignment","qualname":"::constants::DW_AT_alignment","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4240},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29670,"byte_end":29690,"line_start":437,"line_end":437,"column_start":5,"column_end":25},"name":"DW_AT_export_symbols","qualname":"::constants::DW_AT_export_symbols","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4241},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29703,"byte_end":29716,"line_start":438,"line_end":438,"column_start":5,"column_end":18},"name":"DW_AT_deleted","qualname":"::constants::DW_AT_deleted","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4242},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29729,"byte_end":29744,"line_start":439,"line_end":439,"column_start":5,"column_end":20},"name":"DW_AT_defaulted","qualname":"::constants::DW_AT_defaulted","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4243},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29757,"byte_end":29776,"line_start":440,"line_end":440,"column_start":5,"column_end":24},"name":"DW_AT_loclists_base","qualname":"::constants::DW_AT_loclists_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4244},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29790,"byte_end":29803,"line_start":442,"line_end":442,"column_start":5,"column_end":18},"name":"DW_AT_lo_user","qualname":"::constants::DW_AT_lo_user","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4245},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29818,"byte_end":29831,"line_start":443,"line_end":443,"column_start":5,"column_end":18},"name":"DW_AT_hi_user","qualname":"::constants::DW_AT_hi_user","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4246},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29871,"byte_end":29885,"line_start":446,"line_end":446,"column_start":5,"column_end":19},"name":"DW_AT_MIPS_fde","qualname":"::constants::DW_AT_MIPS_fde","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4247},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29900,"byte_end":29921,"line_start":447,"line_end":447,"column_start":5,"column_end":26},"name":"DW_AT_MIPS_loop_begin","qualname":"::constants::DW_AT_MIPS_loop_begin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4248},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29936,"byte_end":29962,"line_start":448,"line_end":448,"column_start":5,"column_end":31},"name":"DW_AT_MIPS_tail_loop_begin","qualname":"::constants::DW_AT_MIPS_tail_loop_begin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4249},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":29977,"byte_end":30000,"line_start":449,"line_end":449,"column_start":5,"column_end":28},"name":"DW_AT_MIPS_epilog_begin","qualname":"::constants::DW_AT_MIPS_epilog_begin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4250},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30015,"byte_end":30044,"line_start":450,"line_end":450,"column_start":5,"column_end":34},"name":"DW_AT_MIPS_loop_unroll_factor","qualname":"::constants::DW_AT_MIPS_loop_unroll_factor","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4251},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30059,"byte_end":30093,"line_start":451,"line_end":451,"column_start":5,"column_end":39},"name":"DW_AT_MIPS_software_pipeline_depth","qualname":"::constants::DW_AT_MIPS_software_pipeline_depth","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4252},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30108,"byte_end":30131,"line_start":452,"line_end":452,"column_start":5,"column_end":28},"name":"DW_AT_MIPS_linkage_name","qualname":"::constants::DW_AT_MIPS_linkage_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4253},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30146,"byte_end":30163,"line_start":453,"line_end":453,"column_start":5,"column_end":22},"name":"DW_AT_MIPS_stride","qualname":"::constants::DW_AT_MIPS_stride","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4254},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30178,"byte_end":30202,"line_start":454,"line_end":454,"column_start":5,"column_end":29},"name":"DW_AT_MIPS_abstract_name","qualname":"::constants::DW_AT_MIPS_abstract_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4255},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30217,"byte_end":30240,"line_start":455,"line_end":455,"column_start":5,"column_end":28},"name":"DW_AT_MIPS_clone_origin","qualname":"::constants::DW_AT_MIPS_clone_origin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4256},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30255,"byte_end":30277,"line_start":456,"line_end":456,"column_start":5,"column_end":27},"name":"DW_AT_MIPS_has_inlines","qualname":"::constants::DW_AT_MIPS_has_inlines","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4257},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30292,"byte_end":30314,"line_start":457,"line_end":457,"column_start":5,"column_end":27},"name":"DW_AT_MIPS_stride_byte","qualname":"::constants::DW_AT_MIPS_stride_byte","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4258},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30329,"byte_end":30351,"line_start":458,"line_end":458,"column_start":5,"column_end":27},"name":"DW_AT_MIPS_stride_elem","qualname":"::constants::DW_AT_MIPS_stride_elem","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4259},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30366,"byte_end":30389,"line_start":459,"line_end":459,"column_start":5,"column_end":28},"name":"DW_AT_MIPS_ptr_dopetype","qualname":"::constants::DW_AT_MIPS_ptr_dopetype","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4260},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30404,"byte_end":30435,"line_start":460,"line_end":460,"column_start":5,"column_end":36},"name":"DW_AT_MIPS_allocatable_dopetype","qualname":"::constants::DW_AT_MIPS_allocatable_dopetype","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4261},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30450,"byte_end":30483,"line_start":461,"line_end":461,"column_start":5,"column_end":38},"name":"DW_AT_MIPS_assumed_shape_dopetype","qualname":"::constants::DW_AT_MIPS_assumed_shape_dopetype","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4262},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30614,"byte_end":30637,"line_start":465,"line_end":465,"column_start":5,"column_end":28},"name":"DW_AT_MIPS_assumed_size","qualname":"::constants::DW_AT_MIPS_assumed_size","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4263},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30726,"byte_end":30750,"line_start":470,"line_end":470,"column_start":5,"column_end":29},"name":"DW_AT_INTEL_other_endian","qualname":"::constants::DW_AT_INTEL_other_endian","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4264},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30784,"byte_end":30798,"line_start":473,"line_end":473,"column_start":5,"column_end":19},"name":"DW_AT_sf_names","qualname":"::constants::DW_AT_sf_names","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4265},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30813,"byte_end":30827,"line_start":474,"line_end":474,"column_start":5,"column_end":19},"name":"DW_AT_src_info","qualname":"::constants::DW_AT_src_info","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4266},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30842,"byte_end":30856,"line_start":475,"line_end":475,"column_start":5,"column_end":19},"name":"DW_AT_mac_info","qualname":"::constants::DW_AT_mac_info","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4267},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30871,"byte_end":30887,"line_start":476,"line_end":476,"column_start":5,"column_end":21},"name":"DW_AT_src_coords","qualname":"::constants::DW_AT_src_coords","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4268},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30902,"byte_end":30918,"line_start":477,"line_end":477,"column_start":5,"column_end":21},"name":"DW_AT_body_begin","qualname":"::constants::DW_AT_body_begin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4269},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30933,"byte_end":30947,"line_start":478,"line_end":478,"column_start":5,"column_end":19},"name":"DW_AT_body_end","qualname":"::constants::DW_AT_body_end","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4270},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30962,"byte_end":30978,"line_start":479,"line_end":479,"column_start":5,"column_end":21},"name":"DW_AT_GNU_vector","qualname":"::constants::DW_AT_GNU_vector","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4271},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":30993,"byte_end":31013,"line_start":480,"line_end":480,"column_start":5,"column_end":25},"name":"DW_AT_GNU_guarded_by","qualname":"::constants::DW_AT_GNU_guarded_by","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4272},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31028,"byte_end":31051,"line_start":481,"line_end":481,"column_start":5,"column_end":28},"name":"DW_AT_GNU_pt_guarded_by","qualname":"::constants::DW_AT_GNU_pt_guarded_by","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4273},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31066,"byte_end":31083,"line_start":482,"line_end":482,"column_start":5,"column_end":22},"name":"DW_AT_GNU_guarded","qualname":"::constants::DW_AT_GNU_guarded","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4274},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31098,"byte_end":31118,"line_start":483,"line_end":483,"column_start":5,"column_end":25},"name":"DW_AT_GNU_pt_guarded","qualname":"::constants::DW_AT_GNU_pt_guarded","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4275},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31133,"byte_end":31157,"line_start":484,"line_end":484,"column_start":5,"column_end":29},"name":"DW_AT_GNU_locks_excluded","qualname":"::constants::DW_AT_GNU_locks_excluded","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4276},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31172,"byte_end":31206,"line_start":485,"line_end":485,"column_start":5,"column_end":39},"name":"DW_AT_GNU_exclusive_locks_required","qualname":"::constants::DW_AT_GNU_exclusive_locks_required","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4277},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31221,"byte_end":31252,"line_start":486,"line_end":486,"column_start":5,"column_end":36},"name":"DW_AT_GNU_shared_locks_required","qualname":"::constants::DW_AT_GNU_shared_locks_required","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4278},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31267,"byte_end":31290,"line_start":487,"line_end":487,"column_start":5,"column_end":28},"name":"DW_AT_GNU_odr_signature","qualname":"::constants::DW_AT_GNU_odr_signature","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4279},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31305,"byte_end":31328,"line_start":488,"line_end":488,"column_start":5,"column_end":28},"name":"DW_AT_GNU_template_name","qualname":"::constants::DW_AT_GNU_template_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4280},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31343,"byte_end":31368,"line_start":489,"line_end":489,"column_start":5,"column_end":30},"name":"DW_AT_GNU_call_site_value","qualname":"::constants::DW_AT_GNU_call_site_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4281},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31383,"byte_end":31413,"line_start":490,"line_end":490,"column_start":5,"column_end":35},"name":"DW_AT_GNU_call_site_data_value","qualname":"::constants::DW_AT_GNU_call_site_data_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4282},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31428,"byte_end":31454,"line_start":491,"line_end":491,"column_start":5,"column_end":31},"name":"DW_AT_GNU_call_site_target","qualname":"::constants::DW_AT_GNU_call_site_target","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4283},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31469,"byte_end":31505,"line_start":492,"line_end":492,"column_start":5,"column_end":41},"name":"DW_AT_GNU_call_site_target_clobbered","qualname":"::constants::DW_AT_GNU_call_site_target_clobbered","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4284},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31520,"byte_end":31539,"line_start":493,"line_end":493,"column_start":5,"column_end":24},"name":"DW_AT_GNU_tail_call","qualname":"::constants::DW_AT_GNU_tail_call","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4285},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31554,"byte_end":31583,"line_start":494,"line_end":494,"column_start":5,"column_end":34},"name":"DW_AT_GNU_all_tail_call_sites","qualname":"::constants::DW_AT_GNU_all_tail_call_sites","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4286},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31598,"byte_end":31622,"line_start":495,"line_end":495,"column_start":5,"column_end":29},"name":"DW_AT_GNU_all_call_sites","qualname":"::constants::DW_AT_GNU_all_call_sites","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4287},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31637,"byte_end":31668,"line_start":496,"line_end":496,"column_start":5,"column_end":36},"name":"DW_AT_GNU_all_source_call_sites","qualname":"::constants::DW_AT_GNU_all_source_call_sites","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4288},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31683,"byte_end":31699,"line_start":497,"line_end":497,"column_start":5,"column_end":21},"name":"DW_AT_GNU_macros","qualname":"::constants::DW_AT_GNU_macros","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4289},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31751,"byte_end":31769,"line_start":500,"line_end":500,"column_start":5,"column_end":23},"name":"DW_AT_GNU_dwo_name","qualname":"::constants::DW_AT_GNU_dwo_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4290},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31784,"byte_end":31800,"line_start":501,"line_end":501,"column_start":5,"column_end":21},"name":"DW_AT_GNU_dwo_id","qualname":"::constants::DW_AT_GNU_dwo_id","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4291},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31815,"byte_end":31836,"line_start":502,"line_end":502,"column_start":5,"column_end":26},"name":"DW_AT_GNU_ranges_base","qualname":"::constants::DW_AT_GNU_ranges_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4292},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31851,"byte_end":31870,"line_start":503,"line_end":503,"column_start":5,"column_end":24},"name":"DW_AT_GNU_addr_base","qualname":"::constants::DW_AT_GNU_addr_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4293},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31885,"byte_end":31903,"line_start":504,"line_end":504,"column_start":5,"column_end":23},"name":"DW_AT_GNU_pubnames","qualname":"::constants::DW_AT_GNU_pubnames","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4294},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31918,"byte_end":31936,"line_start":505,"line_end":505,"column_start":5,"column_end":23},"name":"DW_AT_GNU_pubtypes","qualname":"::constants::DW_AT_GNU_pubtypes","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4295},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31951,"byte_end":31974,"line_start":506,"line_end":506,"column_start":5,"column_end":28},"name":"DW_AT_GNU_discriminator","qualname":"::constants::DW_AT_GNU_discriminator","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4296},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":31989,"byte_end":32007,"line_start":507,"line_end":507,"column_start":5,"column_end":23},"name":"DW_AT_GNU_locviews","qualname":"::constants::DW_AT_GNU_locviews","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4297},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32022,"byte_end":32042,"line_start":508,"line_end":508,"column_start":5,"column_end":25},"name":"DW_AT_GNU_entry_view","qualname":"::constants::DW_AT_GNU_entry_view","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4298},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32141,"byte_end":32159,"line_start":514,"line_end":514,"column_start":5,"column_end":23},"name":"DW_AT_SUN_template","qualname":"::constants::DW_AT_SUN_template","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4299},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32174,"byte_end":32193,"line_start":515,"line_end":515,"column_start":5,"column_end":24},"name":"DW_AT_SUN_alignment","qualname":"::constants::DW_AT_SUN_alignment","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4300},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32208,"byte_end":32224,"line_start":516,"line_end":516,"column_start":5,"column_end":21},"name":"DW_AT_SUN_vtable","qualname":"::constants::DW_AT_SUN_vtable","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4301},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32239,"byte_end":32264,"line_start":517,"line_end":517,"column_start":5,"column_end":30},"name":"DW_AT_SUN_count_guarantee","qualname":"::constants::DW_AT_SUN_count_guarantee","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4302},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32279,"byte_end":32301,"line_start":518,"line_end":518,"column_start":5,"column_end":27},"name":"DW_AT_SUN_command_line","qualname":"::constants::DW_AT_SUN_command_line","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4303},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32316,"byte_end":32331,"line_start":519,"line_end":519,"column_start":5,"column_end":20},"name":"DW_AT_SUN_vbase","qualname":"::constants::DW_AT_SUN_vbase","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4304},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32346,"byte_end":32371,"line_start":520,"line_end":520,"column_start":5,"column_end":30},"name":"DW_AT_SUN_compile_options","qualname":"::constants::DW_AT_SUN_compile_options","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4305},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32386,"byte_end":32404,"line_start":521,"line_end":521,"column_start":5,"column_end":23},"name":"DW_AT_SUN_language","qualname":"::constants::DW_AT_SUN_language","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4306},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32419,"byte_end":32441,"line_start":522,"line_end":522,"column_start":5,"column_end":27},"name":"DW_AT_SUN_browser_file","qualname":"::constants::DW_AT_SUN_browser_file","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4307},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32456,"byte_end":32476,"line_start":523,"line_end":523,"column_start":5,"column_end":25},"name":"DW_AT_SUN_vtable_abi","qualname":"::constants::DW_AT_SUN_vtable_abi","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4308},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32491,"byte_end":32513,"line_start":524,"line_end":524,"column_start":5,"column_end":27},"name":"DW_AT_SUN_func_offsets","qualname":"::constants::DW_AT_SUN_func_offsets","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4309},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32528,"byte_end":32545,"line_start":525,"line_end":525,"column_start":5,"column_end":22},"name":"DW_AT_SUN_cf_kind","qualname":"::constants::DW_AT_SUN_cf_kind","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4310},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32560,"byte_end":32582,"line_start":526,"line_end":526,"column_start":5,"column_end":27},"name":"DW_AT_SUN_vtable_index","qualname":"::constants::DW_AT_SUN_vtable_index","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4311},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32597,"byte_end":32621,"line_start":527,"line_end":527,"column_start":5,"column_end":29},"name":"DW_AT_SUN_omp_tpriv_addr","qualname":"::constants::DW_AT_SUN_omp_tpriv_addr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4312},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32636,"byte_end":32660,"line_start":528,"line_end":528,"column_start":5,"column_end":29},"name":"DW_AT_SUN_omp_child_func","qualname":"::constants::DW_AT_SUN_omp_child_func","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4313},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32675,"byte_end":32696,"line_start":529,"line_end":529,"column_start":5,"column_end":26},"name":"DW_AT_SUN_func_offset","qualname":"::constants::DW_AT_SUN_func_offset","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4314},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32711,"byte_end":32735,"line_start":530,"line_end":530,"column_start":5,"column_end":29},"name":"DW_AT_SUN_memop_type_ref","qualname":"::constants::DW_AT_SUN_memop_type_ref","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4315},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32750,"byte_end":32770,"line_start":531,"line_end":531,"column_start":5,"column_end":25},"name":"DW_AT_SUN_profile_id","qualname":"::constants::DW_AT_SUN_profile_id","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4316},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32785,"byte_end":32810,"line_start":532,"line_end":532,"column_start":5,"column_end":30},"name":"DW_AT_SUN_memop_signature","qualname":"::constants::DW_AT_SUN_memop_signature","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4317},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32825,"byte_end":32842,"line_start":533,"line_end":533,"column_start":5,"column_end":22},"name":"DW_AT_SUN_obj_dir","qualname":"::constants::DW_AT_SUN_obj_dir","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4318},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32857,"byte_end":32875,"line_start":534,"line_end":534,"column_start":5,"column_end":23},"name":"DW_AT_SUN_obj_file","qualname":"::constants::DW_AT_SUN_obj_file","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4319},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32890,"byte_end":32913,"line_start":535,"line_end":535,"column_start":5,"column_end":28},"name":"DW_AT_SUN_original_name","qualname":"::constants::DW_AT_SUN_original_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4320},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32928,"byte_end":32955,"line_start":536,"line_end":536,"column_start":5,"column_end":32},"name":"DW_AT_SUN_hwcprof_signature","qualname":"::constants::DW_AT_SUN_hwcprof_signature","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4321},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":32970,"byte_end":32994,"line_start":537,"line_end":537,"column_start":5,"column_end":29},"name":"DW_AT_SUN_amd64_parmdump","qualname":"::constants::DW_AT_SUN_amd64_parmdump","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4322},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33009,"byte_end":33033,"line_start":538,"line_end":538,"column_start":5,"column_end":29},"name":"DW_AT_SUN_part_link_name","qualname":"::constants::DW_AT_SUN_part_link_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4323},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33048,"byte_end":33067,"line_start":539,"line_end":539,"column_start":5,"column_end":24},"name":"DW_AT_SUN_link_name","qualname":"::constants::DW_AT_SUN_link_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4324},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33082,"byte_end":33107,"line_start":540,"line_end":540,"column_start":5,"column_end":30},"name":"DW_AT_SUN_pass_with_const","qualname":"::constants::DW_AT_SUN_pass_with_const","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4325},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33122,"byte_end":33149,"line_start":541,"line_end":541,"column_start":5,"column_end":32},"name":"DW_AT_SUN_return_with_const","qualname":"::constants::DW_AT_SUN_return_with_const","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4326},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33164,"byte_end":33188,"line_start":542,"line_end":542,"column_start":5,"column_end":29},"name":"DW_AT_SUN_import_by_name","qualname":"::constants::DW_AT_SUN_import_by_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4327},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33203,"byte_end":33224,"line_start":543,"line_end":543,"column_start":5,"column_end":26},"name":"DW_AT_SUN_f90_pointer","qualname":"::constants::DW_AT_SUN_f90_pointer","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4328},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33239,"byte_end":33260,"line_start":544,"line_end":544,"column_start":5,"column_end":26},"name":"DW_AT_SUN_pass_by_ref","qualname":"::constants::DW_AT_SUN_pass_by_ref","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4329},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33275,"byte_end":33300,"line_start":545,"line_end":545,"column_start":5,"column_end":30},"name":"DW_AT_SUN_f90_allocatable","qualname":"::constants::DW_AT_SUN_f90_allocatable","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4330},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33315,"byte_end":33348,"line_start":546,"line_end":546,"column_start":5,"column_end":38},"name":"DW_AT_SUN_f90_assumed_shape_array","qualname":"::constants::DW_AT_SUN_f90_assumed_shape_array","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4331},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33363,"byte_end":33378,"line_start":547,"line_end":547,"column_start":5,"column_end":20},"name":"DW_AT_SUN_c_vla","qualname":"::constants::DW_AT_SUN_c_vla","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4332},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33393,"byte_end":33419,"line_start":548,"line_end":548,"column_start":5,"column_end":31},"name":"DW_AT_SUN_return_value_ptr","qualname":"::constants::DW_AT_SUN_return_value_ptr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4333},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33434,"byte_end":33454,"line_start":549,"line_end":549,"column_start":5,"column_end":25},"name":"DW_AT_SUN_dtor_start","qualname":"::constants::DW_AT_SUN_dtor_start","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4334},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33469,"byte_end":33490,"line_start":550,"line_end":550,"column_start":5,"column_end":26},"name":"DW_AT_SUN_dtor_length","qualname":"::constants::DW_AT_SUN_dtor_length","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4335},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33505,"byte_end":33533,"line_start":551,"line_end":551,"column_start":5,"column_end":33},"name":"DW_AT_SUN_dtor_state_initial","qualname":"::constants::DW_AT_SUN_dtor_state_initial","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4336},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33548,"byte_end":33574,"line_start":552,"line_end":552,"column_start":5,"column_end":31},"name":"DW_AT_SUN_dtor_state_final","qualname":"::constants::DW_AT_SUN_dtor_state_final","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4337},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33589,"byte_end":33616,"line_start":553,"line_end":553,"column_start":5,"column_end":32},"name":"DW_AT_SUN_dtor_state_deltas","qualname":"::constants::DW_AT_SUN_dtor_state_deltas","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4338},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33631,"byte_end":33656,"line_start":554,"line_end":554,"column_start":5,"column_end":30},"name":"DW_AT_SUN_import_by_lname","qualname":"::constants::DW_AT_SUN_import_by_lname","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4339},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33671,"byte_end":33693,"line_start":555,"line_end":555,"column_start":5,"column_end":27},"name":"DW_AT_SUN_f90_use_only","qualname":"::constants::DW_AT_SUN_f90_use_only","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4340},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33708,"byte_end":33731,"line_start":556,"line_end":556,"column_start":5,"column_end":28},"name":"DW_AT_SUN_namelist_spec","qualname":"::constants::DW_AT_SUN_namelist_spec","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4341},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33746,"byte_end":33773,"line_start":557,"line_end":557,"column_start":5,"column_end":32},"name":"DW_AT_SUN_is_omp_child_func","qualname":"::constants::DW_AT_SUN_is_omp_child_func","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4342},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33788,"byte_end":33816,"line_start":558,"line_end":558,"column_start":5,"column_end":33},"name":"DW_AT_SUN_fortran_main_alias","qualname":"::constants::DW_AT_SUN_fortran_main_alias","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4343},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33831,"byte_end":33854,"line_start":559,"line_end":559,"column_start":5,"column_end":28},"name":"DW_AT_SUN_fortran_based","qualname":"::constants::DW_AT_SUN_fortran_based","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4344},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33870,"byte_end":33890,"line_start":561,"line_end":561,"column_start":5,"column_end":25},"name":"DW_AT_ALTIUM_loclist","qualname":"::constants::DW_AT_ALTIUM_loclist","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4345},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33906,"byte_end":33937,"line_start":563,"line_end":563,"column_start":5,"column_end":36},"name":"DW_AT_use_GNAT_descriptive_type","qualname":"::constants::DW_AT_use_GNAT_descriptive_type","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4346},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33952,"byte_end":33979,"line_start":564,"line_end":564,"column_start":5,"column_end":32},"name":"DW_AT_GNAT_descriptive_type","qualname":"::constants::DW_AT_GNAT_descriptive_type","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4347},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":33994,"byte_end":34013,"line_start":565,"line_end":565,"column_start":5,"column_end":24},"name":"DW_AT_GNU_numerator","qualname":"::constants::DW_AT_GNU_numerator","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4348},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34028,"byte_end":34049,"line_start":566,"line_end":566,"column_start":5,"column_end":26},"name":"DW_AT_GNU_denominator","qualname":"::constants::DW_AT_GNU_denominator","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4349},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34064,"byte_end":34078,"line_start":567,"line_end":567,"column_start":5,"column_end":19},"name":"DW_AT_GNU_bias","qualname":"::constants::DW_AT_GNU_bias","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4350},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34094,"byte_end":34118,"line_start":569,"line_end":569,"column_start":5,"column_end":29},"name":"DW_AT_upc_threads_scaled","qualname":"::constants::DW_AT_upc_threads_scaled","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4351},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34174,"byte_end":34189,"line_start":572,"line_end":572,"column_start":5,"column_end":20},"name":"DW_AT_PGI_lbase","qualname":"::constants::DW_AT_PGI_lbase","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4352},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34204,"byte_end":34221,"line_start":573,"line_end":573,"column_start":5,"column_end":22},"name":"DW_AT_PGI_soffset","qualname":"::constants::DW_AT_PGI_soffset","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4353},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34236,"byte_end":34253,"line_start":574,"line_end":574,"column_start":5,"column_end":22},"name":"DW_AT_PGI_lstride","qualname":"::constants::DW_AT_PGI_lstride","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4354},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34292,"byte_end":34319,"line_start":577,"line_end":577,"column_start":5,"column_end":32},"name":"DW_AT_BORLAND_property_read","qualname":"::constants::DW_AT_BORLAND_property_read","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4355},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34334,"byte_end":34362,"line_start":578,"line_end":578,"column_start":5,"column_end":33},"name":"DW_AT_BORLAND_property_write","qualname":"::constants::DW_AT_BORLAND_property_write","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4356},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34377,"byte_end":34410,"line_start":579,"line_end":579,"column_start":5,"column_end":38},"name":"DW_AT_BORLAND_property_implements","qualname":"::constants::DW_AT_BORLAND_property_implements","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4357},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34425,"byte_end":34453,"line_start":580,"line_end":580,"column_start":5,"column_end":33},"name":"DW_AT_BORLAND_property_index","qualname":"::constants::DW_AT_BORLAND_property_index","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4358},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34468,"byte_end":34498,"line_start":581,"line_end":581,"column_start":5,"column_end":35},"name":"DW_AT_BORLAND_property_default","qualname":"::constants::DW_AT_BORLAND_property_default","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4359},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34513,"byte_end":34538,"line_start":582,"line_end":582,"column_start":5,"column_end":30},"name":"DW_AT_BORLAND_Delphi_unit","qualname":"::constants::DW_AT_BORLAND_Delphi_unit","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4360},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34553,"byte_end":34579,"line_start":583,"line_end":583,"column_start":5,"column_end":31},"name":"DW_AT_BORLAND_Delphi_class","qualname":"::constants::DW_AT_BORLAND_Delphi_class","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4361},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34594,"byte_end":34621,"line_start":584,"line_end":584,"column_start":5,"column_end":32},"name":"DW_AT_BORLAND_Delphi_record","qualname":"::constants::DW_AT_BORLAND_Delphi_record","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4362},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34636,"byte_end":34666,"line_start":585,"line_end":585,"column_start":5,"column_end":35},"name":"DW_AT_BORLAND_Delphi_metaclass","qualname":"::constants::DW_AT_BORLAND_Delphi_metaclass","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4363},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34681,"byte_end":34713,"line_start":586,"line_end":586,"column_start":5,"column_end":37},"name":"DW_AT_BORLAND_Delphi_constructor","qualname":"::constants::DW_AT_BORLAND_Delphi_constructor","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4364},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34728,"byte_end":34759,"line_start":587,"line_end":587,"column_start":5,"column_end":36},"name":"DW_AT_BORLAND_Delphi_destructor","qualname":"::constants::DW_AT_BORLAND_Delphi_destructor","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4365},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34774,"byte_end":34811,"line_start":588,"line_end":588,"column_start":5,"column_end":42},"name":"DW_AT_BORLAND_Delphi_anonymous_method","qualname":"::constants::DW_AT_BORLAND_Delphi_anonymous_method","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4366},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34826,"byte_end":34856,"line_start":589,"line_end":589,"column_start":5,"column_end":35},"name":"DW_AT_BORLAND_Delphi_interface","qualname":"::constants::DW_AT_BORLAND_Delphi_interface","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4367},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34871,"byte_end":34895,"line_start":590,"line_end":590,"column_start":5,"column_end":29},"name":"DW_AT_BORLAND_Delphi_ABI","qualname":"::constants::DW_AT_BORLAND_Delphi_ABI","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4368},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34910,"byte_end":34937,"line_start":591,"line_end":591,"column_start":5,"column_end":32},"name":"DW_AT_BORLAND_Delphi_return","qualname":"::constants::DW_AT_BORLAND_Delphi_return","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4369},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34952,"byte_end":34981,"line_start":592,"line_end":592,"column_start":5,"column_end":34},"name":"DW_AT_BORLAND_Delphi_frameptr","qualname":"::constants::DW_AT_BORLAND_Delphi_frameptr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4370},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":34996,"byte_end":35017,"line_start":593,"line_end":593,"column_start":5,"column_end":26},"name":"DW_AT_BORLAND_closure","qualname":"::constants::DW_AT_BORLAND_closure","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4371},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35061,"byte_end":35084,"line_start":596,"line_end":596,"column_start":5,"column_end":28},"name":"DW_AT_LLVM_include_path","qualname":"::constants::DW_AT_LLVM_include_path","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4372},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35099,"byte_end":35123,"line_start":597,"line_end":597,"column_start":5,"column_end":29},"name":"DW_AT_LLVM_config_macros","qualname":"::constants::DW_AT_LLVM_config_macros","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4373},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35138,"byte_end":35157,"line_start":598,"line_end":598,"column_start":5,"column_end":24},"name":"DW_AT_LLVM_isysroot","qualname":"::constants::DW_AT_LLVM_isysroot","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4374},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35194,"byte_end":35215,"line_start":601,"line_end":601,"column_start":5,"column_end":26},"name":"DW_AT_APPLE_optimized","qualname":"::constants::DW_AT_APPLE_optimized","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4375},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35230,"byte_end":35247,"line_start":602,"line_end":602,"column_start":5,"column_end":22},"name":"DW_AT_APPLE_flags","qualname":"::constants::DW_AT_APPLE_flags","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4376},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35262,"byte_end":35277,"line_start":603,"line_end":603,"column_start":5,"column_end":20},"name":"DW_AT_APPLE_isa","qualname":"::constants::DW_AT_APPLE_isa","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4377},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35292,"byte_end":35309,"line_start":604,"line_end":604,"column_start":5,"column_end":22},"name":"DW_AT_APPLE_block","qualname":"::constants::DW_AT_APPLE_block","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4378},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35324,"byte_end":35354,"line_start":605,"line_end":605,"column_start":5,"column_end":35},"name":"DW_AT_APPLE_major_runtime_vers","qualname":"::constants::DW_AT_APPLE_major_runtime_vers","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4379},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35369,"byte_end":35394,"line_start":606,"line_end":606,"column_start":5,"column_end":30},"name":"DW_AT_APPLE_runtime_class","qualname":"::constants::DW_AT_APPLE_runtime_class","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4380},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35409,"byte_end":35435,"line_start":607,"line_end":607,"column_start":5,"column_end":31},"name":"DW_AT_APPLE_omit_frame_ptr","qualname":"::constants::DW_AT_APPLE_omit_frame_ptr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4381},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35450,"byte_end":35475,"line_start":608,"line_end":608,"column_start":5,"column_end":30},"name":"DW_AT_APPLE_property_name","qualname":"::constants::DW_AT_APPLE_property_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4382},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35490,"byte_end":35517,"line_start":609,"line_end":609,"column_start":5,"column_end":32},"name":"DW_AT_APPLE_property_getter","qualname":"::constants::DW_AT_APPLE_property_getter","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4383},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35532,"byte_end":35559,"line_start":610,"line_end":610,"column_start":5,"column_end":32},"name":"DW_AT_APPLE_property_setter","qualname":"::constants::DW_AT_APPLE_property_setter","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4384},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35574,"byte_end":35604,"line_start":611,"line_end":611,"column_start":5,"column_end":35},"name":"DW_AT_APPLE_property_attribute","qualname":"::constants::DW_AT_APPLE_property_attribute","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4385},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35619,"byte_end":35649,"line_start":612,"line_end":612,"column_start":5,"column_end":35},"name":"DW_AT_APPLE_objc_complete_type","qualname":"::constants::DW_AT_APPLE_objc_complete_type","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4386},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35664,"byte_end":35684,"line_start":613,"line_end":613,"column_start":5,"column_end":25},"name":"DW_AT_APPLE_property","qualname":"::constants::DW_AT_APPLE_property","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4469},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35795,"byte_end":35801,"line_start":620,"line_end":620,"column_start":1,"column_end":7},"name":"DwForm","qualname":"::constants::DwForm","value":"","parent":null,"children":[],"decl_id":null,"docs":" The attribute form encodings for DIE attributes.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4417},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35813,"byte_end":35825,"line_start":621,"line_end":621,"column_start":5,"column_end":17},"name":"DW_FORM_null","qualname":"::constants::DW_FORM_null","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4418},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35839,"byte_end":35851,"line_start":623,"line_end":623,"column_start":5,"column_end":17},"name":"DW_FORM_addr","qualname":"::constants::DW_FORM_addr","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4419},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35864,"byte_end":35878,"line_start":624,"line_end":624,"column_start":5,"column_end":19},"name":"DW_FORM_block2","qualname":"::constants::DW_FORM_block2","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4420},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35891,"byte_end":35905,"line_start":625,"line_end":625,"column_start":5,"column_end":19},"name":"DW_FORM_block4","qualname":"::constants::DW_FORM_block4","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4421},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35918,"byte_end":35931,"line_start":626,"line_end":626,"column_start":5,"column_end":18},"name":"DW_FORM_data2","qualname":"::constants::DW_FORM_data2","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4422},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35944,"byte_end":35957,"line_start":627,"line_end":627,"column_start":5,"column_end":18},"name":"DW_FORM_data4","qualname":"::constants::DW_FORM_data4","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4423},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35970,"byte_end":35983,"line_start":628,"line_end":628,"column_start":5,"column_end":18},"name":"DW_FORM_data8","qualname":"::constants::DW_FORM_data8","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4424},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":35996,"byte_end":36010,"line_start":629,"line_end":629,"column_start":5,"column_end":19},"name":"DW_FORM_string","qualname":"::constants::DW_FORM_string","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4425},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36023,"byte_end":36036,"line_start":630,"line_end":630,"column_start":5,"column_end":18},"name":"DW_FORM_block","qualname":"::constants::DW_FORM_block","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4426},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36049,"byte_end":36063,"line_start":631,"line_end":631,"column_start":5,"column_end":19},"name":"DW_FORM_block1","qualname":"::constants::DW_FORM_block1","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4427},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36076,"byte_end":36089,"line_start":632,"line_end":632,"column_start":5,"column_end":18},"name":"DW_FORM_data1","qualname":"::constants::DW_FORM_data1","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4428},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36102,"byte_end":36114,"line_start":633,"line_end":633,"column_start":5,"column_end":17},"name":"DW_FORM_flag","qualname":"::constants::DW_FORM_flag","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4429},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36127,"byte_end":36140,"line_start":634,"line_end":634,"column_start":5,"column_end":18},"name":"DW_FORM_sdata","qualname":"::constants::DW_FORM_sdata","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4430},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36153,"byte_end":36165,"line_start":635,"line_end":635,"column_start":5,"column_end":17},"name":"DW_FORM_strp","qualname":"::constants::DW_FORM_strp","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4431},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36178,"byte_end":36191,"line_start":636,"line_end":636,"column_start":5,"column_end":18},"name":"DW_FORM_udata","qualname":"::constants::DW_FORM_udata","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4432},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36204,"byte_end":36220,"line_start":637,"line_end":637,"column_start":5,"column_end":21},"name":"DW_FORM_ref_addr","qualname":"::constants::DW_FORM_ref_addr","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4433},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36233,"byte_end":36245,"line_start":638,"line_end":638,"column_start":5,"column_end":17},"name":"DW_FORM_ref1","qualname":"::constants::DW_FORM_ref1","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4434},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36258,"byte_end":36270,"line_start":639,"line_end":639,"column_start":5,"column_end":17},"name":"DW_FORM_ref2","qualname":"::constants::DW_FORM_ref2","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4435},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36283,"byte_end":36295,"line_start":640,"line_end":640,"column_start":5,"column_end":17},"name":"DW_FORM_ref4","qualname":"::constants::DW_FORM_ref4","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4436},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36308,"byte_end":36320,"line_start":641,"line_end":641,"column_start":5,"column_end":17},"name":"DW_FORM_ref8","qualname":"::constants::DW_FORM_ref8","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4437},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36333,"byte_end":36350,"line_start":642,"line_end":642,"column_start":5,"column_end":22},"name":"DW_FORM_ref_udata","qualname":"::constants::DW_FORM_ref_udata","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4438},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36363,"byte_end":36379,"line_start":643,"line_end":643,"column_start":5,"column_end":21},"name":"DW_FORM_indirect","qualname":"::constants::DW_FORM_indirect","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4439},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36405,"byte_end":36423,"line_start":646,"line_end":646,"column_start":5,"column_end":23},"name":"DW_FORM_sec_offset","qualname":"::constants::DW_FORM_sec_offset","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4440},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36436,"byte_end":36451,"line_start":647,"line_end":647,"column_start":5,"column_end":20},"name":"DW_FORM_exprloc","qualname":"::constants::DW_FORM_exprloc","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4441},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36464,"byte_end":36484,"line_start":648,"line_end":648,"column_start":5,"column_end":25},"name":"DW_FORM_flag_present","qualname":"::constants::DW_FORM_flag_present","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4442},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36497,"byte_end":36513,"line_start":649,"line_end":649,"column_start":5,"column_end":21},"name":"DW_FORM_ref_sig8","qualname":"::constants::DW_FORM_ref_sig8","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4443},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36539,"byte_end":36551,"line_start":652,"line_end":652,"column_start":5,"column_end":17},"name":"DW_FORM_strx","qualname":"::constants::DW_FORM_strx","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4444},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36564,"byte_end":36577,"line_start":653,"line_end":653,"column_start":5,"column_end":18},"name":"DW_FORM_addrx","qualname":"::constants::DW_FORM_addrx","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4445},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36590,"byte_end":36606,"line_start":654,"line_end":654,"column_start":5,"column_end":21},"name":"DW_FORM_ref_sup4","qualname":"::constants::DW_FORM_ref_sup4","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4446},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36619,"byte_end":36635,"line_start":655,"line_end":655,"column_start":5,"column_end":21},"name":"DW_FORM_strp_sup","qualname":"::constants::DW_FORM_strp_sup","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4447},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36648,"byte_end":36662,"line_start":656,"line_end":656,"column_start":5,"column_end":19},"name":"DW_FORM_data16","qualname":"::constants::DW_FORM_data16","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4448},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36675,"byte_end":36692,"line_start":657,"line_end":657,"column_start":5,"column_end":22},"name":"DW_FORM_line_strp","qualname":"::constants::DW_FORM_line_strp","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4449},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36705,"byte_end":36727,"line_start":658,"line_end":658,"column_start":5,"column_end":27},"name":"DW_FORM_implicit_const","qualname":"::constants::DW_FORM_implicit_const","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4450},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36740,"byte_end":36756,"line_start":659,"line_end":659,"column_start":5,"column_end":21},"name":"DW_FORM_loclistx","qualname":"::constants::DW_FORM_loclistx","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4451},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36769,"byte_end":36785,"line_start":660,"line_end":660,"column_start":5,"column_end":21},"name":"DW_FORM_rnglistx","qualname":"::constants::DW_FORM_rnglistx","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4452},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36798,"byte_end":36814,"line_start":661,"line_end":661,"column_start":5,"column_end":21},"name":"DW_FORM_ref_sup8","qualname":"::constants::DW_FORM_ref_sup8","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4453},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36827,"byte_end":36840,"line_start":662,"line_end":662,"column_start":5,"column_end":18},"name":"DW_FORM_strx1","qualname":"::constants::DW_FORM_strx1","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4454},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36853,"byte_end":36866,"line_start":663,"line_end":663,"column_start":5,"column_end":18},"name":"DW_FORM_strx2","qualname":"::constants::DW_FORM_strx2","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4455},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36879,"byte_end":36892,"line_start":664,"line_end":664,"column_start":5,"column_end":18},"name":"DW_FORM_strx3","qualname":"::constants::DW_FORM_strx3","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4456},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36905,"byte_end":36918,"line_start":665,"line_end":665,"column_start":5,"column_end":18},"name":"DW_FORM_strx4","qualname":"::constants::DW_FORM_strx4","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4457},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36931,"byte_end":36945,"line_start":666,"line_end":666,"column_start":5,"column_end":19},"name":"DW_FORM_addrx1","qualname":"::constants::DW_FORM_addrx1","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4458},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36958,"byte_end":36972,"line_start":667,"line_end":667,"column_start":5,"column_end":19},"name":"DW_FORM_addrx2","qualname":"::constants::DW_FORM_addrx2","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4459},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":36985,"byte_end":36999,"line_start":668,"line_end":668,"column_start":5,"column_end":19},"name":"DW_FORM_addrx3","qualname":"::constants::DW_FORM_addrx3","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4460},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37012,"byte_end":37026,"line_start":669,"line_end":669,"column_start":5,"column_end":19},"name":"DW_FORM_addrx4","qualname":"::constants::DW_FORM_addrx4","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4461},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37075,"byte_end":37097,"line_start":672,"line_end":672,"column_start":5,"column_end":27},"name":"DW_FORM_GNU_addr_index","qualname":"::constants::DW_FORM_GNU_addr_index","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4462},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37112,"byte_end":37133,"line_start":673,"line_end":673,"column_start":5,"column_end":26},"name":"DW_FORM_GNU_str_index","qualname":"::constants::DW_FORM_GNU_str_index","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4463},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37210,"byte_end":37229,"line_start":676,"line_end":676,"column_start":5,"column_end":24},"name":"DW_FORM_GNU_ref_alt","qualname":"::constants::DW_FORM_GNU_ref_alt","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4464},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37244,"byte_end":37264,"line_start":677,"line_end":677,"column_start":5,"column_end":25},"name":"DW_FORM_GNU_strp_alt","qualname":"::constants::DW_FORM_GNU_strp_alt","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4519},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37396,"byte_end":37401,"line_start":684,"line_end":684,"column_start":1,"column_end":6},"name":"DwAte","qualname":"::constants::DwAte","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_encoding` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4495},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37412,"byte_end":37426,"line_start":685,"line_end":685,"column_start":5,"column_end":19},"name":"DW_ATE_address","qualname":"::constants::DW_ATE_address","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4496},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37439,"byte_end":37453,"line_start":686,"line_end":686,"column_start":5,"column_end":19},"name":"DW_ATE_boolean","qualname":"::constants::DW_ATE_boolean","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4497},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37466,"byte_end":37486,"line_start":687,"line_end":687,"column_start":5,"column_end":25},"name":"DW_ATE_complex_float","qualname":"::constants::DW_ATE_complex_float","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4498},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37499,"byte_end":37511,"line_start":688,"line_end":688,"column_start":5,"column_end":17},"name":"DW_ATE_float","qualname":"::constants::DW_ATE_float","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4499},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37524,"byte_end":37537,"line_start":689,"line_end":689,"column_start":5,"column_end":18},"name":"DW_ATE_signed","qualname":"::constants::DW_ATE_signed","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4500},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37550,"byte_end":37568,"line_start":690,"line_end":690,"column_start":5,"column_end":23},"name":"DW_ATE_signed_char","qualname":"::constants::DW_ATE_signed_char","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4501},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37581,"byte_end":37596,"line_start":691,"line_end":691,"column_start":5,"column_end":20},"name":"DW_ATE_unsigned","qualname":"::constants::DW_ATE_unsigned","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4502},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37609,"byte_end":37629,"line_start":692,"line_end":692,"column_start":5,"column_end":25},"name":"DW_ATE_unsigned_char","qualname":"::constants::DW_ATE_unsigned_char","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4503},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37655,"byte_end":37677,"line_start":695,"line_end":695,"column_start":5,"column_end":27},"name":"DW_ATE_imaginary_float","qualname":"::constants::DW_ATE_imaginary_float","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4504},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37690,"byte_end":37711,"line_start":696,"line_end":696,"column_start":5,"column_end":26},"name":"DW_ATE_packed_decimal","qualname":"::constants::DW_ATE_packed_decimal","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4505},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37724,"byte_end":37745,"line_start":697,"line_end":697,"column_start":5,"column_end":26},"name":"DW_ATE_numeric_string","qualname":"::constants::DW_ATE_numeric_string","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4506},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37758,"byte_end":37771,"line_start":698,"line_end":698,"column_start":5,"column_end":18},"name":"DW_ATE_edited","qualname":"::constants::DW_ATE_edited","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4507},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37784,"byte_end":37803,"line_start":699,"line_end":699,"column_start":5,"column_end":24},"name":"DW_ATE_signed_fixed","qualname":"::constants::DW_ATE_signed_fixed","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4508},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37816,"byte_end":37837,"line_start":700,"line_end":700,"column_start":5,"column_end":26},"name":"DW_ATE_unsigned_fixed","qualname":"::constants::DW_ATE_unsigned_fixed","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4509},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37850,"byte_end":37870,"line_start":701,"line_end":701,"column_start":5,"column_end":25},"name":"DW_ATE_decimal_float","qualname":"::constants::DW_ATE_decimal_float","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4510},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37897,"byte_end":37907,"line_start":704,"line_end":704,"column_start":5,"column_end":15},"name":"DW_ATE_UTF","qualname":"::constants::DW_ATE_UTF","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4511},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37920,"byte_end":37930,"line_start":705,"line_end":705,"column_start":5,"column_end":15},"name":"DW_ATE_UCS","qualname":"::constants::DW_ATE_UCS","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4512},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37943,"byte_end":37955,"line_start":706,"line_end":706,"column_start":5,"column_end":17},"name":"DW_ATE_ASCII","qualname":"::constants::DW_ATE_ASCII","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4513},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37969,"byte_end":37983,"line_start":708,"line_end":708,"column_start":5,"column_end":19},"name":"DW_ATE_lo_user","qualname":"::constants::DW_ATE_lo_user","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4514},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":37996,"byte_end":38010,"line_start":709,"line_end":709,"column_start":5,"column_end":19},"name":"DW_ATE_hi_user","qualname":"::constants::DW_ATE_hi_user","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4559},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38134,"byte_end":38139,"line_start":716,"line_end":716,"column_start":1,"column_end":6},"name":"DwLle","qualname":"::constants::DwLle","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in location list entries.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4545},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38150,"byte_end":38168,"line_start":717,"line_end":717,"column_start":5,"column_end":23},"name":"DW_LLE_end_of_list","qualname":"::constants::DW_LLE_end_of_list","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4546},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38181,"byte_end":38201,"line_start":718,"line_end":718,"column_start":5,"column_end":25},"name":"DW_LLE_base_addressx","qualname":"::constants::DW_LLE_base_addressx","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4547},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38214,"byte_end":38232,"line_start":719,"line_end":719,"column_start":5,"column_end":23},"name":"DW_LLE_startx_endx","qualname":"::constants::DW_LLE_startx_endx","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4548},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38245,"byte_end":38265,"line_start":720,"line_end":720,"column_start":5,"column_end":25},"name":"DW_LLE_startx_length","qualname":"::constants::DW_LLE_startx_length","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4549},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38278,"byte_end":38296,"line_start":721,"line_end":721,"column_start":5,"column_end":23},"name":"DW_LLE_offset_pair","qualname":"::constants::DW_LLE_offset_pair","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4550},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38309,"byte_end":38332,"line_start":722,"line_end":722,"column_start":5,"column_end":28},"name":"DW_LLE_default_location","qualname":"::constants::DW_LLE_default_location","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4551},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38345,"byte_end":38364,"line_start":723,"line_end":723,"column_start":5,"column_end":24},"name":"DW_LLE_base_address","qualname":"::constants::DW_LLE_base_address","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4552},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38377,"byte_end":38393,"line_start":724,"line_end":724,"column_start":5,"column_end":21},"name":"DW_LLE_start_end","qualname":"::constants::DW_LLE_start_end","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4553},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38406,"byte_end":38425,"line_start":725,"line_end":725,"column_start":5,"column_end":24},"name":"DW_LLE_start_length","qualname":"::constants::DW_LLE_start_length","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4554},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38438,"byte_end":38458,"line_start":726,"line_end":726,"column_start":5,"column_end":25},"name":"DW_LLE_GNU_view_pair","qualname":"::constants::DW_LLE_GNU_view_pair","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4594},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38593,"byte_end":38597,"line_start":733,"line_end":733,"column_start":1,"column_end":5},"name":"DwDs","qualname":"::constants::DwDs","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_decimal_sign` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4585},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38608,"byte_end":38622,"line_start":734,"line_end":734,"column_start":5,"column_end":19},"name":"DW_DS_unsigned","qualname":"::constants::DW_DS_unsigned","value":"DwDs","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4586},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38635,"byte_end":38658,"line_start":735,"line_end":735,"column_start":5,"column_end":28},"name":"DW_DS_leading_overpunch","qualname":"::constants::DW_DS_leading_overpunch","value":"DwDs","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4587},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38671,"byte_end":38695,"line_start":736,"line_end":736,"column_start":5,"column_end":29},"name":"DW_DS_trailing_overpunch","qualname":"::constants::DW_DS_trailing_overpunch","value":"DwDs","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4588},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38708,"byte_end":38730,"line_start":737,"line_end":737,"column_start":5,"column_end":27},"name":"DW_DS_leading_separate","qualname":"::constants::DW_DS_leading_separate","value":"DwDs","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4589},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38743,"byte_end":38766,"line_start":738,"line_end":738,"column_start":5,"column_end":28},"name":"DW_DS_trailing_separate","qualname":"::constants::DW_DS_trailing_separate","value":"DwDs","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4629},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38898,"byte_end":38903,"line_start":745,"line_end":745,"column_start":1,"column_end":6},"name":"DwEnd","qualname":"::constants::DwEnd","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_endianity` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4620},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38914,"byte_end":38928,"line_start":746,"line_end":746,"column_start":5,"column_end":19},"name":"DW_END_default","qualname":"::constants::DW_END_default","value":"DwEnd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4621},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38941,"byte_end":38951,"line_start":747,"line_end":747,"column_start":5,"column_end":15},"name":"DW_END_big","qualname":"::constants::DW_END_big","value":"DwEnd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4622},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38964,"byte_end":38977,"line_start":748,"line_end":748,"column_start":5,"column_end":18},"name":"DW_END_little","qualname":"::constants::DW_END_little","value":"DwEnd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4623},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":38990,"byte_end":39004,"line_start":749,"line_end":749,"column_start":5,"column_end":19},"name":"DW_END_lo_user","qualname":"::constants::DW_END_lo_user","value":"DwEnd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4624},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":39017,"byte_end":39031,"line_start":750,"line_end":750,"column_start":5,"column_end":19},"name":"DW_END_hi_user","qualname":"::constants::DW_END_hi_user","value":"DwEnd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4662},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":39167,"byte_end":39175,"line_start":757,"line_end":757,"column_start":1,"column_end":9},"name":"DwAccess","qualname":"::constants::DwAccess","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_accessibility` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4655},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":39186,"byte_end":39202,"line_start":758,"line_end":758,"column_start":5,"column_end":21},"name":"DW_ACCESS_public","qualname":"::constants::DW_ACCESS_public","value":"DwAccess","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4656},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":39215,"byte_end":39234,"line_start":759,"line_end":759,"column_start":5,"column_end":24},"name":"DW_ACCESS_protected","qualname":"::constants::DW_ACCESS_protected","value":"DwAccess","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4657},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":39247,"byte_end":39264,"line_start":760,"line_end":760,"column_start":5,"column_end":22},"name":"DW_ACCESS_private","qualname":"::constants::DW_ACCESS_private","value":"DwAccess","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4695},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":39398,"byte_end":39403,"line_start":767,"line_end":767,"column_start":1,"column_end":6},"name":"DwVis","qualname":"::constants::DwVis","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_visibility` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4688},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":39414,"byte_end":39426,"line_start":768,"line_end":768,"column_start":5,"column_end":17},"name":"DW_VIS_local","qualname":"::constants::DW_VIS_local","value":"DwVis","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4689},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":39439,"byte_end":39454,"line_start":769,"line_end":769,"column_start":5,"column_end":20},"name":"DW_VIS_exported","qualname":"::constants::DW_VIS_exported","value":"DwVis","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4690},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":39467,"byte_end":39483,"line_start":770,"line_end":770,"column_start":5,"column_end":21},"name":"DW_VIS_qualified","qualname":"::constants::DW_VIS_qualified","value":"DwVis","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4728},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":39617,"byte_end":39629,"line_start":777,"line_end":777,"column_start":1,"column_end":13},"name":"DwVirtuality","qualname":"::constants::DwVirtuality","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_virtuality` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4721},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":39640,"byte_end":39658,"line_start":778,"line_end":778,"column_start":5,"column_end":23},"name":"DW_VIRTUALITY_none","qualname":"::constants::DW_VIRTUALITY_none","value":"DwVirtuality","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4722},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":39671,"byte_end":39692,"line_start":779,"line_end":779,"column_start":5,"column_end":26},"name":"DW_VIRTUALITY_virtual","qualname":"::constants::DW_VIRTUALITY_virtual","value":"DwVirtuality","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4723},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":39705,"byte_end":39731,"line_start":780,"line_end":780,"column_start":5,"column_end":31},"name":"DW_VIRTUALITY_pure_virtual","qualname":"::constants::DW_VIRTUALITY_pure_virtual","value":"DwVirtuality","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4802},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":39863,"byte_end":39869,"line_start":787,"line_end":787,"column_start":1,"column_end":7},"name":"DwLang","qualname":"::constants::DwLang","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_language` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4754},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":39881,"byte_end":39892,"line_start":788,"line_end":788,"column_start":5,"column_end":16},"name":"DW_LANG_C89","qualname":"::constants::DW_LANG_C89","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4755},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":39907,"byte_end":39916,"line_start":789,"line_end":789,"column_start":5,"column_end":14},"name":"DW_LANG_C","qualname":"::constants::DW_LANG_C","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4756},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":39931,"byte_end":39944,"line_start":790,"line_end":790,"column_start":5,"column_end":18},"name":"DW_LANG_Ada83","qualname":"::constants::DW_LANG_Ada83","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4757},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":39959,"byte_end":39978,"line_start":791,"line_end":791,"column_start":5,"column_end":24},"name":"DW_LANG_C_plus_plus","qualname":"::constants::DW_LANG_C_plus_plus","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4758},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":39993,"byte_end":40008,"line_start":792,"line_end":792,"column_start":5,"column_end":20},"name":"DW_LANG_Cobol74","qualname":"::constants::DW_LANG_Cobol74","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4759},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40023,"byte_end":40038,"line_start":793,"line_end":793,"column_start":5,"column_end":20},"name":"DW_LANG_Cobol85","qualname":"::constants::DW_LANG_Cobol85","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4760},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40053,"byte_end":40070,"line_start":794,"line_end":794,"column_start":5,"column_end":22},"name":"DW_LANG_Fortran77","qualname":"::constants::DW_LANG_Fortran77","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4761},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40085,"byte_end":40102,"line_start":795,"line_end":795,"column_start":5,"column_end":22},"name":"DW_LANG_Fortran90","qualname":"::constants::DW_LANG_Fortran90","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4762},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40117,"byte_end":40133,"line_start":796,"line_end":796,"column_start":5,"column_end":21},"name":"DW_LANG_Pascal83","qualname":"::constants::DW_LANG_Pascal83","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4763},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40148,"byte_end":40163,"line_start":797,"line_end":797,"column_start":5,"column_end":20},"name":"DW_LANG_Modula2","qualname":"::constants::DW_LANG_Modula2","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4764},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40178,"byte_end":40190,"line_start":798,"line_end":798,"column_start":5,"column_end":17},"name":"DW_LANG_Java","qualname":"::constants::DW_LANG_Java","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4765},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40205,"byte_end":40216,"line_start":799,"line_end":799,"column_start":5,"column_end":16},"name":"DW_LANG_C99","qualname":"::constants::DW_LANG_C99","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4766},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40231,"byte_end":40244,"line_start":800,"line_end":800,"column_start":5,"column_end":18},"name":"DW_LANG_Ada95","qualname":"::constants::DW_LANG_Ada95","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4767},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40259,"byte_end":40276,"line_start":801,"line_end":801,"column_start":5,"column_end":22},"name":"DW_LANG_Fortran95","qualname":"::constants::DW_LANG_Fortran95","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4768},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40291,"byte_end":40302,"line_start":802,"line_end":802,"column_start":5,"column_end":16},"name":"DW_LANG_PLI","qualname":"::constants::DW_LANG_PLI","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4769},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40317,"byte_end":40329,"line_start":803,"line_end":803,"column_start":5,"column_end":17},"name":"DW_LANG_ObjC","qualname":"::constants::DW_LANG_ObjC","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4770},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40344,"byte_end":40366,"line_start":804,"line_end":804,"column_start":5,"column_end":27},"name":"DW_LANG_ObjC_plus_plus","qualname":"::constants::DW_LANG_ObjC_plus_plus","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4771},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40381,"byte_end":40392,"line_start":805,"line_end":805,"column_start":5,"column_end":16},"name":"DW_LANG_UPC","qualname":"::constants::DW_LANG_UPC","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4772},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40407,"byte_end":40416,"line_start":806,"line_end":806,"column_start":5,"column_end":14},"name":"DW_LANG_D","qualname":"::constants::DW_LANG_D","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4773},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40431,"byte_end":40445,"line_start":807,"line_end":807,"column_start":5,"column_end":19},"name":"DW_LANG_Python","qualname":"::constants::DW_LANG_Python","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4774},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40460,"byte_end":40474,"line_start":808,"line_end":808,"column_start":5,"column_end":19},"name":"DW_LANG_OpenCL","qualname":"::constants::DW_LANG_OpenCL","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4775},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40489,"byte_end":40499,"line_start":809,"line_end":809,"column_start":5,"column_end":15},"name":"DW_LANG_Go","qualname":"::constants::DW_LANG_Go","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4776},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40514,"byte_end":40529,"line_start":810,"line_end":810,"column_start":5,"column_end":20},"name":"DW_LANG_Modula3","qualname":"::constants::DW_LANG_Modula3","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4777},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40544,"byte_end":40559,"line_start":811,"line_end":811,"column_start":5,"column_end":20},"name":"DW_LANG_Haskell","qualname":"::constants::DW_LANG_Haskell","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4778},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40574,"byte_end":40596,"line_start":812,"line_end":812,"column_start":5,"column_end":27},"name":"DW_LANG_C_plus_plus_03","qualname":"::constants::DW_LANG_C_plus_plus_03","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4779},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40611,"byte_end":40633,"line_start":813,"line_end":813,"column_start":5,"column_end":27},"name":"DW_LANG_C_plus_plus_11","qualname":"::constants::DW_LANG_C_plus_plus_11","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4780},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40648,"byte_end":40661,"line_start":814,"line_end":814,"column_start":5,"column_end":18},"name":"DW_LANG_OCaml","qualname":"::constants::DW_LANG_OCaml","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4781},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40676,"byte_end":40688,"line_start":815,"line_end":815,"column_start":5,"column_end":17},"name":"DW_LANG_Rust","qualname":"::constants::DW_LANG_Rust","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4782},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40703,"byte_end":40714,"line_start":816,"line_end":816,"column_start":5,"column_end":16},"name":"DW_LANG_C11","qualname":"::constants::DW_LANG_C11","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4783},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40729,"byte_end":40742,"line_start":817,"line_end":817,"column_start":5,"column_end":18},"name":"DW_LANG_Swift","qualname":"::constants::DW_LANG_Swift","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4784},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40757,"byte_end":40770,"line_start":818,"line_end":818,"column_start":5,"column_end":18},"name":"DW_LANG_Julia","qualname":"::constants::DW_LANG_Julia","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4785},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40785,"byte_end":40798,"line_start":819,"line_end":819,"column_start":5,"column_end":18},"name":"DW_LANG_Dylan","qualname":"::constants::DW_LANG_Dylan","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4786},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40813,"byte_end":40835,"line_start":820,"line_end":820,"column_start":5,"column_end":27},"name":"DW_LANG_C_plus_plus_14","qualname":"::constants::DW_LANG_C_plus_plus_14","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4787},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40850,"byte_end":40867,"line_start":821,"line_end":821,"column_start":5,"column_end":22},"name":"DW_LANG_Fortran03","qualname":"::constants::DW_LANG_Fortran03","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4788},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40882,"byte_end":40899,"line_start":822,"line_end":822,"column_start":5,"column_end":22},"name":"DW_LANG_Fortran08","qualname":"::constants::DW_LANG_Fortran08","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4789},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40914,"byte_end":40934,"line_start":823,"line_end":823,"column_start":5,"column_end":25},"name":"DW_LANG_RenderScript","qualname":"::constants::DW_LANG_RenderScript","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4790},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40949,"byte_end":40962,"line_start":824,"line_end":824,"column_start":5,"column_end":18},"name":"DW_LANG_BLISS","qualname":"::constants::DW_LANG_BLISS","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4791},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":40978,"byte_end":40993,"line_start":826,"line_end":826,"column_start":5,"column_end":20},"name":"DW_LANG_lo_user","qualname":"::constants::DW_LANG_lo_user","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4792},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":41008,"byte_end":41023,"line_start":827,"line_end":827,"column_start":5,"column_end":20},"name":"DW_LANG_hi_user","qualname":"::constants::DW_LANG_hi_user","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4793},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":41039,"byte_end":41061,"line_start":829,"line_end":829,"column_start":5,"column_end":27},"name":"DW_LANG_Mips_Assembler","qualname":"::constants::DW_LANG_Mips_Assembler","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4794},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":41076,"byte_end":41103,"line_start":830,"line_end":830,"column_start":5,"column_end":32},"name":"DW_LANG_GOOGLE_RenderScript","qualname":"::constants::DW_LANG_GOOGLE_RenderScript","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4795},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":41118,"byte_end":41139,"line_start":831,"line_end":831,"column_start":5,"column_end":26},"name":"DW_LANG_SUN_Assembler","qualname":"::constants::DW_LANG_SUN_Assembler","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4796},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":41154,"byte_end":41178,"line_start":832,"line_end":832,"column_start":5,"column_end":29},"name":"DW_LANG_ALTIUM_Assembler","qualname":"::constants::DW_LANG_ALTIUM_Assembler","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4797},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":41193,"byte_end":41215,"line_start":833,"line_end":833,"column_start":5,"column_end":27},"name":"DW_LANG_BORLAND_Delphi","qualname":"::constants::DW_LANG_BORLAND_Delphi","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":41317,"byte_end":41336,"line_start":838,"line_end":838,"column_start":12,"column_end":31},"name":"default_lower_bound","qualname":"<DwLang>::default_lower_bound","value":"pub fn default_lower_bound(Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the default DW_AT_lower_bound for this language.\n","sig":null,"attributes":[{"value":"/ Get the default DW_AT_lower_bound for this language.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":41249,"byte_end":41305,"line_start":837,"line_end":837,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":4833},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":42604,"byte_end":42610,"line_start":877,"line_end":877,"column_start":1,"column_end":7},"name":"DwAddr","qualname":"::constants::DwAddr","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_address_class` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4828},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":42622,"byte_end":42634,"line_start":878,"line_end":878,"column_start":5,"column_end":17},"name":"DW_ADDR_none","qualname":"::constants::DW_ADDR_none","value":"DwAddr","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4867},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":42773,"byte_end":42777,"line_start":885,"line_end":885,"column_start":1,"column_end":5},"name":"DwId","qualname":"::constants::DwId","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_identifier_case` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4859},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":42788,"byte_end":42808,"line_start":886,"line_end":886,"column_start":5,"column_end":25},"name":"DW_ID_case_sensitive","qualname":"::constants::DW_ID_case_sensitive","value":"DwId","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4860},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":42821,"byte_end":42834,"line_start":887,"line_end":887,"column_start":5,"column_end":18},"name":"DW_ID_up_case","qualname":"::constants::DW_ID_up_case","value":"DwId","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4861},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":42847,"byte_end":42862,"line_start":888,"line_end":888,"column_start":5,"column_end":20},"name":"DW_ID_down_case","qualname":"::constants::DW_ID_down_case","value":"DwId","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4862},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":42875,"byte_end":42897,"line_start":889,"line_end":889,"column_start":5,"column_end":27},"name":"DW_ID_case_insensitive","qualname":"::constants::DW_ID_case_insensitive","value":"DwId","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4904},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43039,"byte_end":43043,"line_start":896,"line_end":896,"column_start":1,"column_end":5},"name":"DwCc","qualname":"::constants::DwCc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_calling_convention` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4893},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43054,"byte_end":43066,"line_start":897,"line_end":897,"column_start":5,"column_end":17},"name":"DW_CC_normal","qualname":"::constants::DW_CC_normal","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4894},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43079,"byte_end":43092,"line_start":898,"line_end":898,"column_start":5,"column_end":18},"name":"DW_CC_program","qualname":"::constants::DW_CC_program","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4895},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43105,"byte_end":43117,"line_start":899,"line_end":899,"column_start":5,"column_end":17},"name":"DW_CC_nocall","qualname":"::constants::DW_CC_nocall","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4896},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43130,"byte_end":43153,"line_start":900,"line_end":900,"column_start":5,"column_end":28},"name":"DW_CC_pass_by_reference","qualname":"::constants::DW_CC_pass_by_reference","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4897},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43166,"byte_end":43185,"line_start":901,"line_end":901,"column_start":5,"column_end":24},"name":"DW_CC_pass_by_value","qualname":"::constants::DW_CC_pass_by_value","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4898},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43198,"byte_end":43211,"line_start":902,"line_end":902,"column_start":5,"column_end":18},"name":"DW_CC_lo_user","qualname":"::constants::DW_CC_lo_user","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4899},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43224,"byte_end":43237,"line_start":903,"line_end":903,"column_start":5,"column_end":18},"name":"DW_CC_hi_user","qualname":"::constants::DW_CC_hi_user","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4938},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43367,"byte_end":43372,"line_start":910,"line_end":910,"column_start":1,"column_end":6},"name":"DwInl","qualname":"::constants::DwInl","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_inline` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4930},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43383,"byte_end":43401,"line_start":911,"line_end":911,"column_start":5,"column_end":23},"name":"DW_INL_not_inlined","qualname":"::constants::DW_INL_not_inlined","value":"DwInl","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4931},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43414,"byte_end":43428,"line_start":912,"line_end":912,"column_start":5,"column_end":19},"name":"DW_INL_inlined","qualname":"::constants::DW_INL_inlined","value":"DwInl","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4932},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43441,"byte_end":43468,"line_start":913,"line_end":913,"column_start":5,"column_end":32},"name":"DW_INL_declared_not_inlined","qualname":"::constants::DW_INL_declared_not_inlined","value":"DwInl","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4933},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43481,"byte_end":43504,"line_start":914,"line_end":914,"column_start":5,"column_end":28},"name":"DW_INL_declared_inlined","qualname":"::constants::DW_INL_declared_inlined","value":"DwInl","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4970},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43636,"byte_end":43641,"line_start":921,"line_end":921,"column_start":1,"column_end":6},"name":"DwOrd","qualname":"::constants::DwOrd","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_ordering` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4964},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43652,"byte_end":43668,"line_start":922,"line_end":922,"column_start":5,"column_end":21},"name":"DW_ORD_row_major","qualname":"::constants::DW_ORD_row_major","value":"DwOrd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4965},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43681,"byte_end":43697,"line_start":923,"line_end":923,"column_start":5,"column_end":21},"name":"DW_ORD_col_major","qualname":"::constants::DW_ORD_col_major","value":"DwOrd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5002},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43831,"byte_end":43836,"line_start":930,"line_end":930,"column_start":1,"column_end":6},"name":"DwDsc","qualname":"::constants::DwDsc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_discr_list` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4996},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43847,"byte_end":43859,"line_start":931,"line_end":931,"column_start":5,"column_end":17},"name":"DW_DSC_label","qualname":"::constants::DW_DSC_label","value":"DwDsc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4997},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43872,"byte_end":43884,"line_start":932,"line_end":932,"column_start":5,"column_end":17},"name":"DW_DSC_range","qualname":"::constants::DW_DSC_range","value":"DwDsc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5039},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43977,"byte_end":43982,"line_start":939,"line_end":939,"column_start":1,"column_end":6},"name":"DwIdx","qualname":"::constants::DwIdx","value":"","parent":null,"children":[],"decl_id":null,"docs":" Name index attribute encodings.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5028},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":43994,"byte_end":44013,"line_start":940,"line_end":940,"column_start":5,"column_end":24},"name":"DW_IDX_compile_unit","qualname":"::constants::DW_IDX_compile_unit","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5029},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44023,"byte_end":44039,"line_start":941,"line_end":941,"column_start":5,"column_end":21},"name":"DW_IDX_type_unit","qualname":"::constants::DW_IDX_type_unit","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5030},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44049,"byte_end":44066,"line_start":942,"line_end":942,"column_start":5,"column_end":22},"name":"DW_IDX_die_offset","qualname":"::constants::DW_IDX_die_offset","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5031},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44076,"byte_end":44089,"line_start":943,"line_end":943,"column_start":5,"column_end":18},"name":"DW_IDX_parent","qualname":"::constants::DW_IDX_parent","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5032},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44099,"byte_end":44115,"line_start":944,"line_end":944,"column_start":5,"column_end":21},"name":"DW_IDX_type_hash","qualname":"::constants::DW_IDX_type_hash","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5033},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44125,"byte_end":44139,"line_start":945,"line_end":945,"column_start":5,"column_end":19},"name":"DW_IDX_lo_user","qualname":"::constants::DW_IDX_lo_user","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5034},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44154,"byte_end":44168,"line_start":946,"line_end":946,"column_start":5,"column_end":19},"name":"DW_IDX_hi_user","qualname":"::constants::DW_IDX_hi_user","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5072},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44303,"byte_end":44314,"line_start":953,"line_end":953,"column_start":1,"column_end":12},"name":"DwDefaulted","qualname":"::constants::DwDefaulted","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_defaulted` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5065},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44325,"byte_end":44340,"line_start":954,"line_end":954,"column_start":5,"column_end":20},"name":"DW_DEFAULTED_no","qualname":"::constants::DW_DEFAULTED_no","value":"DwDefaulted","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5066},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44353,"byte_end":44374,"line_start":955,"line_end":955,"column_start":5,"column_end":26},"name":"DW_DEFAULTED_in_class","qualname":"::constants::DW_DEFAULTED_in_class","value":"DwDefaulted","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5067},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44387,"byte_end":44412,"line_start":956,"line_end":956,"column_start":5,"column_end":30},"name":"DW_DEFAULTED_out_of_class","qualname":"::constants::DW_DEFAULTED_out_of_class","value":"DwDefaulted","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5114},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44541,"byte_end":44546,"line_start":963,"line_end":963,"column_start":1,"column_end":6},"name":"DwLns","qualname":"::constants::DwLns","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings for the standard opcodes for line number information.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5098},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44557,"byte_end":44568,"line_start":964,"line_end":964,"column_start":5,"column_end":16},"name":"DW_LNS_copy","qualname":"::constants::DW_LNS_copy","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5099},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44581,"byte_end":44598,"line_start":965,"line_end":965,"column_start":5,"column_end":22},"name":"DW_LNS_advance_pc","qualname":"::constants::DW_LNS_advance_pc","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5100},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44611,"byte_end":44630,"line_start":966,"line_end":966,"column_start":5,"column_end":24},"name":"DW_LNS_advance_line","qualname":"::constants::DW_LNS_advance_line","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5101},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44643,"byte_end":44658,"line_start":967,"line_end":967,"column_start":5,"column_end":20},"name":"DW_LNS_set_file","qualname":"::constants::DW_LNS_set_file","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5102},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44671,"byte_end":44688,"line_start":968,"line_end":968,"column_start":5,"column_end":22},"name":"DW_LNS_set_column","qualname":"::constants::DW_LNS_set_column","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5103},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44701,"byte_end":44719,"line_start":969,"line_end":969,"column_start":5,"column_end":23},"name":"DW_LNS_negate_stmt","qualname":"::constants::DW_LNS_negate_stmt","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5104},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44732,"byte_end":44754,"line_start":970,"line_end":970,"column_start":5,"column_end":27},"name":"DW_LNS_set_basic_block","qualname":"::constants::DW_LNS_set_basic_block","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5105},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44767,"byte_end":44786,"line_start":971,"line_end":971,"column_start":5,"column_end":24},"name":"DW_LNS_const_add_pc","qualname":"::constants::DW_LNS_const_add_pc","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5106},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44799,"byte_end":44822,"line_start":972,"line_end":972,"column_start":5,"column_end":28},"name":"DW_LNS_fixed_advance_pc","qualname":"::constants::DW_LNS_fixed_advance_pc","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5107},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44835,"byte_end":44858,"line_start":973,"line_end":973,"column_start":5,"column_end":28},"name":"DW_LNS_set_prologue_end","qualname":"::constants::DW_LNS_set_prologue_end","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5108},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44871,"byte_end":44896,"line_start":974,"line_end":974,"column_start":5,"column_end":30},"name":"DW_LNS_set_epilogue_begin","qualname":"::constants::DW_LNS_set_epilogue_begin","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5109},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":44909,"byte_end":44923,"line_start":975,"line_end":975,"column_start":5,"column_end":19},"name":"DW_LNS_set_isa","qualname":"::constants::DW_LNS_set_isa","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5150},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45052,"byte_end":45057,"line_start":982,"line_end":982,"column_start":1,"column_end":6},"name":"DwLne","qualname":"::constants::DwLne","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings for the extended opcodes for line number information.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5140},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45068,"byte_end":45087,"line_start":983,"line_end":983,"column_start":5,"column_end":24},"name":"DW_LNE_end_sequence","qualname":"::constants::DW_LNE_end_sequence","value":"DwLne","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5141},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45100,"byte_end":45118,"line_start":984,"line_end":984,"column_start":5,"column_end":23},"name":"DW_LNE_set_address","qualname":"::constants::DW_LNE_set_address","value":"DwLne","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5142},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45131,"byte_end":45149,"line_start":985,"line_end":985,"column_start":5,"column_end":23},"name":"DW_LNE_define_file","qualname":"::constants::DW_LNE_define_file","value":"DwLne","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5143},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45162,"byte_end":45186,"line_start":986,"line_end":986,"column_start":5,"column_end":29},"name":"DW_LNE_set_discriminator","qualname":"::constants::DW_LNE_set_discriminator","value":"DwLne","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5144},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45200,"byte_end":45214,"line_start":988,"line_end":988,"column_start":5,"column_end":19},"name":"DW_LNE_lo_user","qualname":"::constants::DW_LNE_lo_user","value":"DwLne","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5145},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45227,"byte_end":45241,"line_start":989,"line_end":989,"column_start":5,"column_end":19},"name":"DW_LNE_hi_user","qualname":"::constants::DW_LNE_hi_user","value":"DwLne","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5187},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45358,"byte_end":45364,"line_start":996,"line_end":996,"column_start":1,"column_end":7},"name":"DwLnct","qualname":"::constants::DwLnct","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings for the line number header entry formats.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5176},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45376,"byte_end":45388,"line_start":997,"line_end":997,"column_start":5,"column_end":17},"name":"DW_LNCT_path","qualname":"::constants::DW_LNCT_path","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5177},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45400,"byte_end":45423,"line_start":998,"line_end":998,"column_start":5,"column_end":28},"name":"DW_LNCT_directory_index","qualname":"::constants::DW_LNCT_directory_index","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5178},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45435,"byte_end":45452,"line_start":999,"line_end":999,"column_start":5,"column_end":22},"name":"DW_LNCT_timestamp","qualname":"::constants::DW_LNCT_timestamp","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5179},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45464,"byte_end":45476,"line_start":1000,"line_end":1000,"column_start":5,"column_end":17},"name":"DW_LNCT_size","qualname":"::constants::DW_LNCT_size","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5180},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45488,"byte_end":45499,"line_start":1001,"line_end":1001,"column_start":5,"column_end":16},"name":"DW_LNCT_MD5","qualname":"::constants::DW_LNCT_MD5","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5181},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45511,"byte_end":45526,"line_start":1002,"line_end":1002,"column_start":5,"column_end":20},"name":"DW_LNCT_lo_user","qualname":"::constants::DW_LNCT_lo_user","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5182},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45541,"byte_end":45556,"line_start":1003,"line_end":1003,"column_start":5,"column_end":20},"name":"DW_LNCT_hi_user","qualname":"::constants::DW_LNCT_hi_user","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5231},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45668,"byte_end":45675,"line_start":1010,"line_end":1010,"column_start":1,"column_end":8},"name":"DwMacro","qualname":"::constants::DwMacro","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings for macro information entry types.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5213},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45686,"byte_end":45701,"line_start":1011,"line_end":1011,"column_start":5,"column_end":20},"name":"DW_MACRO_define","qualname":"::constants::DW_MACRO_define","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5214},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45714,"byte_end":45728,"line_start":1012,"line_end":1012,"column_start":5,"column_end":19},"name":"DW_MACRO_undef","qualname":"::constants::DW_MACRO_undef","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5215},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45741,"byte_end":45760,"line_start":1013,"line_end":1013,"column_start":5,"column_end":24},"name":"DW_MACRO_start_file","qualname":"::constants::DW_MACRO_start_file","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5216},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45773,"byte_end":45790,"line_start":1014,"line_end":1014,"column_start":5,"column_end":22},"name":"DW_MACRO_end_file","qualname":"::constants::DW_MACRO_end_file","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5217},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45803,"byte_end":45823,"line_start":1015,"line_end":1015,"column_start":5,"column_end":25},"name":"DW_MACRO_define_strp","qualname":"::constants::DW_MACRO_define_strp","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5218},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45836,"byte_end":45855,"line_start":1016,"line_end":1016,"column_start":5,"column_end":24},"name":"DW_MACRO_undef_strp","qualname":"::constants::DW_MACRO_undef_strp","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5219},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45868,"byte_end":45883,"line_start":1017,"line_end":1017,"column_start":5,"column_end":20},"name":"DW_MACRO_import","qualname":"::constants::DW_MACRO_import","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5220},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45896,"byte_end":45915,"line_start":1018,"line_end":1018,"column_start":5,"column_end":24},"name":"DW_MACRO_define_sup","qualname":"::constants::DW_MACRO_define_sup","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5221},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45928,"byte_end":45946,"line_start":1019,"line_end":1019,"column_start":5,"column_end":23},"name":"DW_MACRO_undef_sup","qualname":"::constants::DW_MACRO_undef_sup","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5222},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45959,"byte_end":45978,"line_start":1020,"line_end":1020,"column_start":5,"column_end":24},"name":"DW_MACRO_import_sup","qualname":"::constants::DW_MACRO_import_sup","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5223},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":45991,"byte_end":46011,"line_start":1021,"line_end":1021,"column_start":5,"column_end":25},"name":"DW_MACRO_define_strx","qualname":"::constants::DW_MACRO_define_strx","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5224},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46024,"byte_end":46043,"line_start":1022,"line_end":1022,"column_start":5,"column_end":24},"name":"DW_MACRO_undef_strx","qualname":"::constants::DW_MACRO_undef_strx","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5225},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46056,"byte_end":46072,"line_start":1023,"line_end":1023,"column_start":5,"column_end":21},"name":"DW_MACRO_lo_user","qualname":"::constants::DW_MACRO_lo_user","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5226},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46085,"byte_end":46101,"line_start":1024,"line_end":1024,"column_start":5,"column_end":21},"name":"DW_MACRO_hi_user","qualname":"::constants::DW_MACRO_hi_user","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5269},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46196,"byte_end":46201,"line_start":1031,"line_end":1031,"column_start":1,"column_end":6},"name":"DwRle","qualname":"::constants::DwRle","value":"","parent":null,"children":[],"decl_id":null,"docs":" Range list entry encoding values.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5257},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46212,"byte_end":46230,"line_start":1032,"line_end":1032,"column_start":5,"column_end":23},"name":"DW_RLE_end_of_list","qualname":"::constants::DW_RLE_end_of_list","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5258},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46243,"byte_end":46263,"line_start":1033,"line_end":1033,"column_start":5,"column_end":25},"name":"DW_RLE_base_addressx","qualname":"::constants::DW_RLE_base_addressx","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5259},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46276,"byte_end":46294,"line_start":1034,"line_end":1034,"column_start":5,"column_end":23},"name":"DW_RLE_startx_endx","qualname":"::constants::DW_RLE_startx_endx","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5260},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46307,"byte_end":46327,"line_start":1035,"line_end":1035,"column_start":5,"column_end":25},"name":"DW_RLE_startx_length","qualname":"::constants::DW_RLE_startx_length","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5261},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46340,"byte_end":46358,"line_start":1036,"line_end":1036,"column_start":5,"column_end":23},"name":"DW_RLE_offset_pair","qualname":"::constants::DW_RLE_offset_pair","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5262},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46371,"byte_end":46390,"line_start":1037,"line_end":1037,"column_start":5,"column_end":24},"name":"DW_RLE_base_address","qualname":"::constants::DW_RLE_base_address","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5263},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46403,"byte_end":46419,"line_start":1038,"line_end":1038,"column_start":5,"column_end":21},"name":"DW_RLE_start_end","qualname":"::constants::DW_RLE_start_end","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5264},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46432,"byte_end":46451,"line_start":1039,"line_end":1039,"column_start":5,"column_end":24},"name":"DW_RLE_start_length","qualname":"::constants::DW_RLE_start_length","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5474},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46559,"byte_end":46563,"line_start":1046,"line_end":1046,"column_start":1,"column_end":5},"name":"DwOp","qualname":"::constants::DwOp","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings for DWARF expression operations.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5295},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46574,"byte_end":46584,"line_start":1047,"line_end":1047,"column_start":5,"column_end":15},"name":"DW_OP_addr","qualname":"::constants::DW_OP_addr","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5296},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46597,"byte_end":46608,"line_start":1048,"line_end":1048,"column_start":5,"column_end":16},"name":"DW_OP_deref","qualname":"::constants::DW_OP_deref","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5297},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46621,"byte_end":46634,"line_start":1049,"line_end":1049,"column_start":5,"column_end":18},"name":"DW_OP_const1u","qualname":"::constants::DW_OP_const1u","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5298},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46647,"byte_end":46660,"line_start":1050,"line_end":1050,"column_start":5,"column_end":18},"name":"DW_OP_const1s","qualname":"::constants::DW_OP_const1s","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5299},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46673,"byte_end":46686,"line_start":1051,"line_end":1051,"column_start":5,"column_end":18},"name":"DW_OP_const2u","qualname":"::constants::DW_OP_const2u","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5300},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46699,"byte_end":46712,"line_start":1052,"line_end":1052,"column_start":5,"column_end":18},"name":"DW_OP_const2s","qualname":"::constants::DW_OP_const2s","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5301},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46725,"byte_end":46738,"line_start":1053,"line_end":1053,"column_start":5,"column_end":18},"name":"DW_OP_const4u","qualname":"::constants::DW_OP_const4u","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5302},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46751,"byte_end":46764,"line_start":1054,"line_end":1054,"column_start":5,"column_end":18},"name":"DW_OP_const4s","qualname":"::constants::DW_OP_const4s","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5303},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46777,"byte_end":46790,"line_start":1055,"line_end":1055,"column_start":5,"column_end":18},"name":"DW_OP_const8u","qualname":"::constants::DW_OP_const8u","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5304},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46803,"byte_end":46816,"line_start":1056,"line_end":1056,"column_start":5,"column_end":18},"name":"DW_OP_const8s","qualname":"::constants::DW_OP_const8s","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5305},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46829,"byte_end":46841,"line_start":1057,"line_end":1057,"column_start":5,"column_end":17},"name":"DW_OP_constu","qualname":"::constants::DW_OP_constu","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5306},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46854,"byte_end":46866,"line_start":1058,"line_end":1058,"column_start":5,"column_end":17},"name":"DW_OP_consts","qualname":"::constants::DW_OP_consts","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5307},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46879,"byte_end":46888,"line_start":1059,"line_end":1059,"column_start":5,"column_end":14},"name":"DW_OP_dup","qualname":"::constants::DW_OP_dup","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5308},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46901,"byte_end":46911,"line_start":1060,"line_end":1060,"column_start":5,"column_end":15},"name":"DW_OP_drop","qualname":"::constants::DW_OP_drop","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5309},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46924,"byte_end":46934,"line_start":1061,"line_end":1061,"column_start":5,"column_end":15},"name":"DW_OP_over","qualname":"::constants::DW_OP_over","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5310},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46947,"byte_end":46957,"line_start":1062,"line_end":1062,"column_start":5,"column_end":15},"name":"DW_OP_pick","qualname":"::constants::DW_OP_pick","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5311},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46970,"byte_end":46980,"line_start":1063,"line_end":1063,"column_start":5,"column_end":15},"name":"DW_OP_swap","qualname":"::constants::DW_OP_swap","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5312},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":46993,"byte_end":47002,"line_start":1064,"line_end":1064,"column_start":5,"column_end":14},"name":"DW_OP_rot","qualname":"::constants::DW_OP_rot","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5313},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47015,"byte_end":47027,"line_start":1065,"line_end":1065,"column_start":5,"column_end":17},"name":"DW_OP_xderef","qualname":"::constants::DW_OP_xderef","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5314},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47040,"byte_end":47049,"line_start":1066,"line_end":1066,"column_start":5,"column_end":14},"name":"DW_OP_abs","qualname":"::constants::DW_OP_abs","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5315},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47062,"byte_end":47071,"line_start":1067,"line_end":1067,"column_start":5,"column_end":14},"name":"DW_OP_and","qualname":"::constants::DW_OP_and","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5316},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47084,"byte_end":47093,"line_start":1068,"line_end":1068,"column_start":5,"column_end":14},"name":"DW_OP_div","qualname":"::constants::DW_OP_div","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5317},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47106,"byte_end":47117,"line_start":1069,"line_end":1069,"column_start":5,"column_end":16},"name":"DW_OP_minus","qualname":"::constants::DW_OP_minus","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5318},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47130,"byte_end":47139,"line_start":1070,"line_end":1070,"column_start":5,"column_end":14},"name":"DW_OP_mod","qualname":"::constants::DW_OP_mod","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5319},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47152,"byte_end":47161,"line_start":1071,"line_end":1071,"column_start":5,"column_end":14},"name":"DW_OP_mul","qualname":"::constants::DW_OP_mul","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5320},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47174,"byte_end":47183,"line_start":1072,"line_end":1072,"column_start":5,"column_end":14},"name":"DW_OP_neg","qualname":"::constants::DW_OP_neg","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5321},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47196,"byte_end":47205,"line_start":1073,"line_end":1073,"column_start":5,"column_end":14},"name":"DW_OP_not","qualname":"::constants::DW_OP_not","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5322},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47218,"byte_end":47226,"line_start":1074,"line_end":1074,"column_start":5,"column_end":13},"name":"DW_OP_or","qualname":"::constants::DW_OP_or","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5323},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47239,"byte_end":47249,"line_start":1075,"line_end":1075,"column_start":5,"column_end":15},"name":"DW_OP_plus","qualname":"::constants::DW_OP_plus","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5324},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47262,"byte_end":47279,"line_start":1076,"line_end":1076,"column_start":5,"column_end":22},"name":"DW_OP_plus_uconst","qualname":"::constants::DW_OP_plus_uconst","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5325},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47292,"byte_end":47301,"line_start":1077,"line_end":1077,"column_start":5,"column_end":14},"name":"DW_OP_shl","qualname":"::constants::DW_OP_shl","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5326},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47314,"byte_end":47323,"line_start":1078,"line_end":1078,"column_start":5,"column_end":14},"name":"DW_OP_shr","qualname":"::constants::DW_OP_shr","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5327},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47336,"byte_end":47346,"line_start":1079,"line_end":1079,"column_start":5,"column_end":15},"name":"DW_OP_shra","qualname":"::constants::DW_OP_shra","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5328},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47359,"byte_end":47368,"line_start":1080,"line_end":1080,"column_start":5,"column_end":14},"name":"DW_OP_xor","qualname":"::constants::DW_OP_xor","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5329},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47381,"byte_end":47390,"line_start":1081,"line_end":1081,"column_start":5,"column_end":14},"name":"DW_OP_bra","qualname":"::constants::DW_OP_bra","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5330},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47403,"byte_end":47411,"line_start":1082,"line_end":1082,"column_start":5,"column_end":13},"name":"DW_OP_eq","qualname":"::constants::DW_OP_eq","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5331},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47424,"byte_end":47432,"line_start":1083,"line_end":1083,"column_start":5,"column_end":13},"name":"DW_OP_ge","qualname":"::constants::DW_OP_ge","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5332},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47445,"byte_end":47453,"line_start":1084,"line_end":1084,"column_start":5,"column_end":13},"name":"DW_OP_gt","qualname":"::constants::DW_OP_gt","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5333},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47466,"byte_end":47474,"line_start":1085,"line_end":1085,"column_start":5,"column_end":13},"name":"DW_OP_le","qualname":"::constants::DW_OP_le","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5334},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47487,"byte_end":47495,"line_start":1086,"line_end":1086,"column_start":5,"column_end":13},"name":"DW_OP_lt","qualname":"::constants::DW_OP_lt","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5335},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47508,"byte_end":47516,"line_start":1087,"line_end":1087,"column_start":5,"column_end":13},"name":"DW_OP_ne","qualname":"::constants::DW_OP_ne","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5336},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47529,"byte_end":47539,"line_start":1088,"line_end":1088,"column_start":5,"column_end":15},"name":"DW_OP_skip","qualname":"::constants::DW_OP_skip","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5337},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47552,"byte_end":47562,"line_start":1089,"line_end":1089,"column_start":5,"column_end":15},"name":"DW_OP_lit0","qualname":"::constants::DW_OP_lit0","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5338},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47575,"byte_end":47585,"line_start":1090,"line_end":1090,"column_start":5,"column_end":15},"name":"DW_OP_lit1","qualname":"::constants::DW_OP_lit1","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5339},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47598,"byte_end":47608,"line_start":1091,"line_end":1091,"column_start":5,"column_end":15},"name":"DW_OP_lit2","qualname":"::constants::DW_OP_lit2","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5340},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47621,"byte_end":47631,"line_start":1092,"line_end":1092,"column_start":5,"column_end":15},"name":"DW_OP_lit3","qualname":"::constants::DW_OP_lit3","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5341},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47644,"byte_end":47654,"line_start":1093,"line_end":1093,"column_start":5,"column_end":15},"name":"DW_OP_lit4","qualname":"::constants::DW_OP_lit4","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5342},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47667,"byte_end":47677,"line_start":1094,"line_end":1094,"column_start":5,"column_end":15},"name":"DW_OP_lit5","qualname":"::constants::DW_OP_lit5","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5343},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47690,"byte_end":47700,"line_start":1095,"line_end":1095,"column_start":5,"column_end":15},"name":"DW_OP_lit6","qualname":"::constants::DW_OP_lit6","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5344},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47713,"byte_end":47723,"line_start":1096,"line_end":1096,"column_start":5,"column_end":15},"name":"DW_OP_lit7","qualname":"::constants::DW_OP_lit7","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5345},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47736,"byte_end":47746,"line_start":1097,"line_end":1097,"column_start":5,"column_end":15},"name":"DW_OP_lit8","qualname":"::constants::DW_OP_lit8","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5346},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47759,"byte_end":47769,"line_start":1098,"line_end":1098,"column_start":5,"column_end":15},"name":"DW_OP_lit9","qualname":"::constants::DW_OP_lit9","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5347},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47782,"byte_end":47793,"line_start":1099,"line_end":1099,"column_start":5,"column_end":16},"name":"DW_OP_lit10","qualname":"::constants::DW_OP_lit10","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5348},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47806,"byte_end":47817,"line_start":1100,"line_end":1100,"column_start":5,"column_end":16},"name":"DW_OP_lit11","qualname":"::constants::DW_OP_lit11","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5349},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47830,"byte_end":47841,"line_start":1101,"line_end":1101,"column_start":5,"column_end":16},"name":"DW_OP_lit12","qualname":"::constants::DW_OP_lit12","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5350},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47854,"byte_end":47865,"line_start":1102,"line_end":1102,"column_start":5,"column_end":16},"name":"DW_OP_lit13","qualname":"::constants::DW_OP_lit13","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5351},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47878,"byte_end":47889,"line_start":1103,"line_end":1103,"column_start":5,"column_end":16},"name":"DW_OP_lit14","qualname":"::constants::DW_OP_lit14","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5352},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47902,"byte_end":47913,"line_start":1104,"line_end":1104,"column_start":5,"column_end":16},"name":"DW_OP_lit15","qualname":"::constants::DW_OP_lit15","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5353},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47926,"byte_end":47937,"line_start":1105,"line_end":1105,"column_start":5,"column_end":16},"name":"DW_OP_lit16","qualname":"::constants::DW_OP_lit16","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5354},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47950,"byte_end":47961,"line_start":1106,"line_end":1106,"column_start":5,"column_end":16},"name":"DW_OP_lit17","qualname":"::constants::DW_OP_lit17","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5355},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47974,"byte_end":47985,"line_start":1107,"line_end":1107,"column_start":5,"column_end":16},"name":"DW_OP_lit18","qualname":"::constants::DW_OP_lit18","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5356},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":47998,"byte_end":48009,"line_start":1108,"line_end":1108,"column_start":5,"column_end":16},"name":"DW_OP_lit19","qualname":"::constants::DW_OP_lit19","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5357},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48022,"byte_end":48033,"line_start":1109,"line_end":1109,"column_start":5,"column_end":16},"name":"DW_OP_lit20","qualname":"::constants::DW_OP_lit20","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5358},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48046,"byte_end":48057,"line_start":1110,"line_end":1110,"column_start":5,"column_end":16},"name":"DW_OP_lit21","qualname":"::constants::DW_OP_lit21","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5359},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48070,"byte_end":48081,"line_start":1111,"line_end":1111,"column_start":5,"column_end":16},"name":"DW_OP_lit22","qualname":"::constants::DW_OP_lit22","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5360},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48094,"byte_end":48105,"line_start":1112,"line_end":1112,"column_start":5,"column_end":16},"name":"DW_OP_lit23","qualname":"::constants::DW_OP_lit23","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5361},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48118,"byte_end":48129,"line_start":1113,"line_end":1113,"column_start":5,"column_end":16},"name":"DW_OP_lit24","qualname":"::constants::DW_OP_lit24","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5362},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48142,"byte_end":48153,"line_start":1114,"line_end":1114,"column_start":5,"column_end":16},"name":"DW_OP_lit25","qualname":"::constants::DW_OP_lit25","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5363},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48166,"byte_end":48177,"line_start":1115,"line_end":1115,"column_start":5,"column_end":16},"name":"DW_OP_lit26","qualname":"::constants::DW_OP_lit26","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5364},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48190,"byte_end":48201,"line_start":1116,"line_end":1116,"column_start":5,"column_end":16},"name":"DW_OP_lit27","qualname":"::constants::DW_OP_lit27","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5365},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48214,"byte_end":48225,"line_start":1117,"line_end":1117,"column_start":5,"column_end":16},"name":"DW_OP_lit28","qualname":"::constants::DW_OP_lit28","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5366},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48238,"byte_end":48249,"line_start":1118,"line_end":1118,"column_start":5,"column_end":16},"name":"DW_OP_lit29","qualname":"::constants::DW_OP_lit29","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5367},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48262,"byte_end":48273,"line_start":1119,"line_end":1119,"column_start":5,"column_end":16},"name":"DW_OP_lit30","qualname":"::constants::DW_OP_lit30","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5368},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48286,"byte_end":48297,"line_start":1120,"line_end":1120,"column_start":5,"column_end":16},"name":"DW_OP_lit31","qualname":"::constants::DW_OP_lit31","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5369},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48310,"byte_end":48320,"line_start":1121,"line_end":1121,"column_start":5,"column_end":15},"name":"DW_OP_reg0","qualname":"::constants::DW_OP_reg0","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5370},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48333,"byte_end":48343,"line_start":1122,"line_end":1122,"column_start":5,"column_end":15},"name":"DW_OP_reg1","qualname":"::constants::DW_OP_reg1","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5371},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48356,"byte_end":48366,"line_start":1123,"line_end":1123,"column_start":5,"column_end":15},"name":"DW_OP_reg2","qualname":"::constants::DW_OP_reg2","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5372},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48379,"byte_end":48389,"line_start":1124,"line_end":1124,"column_start":5,"column_end":15},"name":"DW_OP_reg3","qualname":"::constants::DW_OP_reg3","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5373},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48402,"byte_end":48412,"line_start":1125,"line_end":1125,"column_start":5,"column_end":15},"name":"DW_OP_reg4","qualname":"::constants::DW_OP_reg4","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5374},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48425,"byte_end":48435,"line_start":1126,"line_end":1126,"column_start":5,"column_end":15},"name":"DW_OP_reg5","qualname":"::constants::DW_OP_reg5","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5375},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48448,"byte_end":48458,"line_start":1127,"line_end":1127,"column_start":5,"column_end":15},"name":"DW_OP_reg6","qualname":"::constants::DW_OP_reg6","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5376},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48471,"byte_end":48481,"line_start":1128,"line_end":1128,"column_start":5,"column_end":15},"name":"DW_OP_reg7","qualname":"::constants::DW_OP_reg7","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5377},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48494,"byte_end":48504,"line_start":1129,"line_end":1129,"column_start":5,"column_end":15},"name":"DW_OP_reg8","qualname":"::constants::DW_OP_reg8","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5378},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48517,"byte_end":48527,"line_start":1130,"line_end":1130,"column_start":5,"column_end":15},"name":"DW_OP_reg9","qualname":"::constants::DW_OP_reg9","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5379},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48540,"byte_end":48551,"line_start":1131,"line_end":1131,"column_start":5,"column_end":16},"name":"DW_OP_reg10","qualname":"::constants::DW_OP_reg10","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5380},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48564,"byte_end":48575,"line_start":1132,"line_end":1132,"column_start":5,"column_end":16},"name":"DW_OP_reg11","qualname":"::constants::DW_OP_reg11","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5381},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48588,"byte_end":48599,"line_start":1133,"line_end":1133,"column_start":5,"column_end":16},"name":"DW_OP_reg12","qualname":"::constants::DW_OP_reg12","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5382},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48612,"byte_end":48623,"line_start":1134,"line_end":1134,"column_start":5,"column_end":16},"name":"DW_OP_reg13","qualname":"::constants::DW_OP_reg13","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5383},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48636,"byte_end":48647,"line_start":1135,"line_end":1135,"column_start":5,"column_end":16},"name":"DW_OP_reg14","qualname":"::constants::DW_OP_reg14","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5384},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48660,"byte_end":48671,"line_start":1136,"line_end":1136,"column_start":5,"column_end":16},"name":"DW_OP_reg15","qualname":"::constants::DW_OP_reg15","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5385},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48684,"byte_end":48695,"line_start":1137,"line_end":1137,"column_start":5,"column_end":16},"name":"DW_OP_reg16","qualname":"::constants::DW_OP_reg16","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5386},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48708,"byte_end":48719,"line_start":1138,"line_end":1138,"column_start":5,"column_end":16},"name":"DW_OP_reg17","qualname":"::constants::DW_OP_reg17","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5387},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48732,"byte_end":48743,"line_start":1139,"line_end":1139,"column_start":5,"column_end":16},"name":"DW_OP_reg18","qualname":"::constants::DW_OP_reg18","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5388},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48756,"byte_end":48767,"line_start":1140,"line_end":1140,"column_start":5,"column_end":16},"name":"DW_OP_reg19","qualname":"::constants::DW_OP_reg19","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5389},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48780,"byte_end":48791,"line_start":1141,"line_end":1141,"column_start":5,"column_end":16},"name":"DW_OP_reg20","qualname":"::constants::DW_OP_reg20","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5390},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48804,"byte_end":48815,"line_start":1142,"line_end":1142,"column_start":5,"column_end":16},"name":"DW_OP_reg21","qualname":"::constants::DW_OP_reg21","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5391},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48828,"byte_end":48839,"line_start":1143,"line_end":1143,"column_start":5,"column_end":16},"name":"DW_OP_reg22","qualname":"::constants::DW_OP_reg22","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5392},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48852,"byte_end":48863,"line_start":1144,"line_end":1144,"column_start":5,"column_end":16},"name":"DW_OP_reg23","qualname":"::constants::DW_OP_reg23","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5393},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48876,"byte_end":48887,"line_start":1145,"line_end":1145,"column_start":5,"column_end":16},"name":"DW_OP_reg24","qualname":"::constants::DW_OP_reg24","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5394},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48900,"byte_end":48911,"line_start":1146,"line_end":1146,"column_start":5,"column_end":16},"name":"DW_OP_reg25","qualname":"::constants::DW_OP_reg25","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5395},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48924,"byte_end":48935,"line_start":1147,"line_end":1147,"column_start":5,"column_end":16},"name":"DW_OP_reg26","qualname":"::constants::DW_OP_reg26","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5396},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48948,"byte_end":48959,"line_start":1148,"line_end":1148,"column_start":5,"column_end":16},"name":"DW_OP_reg27","qualname":"::constants::DW_OP_reg27","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5397},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48972,"byte_end":48983,"line_start":1149,"line_end":1149,"column_start":5,"column_end":16},"name":"DW_OP_reg28","qualname":"::constants::DW_OP_reg28","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5398},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":48996,"byte_end":49007,"line_start":1150,"line_end":1150,"column_start":5,"column_end":16},"name":"DW_OP_reg29","qualname":"::constants::DW_OP_reg29","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5399},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49020,"byte_end":49031,"line_start":1151,"line_end":1151,"column_start":5,"column_end":16},"name":"DW_OP_reg30","qualname":"::constants::DW_OP_reg30","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5400},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49044,"byte_end":49055,"line_start":1152,"line_end":1152,"column_start":5,"column_end":16},"name":"DW_OP_reg31","qualname":"::constants::DW_OP_reg31","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5401},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49068,"byte_end":49079,"line_start":1153,"line_end":1153,"column_start":5,"column_end":16},"name":"DW_OP_breg0","qualname":"::constants::DW_OP_breg0","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5402},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49092,"byte_end":49103,"line_start":1154,"line_end":1154,"column_start":5,"column_end":16},"name":"DW_OP_breg1","qualname":"::constants::DW_OP_breg1","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5403},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49116,"byte_end":49127,"line_start":1155,"line_end":1155,"column_start":5,"column_end":16},"name":"DW_OP_breg2","qualname":"::constants::DW_OP_breg2","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5404},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49140,"byte_end":49151,"line_start":1156,"line_end":1156,"column_start":5,"column_end":16},"name":"DW_OP_breg3","qualname":"::constants::DW_OP_breg3","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5405},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49164,"byte_end":49175,"line_start":1157,"line_end":1157,"column_start":5,"column_end":16},"name":"DW_OP_breg4","qualname":"::constants::DW_OP_breg4","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5406},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49188,"byte_end":49199,"line_start":1158,"line_end":1158,"column_start":5,"column_end":16},"name":"DW_OP_breg5","qualname":"::constants::DW_OP_breg5","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5407},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49212,"byte_end":49223,"line_start":1159,"line_end":1159,"column_start":5,"column_end":16},"name":"DW_OP_breg6","qualname":"::constants::DW_OP_breg6","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5408},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49236,"byte_end":49247,"line_start":1160,"line_end":1160,"column_start":5,"column_end":16},"name":"DW_OP_breg7","qualname":"::constants::DW_OP_breg7","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5409},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49260,"byte_end":49271,"line_start":1161,"line_end":1161,"column_start":5,"column_end":16},"name":"DW_OP_breg8","qualname":"::constants::DW_OP_breg8","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5410},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49284,"byte_end":49295,"line_start":1162,"line_end":1162,"column_start":5,"column_end":16},"name":"DW_OP_breg9","qualname":"::constants::DW_OP_breg9","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5411},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49308,"byte_end":49320,"line_start":1163,"line_end":1163,"column_start":5,"column_end":17},"name":"DW_OP_breg10","qualname":"::constants::DW_OP_breg10","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5412},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49333,"byte_end":49345,"line_start":1164,"line_end":1164,"column_start":5,"column_end":17},"name":"DW_OP_breg11","qualname":"::constants::DW_OP_breg11","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5413},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49358,"byte_end":49370,"line_start":1165,"line_end":1165,"column_start":5,"column_end":17},"name":"DW_OP_breg12","qualname":"::constants::DW_OP_breg12","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5414},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49383,"byte_end":49395,"line_start":1166,"line_end":1166,"column_start":5,"column_end":17},"name":"DW_OP_breg13","qualname":"::constants::DW_OP_breg13","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5415},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49408,"byte_end":49420,"line_start":1167,"line_end":1167,"column_start":5,"column_end":17},"name":"DW_OP_breg14","qualname":"::constants::DW_OP_breg14","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5416},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49433,"byte_end":49445,"line_start":1168,"line_end":1168,"column_start":5,"column_end":17},"name":"DW_OP_breg15","qualname":"::constants::DW_OP_breg15","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5417},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49458,"byte_end":49470,"line_start":1169,"line_end":1169,"column_start":5,"column_end":17},"name":"DW_OP_breg16","qualname":"::constants::DW_OP_breg16","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5418},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49483,"byte_end":49495,"line_start":1170,"line_end":1170,"column_start":5,"column_end":17},"name":"DW_OP_breg17","qualname":"::constants::DW_OP_breg17","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5419},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49508,"byte_end":49520,"line_start":1171,"line_end":1171,"column_start":5,"column_end":17},"name":"DW_OP_breg18","qualname":"::constants::DW_OP_breg18","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5420},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49533,"byte_end":49545,"line_start":1172,"line_end":1172,"column_start":5,"column_end":17},"name":"DW_OP_breg19","qualname":"::constants::DW_OP_breg19","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5421},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49558,"byte_end":49570,"line_start":1173,"line_end":1173,"column_start":5,"column_end":17},"name":"DW_OP_breg20","qualname":"::constants::DW_OP_breg20","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5422},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49583,"byte_end":49595,"line_start":1174,"line_end":1174,"column_start":5,"column_end":17},"name":"DW_OP_breg21","qualname":"::constants::DW_OP_breg21","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5423},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49608,"byte_end":49620,"line_start":1175,"line_end":1175,"column_start":5,"column_end":17},"name":"DW_OP_breg22","qualname":"::constants::DW_OP_breg22","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5424},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49633,"byte_end":49645,"line_start":1176,"line_end":1176,"column_start":5,"column_end":17},"name":"DW_OP_breg23","qualname":"::constants::DW_OP_breg23","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5425},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49658,"byte_end":49670,"line_start":1177,"line_end":1177,"column_start":5,"column_end":17},"name":"DW_OP_breg24","qualname":"::constants::DW_OP_breg24","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5426},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49683,"byte_end":49695,"line_start":1178,"line_end":1178,"column_start":5,"column_end":17},"name":"DW_OP_breg25","qualname":"::constants::DW_OP_breg25","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5427},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49708,"byte_end":49720,"line_start":1179,"line_end":1179,"column_start":5,"column_end":17},"name":"DW_OP_breg26","qualname":"::constants::DW_OP_breg26","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5428},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49733,"byte_end":49745,"line_start":1180,"line_end":1180,"column_start":5,"column_end":17},"name":"DW_OP_breg27","qualname":"::constants::DW_OP_breg27","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5429},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49758,"byte_end":49770,"line_start":1181,"line_end":1181,"column_start":5,"column_end":17},"name":"DW_OP_breg28","qualname":"::constants::DW_OP_breg28","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5430},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49783,"byte_end":49795,"line_start":1182,"line_end":1182,"column_start":5,"column_end":17},"name":"DW_OP_breg29","qualname":"::constants::DW_OP_breg29","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5431},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49808,"byte_end":49820,"line_start":1183,"line_end":1183,"column_start":5,"column_end":17},"name":"DW_OP_breg30","qualname":"::constants::DW_OP_breg30","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5432},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49833,"byte_end":49845,"line_start":1184,"line_end":1184,"column_start":5,"column_end":17},"name":"DW_OP_breg31","qualname":"::constants::DW_OP_breg31","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5433},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49858,"byte_end":49868,"line_start":1185,"line_end":1185,"column_start":5,"column_end":15},"name":"DW_OP_regx","qualname":"::constants::DW_OP_regx","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5434},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49881,"byte_end":49892,"line_start":1186,"line_end":1186,"column_start":5,"column_end":16},"name":"DW_OP_fbreg","qualname":"::constants::DW_OP_fbreg","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5435},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49905,"byte_end":49916,"line_start":1187,"line_end":1187,"column_start":5,"column_end":16},"name":"DW_OP_bregx","qualname":"::constants::DW_OP_bregx","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5436},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49929,"byte_end":49940,"line_start":1188,"line_end":1188,"column_start":5,"column_end":16},"name":"DW_OP_piece","qualname":"::constants::DW_OP_piece","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5437},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49953,"byte_end":49969,"line_start":1189,"line_end":1189,"column_start":5,"column_end":21},"name":"DW_OP_deref_size","qualname":"::constants::DW_OP_deref_size","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5438},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":49982,"byte_end":49999,"line_start":1190,"line_end":1190,"column_start":5,"column_end":22},"name":"DW_OP_xderef_size","qualname":"::constants::DW_OP_xderef_size","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5439},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50012,"byte_end":50021,"line_start":1191,"line_end":1191,"column_start":5,"column_end":14},"name":"DW_OP_nop","qualname":"::constants::DW_OP_nop","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5440},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50034,"byte_end":50059,"line_start":1192,"line_end":1192,"column_start":5,"column_end":30},"name":"DW_OP_push_object_address","qualname":"::constants::DW_OP_push_object_address","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5441},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50072,"byte_end":50083,"line_start":1193,"line_end":1193,"column_start":5,"column_end":16},"name":"DW_OP_call2","qualname":"::constants::DW_OP_call2","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5442},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50096,"byte_end":50107,"line_start":1194,"line_end":1194,"column_start":5,"column_end":16},"name":"DW_OP_call4","qualname":"::constants::DW_OP_call4","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5443},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50120,"byte_end":50134,"line_start":1195,"line_end":1195,"column_start":5,"column_end":19},"name":"DW_OP_call_ref","qualname":"::constants::DW_OP_call_ref","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5444},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50147,"byte_end":50169,"line_start":1196,"line_end":1196,"column_start":5,"column_end":27},"name":"DW_OP_form_tls_address","qualname":"::constants::DW_OP_form_tls_address","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5445},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50182,"byte_end":50202,"line_start":1197,"line_end":1197,"column_start":5,"column_end":25},"name":"DW_OP_call_frame_cfa","qualname":"::constants::DW_OP_call_frame_cfa","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5446},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50215,"byte_end":50230,"line_start":1198,"line_end":1198,"column_start":5,"column_end":20},"name":"DW_OP_bit_piece","qualname":"::constants::DW_OP_bit_piece","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5447},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50243,"byte_end":50263,"line_start":1199,"line_end":1199,"column_start":5,"column_end":25},"name":"DW_OP_implicit_value","qualname":"::constants::DW_OP_implicit_value","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5448},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50276,"byte_end":50293,"line_start":1200,"line_end":1200,"column_start":5,"column_end":22},"name":"DW_OP_stack_value","qualname":"::constants::DW_OP_stack_value","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5449},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50306,"byte_end":50328,"line_start":1201,"line_end":1201,"column_start":5,"column_end":27},"name":"DW_OP_implicit_pointer","qualname":"::constants::DW_OP_implicit_pointer","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5450},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50341,"byte_end":50352,"line_start":1202,"line_end":1202,"column_start":5,"column_end":16},"name":"DW_OP_addrx","qualname":"::constants::DW_OP_addrx","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5451},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50365,"byte_end":50377,"line_start":1203,"line_end":1203,"column_start":5,"column_end":17},"name":"DW_OP_constx","qualname":"::constants::DW_OP_constx","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5452},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50390,"byte_end":50407,"line_start":1204,"line_end":1204,"column_start":5,"column_end":22},"name":"DW_OP_entry_value","qualname":"::constants::DW_OP_entry_value","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5453},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50420,"byte_end":50436,"line_start":1205,"line_end":1205,"column_start":5,"column_end":21},"name":"DW_OP_const_type","qualname":"::constants::DW_OP_const_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5454},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50449,"byte_end":50466,"line_start":1206,"line_end":1206,"column_start":5,"column_end":22},"name":"DW_OP_regval_type","qualname":"::constants::DW_OP_regval_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5455},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50479,"byte_end":50495,"line_start":1207,"line_end":1207,"column_start":5,"column_end":21},"name":"DW_OP_deref_type","qualname":"::constants::DW_OP_deref_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5456},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50508,"byte_end":50525,"line_start":1208,"line_end":1208,"column_start":5,"column_end":22},"name":"DW_OP_xderef_type","qualname":"::constants::DW_OP_xderef_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5457},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50538,"byte_end":50551,"line_start":1209,"line_end":1209,"column_start":5,"column_end":18},"name":"DW_OP_convert","qualname":"::constants::DW_OP_convert","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5458},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50564,"byte_end":50581,"line_start":1210,"line_end":1210,"column_start":5,"column_end":22},"name":"DW_OP_reinterpret","qualname":"::constants::DW_OP_reinterpret","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5459},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50613,"byte_end":50639,"line_start":1213,"line_end":1213,"column_start":5,"column_end":31},"name":"DW_OP_GNU_push_tls_address","qualname":"::constants::DW_OP_GNU_push_tls_address","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5460},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50652,"byte_end":50678,"line_start":1214,"line_end":1214,"column_start":5,"column_end":31},"name":"DW_OP_GNU_implicit_pointer","qualname":"::constants::DW_OP_GNU_implicit_pointer","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5461},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50691,"byte_end":50712,"line_start":1215,"line_end":1215,"column_start":5,"column_end":26},"name":"DW_OP_GNU_entry_value","qualname":"::constants::DW_OP_GNU_entry_value","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5462},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50725,"byte_end":50745,"line_start":1216,"line_end":1216,"column_start":5,"column_end":25},"name":"DW_OP_GNU_const_type","qualname":"::constants::DW_OP_GNU_const_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5463},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50758,"byte_end":50779,"line_start":1217,"line_end":1217,"column_start":5,"column_end":26},"name":"DW_OP_GNU_regval_type","qualname":"::constants::DW_OP_GNU_regval_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5464},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50792,"byte_end":50812,"line_start":1218,"line_end":1218,"column_start":5,"column_end":25},"name":"DW_OP_GNU_deref_type","qualname":"::constants::DW_OP_GNU_deref_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5465},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50825,"byte_end":50842,"line_start":1219,"line_end":1219,"column_start":5,"column_end":22},"name":"DW_OP_GNU_convert","qualname":"::constants::DW_OP_GNU_convert","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5466},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50855,"byte_end":50876,"line_start":1220,"line_end":1220,"column_start":5,"column_end":26},"name":"DW_OP_GNU_reinterpret","qualname":"::constants::DW_OP_GNU_reinterpret","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5467},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50889,"byte_end":50912,"line_start":1221,"line_end":1221,"column_start":5,"column_end":28},"name":"DW_OP_GNU_parameter_ref","qualname":"::constants::DW_OP_GNU_parameter_ref","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5468},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50925,"byte_end":50945,"line_start":1222,"line_end":1222,"column_start":5,"column_end":25},"name":"DW_OP_GNU_addr_index","qualname":"::constants::DW_OP_GNU_addr_index","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5469},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":50958,"byte_end":50979,"line_start":1223,"line_end":1223,"column_start":5,"column_end":26},"name":"DW_OP_GNU_const_index","qualname":"::constants::DW_OP_GNU_const_index","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5520},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":51291,"byte_end":51297,"line_start":1234,"line_end":1234,"column_start":1,"column_end":7},"name":"DwEhPe","qualname":"::constants::DwEhPe","value":"","parent":null,"children":[],"decl_id":null,"docs":" Pointer encoding used by `.eh_frame`.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5500},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":51404,"byte_end":51420,"line_start":1238,"line_end":1238,"column_start":5,"column_end":21},"name":"DW_EH_PE_uleb128","qualname":"::constants::DW_EH_PE_uleb128","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5501},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":51463,"byte_end":51478,"line_start":1240,"line_end":1240,"column_start":5,"column_end":20},"name":"DW_EH_PE_udata2","qualname":"::constants::DW_EH_PE_udata2","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5502},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":51521,"byte_end":51536,"line_start":1242,"line_end":1242,"column_start":5,"column_end":20},"name":"DW_EH_PE_udata4","qualname":"::constants::DW_EH_PE_udata4","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5503},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":51580,"byte_end":51595,"line_start":1244,"line_end":1244,"column_start":5,"column_end":20},"name":"DW_EH_PE_udata8","qualname":"::constants::DW_EH_PE_udata8","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5504},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":51669,"byte_end":51685,"line_start":1246,"line_end":1246,"column_start":5,"column_end":21},"name":"DW_EH_PE_sleb128","qualname":"::constants::DW_EH_PE_sleb128","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5505},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":51726,"byte_end":51741,"line_start":1248,"line_end":1248,"column_start":5,"column_end":20},"name":"DW_EH_PE_sdata2","qualname":"::constants::DW_EH_PE_sdata2","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5506},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":51783,"byte_end":51798,"line_start":1250,"line_end":1250,"column_start":5,"column_end":20},"name":"DW_EH_PE_sdata4","qualname":"::constants::DW_EH_PE_sdata4","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5507},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":51841,"byte_end":51856,"line_start":1252,"line_end":1252,"column_start":5,"column_end":20},"name":"DW_EH_PE_sdata8","qualname":"::constants::DW_EH_PE_sdata8","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5508},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":51983,"byte_end":51997,"line_start":1257,"line_end":1257,"column_start":5,"column_end":19},"name":"DW_EH_PE_pcrel","qualname":"::constants::DW_EH_PE_pcrel","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5509},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":52072,"byte_end":52088,"line_start":1259,"line_end":1259,"column_start":5,"column_end":21},"name":"DW_EH_PE_textrel","qualname":"::constants::DW_EH_PE_textrel","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5510},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":52179,"byte_end":52195,"line_start":1261,"line_end":1261,"column_start":5,"column_end":21},"name":"DW_EH_PE_datarel","qualname":"::constants::DW_EH_PE_datarel","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5511},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":52265,"byte_end":52281,"line_start":1263,"line_end":1263,"column_start":5,"column_end":21},"name":"DW_EH_PE_funcrel","qualname":"::constants::DW_EH_PE_funcrel","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5512},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":52351,"byte_end":52367,"line_start":1265,"line_end":1265,"column_start":5,"column_end":21},"name":"DW_EH_PE_aligned","qualname":"::constants::DW_EH_PE_aligned","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5513},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":52679,"byte_end":52696,"line_start":1273,"line_end":1273,"column_start":5,"column_end":22},"name":"DW_EH_PE_indirect","qualname":"::constants::DW_EH_PE_indirect","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5514},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":52855,"byte_end":52870,"line_start":1279,"line_end":1279,"column_start":5,"column_end":20},"name":"DW_EH_PE_absptr","qualname":"::constants::DW_EH_PE_absptr","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5515},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":52924,"byte_end":52937,"line_start":1281,"line_end":1281,"column_start":5,"column_end":18},"name":"DW_EH_PE_omit","qualname":"::constants::DW_EH_PE_omit","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":53160,"byte_end":53166,"line_start":1292,"line_end":1292,"column_start":12,"column_end":18},"name":"format","qualname":"<DwEhPe>::format","value":"pub fn format(Self) -> DwEhPe","parent":null,"children":[],"decl_id":null,"docs":" Get the pointer encoding's format.\n","sig":null,"attributes":[{"value":"/ Get the pointer encoding's format.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":53096,"byte_end":53134,"line_start":1290,"line_end":1290,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":53139,"byte_end":53148,"line_start":1291,"line_end":1291,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":53311,"byte_end":53322,"line_start":1298,"line_end":1298,"column_start":12,"column_end":23},"name":"application","qualname":"<DwEhPe>::application","value":"pub fn application(Self) -> DwEhPe","parent":null,"children":[],"decl_id":null,"docs":" Get the pointer encoding's application.\n","sig":null,"attributes":[{"value":"/ Get the pointer encoding's application.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":53242,"byte_end":53285,"line_start":1296,"line_end":1296,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":53290,"byte_end":53299,"line_start":1297,"line_end":1297,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":53478,"byte_end":53487,"line_start":1304,"line_end":1304,"column_start":12,"column_end":21},"name":"is_absent","qualname":"<DwEhPe>::is_absent","value":"pub fn is_absent(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this encoding the absent pointer encoding?\n","sig":null,"attributes":[{"value":"/ Is this encoding the absent pointer encoding?","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":53403,"byte_end":53452,"line_start":1302,"line_end":1302,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":53457,"byte_end":53466,"line_start":1303,"line_end":1303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":53706,"byte_end":53717,"line_start":1311,"line_end":1311,"column_start":12,"column_end":23},"name":"is_indirect","qualname":"<DwEhPe>::is_indirect","value":"pub fn is_indirect(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this coding indirect? If so, its encoded value is the address of the\n real pointer result, not the pointer result itself.\n","sig":null,"attributes":[{"value":"/ Is this coding indirect? If so, its encoded value is the address of the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":53545,"byte_end":53620,"line_start":1308,"line_end":1308,"column_start":5,"column_end":80}},{"value":"/ real pointer result, not the pointer result itself.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":53625,"byte_end":53680,"line_start":1309,"line_end":1309,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":53685,"byte_end":53694,"line_start":1310,"line_end":1310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":53843,"byte_end":53860,"line_start":1316,"line_end":1316,"column_start":12,"column_end":29},"name":"is_valid_encoding","qualname":"<DwEhPe>::is_valid_encoding","value":"pub fn is_valid_encoding(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a known, valid pointer encoding?\n","sig":null,"attributes":[{"value":"/ Is this a known, valid pointer encoding?","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":53787,"byte_end":53831,"line_start":1315,"line_end":1315,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":46},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":55901,"byte_end":55910,"line_start":7,"line_end":7,"column_start":11,"column_end":20},"name":"Endianity","qualname":"::endianity::Endianity","value":"Endianity: Debug + Default + Clone + Copy + PartialEq + Eq","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64}],"decl_id":null,"docs":" A trait describing the endianity of some buffer.\n","sig":null,"attributes":[{"value":"/ A trait describing the endianity of some buffer.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":55838,"byte_end":55890,"line_start":6,"line_end":6,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":56016,"byte_end":56029,"line_start":9,"line_end":9,"column_start":8,"column_end":21},"name":"is_big_endian","qualname":"::endianity::Endianity::is_big_endian","value":"pub fn is_big_endian(Self) -> bool","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Return true for big endian byte order.\n","sig":null,"attributes":[{"value":"/ Return true for big endian byte order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":55966,"byte_end":56008,"line_start":8,"line_end":8,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":56117,"byte_end":56133,"line_start":13,"line_end":13,"column_start":8,"column_end":24},"name":"is_little_endian","qualname":"::endianity::Endianity::is_little_endian","value":"pub fn is_little_endian(Self) -> bool","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Return true for little endian byte order.\n","sig":null,"attributes":[{"value":"/ Return true for little endian byte order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":56050,"byte_end":56095,"line_start":11,"line_end":11,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":56100,"byte_end":56109,"line_start":12,"line_end":12,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":56331,"byte_end":56339,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::endianity::Endianity::read_u16","value":"pub fn read_u16(Self, &[u8]) -> u16","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 16 bit integer from `buf`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":56191,"byte_end":56239,"line_start":17,"line_end":17,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":56244,"byte_end":56247,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":56252,"byte_end":56264,"line_start":19,"line_end":19,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":56269,"byte_end":56272,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":56277,"byte_end":56309,"line_start":21,"line_end":21,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":56314,"byte_end":56323,"line_start":22,"line_end":22,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":56717,"byte_end":56725,"line_start":38,"line_end":38,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::endianity::Endianity::read_u32","value":"pub fn read_u32(Self, &[u8]) -> u32","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 32 bit integer from `buf`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":56577,"byte_end":56625,"line_start":32,"line_end":32,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":56630,"byte_end":56633,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":56638,"byte_end":56650,"line_start":34,"line_end":34,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":56655,"byte_end":56658,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":56663,"byte_end":56695,"line_start":36,"line_end":36,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":56700,"byte_end":56709,"line_start":37,"line_end":37,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57103,"byte_end":57111,"line_start":53,"line_end":53,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::endianity::Endianity::read_u64","value":"pub fn read_u64(Self, &[u8]) -> u64","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 64 bit integer from `buf`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":56963,"byte_end":57011,"line_start":47,"line_end":47,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57016,"byte_end":57019,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57024,"byte_end":57036,"line_start":49,"line_end":49,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57041,"byte_end":57044,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57049,"byte_end":57081,"line_start":51,"line_end":51,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57086,"byte_end":57095,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57501,"byte_end":57510,"line_start":68,"line_end":68,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::endianity::Endianity::read_uint","value":"pub fn read_uint(&mut Self, &[u8]) -> u64","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Read an unsigned n-bytes integer u64.","sig":null,"attributes":[{"value":"/ Read an unsigned n-bytes integer u64.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57349,"byte_end":57390,"line_start":62,"line_end":62,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57395,"byte_end":57398,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57403,"byte_end":57415,"line_start":64,"line_end":64,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57420,"byte_end":57423,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 1` or `buf.len() > 8`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57428,"byte_end":57479,"line_start":66,"line_end":66,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57484,"byte_end":57493,"line_start":67,"line_end":67,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57916,"byte_end":57924,"line_start":84,"line_end":84,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::endianity::Endianity::read_i16","value":"pub fn read_i16(Self, &[u8]) -> i16","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 16 bit integer from `buf`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57779,"byte_end":57824,"line_start":78,"line_end":78,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57829,"byte_end":57832,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57837,"byte_end":57849,"line_start":80,"line_end":80,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57854,"byte_end":57857,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57862,"byte_end":57894,"line_start":82,"line_end":82,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57899,"byte_end":57908,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58134,"byte_end":58142,"line_start":94,"line_end":94,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::endianity::Endianity::read_i32","value":"pub fn read_i32(Self, &[u8]) -> i32","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 32 bit integer from `buf`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":57997,"byte_end":58042,"line_start":88,"line_end":88,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58047,"byte_end":58050,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58055,"byte_end":58067,"line_start":90,"line_end":90,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58072,"byte_end":58075,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58080,"byte_end":58112,"line_start":92,"line_end":92,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58117,"byte_end":58126,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58352,"byte_end":58360,"line_start":104,"line_end":104,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::endianity::Endianity::read_i64","value":"pub fn read_i64(Self, &[u8]) -> i64","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 64 bit integer from `buf`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58215,"byte_end":58260,"line_start":98,"line_end":98,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58265,"byte_end":58268,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58273,"byte_end":58285,"line_start":100,"line_end":100,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58290,"byte_end":58293,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58298,"byte_end":58330,"line_start":102,"line_end":102,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58335,"byte_end":58344,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58577,"byte_end":58585,"line_start":114,"line_end":114,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::endianity::Endianity::read_f32","value":"pub fn read_f32(Self, &[u8]) -> f32","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Reads a 32 bit floating point number from `buf`.","sig":null,"attributes":[{"value":"/ Reads a 32 bit floating point number from `buf`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58433,"byte_end":58485,"line_start":108,"line_end":108,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58490,"byte_end":58493,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58498,"byte_end":58510,"line_start":110,"line_end":110,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58515,"byte_end":58518,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58523,"byte_end":58555,"line_start":112,"line_end":112,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58560,"byte_end":58569,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58811,"byte_end":58819,"line_start":124,"line_end":124,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::endianity::Endianity::read_f64","value":"pub fn read_f64(Self, &[u8]) -> f64","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Reads a 32 bit floating point number from `buf`.","sig":null,"attributes":[{"value":"/ Reads a 32 bit floating point number from `buf`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58667,"byte_end":58719,"line_start":118,"line_end":118,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58724,"byte_end":58727,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58732,"byte_end":58744,"line_start":120,"line_end":120,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58749,"byte_end":58752,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58757,"byte_end":58789,"line_start":122,"line_end":122,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58794,"byte_end":58803,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":59044,"byte_end":59053,"line_start":134,"line_end":134,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::endianity::Endianity::write_u16","value":"pub fn write_u16(Self, &mut [u8], u16)","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 16 bit integer `n` to `buf`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58901,"byte_end":58952,"line_start":128,"line_end":128,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58957,"byte_end":58960,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58965,"byte_end":58977,"line_start":130,"line_end":130,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58982,"byte_end":58985,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":58990,"byte_end":59022,"line_start":132,"line_end":132,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":59027,"byte_end":59036,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":59412,"byte_end":59421,"line_start":149,"line_end":149,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::endianity::Endianity::write_u32","value":"pub fn write_u32(Self, &mut [u8], u32)","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 32 bit integer `n` to `buf`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":59269,"byte_end":59320,"line_start":143,"line_end":143,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":59325,"byte_end":59328,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":59333,"byte_end":59345,"line_start":145,"line_end":145,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":59350,"byte_end":59353,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":59358,"byte_end":59390,"line_start":147,"line_end":147,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":59395,"byte_end":59404,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":59780,"byte_end":59789,"line_start":164,"line_end":164,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::endianity::Endianity::write_u64","value":"pub fn write_u64(Self, &mut [u8], u64)","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 64 bit integer `n` to `buf`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":59637,"byte_end":59688,"line_start":158,"line_end":158,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":59693,"byte_end":59696,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":59701,"byte_end":59713,"line_start":160,"line_end":160,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":59718,"byte_end":59721,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":59726,"byte_end":59758,"line_start":162,"line_end":162,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":59763,"byte_end":59772,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5547},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":60163,"byte_end":60169,"line_start":178,"line_end":178,"column_start":5,"column_end":11},"name":"Little","qualname":"::endianity::RunTimeEndian::Little","value":"RunTimeEndian::Little","parent":{"krate":0,"index":5546},"children":[],"decl_id":null,"docs":" Little endian byte order.\n","sig":null,"attributes":[{"value":"/ Little endian byte order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":60129,"byte_end":60158,"line_start":177,"line_end":177,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5549},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":60206,"byte_end":60209,"line_start":180,"line_end":180,"column_start":5,"column_end":8},"name":"Big","qualname":"::endianity::RunTimeEndian::Big","value":"RunTimeEndian::Big","parent":{"krate":0,"index":5546},"children":[],"decl_id":null,"docs":" Big endian byte order.\n","sig":null,"attributes":[{"value":"/ Big endian byte order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":60175,"byte_end":60201,"line_start":179,"line_end":179,"column_start":5,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":5546},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":60109,"byte_end":60122,"line_start":176,"line_end":176,"column_start":10,"column_end":23},"name":"RunTimeEndian","qualname":"::endianity::RunTimeEndian","value":"pub enum RunTimeEndian {\n\n    /// Little endian byte order.\n    Little,\n\n    /// Big endian byte order.\n    Big,\n}","parent":null,"children":[{"krate":0,"index":5547},{"krate":0,"index":5549}],"decl_id":null,"docs":" Byte order that is selectable at runtime.\n","sig":null,"attributes":[{"value":"/ Byte order that is selectable at runtime.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":60003,"byte_end":60048,"line_start":174,"line_end":174,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5565},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":60716,"byte_end":60728,"line_start":206,"line_end":206,"column_start":12,"column_end":24},"name":"LittleEndian","qualname":"::endianity::LittleEndian","value":"","parent":null,"children":[],"decl_id":null,"docs":" Little endian byte order.\n","sig":null,"attributes":[{"value":"/ Little endian byte order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":60624,"byte_end":60653,"line_start":204,"line_end":204,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":5581},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":61039,"byte_end":61048,"line_start":224,"line_end":224,"column_start":12,"column_end":21},"name":"BigEndian","qualname":"::endianity::BigEndian","value":"","parent":null,"children":[],"decl_id":null,"docs":" Big endian byte order.\n","sig":null,"attributes":[{"value":"/ Big endian byte order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":60950,"byte_end":60976,"line_start":222,"line_end":222,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":77},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":61349,"byte_end":61361,"line_start":242,"line_end":242,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::endianity::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" The native endianity for the target platform.\n","sig":null,"attributes":[{"value":"/ The native endianity for the target platform.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":61257,"byte_end":61306,"line_start":240,"line_end":240,"column_start":1,"column_end":50}},{"value":"cfg(target_endian = \"little\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":61307,"byte_end":61339,"line_start":241,"line_end":241,"column_start":1,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":78},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":61470,"byte_end":61482,"line_start":247,"line_end":247,"column_start":11,"column_end":23},"name":"NativeEndian","qualname":"::endianity::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_endian = \"little\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":61379,"byte_end":61411,"line_start":244,"line_end":244,"column_start":1,"column_end":33}},{"value":"allow(non_upper_case_globals)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":61412,"byte_end":61444,"line_start":245,"line_end":245,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":85},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"leb128","qualname":"::leb128","value":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":105}],"decl_id":null,"docs":" Read and write DWARF's \"Little Endian Base 128\" (LEB128) variable length\n integer encoding.","sig":null,"attributes":[{"value":"/ Read and write DWARF's \"Little Endian Base 128\" (LEB128) variable length","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":61756,"byte_end":61832,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"/ integer encoding.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":61833,"byte_end":61854,"line_start":2,"line_end":2,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":61855,"byte_end":61858,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ The implementation is a direct translation of the psuedocode in the DWARF 4","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":61859,"byte_end":61938,"line_start":4,"line_end":4,"column_start":1,"column_end":80}},{"value":"/ standard's appendix C.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":61939,"byte_end":61965,"line_start":5,"line_end":5,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":61966,"byte_end":61969,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Read and write signed integers:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":61970,"byte_end":62005,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62006,"byte_end":62009,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62010,"byte_end":62017,"line_start":9,"line_end":9,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(all(feature = \"read\", feature = \"write\"))] {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62018,"byte_end":62074,"line_start":10,"line_end":10,"column_start":1,"column_end":57}},{"value":"/ use gimli::{EndianSlice, NativeEndian, leb128};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62075,"byte_end":62126,"line_start":11,"line_end":11,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62127,"byte_end":62130,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 1024];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62131,"byte_end":62159,"line_start":13,"line_end":13,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62160,"byte_end":62163,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ // Write to anything that implements `std::io::Write`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62164,"byte_end":62222,"line_start":15,"line_end":15,"column_start":1,"column_end":59}},{"value":"/ {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62223,"byte_end":62228,"line_start":16,"line_end":16,"column_start":1,"column_end":6}},{"value":"/     let mut writable = &mut buf[..];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62229,"byte_end":62269,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/     leb128::write::signed(&mut writable, -12345).expect(\"Should write number\");","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62270,"byte_end":62353,"line_start":18,"line_end":18,"column_start":1,"column_end":84}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62354,"byte_end":62359,"line_start":19,"line_end":19,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62360,"byte_end":62363,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ // Read from anything that implements `gimli::Reader`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62364,"byte_end":62422,"line_start":21,"line_end":21,"column_start":1,"column_end":59}},{"value":"/ let mut readable = EndianSlice::new(&buf[..], NativeEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62423,"byte_end":62487,"line_start":22,"line_end":22,"column_start":1,"column_end":65}},{"value":"/ let val = leb128::read::signed(&mut readable).expect(\"Should read number\");","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62488,"byte_end":62567,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ assert_eq!(val, -12345);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62568,"byte_end":62596,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62597,"byte_end":62604,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62605,"byte_end":62612,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62613,"byte_end":62616,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Or read and write unsigned integers:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62617,"byte_end":62657,"line_start":28,"line_end":28,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62658,"byte_end":62661,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62662,"byte_end":62669,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(all(feature = \"read\", feature = \"write\"))] {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62670,"byte_end":62726,"line_start":31,"line_end":31,"column_start":1,"column_end":57}},{"value":"/ use gimli::{EndianSlice, NativeEndian, leb128};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62727,"byte_end":62778,"line_start":32,"line_end":32,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62779,"byte_end":62782,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 1024];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62783,"byte_end":62811,"line_start":34,"line_end":34,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62812,"byte_end":62815,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62816,"byte_end":62821,"line_start":36,"line_end":36,"column_start":1,"column_end":6}},{"value":"/     let mut writable = &mut buf[..];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62822,"byte_end":62862,"line_start":37,"line_end":37,"column_start":1,"column_end":41}},{"value":"/     leb128::write::unsigned(&mut writable, 98765).expect(\"Should write number\");","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62863,"byte_end":62947,"line_start":38,"line_end":38,"column_start":1,"column_end":85}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62948,"byte_end":62953,"line_start":39,"line_end":39,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62954,"byte_end":62957,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ let mut readable = EndianSlice::new(&buf[..], NativeEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":62958,"byte_end":63022,"line_start":41,"line_end":41,"column_start":1,"column_end":65}},{"value":"/ let val = leb128::read::unsigned(&mut readable).expect(\"Should read number\");","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":63023,"byte_end":63104,"line_start":42,"line_end":42,"column_start":1,"column_end":82}},{"value":"/ assert_eq!(val, 98765);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":63105,"byte_end":63132,"line_start":43,"line_end":43,"column_start":1,"column_end":28}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":63133,"byte_end":63140,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":63141,"byte_end":63148,"line_start":45,"line_end":45,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":90},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":63594,"byte_end":63598,"line_start":66,"line_end":66,"column_start":9,"column_end":13},"name":"read","qualname":"::leb128::read","value":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":103}],"decl_id":null,"docs":" A module for reading signed and unsigned integers that have been LEB128\n encoded.\n","sig":null,"attributes":[{"value":"/ A module for reading signed and unsigned integers that have been LEB128","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":63472,"byte_end":63547,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ encoded.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":63548,"byte_end":63560,"line_start":64,"line_end":64,"column_start":1,"column_end":13}},{"value":"cfg(feature = \"read\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":63561,"byte_end":63585,"line_start":65,"line_end":65,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":99},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":63838,"byte_end":63846,"line_start":72,"line_end":72,"column_start":12,"column_end":20},"name":"unsigned","qualname":"::leb128::read::unsigned","value":"pub fn unsigned<R: Reader>(&mut R) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Read an unsigned LEB128 number from the given `Reader` and\n return it or an error if reading failed.\n","sig":null,"attributes":[{"value":"/ Read an unsigned LEB128 number from the given `Reader` and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":63715,"byte_end":63777,"line_start":70,"line_end":70,"column_start":5,"column_end":67}},{"value":"/ return it or an error if reading failed.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":63782,"byte_end":63826,"line_start":71,"line_end":71,"column_start":5,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":101},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":64480,"byte_end":64483,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"u16","qualname":"::leb128::read::u16","value":"pub fn u16<R: Reader>(&mut R) -> Result<u16>","parent":null,"children":[],"decl_id":null,"docs":" Read an LEB128 u16 from the given `Reader` and\n return it or an error if reading failed.\n","sig":null,"attributes":[{"value":"/ Read an LEB128 u16 from the given `Reader` and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":64369,"byte_end":64419,"line_start":93,"line_end":93,"column_start":5,"column_end":55}},{"value":"/ return it or an error if reading failed.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":64424,"byte_end":64468,"line_start":94,"line_end":94,"column_start":5,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":103},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":65184,"byte_end":65190,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"signed","qualname":"::leb128::read::signed","value":"pub fn signed<R: Reader>(&mut R) -> Result<i64>","parent":null,"children":[],"decl_id":null,"docs":" Read a signed LEB128 number from the given `Reader` and\n return it or an error if reading failed.\n","sig":null,"attributes":[{"value":"/ Read a signed LEB128 number from the given `Reader` and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":65064,"byte_end":65123,"line_start":116,"line_end":116,"column_start":5,"column_end":64}},{"value":"/ return it or an error if reading failed.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":65128,"byte_end":65172,"line_start":117,"line_end":117,"column_start":5,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":105},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":65988,"byte_end":65993,"line_start":150,"line_end":150,"column_start":9,"column_end":14},"name":"write","qualname":"::leb128::write","value":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":115}],"decl_id":null,"docs":" A module for writing integers encoded as LEB128.\n","sig":null,"attributes":[{"value":"/ A module for writing integers encoded as LEB128.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":65901,"byte_end":65953,"line_start":148,"line_end":148,"column_start":1,"column_end":53}},{"value":"cfg(feature = \"write\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":65954,"byte_end":65979,"line_start":149,"line_end":149,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":110},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":66269,"byte_end":66277,"line_start":157,"line_end":157,"column_start":12,"column_end":20},"name":"unsigned","qualname":"::leb128::write::unsigned","value":"pub fn unsigned<W>(&mut W, u64) -> Result<usize, io::Error> where W: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Write the given unsigned number using the LEB128 encoding to the given\n `std::io::Write`able. Returns the number of bytes written to `w`, or an\n error if writing failed.\n","sig":null,"attributes":[{"value":"/ Write the given unsigned number using the LEB128 encoding to the given","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":66070,"byte_end":66144,"line_start":154,"line_end":154,"column_start":5,"column_end":79}},{"value":"/ `std::io::Write`able. Returns the number of bytes written to `w`, or an","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":66149,"byte_end":66224,"line_start":155,"line_end":155,"column_start":5,"column_end":80}},{"value":"/ error if writing failed.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":66229,"byte_end":66257,"line_start":156,"line_end":156,"column_start":5,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":112},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":66927,"byte_end":66939,"line_start":181,"line_end":181,"column_start":12,"column_end":24},"name":"uleb128_size","qualname":"::leb128::write::uleb128_size","value":"pub fn uleb128_size(u64) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the size of the LEB128 encoding of the given unsigned number.\n","sig":null,"attributes":[{"value":"/ Return the size of the LEB128 encoding of the given unsigned number.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":66843,"byte_end":66915,"line_start":180,"line_end":180,"column_start":5,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":113},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":67339,"byte_end":67345,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"name":"signed","qualname":"::leb128::write::signed","value":"pub fn signed<W>(&mut W, i64) -> Result<usize, io::Error> where W: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Write the given signed number using the LEB128 encoding to the given\n `std::io::Write`able. Returns the number of bytes written to `w`, or an\n error if writing failed.\n","sig":null,"attributes":[{"value":"/ Write the given signed number using the LEB128 encoding to the given","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":67142,"byte_end":67214,"line_start":192,"line_end":192,"column_start":5,"column_end":77}},{"value":"/ `std::io::Write`able. Returns the number of bytes written to `w`, or an","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":67219,"byte_end":67294,"line_start":193,"line_end":193,"column_start":5,"column_end":80}},{"value":"/ error if writing failed.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":67299,"byte_end":67327,"line_start":194,"line_end":194,"column_start":5,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":115},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":68195,"byte_end":68207,"line_start":225,"line_end":225,"column_start":12,"column_end":24},"name":"sleb128_size","qualname":"::leb128::write::sleb128_size","value":"pub fn sleb128_size(i64) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the size of the LEB128 encoding of the given signed number.\n","sig":null,"attributes":[{"value":"/ Return the size of the LEB128 encoding of the given signed number.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/leb128.rs","byte_start":68113,"byte_end":68183,"line_start":224,"line_end":224,"column_start":5,"column_end":75}}]},{"kind":"Mod","id":{"krate":0,"index":116},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::read","value":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":9908},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":9916},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":1047},{"krate":0,"index":1048},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1461},{"krate":0,"index":1522},{"krate":0,"index":1523},{"krate":0,"index":1569},{"krate":0,"index":1570},{"krate":0,"index":1616},{"krate":0,"index":1617},{"krate":0,"index":1713},{"krate":0,"index":1714},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":2142},{"krate":0,"index":2143},{"krate":0,"index":2190},{"krate":0,"index":2191},{"krate":0,"index":8253},{"krate":0,"index":8416},{"krate":0,"index":8414},{"krate":0,"index":8413},{"krate":0,"index":8409},{"krate":0,"index":8410},{"krate":0,"index":8406},{"krate":0,"index":8407},{"krate":0,"index":2194},{"krate":0,"index":2196},{"krate":0,"index":2198},{"krate":0,"index":2199},{"krate":0,"index":2201},{"krate":0,"index":2203},{"krate":0,"index":2214}],"decl_id":null,"docs":" Read DWARF debugging information.","sig":null,"attributes":[{"value":"cfg(feature = \"read\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1951,"byte_end":1975,"line_start":65,"line_end":65,"column_start":1,"column_end":25}},{"value":"/ Read DWARF debugging information.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":79869,"byte_end":79906,"line_start":1,"line_end":1,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":79907,"byte_end":79910,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ * [Example Usage](#example-usage)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":79911,"byte_end":79948,"line_start":3,"line_end":3,"column_start":1,"column_end":38}},{"value":"/ * [API Structure](#api-structure)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":79949,"byte_end":79986,"line_start":4,"line_end":4,"column_start":1,"column_end":38}},{"value":"/ * [Using with `FallibleIterator`](#using-with-fallibleiterator)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":79987,"byte_end":80054,"line_start":5,"line_end":5,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80055,"byte_end":80058,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ## Example Usage","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80059,"byte_end":80079,"line_start":7,"line_end":7,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80080,"byte_end":80083,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Print out all of the functions in the debuggee program:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80084,"byte_end":80143,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80144,"byte_end":80147,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80148,"byte_end":80166,"line_start":11,"line_end":11,"column_start":1,"column_end":19}},{"value":"/ # fn example() -> Result<(), gimli::Error> {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80167,"byte_end":80215,"line_start":12,"line_end":12,"column_start":1,"column_end":49}},{"value":"/ # type R = gimli::EndianSlice<'static, gimli::LittleEndian>;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80216,"byte_end":80280,"line_start":13,"line_end":13,"column_start":1,"column_end":65}},{"value":"/ # let get_file_section_reader = |name| -> Result<R, gimli::Error> { unimplemented!() };","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80281,"byte_end":80372,"line_start":14,"line_end":14,"column_start":1,"column_end":92}},{"value":"/ # let get_sup_file_section_reader = |name| -> Result<R, gimli::Error> { unimplemented!() };","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80373,"byte_end":80468,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/ // Read the DWARF sections with whatever object loader you're using.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80469,"byte_end":80541,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/ // These closures should return a `Reader` instance (e.g. `EndianSlice`).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80542,"byte_end":80619,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/ let loader = |section: gimli::SectionId| { get_file_section_reader(section.name()) };","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80620,"byte_end":80709,"line_start":18,"line_end":18,"column_start":1,"column_end":90}},{"value":"/ let sup_loader = |section: gimli::SectionId| { get_sup_file_section_reader(section.name()) };","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80710,"byte_end":80807,"line_start":19,"line_end":19,"column_start":1,"column_end":98}},{"value":"/ let dwarf = gimli::Dwarf::load(loader, sup_loader)?;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80808,"byte_end":80864,"line_start":20,"line_end":20,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80865,"byte_end":80868,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ // Iterate over all compilation units.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80869,"byte_end":80911,"line_start":22,"line_end":22,"column_start":1,"column_end":43}},{"value":"/ let mut iter = dwarf.units();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80912,"byte_end":80945,"line_start":23,"line_end":23,"column_start":1,"column_end":34}},{"value":"/ while let Some(header) = iter.next()? {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80946,"byte_end":80989,"line_start":24,"line_end":24,"column_start":1,"column_end":44}},{"value":"/     // Parse the abbreviations and other information for this compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":80990,"byte_end":81073,"line_start":25,"line_end":25,"column_start":1,"column_end":84}},{"value":"/     let unit = dwarf.unit(header)?;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81074,"byte_end":81113,"line_start":26,"line_end":26,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81114,"byte_end":81117,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/     // Iterate over all of this compilation unit's entries.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81118,"byte_end":81181,"line_start":28,"line_end":28,"column_start":1,"column_end":64}},{"value":"/     let mut entries = unit.entries();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81182,"byte_end":81223,"line_start":29,"line_end":29,"column_start":1,"column_end":42}},{"value":"/     while let Some((_, entry)) = entries.next_dfs()? {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81224,"byte_end":81282,"line_start":30,"line_end":30,"column_start":1,"column_end":59}},{"value":"/         // If we find an entry for a function, print it.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81283,"byte_end":81343,"line_start":31,"line_end":31,"column_start":1,"column_end":61}},{"value":"/         if entry.tag() == gimli::DW_TAG_subprogram {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81344,"byte_end":81400,"line_start":32,"line_end":32,"column_start":1,"column_end":57}},{"value":"/             println!(\"Found a function: {:?}\", entry);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81401,"byte_end":81459,"line_start":33,"line_end":33,"column_start":1,"column_end":59}},{"value":"/         }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81460,"byte_end":81473,"line_start":34,"line_end":34,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81474,"byte_end":81483,"line_start":35,"line_end":35,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81484,"byte_end":81489,"line_start":36,"line_end":36,"column_start":1,"column_end":6}},{"value":"/ # unreachable!()","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81490,"byte_end":81510,"line_start":37,"line_end":37,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81511,"byte_end":81518,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81519,"byte_end":81526,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81527,"byte_end":81530,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Full example programs:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81531,"byte_end":81557,"line_start":41,"line_end":41,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81558,"byte_end":81561,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/   * [A simple parser](https://github.com/gimli-rs/gimli/blob/master/examples/simple.rs)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81562,"byte_end":81653,"line_start":43,"line_end":43,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81654,"byte_end":81657,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/   * [A `dwarfdump`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81658,"byte_end":81680,"line_start":45,"line_end":45,"column_start":1,"column_end":23}},{"value":"/     clone](https://github.com/gimli-rs/gimli/blob/master/examples/dwarfdump.rs)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81681,"byte_end":81764,"line_start":46,"line_end":46,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81765,"byte_end":81768,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/   * [An `addr2line` clone](https://github.com/gimli-rs/addr2line)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81769,"byte_end":81838,"line_start":48,"line_end":48,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81839,"byte_end":81842,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/   * [`ddbug`](https://github.com/philipc/ddbug), a utility giving insight into","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81843,"byte_end":81925,"line_start":50,"line_end":50,"column_start":1,"column_end":83}},{"value":"/     code generation by making debugging information readable","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81926,"byte_end":81990,"line_start":51,"line_end":51,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81991,"byte_end":81994,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/   * [`dwprod`](https://github.com/fitzgen/dwprod), a tiny utility to list the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":81995,"byte_end":82076,"line_start":53,"line_end":53,"column_start":1,"column_end":82}},{"value":"/     compilers used to create each compilation unit within a shared library or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82077,"byte_end":82158,"line_start":54,"line_end":54,"column_start":1,"column_end":82}},{"value":"/     executable (via `DW_AT_producer`)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82159,"byte_end":82200,"line_start":55,"line_end":55,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82201,"byte_end":82204,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/   * [`dwarf-validate`](http://github.com/gimli-rs/gimli/blob/master/examples/dwarf-validate.rs),","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82205,"byte_end":82305,"line_start":57,"line_end":57,"column_start":1,"column_end":101}},{"value":"/     a program to validate the integrity of some DWARF and its references","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82306,"byte_end":82382,"line_start":58,"line_end":58,"column_start":1,"column_end":77}},{"value":"/     between sections and compilation units.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82383,"byte_end":82430,"line_start":59,"line_end":59,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82431,"byte_end":82434,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ## API Structure","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82435,"byte_end":82455,"line_start":61,"line_end":61,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82456,"byte_end":82459,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ * Basic familiarity with DWARF is assumed.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82460,"byte_end":82506,"line_start":63,"line_end":63,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82507,"byte_end":82510,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ * The [`Dwarf`](./struct.Dwarf.html) type contains the commonly used DWARF","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82511,"byte_end":82589,"line_start":65,"line_end":65,"column_start":1,"column_end":79}},{"value":"/ sections. It has methods that simplify access to debugging data that spans","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82590,"byte_end":82668,"line_start":66,"line_end":66,"column_start":1,"column_end":79}},{"value":"/ multiple sections. Use of this type is optional, but recommended.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82669,"byte_end":82738,"line_start":67,"line_end":67,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82739,"byte_end":82742,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ * Each section gets its own type. Consider these types the entry points to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82743,"byte_end":82821,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"/ the library:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82822,"byte_end":82838,"line_start":70,"line_end":70,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82839,"byte_end":82842,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/   * [`DebugAbbrev`](./struct.DebugAbbrev.html): The `.debug_abbrev` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82843,"byte_end":82923,"line_start":72,"line_end":72,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82924,"byte_end":82927,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/   * [`DebugAddr`](./struct.DebugAddr.html): The `.debug_addr` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":82928,"byte_end":83002,"line_start":74,"line_end":74,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83003,"byte_end":83006,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/   * [`DebugAranges`](./struct.DebugAranges.html): The `.debug_aranges`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83007,"byte_end":83081,"line_start":76,"line_end":76,"column_start":1,"column_end":75}},{"value":"/   section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83082,"byte_end":83096,"line_start":77,"line_end":77,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83097,"byte_end":83100,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/   * [`DebugFrame`](./struct.DebugFrame.html): The `.debug_frame` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83101,"byte_end":83178,"line_start":79,"line_end":79,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83179,"byte_end":83182,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/   * [`DebugInfo`](./struct.DebugInfo.html): The `.debug_info` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83183,"byte_end":83257,"line_start":81,"line_end":81,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83258,"byte_end":83261,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/   * [`DebugLine`](./struct.DebugLine.html): The `.debug_line` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83262,"byte_end":83336,"line_start":83,"line_end":83,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83337,"byte_end":83340,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/   * [`DebugLineStr`](./struct.DebugLineStr.html): The `.debug_line_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83341,"byte_end":83425,"line_start":85,"line_end":85,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83426,"byte_end":83429,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/   * [`DebugLoc`](./struct.DebugLoc.html): The `.debug_loc` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83430,"byte_end":83501,"line_start":87,"line_end":87,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83502,"byte_end":83505,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/   * [`DebugLocLists`](./struct.DebugLocLists.html): The `.debug_loclists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83506,"byte_end":83592,"line_start":89,"line_end":89,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83593,"byte_end":83596,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/   * [`DebugPubNames`](./struct.DebugPubNames.html): The `.debug_pubnames`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83597,"byte_end":83674,"line_start":91,"line_end":91,"column_start":1,"column_end":78}},{"value":"/   section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83675,"byte_end":83689,"line_start":92,"line_end":92,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83690,"byte_end":83693,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/   * [`DebugPubTypes`](./struct.DebugPubTypes.html): The `.debug_pubtypes`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83694,"byte_end":83771,"line_start":94,"line_end":94,"column_start":1,"column_end":78}},{"value":"/   section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83772,"byte_end":83786,"line_start":95,"line_end":95,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83787,"byte_end":83790,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/   * [`DebugRanges`](./struct.DebugRanges.html): The `.debug_ranges` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83791,"byte_end":83871,"line_start":97,"line_end":97,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83872,"byte_end":83875,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/   * [`DebugRngLists`](./struct.DebugRngLists.html): The `.debug_rnglists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83876,"byte_end":83962,"line_start":99,"line_end":99,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83963,"byte_end":83966,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/   * [`DebugStr`](./struct.DebugStr.html): The `.debug_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":83967,"byte_end":84038,"line_start":101,"line_end":101,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":84039,"byte_end":84042,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/   * [`DebugStrOffsets`](./struct.DebugStrOffsets.html): The `.debug_str_offsets` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":84043,"byte_end":84136,"line_start":103,"line_end":103,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":84137,"byte_end":84140,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/   * [`DebugTypes`](./struct.DebugTypes.html): The `.debug_types` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":84141,"byte_end":84218,"line_start":105,"line_end":105,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":84219,"byte_end":84222,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/   * [`EhFrame`](./struct.EhFrame.html): The `.eh_frame` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":84223,"byte_end":84291,"line_start":107,"line_end":107,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":84292,"byte_end":84295,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/   * [`EhFrameHdr`](./struct.EhFrameHdr.html): The `.eh_frame_hdr` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":84296,"byte_end":84374,"line_start":109,"line_end":109,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":84375,"byte_end":84378,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ * Each section type exposes methods for accessing the debugging data encoded","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":84379,"byte_end":84459,"line_start":111,"line_end":111,"column_start":1,"column_end":81}},{"value":"/ in that section. For example, the [`DebugInfo`](./struct.DebugInfo.html)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":84460,"byte_end":84536,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/ struct has the [`units`](./struct.DebugInfo.html#method.units) method for","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":84537,"byte_end":84614,"line_start":113,"line_end":113,"column_start":1,"column_end":78}},{"value":"/ iterating over the compilation units defined within it.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":84615,"byte_end":84674,"line_start":114,"line_end":114,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":84675,"byte_end":84678,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ * Offsets into a section are strongly typed: an offset into `.debug_info` is","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":84679,"byte_end":84759,"line_start":116,"line_end":116,"column_start":1,"column_end":81}},{"value":"/ the [`DebugInfoOffset`](./struct.DebugInfoOffset.html) type. It cannot be","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":84760,"byte_end":84837,"line_start":117,"line_end":117,"column_start":1,"column_end":78}},{"value":"/ used to index into the [`DebugLine`](./struct.DebugLine.html) type because","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":84838,"byte_end":84916,"line_start":118,"line_end":118,"column_start":1,"column_end":79}},{"value":"/ `DebugLine` represents the `.debug_line` section. There are similar types","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":84917,"byte_end":84994,"line_start":119,"line_end":119,"column_start":1,"column_end":78}},{"value":"/ for offsets relative to a compilation unit rather than a section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":84995,"byte_end":85064,"line_start":120,"line_end":120,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":85065,"byte_end":85068,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ ## Using with `FallibleIterator`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":85069,"byte_end":85105,"line_start":122,"line_end":122,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":85106,"byte_end":85109,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ The standard library's `Iterator` trait and related APIs do not play well","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":85110,"byte_end":85187,"line_start":124,"line_end":124,"column_start":1,"column_end":78}},{"value":"/ with iterators where the `next` operation is fallible. One can make the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":85188,"byte_end":85263,"line_start":125,"line_end":125,"column_start":1,"column_end":76}},{"value":"/ `Iterator`'s associated `Item` type be a `Result<T, E>`, however the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":85264,"byte_end":85336,"line_start":126,"line_end":126,"column_start":1,"column_end":73}},{"value":"/ provided methods cannot gracefully handle the case when an `Err` is","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":85337,"byte_end":85408,"line_start":127,"line_end":127,"column_start":1,"column_end":72}},{"value":"/ returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":85409,"byte_end":85422,"line_start":128,"line_end":128,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":85423,"byte_end":85426,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ This situation led to the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":85427,"byte_end":85456,"line_start":130,"line_end":130,"column_start":1,"column_end":30}},{"value":"/ [`fallible-iterator`](https://crates.io/crates/fallible-iterator) crate's","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":85457,"byte_end":85534,"line_start":131,"line_end":131,"column_start":1,"column_end":78}},{"value":"/ existence. You can read more of the rationale for its existence in its","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":85535,"byte_end":85609,"line_start":132,"line_end":132,"column_start":1,"column_end":75}},{"value":"/ docs. The crate provides the helpers you have come to expect (eg `map`,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":85610,"byte_end":85685,"line_start":133,"line_end":133,"column_start":1,"column_end":76}},{"value":"/ `filter`, etc) for iterators that can fail.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":85686,"byte_end":85733,"line_start":134,"line_end":134,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":85734,"byte_end":85737,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ `gimli`'s many lazy parsing iterators are a perfect match for the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":85738,"byte_end":85807,"line_start":136,"line_end":136,"column_start":1,"column_end":70}},{"value":"/ `fallible-iterator` crate's `FallibleIterator` trait because parsing is not","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":85808,"byte_end":85887,"line_start":137,"line_end":137,"column_start":1,"column_end":80}},{"value":"/ done eagerly. Parse errors later in the input might only be discovered after","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":85888,"byte_end":85968,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/ having iterated through many items.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":85969,"byte_end":86008,"line_start":139,"line_end":139,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86009,"byte_end":86012,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ To use `gimli` iterators with `FallibleIterator`, import the crate and trait","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86013,"byte_end":86093,"line_start":141,"line_end":141,"column_start":1,"column_end":81}},{"value":"/ into your code:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86094,"byte_end":86113,"line_start":142,"line_end":142,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86114,"byte_end":86117,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86118,"byte_end":86125,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"fallible-iterator\")]","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86126,"byte_end":86169,"line_start":145,"line_end":145,"column_start":1,"column_end":44}},{"value":"/ # fn foo() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86170,"byte_end":86186,"line_start":146,"line_end":146,"column_start":1,"column_end":17}},{"value":"/ // Use the `FallibleIterator` trait so its methods are in scope!","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86187,"byte_end":86255,"line_start":147,"line_end":147,"column_start":1,"column_end":69}},{"value":"/ use fallible_iterator::FallibleIterator;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86256,"byte_end":86300,"line_start":148,"line_end":148,"column_start":1,"column_end":45}},{"value":"/ use gimli::{DebugAranges, EndianSlice, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86301,"byte_end":86358,"line_start":149,"line_end":149,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86359,"byte_end":86362,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ fn find_sum_of_address_range_lengths(aranges: DebugAranges<EndianSlice<LittleEndian>>)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86363,"byte_end":86453,"line_start":151,"line_end":151,"column_start":1,"column_end":91}},{"value":"/     -> gimli::Result<u64>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86454,"byte_end":86483,"line_start":152,"line_end":152,"column_start":1,"column_end":30}},{"value":"/ {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86484,"byte_end":86489,"line_start":153,"line_end":153,"column_start":1,"column_end":6}},{"value":"/     // `DebugAranges::items` returns a `FallibleIterator`!","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86490,"byte_end":86552,"line_start":154,"line_end":154,"column_start":1,"column_end":63}},{"value":"/     aranges.items()","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86553,"byte_end":86576,"line_start":155,"line_end":155,"column_start":1,"column_end":24}},{"value":"/         // `map` is provided by `FallibleIterator`!","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86577,"byte_end":86632,"line_start":156,"line_end":156,"column_start":1,"column_end":56}},{"value":"/         .map(|arange| Ok(arange.length()))","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86633,"byte_end":86679,"line_start":157,"line_end":157,"column_start":1,"column_end":47}},{"value":"/         // `fold` is provided by `FallibleIterator`!","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86680,"byte_end":86736,"line_start":158,"line_end":158,"column_start":1,"column_end":57}},{"value":"/         .fold(0, |sum, len| Ok(sum + len))","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86737,"byte_end":86783,"line_start":159,"line_end":159,"column_start":1,"column_end":47}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86784,"byte_end":86789,"line_start":160,"line_end":160,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86790,"byte_end":86797,"line_start":161,"line_end":161,"column_start":1,"column_end":8}},{"value":"/ # fn main() {}","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86798,"byte_end":86816,"line_start":162,"line_end":162,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":86817,"byte_end":86824,"line_start":163,"line_end":163,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":5597},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":110240,"byte_end":110249,"line_start":6,"line_end":6,"column_start":12,"column_end":21},"name":"DebugAddr","qualname":"::read::addr::DebugAddr","value":"DebugAddr {  }","parent":null,"children":[{"krate":0,"index":5599}],"decl_id":null,"docs":" The raw contents of the `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ The raw contents of the `.debug_addr` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":110139,"byte_end":110189,"line_start":4,"line_end":4,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":111192,"byte_end":111203,"line_start":28,"line_end":28,"column_start":12,"column_end":23},"name":"get_address","qualname":"<DebugAddr<R>>::get_address","value":"pub fn get_address(&Self, u8, DebugAddrBase<R::Offset>,\n                   DebugAddrIndex<R::Offset>) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the address at the given `base` and `index`.","sig":null,"attributes":[{"value":"/ Returns the address at the given `base` and `index`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":110448,"byte_end":110504,"line_start":14,"line_end":14,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":110509,"byte_end":110512,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ A set of addresses in the `.debug_addr` section consists of a header","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":110517,"byte_end":110589,"line_start":16,"line_end":16,"column_start":5,"column_end":77}},{"value":"/ followed by a series of addresses.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":110594,"byte_end":110632,"line_start":17,"line_end":17,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":110637,"byte_end":110640,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ The `base` must be the `DW_AT_addr_base` value from the compilation unit DIE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":110645,"byte_end":110726,"line_start":19,"line_end":19,"column_start":5,"column_end":86}},{"value":"/ This is an offset that points to the first address following the header.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":110731,"byte_end":110807,"line_start":20,"line_end":20,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":110812,"byte_end":110815,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ The `index` is the value of a `DW_FORM_addrx` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":110820,"byte_end":110880,"line_start":22,"line_end":22,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":110885,"byte_end":110888,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ The `address_size` must be the size of the address for the compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":110893,"byte_end":110973,"line_start":24,"line_end":24,"column_start":5,"column_end":85}},{"value":"/ This value must also match the header. However, note that we do not parse the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":110978,"byte_end":111059,"line_start":25,"line_end":25,"column_start":5,"column_end":86}},{"value":"/ header to validate this, since locating the header is unreliable, and the GNU","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":111064,"byte_end":111145,"line_start":26,"line_end":26,"column_start":5,"column_end":86}},{"value":"/ extensions do not emit it.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":111150,"byte_end":111180,"line_start":27,"line_end":27,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":112246,"byte_end":112252,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugAddr<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugAddr<R> where F: FnMut(&'a T) ->\nR","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugAddr` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugAddr` section that references the data in `self`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":111616,"byte_end":111684,"line_start":44,"line_end":44,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":111689,"byte_end":111692,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":111697,"byte_end":111762,"line_start":46,"line_end":46,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":111767,"byte_end":111770,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":111775,"byte_end":111795,"line_start":48,"line_end":48,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":111800,"byte_end":111803,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":111808,"byte_end":111826,"line_start":50,"line_end":50,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":111831,"byte_end":111876,"line_start":51,"line_end":51,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":111881,"byte_end":111965,"line_start":52,"line_end":52,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugAddr<Vec<u8>> = load_section();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":111970,"byte_end":112036,"line_start":53,"line_end":53,"column_start":5,"column_end":71}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":112041,"byte_end":112088,"line_start":54,"line_end":54,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":112093,"byte_end":112143,"line_start":55,"line_end":55,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":112148,"byte_end":112210,"line_start":56,"line_end":56,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":112215,"byte_end":112222,"line_start":57,"line_end":57,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":112227,"byte_end":112234,"line_start":58,"line_end":58,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":5611},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115593,"byte_end":115603,"line_start":29,"line_end":29,"column_start":12,"column_end":22},"name":"DebugFrame","qualname":"::read::cfi::DebugFrame","value":"DebugFrame {  }","parent":null,"children":[{"krate":0,"index":5613},{"krate":0,"index":5614},{"krate":0,"index":5615}],"decl_id":null,"docs":" `DebugFrame` contains the `.debug_frame` section's frame unwinding\n information required to unwind to and recover registers from older frames on\n the stack. For example, this is useful for a debugger that wants to print\n locals in a backtrace.","sig":null,"attributes":[{"value":"/ `DebugFrame` contains the `.debug_frame` section's frame unwinding","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":114788,"byte_end":114858,"line_start":14,"line_end":14,"column_start":1,"column_end":71}},{"value":"/ information required to unwind to and recover registers from older frames on","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":114859,"byte_end":114939,"line_start":15,"line_end":15,"column_start":1,"column_end":81}},{"value":"/ the stack. For example, this is useful for a debugger that wants to print","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":114940,"byte_end":115017,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ locals in a backtrace.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115018,"byte_end":115044,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115045,"byte_end":115048,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Most interesting methods are defined in the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115049,"byte_end":115096,"line_start":19,"line_end":19,"column_start":1,"column_end":48}},{"value":"/ [`UnwindSection`](trait.UnwindSection.html) trait.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115097,"byte_end":115151,"line_start":20,"line_end":20,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115152,"byte_end":115155,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ### Differences between `.debug_frame` and `.eh_frame`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115156,"byte_end":115214,"line_start":22,"line_end":22,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115215,"byte_end":115218,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ While the `.debug_frame` section's information has a lot of overlap with the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115219,"byte_end":115299,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/ `.eh_frame` section's information, the `.eh_frame` information tends to only","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115300,"byte_end":115380,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ encode the subset of information needed for exception handling. Often, only","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115381,"byte_end":115460,"line_start":26,"line_end":26,"column_start":1,"column_end":80}},{"value":"/ one of `.eh_frame` or `.debug_frame` will be present in an object file.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115461,"byte_end":115536,"line_start":27,"line_end":27,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115890,"byte_end":115906,"line_start":40,"line_end":40,"column_start":12,"column_end":28},"name":"set_address_size","qualname":"<DebugFrame<R>>::set_address_size","value":"pub fn set_address_size(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Set the size of a target address in bytes.","sig":null,"attributes":[{"value":"/ Set the size of a target address in bytes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115716,"byte_end":115762,"line_start":36,"line_end":36,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115767,"byte_end":115770,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ This defaults to the native word size.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115775,"byte_end":115817,"line_start":38,"line_end":38,"column_start":5,"column_end":47}},{"value":"/ This is only used if the CIE version is less than 4.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115822,"byte_end":115878,"line_start":39,"line_end":39,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116147,"byte_end":116163,"line_start":48,"line_end":48,"column_start":12,"column_end":28},"name":"set_segment_size","qualname":"<DebugFrame<R>>::set_segment_size","value":"pub fn set_segment_size(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Set the size of a segment selector in bytes.","sig":null,"attributes":[{"value":"/ Set the size of a segment selector in bytes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115990,"byte_end":116038,"line_start":44,"line_end":44,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116043,"byte_end":116046,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This defaults to 0.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116051,"byte_end":116074,"line_start":46,"line_end":46,"column_start":5,"column_end":28}},{"value":"/ This is only used if the CIE version is less than 4.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116079,"byte_end":116135,"line_start":47,"line_end":47,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116959,"byte_end":116962,"line_start":72,"line_end":72,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugFrame<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugFrame` instance from the data in the\n `.debug_frame` section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugFrame` instance from the data in the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116341,"byte_end":116403,"line_start":57,"line_end":57,"column_start":5,"column_end":67}},{"value":"/ `.debug_frame` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116408,"byte_end":116435,"line_start":58,"line_end":58,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116440,"byte_end":116443,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the section and present it as","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116448,"byte_end":116523,"line_start":60,"line_end":60,"column_start":5,"column_end":80}},{"value":"/ a `&[u8]` slice. That means using some ELF loader on Linux, a Mach-O","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116528,"byte_end":116600,"line_start":61,"line_end":61,"column_start":5,"column_end":77}},{"value":"/ loader on OSX, etc.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116605,"byte_end":116628,"line_start":62,"line_end":62,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116633,"byte_end":116636,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116641,"byte_end":116648,"line_start":64,"line_end":64,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugFrame, NativeEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116653,"byte_end":116695,"line_start":65,"line_end":65,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116700,"byte_end":116703,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ // Use with `.debug_frame`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116708,"byte_end":116738,"line_start":67,"line_end":67,"column_start":5,"column_end":35}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116743,"byte_end":116784,"line_start":68,"line_end":68,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_frame_section_somehow = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116789,"byte_end":116842,"line_start":69,"line_end":69,"column_start":5,"column_end":58}},{"value":"/ let debug_frame = DebugFrame::new(read_debug_frame_section_somehow(), NativeEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116847,"byte_end":116935,"line_start":70,"line_end":70,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116940,"byte_end":116947,"line_start":71,"line_end":71,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":5635},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":117829,"byte_end":117839,"line_start":103,"line_end":103,"column_start":12,"column_end":22},"name":"EhFrameHdr","qualname":"::read::cfi::EhFrameHdr","value":"","parent":null,"children":[],"decl_id":null,"docs":" `EhFrameHdr` contains the information about the `.eh_frame_hdr` section.","sig":null,"attributes":[{"value":"/ `EhFrameHdr` contains the information about the `.eh_frame_hdr` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":117527,"byte_end":117603,"line_start":98,"line_end":98,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":117604,"byte_end":117607,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ A pointer to the start of the `.eh_frame` data, and optionally, a binary","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":117608,"byte_end":117684,"line_start":100,"line_end":100,"column_start":1,"column_end":77}},{"value":"/ search table of pointers to the `.eh_frame` records that are found in this section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":117685,"byte_end":117772,"line_start":101,"line_end":101,"column_start":1,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":5658},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":117980,"byte_end":117996,"line_start":107,"line_end":107,"column_start":12,"column_end":28},"name":"ParsedEhFrameHdr","qualname":"::read::cfi::ParsedEhFrameHdr","value":"ParsedEhFrameHdr {  }","parent":null,"children":[{"krate":0,"index":5660},{"krate":0,"index":5661},{"krate":0,"index":5662},{"krate":0,"index":5663},{"krate":0,"index":5664},{"krate":0,"index":5665}],"decl_id":null,"docs":" `ParsedEhFrameHdr` contains the parsed information from the `.eh_frame_hdr` section.\n","sig":null,"attributes":[{"value":"/ `ParsedEhFrameHdr` contains the parsed information from the `.eh_frame_hdr` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":117856,"byte_end":117944,"line_start":105,"line_end":105,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":118332,"byte_end":118335,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"new","qualname":"<EhFrameHdr<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `EhFrameHdr` instance from the data in the `.eh_frame_hdr` section.\n","sig":null,"attributes":[{"value":"/ Constructs a new `EhFrameHdr` instance from the data in the `.eh_frame_hdr` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":118232,"byte_end":118320,"line_start":121,"line_end":121,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":118549,"byte_end":118554,"line_start":129,"line_end":129,"column_start":12,"column_end":17},"name":"parse","qualname":"<EhFrameHdr<R>>::parse","value":"pub fn parse(&Self, &BaseAddresses, u8) -> Result<ParsedEhFrameHdr<R>>","parent":null,"children":[],"decl_id":null,"docs":" Parses this `EhFrameHdr` to a `ParsedEhFrameHdr`.\n","sig":null,"attributes":[{"value":"/ Parses this `EhFrameHdr` to a `ParsedEhFrameHdr`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":118484,"byte_end":118537,"line_start":128,"line_end":128,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":120576,"byte_end":120588,"line_start":194,"line_end":194,"column_start":12,"column_end":24},"name":"eh_frame_ptr","qualname":"<ParsedEhFrameHdr<R>>::eh_frame_ptr","value":"pub fn eh_frame_ptr(&Self) -> Pointer","parent":null,"children":[],"decl_id":null,"docs":" Returns the address of the binary's `.eh_frame` section.\n","sig":null,"attributes":[{"value":"/ Returns the address of the binary's `.eh_frame` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":120504,"byte_end":120564,"line_start":193,"line_end":193,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":120717,"byte_end":120722,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"table","qualname":"<ParsedEhFrameHdr<R>>::table","value":"pub fn table(&Self) -> Option<EhHdrTable<, R>>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the CFI binary search table, if there is one.\n","sig":null,"attributes":[{"value":"/ Retrieves the CFI binary search table, if there is one.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":120646,"byte_end":120705,"line_start":198,"line_end":198,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":5672},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":121717,"byte_end":121727,"line_start":219,"line_end":219,"column_start":12,"column_end":22},"name":"EhHdrTable","qualname":"::read::cfi::EhHdrTable","value":"EhHdrTable {  }","parent":null,"children":[{"krate":0,"index":5675}],"decl_id":null,"docs":" The CFI binary search table that is an optional part of the `.eh_frame_hdr` section.\n","sig":null,"attributes":[{"value":"/ The CFI binary search table that is an optional part of the `.eh_frame_hdr` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":121593,"byte_end":121681,"line_start":217,"line_end":217,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":122152,"byte_end":122158,"line_start":230,"line_end":230,"column_start":12,"column_end":18},"name":"lookup","qualname":"<EhHdrTable>::lookup","value":"pub fn lookup(&Self, u64, &BaseAddresses) -> Result<Pointer>","parent":null,"children":[],"decl_id":null,"docs":" *Probably* returns a pointer to the FDE for the given address.","sig":null,"attributes":[{"value":"/ *Probably* returns a pointer to the FDE for the given address.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":121831,"byte_end":121897,"line_start":224,"line_end":224,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":121902,"byte_end":121905,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ This performs a binary search, so if there is no FDE for the given address,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":121910,"byte_end":121989,"line_start":226,"line_end":226,"column_start":5,"column_end":84}},{"value":"/ this function **will** return a pointer to any other FDE that's close by.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":121994,"byte_end":122071,"line_start":227,"line_end":227,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":122076,"byte_end":122079,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ To be sure, you **must** call `contains` on the FDE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":122084,"byte_end":122140,"line_start":229,"line_end":229,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":124183,"byte_end":124200,"line_start":288,"line_end":288,"column_start":12,"column_end":29},"name":"pointer_to_offset","qualname":"<EhHdrTable>::pointer_to_offset","value":"pub fn pointer_to_offset(&Self, Pointer) -> Result<EhFrameOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Convert a `Pointer` to a section offset.","sig":null,"attributes":[{"value":"/ Convert a `Pointer` to a section offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":124070,"byte_end":124114,"line_start":285,"line_end":285,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":124119,"byte_end":124122,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ This does not support indirect pointers.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":124127,"byte_end":124171,"line_start":287,"line_end":287,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":125585,"byte_end":125600,"line_start":323,"line_end":323,"column_start":12,"column_end":27},"name":"fde_for_address","qualname":"<EhHdrTable>::fde_for_address","value":"pub fn fde_for_address<F>(&Self, &EhFrame<R>, &BaseAddresses, u64, F)\n-> Result<FrameDescriptionEntry<R>> where\nF: FnMut(&EhFrame<R>, &BaseAddresses, EhFrameOffset<R::Offset>) ->\nResult<CommonInformationEntry<R>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed FDE for the given address, or `NoUnwindInfoForAddress`\n if there are none.","sig":null,"attributes":[{"value":"/ Returns a parsed FDE for the given address, or `NoUnwindInfoForAddress`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":124708,"byte_end":124783,"line_start":303,"line_end":303,"column_start":5,"column_end":80}},{"value":"/ if there are none.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":124788,"byte_end":124810,"line_start":304,"line_end":304,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":124815,"byte_end":124818,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ You must provide a function to get its associated CIE. See","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":124823,"byte_end":124885,"line_start":306,"line_end":306,"column_start":5,"column_end":67}},{"value":"/ `PartialFrameDescriptionEntry::parse` for more information.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":124890,"byte_end":124953,"line_start":307,"line_end":307,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":124958,"byte_end":124961,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":124966,"byte_end":124979,"line_start":309,"line_end":309,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":124984,"byte_end":124987,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":124992,"byte_end":124999,"line_start":311,"line_end":311,"column_start":5,"column_end":12}},{"value":"/ # use gimli::{BaseAddresses, EhFrame, ParsedEhFrameHdr, EndianSlice, NativeEndian, Error, UnwindSection};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":125004,"byte_end":125113,"line_start":312,"line_end":312,"column_start":5,"column_end":114}},{"value":"/ # fn foo() -> Result<(), Error> {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":125118,"byte_end":125155,"line_start":313,"line_end":313,"column_start":5,"column_end":42}},{"value":"/ # let eh_frame: EhFrame<EndianSlice<NativeEndian>> = unreachable!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":125160,"byte_end":125232,"line_start":314,"line_end":314,"column_start":5,"column_end":77}},{"value":"/ # let eh_frame_hdr: ParsedEhFrameHdr<EndianSlice<NativeEndian>> = unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":125237,"byte_end":125324,"line_start":315,"line_end":315,"column_start":5,"column_end":92}},{"value":"/ # let addr = 0;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":125329,"byte_end":125348,"line_start":316,"line_end":316,"column_start":5,"column_end":24}},{"value":"/ # let bases = unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":125353,"byte_end":125388,"line_start":317,"line_end":317,"column_start":5,"column_end":40}},{"value":"/ let table = eh_frame_hdr.table().unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":125393,"byte_end":125439,"line_start":318,"line_end":318,"column_start":5,"column_end":51}},{"value":"/ let fde = table.fde_for_address(&eh_frame, &bases, addr, EhFrame::cie_from_offset)?;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":125444,"byte_end":125532,"line_start":319,"line_end":319,"column_start":5,"column_end":93}},{"value":"/ # Ok(())","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":125537,"byte_end":125549,"line_start":320,"line_end":320,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":125554,"byte_end":125561,"line_start":321,"line_end":321,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":125566,"byte_end":125573,"line_start":322,"line_end":322,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":126374,"byte_end":126390,"line_start":350,"line_end":350,"column_start":12,"column_end":28},"name":"lookup_and_parse","qualname":"<EhHdrTable>::lookup_and_parse","value":"pub fn lookup_and_parse<F>(&Self, u64, &BaseAddresses, EhFrame<R>, F)\n-> Result<FrameDescriptionEntry<R>> where\nF: FnMut(&EhFrame<R>, &BaseAddresses, EhFrameOffset<R::Offset>) ->\nResult<CommonInformationEntry<R>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":126253,"byte_end":126262,"line_start":347,"line_end":347,"column_start":5,"column_end":14}},{"value":"deprecated(note = \"Method renamed to fde_for_address; use that instead.\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":126286,"byte_end":126362,"line_start":349,"line_end":349,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":127071,"byte_end":127094,"line_start":372,"line_end":372,"column_start":12,"column_end":35},"name":"unwind_info_for_address","qualname":"<EhHdrTable>::unwind_info_for_address","value":"pub fn unwind_info_for_address<F>(&Self, &EhFrame<R>, &BaseAddresses,\n                                  &mut UninitializedUnwindContext<R>, u64, F)\n-> Result<UnwindTableRow<R>> where\nF: FnMut(&EhFrame<R>, &BaseAddresses, EhFrameOffset<R::Offset>) ->\nResult<CommonInformationEntry<R>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the frame unwind information for the given address,\n or `NoUnwindInfoForAddress` if there are none.","sig":null,"attributes":[{"value":"/ Returns the frame unwind information for the given address,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":126798,"byte_end":126861,"line_start":367,"line_end":367,"column_start":5,"column_end":68}},{"value":"/ or `NoUnwindInfoForAddress` if there are none.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":126866,"byte_end":126916,"line_start":368,"line_end":368,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":126921,"byte_end":126924,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ You must provide a function to get the associated CIE. See","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":126929,"byte_end":126991,"line_start":370,"line_end":370,"column_start":5,"column_end":67}},{"value":"/ `PartialFrameDescriptionEntry::parse` for more information.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":126996,"byte_end":127059,"line_start":371,"line_end":371,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":5684},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128096,"byte_end":128103,"line_start":403,"line_end":403,"column_start":12,"column_end":19},"name":"EhFrame","qualname":"::read::cfi::EhFrame","value":"EhFrame {  }","parent":null,"children":[{"krate":0,"index":5686},{"krate":0,"index":5687}],"decl_id":null,"docs":" `EhFrame` contains the frame unwinding information needed during exception\n handling found in the `.eh_frame` section.","sig":null,"attributes":[{"value":"/ `EhFrame` contains the frame unwinding information needed during exception","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":127618,"byte_end":127696,"line_start":392,"line_end":392,"column_start":1,"column_end":79}},{"value":"/ handling found in the `.eh_frame` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":127697,"byte_end":127743,"line_start":393,"line_end":393,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":127744,"byte_end":127747,"line_start":394,"line_end":394,"column_start":1,"column_end":4}},{"value":"/ Most interesting methods are defined in the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":127748,"byte_end":127795,"line_start":395,"line_end":395,"column_start":1,"column_end":48}},{"value":"/ [`UnwindSection`](trait.UnwindSection.html) trait.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":127796,"byte_end":127850,"line_start":396,"line_end":396,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":127851,"byte_end":127854,"line_start":397,"line_end":397,"column_start":1,"column_end":4}},{"value":"/ See","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":127855,"byte_end":127862,"line_start":398,"line_end":398,"column_start":1,"column_end":8}},{"value":"/ [`DebugFrame`](./struct.DebugFrame.html#differences-between-debug_frame-and-eh_frame)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":127863,"byte_end":127952,"line_start":399,"line_end":399,"column_start":1,"column_end":90}},{"value":"/ for some discussion on the differences between `.debug_frame` and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":127953,"byte_end":128022,"line_start":400,"line_end":400,"column_start":1,"column_end":70}},{"value":"/ `.eh_frame`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128023,"byte_end":128039,"line_start":401,"line_end":401,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128304,"byte_end":128320,"line_start":412,"line_end":412,"column_start":12,"column_end":28},"name":"set_address_size","qualname":"<EhFrame<R>>::set_address_size","value":"pub fn set_address_size(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Set the size of a target address in bytes.","sig":null,"attributes":[{"value":"/ Set the size of a target address in bytes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128191,"byte_end":128237,"line_start":409,"line_end":409,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128242,"byte_end":128245,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ This defaults to the native word size.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128250,"byte_end":128292,"line_start":411,"line_end":411,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":129117,"byte_end":129120,"line_start":436,"line_end":436,"column_start":12,"column_end":15},"name":"new","qualname":"<EhFrame<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `EhFrame` instance from the data in the\n `.debug_frame` section.","sig":null,"attributes":[{"value":"/ Construct a new `EhFrame` instance from the data in the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128495,"byte_end":128554,"line_start":421,"line_end":421,"column_start":5,"column_end":64}},{"value":"/ `.debug_frame` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128559,"byte_end":128586,"line_start":422,"line_end":422,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128591,"byte_end":128594,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the section and present it as","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128599,"byte_end":128674,"line_start":424,"line_end":424,"column_start":5,"column_end":80}},{"value":"/ a `&[u8]` slice. That means using some ELF loader on Linux, a Mach-O","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128679,"byte_end":128751,"line_start":425,"line_end":425,"column_start":5,"column_end":77}},{"value":"/ loader on OSX, etc.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128756,"byte_end":128779,"line_start":426,"line_end":426,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128784,"byte_end":128787,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128792,"byte_end":128799,"line_start":428,"line_end":428,"column_start":5,"column_end":12}},{"value":"/ use gimli::{EhFrame, EndianSlice, NativeEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128804,"byte_end":128856,"line_start":429,"line_end":429,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128861,"byte_end":128864,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ // Use with `.debug_frame`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128869,"byte_end":128899,"line_start":431,"line_end":431,"column_start":5,"column_end":35}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128904,"byte_end":128945,"line_start":432,"line_end":432,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_frame_section_somehow = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128950,"byte_end":129003,"line_start":433,"line_end":433,"column_start":5,"column_end":58}},{"value":"/ let debug_frame = EhFrame::new(read_debug_frame_section_somehow(), NativeEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":129008,"byte_end":129093,"line_start":434,"line_end":434,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":129098,"byte_end":129105,"line_start":435,"line_end":435,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5708},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":129894,"byte_end":129897,"line_start":467,"line_end":467,"column_start":5,"column_end":8},"name":"U32","qualname":"::read::cfi::CieOffsetEncoding::U32","value":"CieOffsetEncoding::U32","parent":{"krate":0,"index":5707},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5710},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":129903,"byte_end":129906,"line_start":468,"line_end":468,"column_start":5,"column_end":8},"name":"U64","qualname":"::read::cfi::CieOffsetEncoding::U64","value":"CieOffsetEncoding::U64","parent":{"krate":0,"index":5707},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5707},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":129870,"byte_end":129887,"line_start":466,"line_end":466,"column_start":10,"column_end":27},"name":"CieOffsetEncoding","qualname":"::read::cfi::CieOffsetEncoding","value":"pub enum CieOffsetEncoding { U32, U64, }","parent":null,"children":[{"krate":0,"index":5708},{"krate":0,"index":5710}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":129793,"byte_end":129815,"line_start":464,"line_end":464,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":246},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130024,"byte_end":130036,"line_start":474,"line_end":474,"column_start":11,"column_end":23},"name":"UnwindOffset","qualname":"::read::cfi::UnwindOffset","value":"UnwindOffset<T = usize>: Copy + Debug + Eq + From<T>","parent":null,"children":[{"krate":0,"index":248}],"decl_id":null,"docs":" An offset into an `UnwindSection`.\n","sig":null,"attributes":[{"value":"/ An offset into an `UnwindSection`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":129911,"byte_end":129949,"line_start":471,"line_end":471,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130162,"byte_end":130166,"line_start":479,"line_end":479,"column_start":8,"column_end":12},"name":"into","qualname":"::read::cfi::UnwindOffset::into","value":"pub fn into(Self) -> T","parent":{"krate":0,"index":246},"children":[],"decl_id":null,"docs":" Convert an `UnwindOffset<T>` into a `T`.\n","sig":null,"attributes":[{"value":"/ Convert an `UnwindOffset<T>` into a `T`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130110,"byte_end":130154,"line_start":478,"line_end":478,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":255},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130664,"byte_end":130685,"line_start":506,"line_end":506,"column_start":11,"column_end":32},"name":"_UnwindSectionPrivate","qualname":"::read::cfi::_UnwindSectionPrivate","value":"_UnwindSectionPrivate<R: Reader>","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264}],"decl_id":null,"docs":" This trait completely encapsulates everything that is different between\n `.eh_frame` and `.debug_frame`, as well as all the bits that can change\n between DWARF versions.\n","sig":null,"attributes":[{"value":"/ This trait completely encapsulates everything that is different between","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130459,"byte_end":130534,"line_start":502,"line_end":502,"column_start":1,"column_end":76}},{"value":"/ `.eh_frame` and `.debug_frame`, as well as all the bits that can change","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130535,"byte_end":130610,"line_start":503,"line_end":503,"column_start":1,"column_end":76}},{"value":"/ between DWARF versions.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130611,"byte_end":130638,"line_start":504,"line_end":504,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130747,"byte_end":130754,"line_start":508,"line_end":508,"column_start":8,"column_end":15},"name":"section","qualname":"::read::cfi::_UnwindSectionPrivate::section","value":"pub fn section(&Self) -> &R","parent":{"krate":0,"index":255},"children":[],"decl_id":null,"docs":" Get the underlying section data.\n","sig":null,"attributes":[{"value":"/ Get the underlying section data.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130703,"byte_end":130739,"line_start":507,"line_end":507,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130881,"byte_end":130911,"line_start":512,"line_end":512,"column_start":8,"column_end":38},"name":"length_value_is_end_of_entries","qualname":"::read::cfi::_UnwindSectionPrivate::length_value_is_end_of_entries","value":"pub fn length_value_is_end_of_entries(R::Offset) -> bool","parent":{"krate":0,"index":255},"children":[],"decl_id":null,"docs":" Returns true if the given length value should be considered an\n end-of-entries sentinel.\n","sig":null,"attributes":[{"value":"/ Returns true if the given length value should be considered an","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130774,"byte_end":130840,"line_start":510,"line_end":510,"column_start":5,"column_end":71}},{"value":"/ end-of-entries sentinel.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130845,"byte_end":130873,"line_start":511,"line_end":511,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":131026,"byte_end":131032,"line_start":515,"line_end":515,"column_start":8,"column_end":14},"name":"is_cie","qualname":"::read::cfi::_UnwindSectionPrivate::is_cie","value":"pub fn is_cie(Format, u64) -> bool","parent":{"krate":0,"index":255},"children":[],"decl_id":null,"docs":" Return true if the given offset if the CIE sentinel, false otherwise.\n","sig":null,"attributes":[{"value":"/ Return true if the given offset if the CIE sentinel, false otherwise.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130945,"byte_end":131018,"line_start":514,"line_end":514,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":131182,"byte_end":131201,"line_start":519,"line_end":519,"column_start":8,"column_end":27},"name":"cie_offset_encoding","qualname":"::read::cfi::_UnwindSectionPrivate::cie_offset_encoding","value":"pub fn cie_offset_encoding(Format) -> CieOffsetEncoding","parent":{"krate":0,"index":255},"children":[],"decl_id":null,"docs":" Return the CIE offset/ID encoding used by this unwind section with the\n given DWARF format.\n","sig":null,"attributes":[{"value":"/ Return the CIE offset/ID encoding used by this unwind section with the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":131072,"byte_end":131146,"line_start":517,"line_end":517,"column_start":5,"column_end":79}},{"value":"/ given DWARF format.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":131151,"byte_end":131174,"line_start":518,"line_end":518,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":131604,"byte_end":131622,"line_start":526,"line_end":526,"column_start":8,"column_end":26},"name":"resolve_cie_offset","qualname":"::read::cfi::_UnwindSectionPrivate::resolve_cie_offset","value":"pub fn resolve_cie_offset(&Self, R::Offset, R::Offset) -> Option<R::Offset>","parent":{"krate":0,"index":255},"children":[],"decl_id":null,"docs":" For `.eh_frame`, CIE offsets are relative to the current position. For\n `.debug_frame`, they are relative to the start of the section. We always\n internally store them relative to the section, so we handle translating\n `.eh_frame`'s relative offsets in this method. If the offset calculation\n underflows, return `None`.\n","sig":null,"attributes":[{"value":"/ For `.eh_frame`, CIE offsets are relative to the current position. For","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":131245,"byte_end":131319,"line_start":521,"line_end":521,"column_start":5,"column_end":79}},{"value":"/ `.debug_frame`, they are relative to the start of the section. We always","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":131324,"byte_end":131400,"line_start":522,"line_end":522,"column_start":5,"column_end":81}},{"value":"/ internally store them relative to the section, so we handle translating","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":131405,"byte_end":131480,"line_start":523,"line_end":523,"column_start":5,"column_end":80}},{"value":"/ `.eh_frame`'s relative offsets in this method. If the offset calculation","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":131485,"byte_end":131561,"line_start":524,"line_end":524,"column_start":5,"column_end":81}},{"value":"/ underflows, return `None`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":131566,"byte_end":131596,"line_start":525,"line_end":525,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":131799,"byte_end":131828,"line_start":530,"line_end":530,"column_start":8,"column_end":37},"name":"has_address_and_segment_sizes","qualname":"::read::cfi::_UnwindSectionPrivate::has_address_and_segment_sizes","value":"pub fn has_address_and_segment_sizes(u8) -> bool","parent":{"krate":0,"index":255},"children":[],"decl_id":null,"docs":" Does this version of this unwind section encode address and segment\n sizes in its CIEs?\n","sig":null,"attributes":[{"value":"/ Does this version of this unwind section encode address and segment","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":131693,"byte_end":131764,"line_start":528,"line_end":528,"column_start":5,"column_end":76}},{"value":"/ sizes in its CIEs?","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":131769,"byte_end":131791,"line_start":529,"line_end":529,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":131941,"byte_end":131953,"line_start":533,"line_end":533,"column_start":8,"column_end":20},"name":"address_size","qualname":"::read::cfi::_UnwindSectionPrivate::address_size","value":"pub fn address_size(&Self) -> u8","parent":{"krate":0,"index":255},"children":[],"decl_id":null,"docs":" The address size to use if `has_address_and_segment_sizes` returns false.\n","sig":null,"attributes":[{"value":"/ The address size to use if `has_address_and_segment_sizes` returns false.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":131856,"byte_end":131933,"line_start":532,"line_end":532,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":132058,"byte_end":132070,"line_start":536,"line_end":536,"column_start":8,"column_end":20},"name":"segment_size","qualname":"::read::cfi::_UnwindSectionPrivate::segment_size","value":"pub fn segment_size(&Self) -> u8","parent":{"krate":0,"index":255},"children":[],"decl_id":null,"docs":" The segment size to use if `has_address_and_segment_sizes` returns false.\n","sig":null,"attributes":[{"value":"/ The segment size to use if `has_address_and_segment_sizes` returns false.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":131973,"byte_end":132050,"line_start":535,"line_end":535,"column_start":5,"column_end":82}}]},{"kind":"Trait","id":{"krate":0,"index":265},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":132284,"byte_end":132297,"line_start":542,"line_end":542,"column_start":11,"column_end":24},"name":"UnwindSection","qualname":"::read::cfi::UnwindSection","value":"UnwindSection<R: Reader>: Clone + Debug + _UnwindSectionPrivate<R>","parent":null,"children":[{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":273},{"krate":0,"index":275},{"krate":0,"index":277}],"decl_id":null,"docs":" A section holding unwind information: either `.debug_frame` or\n `.eh_frame`. See [`DebugFrame`](./struct.DebugFrame.html) and\n [`EhFrame`](./struct.EhFrame.html) respectively.\n","sig":null,"attributes":[{"value":"/ A section holding unwind information: either `.debug_frame` or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":132088,"byte_end":132154,"line_start":539,"line_end":539,"column_start":1,"column_end":67}},{"value":"/ `.eh_frame`. See [`DebugFrame`](./struct.DebugFrame.html) and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":132155,"byte_end":132220,"line_start":540,"line_end":540,"column_start":1,"column_end":66}},{"value":"/ [`EhFrame`](./struct.EhFrame.html) respectively.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":132221,"byte_end":132273,"line_start":541,"line_end":541,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":267},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":132474,"byte_end":132480,"line_start":545,"line_end":545,"column_start":10,"column_end":16},"name":"Offset","qualname":"::read::cfi::UnwindSection::Offset","value":"type Offset: UnwindOffset<R::Offset>;","parent":{"krate":0,"index":265},"children":[],"decl_id":null,"docs":" The offset type associated with this CFI section. Either\n `DebugFrameOffset` or `EhFrameOffset`.\n","sig":null,"attributes":[{"value":"/ The offset type associated with this CFI section. Either","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":132357,"byte_end":132417,"line_start":543,"line_end":543,"column_start":5,"column_end":65}},{"value":"/ `DebugFrameOffset` or `EhFrameOffset`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":132422,"byte_end":132464,"line_start":544,"line_end":544,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":132740,"byte_end":132747,"line_start":552,"line_end":552,"column_start":8,"column_end":15},"name":"entries","qualname":"::read::cfi::UnwindSection::entries","value":"pub fn entries<'bases>(&Self, &'bases BaseAddresses) -> CfiEntriesIter","parent":{"krate":0,"index":265},"children":[],"decl_id":null,"docs":" Iterate over the `CommonInformationEntry`s and `FrameDescriptionEntry`s\n in this `.debug_frame` section.","sig":null,"attributes":[{"value":"/ Iterate over the `CommonInformationEntry`s and `FrameDescriptionEntry`s","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":132512,"byte_end":132587,"line_start":547,"line_end":547,"column_start":5,"column_end":80}},{"value":"/ in this `.debug_frame` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":132592,"byte_end":132627,"line_start":548,"line_end":548,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":132632,"byte_end":132635,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":132640,"byte_end":132661,"line_start":550,"line_end":550,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":132666,"byte_end":132732,"line_start":551,"line_end":551,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":133040,"byte_end":133055,"line_start":561,"line_end":561,"column_start":8,"column_end":23},"name":"cie_from_offset","qualname":"::read::cfi::UnwindSection::cie_from_offset","value":"pub fn cie_from_offset(&Self, &BaseAddresses, Self::Offset)\n-> Result<CommonInformationEntry<R>>","parent":{"krate":0,"index":265},"children":[],"decl_id":null,"docs":" Parse the `CommonInformationEntry` at the given offset.\n","sig":null,"attributes":[{"value":"/ Parse the `CommonInformationEntry` at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":132973,"byte_end":133032,"line_start":560,"line_end":560,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":133447,"byte_end":133470,"line_start":573,"line_end":573,"column_start":8,"column_end":31},"name":"partial_fde_from_offset","qualname":"::read::cfi::UnwindSection::partial_fde_from_offset","value":"pub fn partial_fde_from_offset<'bases>(&Self, &'bases BaseAddresses,\n                                       Self::Offset)\n-> Result<PartialFrameDescriptionEntry>","parent":{"krate":0,"index":265},"children":[],"decl_id":null,"docs":" Parse the `PartialFrameDescriptionEntry` at the given offset.\n","sig":null,"attributes":[{"value":"/ Parse the `PartialFrameDescriptionEntry` at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":133374,"byte_end":133439,"line_start":572,"line_end":572,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":133904,"byte_end":133919,"line_start":585,"line_end":585,"column_start":8,"column_end":23},"name":"fde_from_offset","qualname":"::read::cfi::UnwindSection::fde_from_offset","value":"pub fn fde_from_offset<F>(&Self, &BaseAddresses, Self::Offset, F)\n-> Result<FrameDescriptionEntry<R>> where\nF: FnMut(&Self, &BaseAddresses, Self::Offset) ->\nResult<CommonInformationEntry<R>>","parent":{"krate":0,"index":265},"children":[],"decl_id":null,"docs":" Parse the `FrameDescriptionEntry` at the given offset.\n","sig":null,"attributes":[{"value":"/ Parse the `FrameDescriptionEntry` at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":133838,"byte_end":133896,"line_start":584,"line_end":584,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":134820,"byte_end":134835,"line_start":609,"line_end":609,"column_start":8,"column_end":23},"name":"fde_for_address","qualname":"::read::cfi::UnwindSection::fde_for_address","value":"pub fn fde_for_address<F>(&Self, &BaseAddresses, u64, F)\n-> Result<FrameDescriptionEntry<R>> where\nF: FnMut(&Self, &BaseAddresses, Self::Offset) ->\nResult<CommonInformationEntry<R>>","parent":{"krate":0,"index":265},"children":[],"decl_id":null,"docs":" Find the `FrameDescriptionEntry` for the given address.","sig":null,"attributes":[{"value":"/ Find the `FrameDescriptionEntry` for the given address.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":134280,"byte_end":134339,"line_start":598,"line_end":598,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":134344,"byte_end":134347,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ If found, the FDE is returned.  If not found,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":134352,"byte_end":134401,"line_start":600,"line_end":600,"column_start":5,"column_end":54}},{"value":"/ `Err(gimli::Error::NoUnwindInfoForAddress)` is returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":134406,"byte_end":134466,"line_start":601,"line_end":601,"column_start":5,"column_end":65}},{"value":"/ If parsing fails, the error is returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":134471,"byte_end":134515,"line_start":602,"line_end":602,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":134520,"byte_end":134523,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ You must provide a function to get its associated CIE. See","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":134528,"byte_end":134590,"line_start":604,"line_end":604,"column_start":5,"column_end":67}},{"value":"/ `PartialFrameDescriptionEntry::parse` for more information.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":134595,"byte_end":134658,"line_start":605,"line_end":605,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":134663,"byte_end":134666,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ Note: this iterates over all FDEs. If available, it is possible","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":134671,"byte_end":134738,"line_start":607,"line_end":607,"column_start":5,"column_end":72}},{"value":"/ to do a binary search with `EhFrameHdr::fde_for_address` instead.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":134743,"byte_end":134812,"line_start":608,"line_end":608,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137485,"byte_end":137508,"line_start":679,"line_end":679,"column_start":8,"column_end":31},"name":"unwind_info_for_address","qualname":"::read::cfi::UnwindSection::unwind_info_for_address","value":"pub fn unwind_info_for_address<F>(&Self, &BaseAddresses,\n                                  &mut UninitializedUnwindContext<R>, u64, F)\n-> Result<UnwindTableRow<R>> where\nF: FnMut(&Self, &BaseAddresses, Self::Offset) ->\nResult<CommonInformationEntry<R>>","parent":{"krate":0,"index":265},"children":[],"decl_id":null,"docs":" Find the frame unwind information for the given address.","sig":null,"attributes":[{"value":"/ Find the frame unwind information for the given address.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":135553,"byte_end":135613,"line_start":633,"line_end":633,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":135618,"byte_end":135621,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ If found, the unwind information is returned.  If not found,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":135626,"byte_end":135690,"line_start":635,"line_end":635,"column_start":5,"column_end":69}},{"value":"/ `Err(gimli::Error::NoUnwindInfoForAddress)` is returned. If parsing or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":135695,"byte_end":135769,"line_start":636,"line_end":636,"column_start":5,"column_end":79}},{"value":"/ CFI evaluation fails, the error is returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":135774,"byte_end":135822,"line_start":637,"line_end":637,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":135827,"byte_end":135830,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":135835,"byte_end":135842,"line_start":639,"line_end":639,"column_start":5,"column_end":12}},{"value":"/ use gimli::{BaseAddresses, EhFrame, EndianSlice, NativeEndian, UninitializedUnwindContext,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":135847,"byte_end":135941,"line_start":640,"line_end":640,"column_start":5,"column_end":99}},{"value":"/             UnwindSection};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":135946,"byte_end":135977,"line_start":641,"line_end":641,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":135982,"byte_end":135985,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ # fn foo() -> gimli::Result<()> {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":135990,"byte_end":136027,"line_start":643,"line_end":643,"column_start":5,"column_end":42}},{"value":"/ # let read_eh_frame_section = || unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":136032,"byte_end":136086,"line_start":644,"line_end":644,"column_start":5,"column_end":59}},{"value":"/ // Get the `.eh_frame` section from the object file. Alternatively,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":136091,"byte_end":136162,"line_start":645,"line_end":645,"column_start":5,"column_end":76}},{"value":"/ // use `EhFrame` with the `.eh_frame` section of the object file.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":136167,"byte_end":136236,"line_start":646,"line_end":646,"column_start":5,"column_end":74}},{"value":"/ let eh_frame = EhFrame::new(read_eh_frame_section(), NativeEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":136241,"byte_end":136312,"line_start":647,"line_end":647,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":136317,"byte_end":136320,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ # let get_frame_pc = || unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":136325,"byte_end":136370,"line_start":649,"line_end":649,"column_start":5,"column_end":50}},{"value":"/ // Get the address of the PC for a frame you'd like to unwind.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":136375,"byte_end":136441,"line_start":650,"line_end":650,"column_start":5,"column_end":71}},{"value":"/ let address = get_frame_pc();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":136446,"byte_end":136479,"line_start":651,"line_end":651,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":136484,"byte_end":136487,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ // This context is reusable, which cuts down on heap allocations.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":136492,"byte_end":136561,"line_start":653,"line_end":653,"column_start":5,"column_end":74}},{"value":"/ let ctx = UninitializedUnwindContext::new();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":136566,"byte_end":136614,"line_start":654,"line_end":654,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":136619,"byte_end":136622,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ // Optionally provide base addresses for any relative pointers. If a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":136627,"byte_end":136699,"line_start":656,"line_end":656,"column_start":5,"column_end":77}},{"value":"/ // base address isn't provided and a pointer is found that is relative to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":136704,"byte_end":136781,"line_start":657,"line_end":657,"column_start":5,"column_end":82}},{"value":"/ // it, we will return an `Err`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":136786,"byte_end":136821,"line_start":658,"line_end":658,"column_start":5,"column_end":40}},{"value":"/ # let address_of_text_section_in_memory = unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":136826,"byte_end":136889,"line_start":659,"line_end":659,"column_start":5,"column_end":68}},{"value":"/ # let address_of_got_section_in_memory = unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":136894,"byte_end":136956,"line_start":660,"line_end":660,"column_start":5,"column_end":67}},{"value":"/ let bases = BaseAddresses::default()","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":136961,"byte_end":137001,"line_start":661,"line_end":661,"column_start":5,"column_end":45}},{"value":"/     .set_text(address_of_text_section_in_memory)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137006,"byte_end":137058,"line_start":662,"line_end":662,"column_start":5,"column_end":57}},{"value":"/     .set_got(address_of_got_section_in_memory);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137063,"byte_end":137114,"line_start":663,"line_end":663,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137119,"byte_end":137122,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ let unwind_info = eh_frame.unwind_info_for_address(","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137127,"byte_end":137182,"line_start":665,"line_end":665,"column_start":5,"column_end":60}},{"value":"/     &bases,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137187,"byte_end":137202,"line_start":666,"line_end":666,"column_start":5,"column_end":20}},{"value":"/     &mut ctx,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137207,"byte_end":137224,"line_start":667,"line_end":667,"column_start":5,"column_end":22}},{"value":"/     address,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137229,"byte_end":137245,"line_start":668,"line_end":668,"column_start":5,"column_end":21}},{"value":"/     EhFrame::cie_from_offset,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137250,"byte_end":137283,"line_start":669,"line_end":669,"column_start":5,"column_end":38}},{"value":"/ )?;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137288,"byte_end":137295,"line_start":670,"line_end":670,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137300,"byte_end":137303,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ # let do_stuff_with = |_| unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137308,"byte_end":137355,"line_start":672,"line_end":672,"column_start":5,"column_end":52}},{"value":"/ do_stuff_with(unwind_info);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137360,"byte_end":137391,"line_start":673,"line_end":673,"column_start":5,"column_end":36}},{"value":"/ # let _ = ctx;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137396,"byte_end":137414,"line_start":674,"line_end":674,"column_start":5,"column_end":23}},{"value":"/ # unreachable!()","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137419,"byte_end":137439,"line_start":675,"line_end":675,"column_start":5,"column_end":25}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137444,"byte_end":137451,"line_start":676,"line_end":676,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137456,"byte_end":137463,"line_start":677,"line_end":677,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137468,"byte_end":137477,"line_start":678,"line_end":678,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":5723},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140895,"byte_end":140908,"line_start":801,"line_end":801,"column_start":12,"column_end":25},"name":"BaseAddresses","qualname":"::read::cfi::BaseAddresses","value":"BaseAddresses { eh_frame_hdr, eh_frame }","parent":null,"children":[{"krate":0,"index":5724},{"krate":0,"index":5725}],"decl_id":null,"docs":" Optional base addresses for the relative `DW_EH_PE_*` encoded pointers.","sig":null,"attributes":[{"value":"/ Optional base addresses for the relative `DW_EH_PE_*` encoded pointers.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":139916,"byte_end":139991,"line_start":778,"line_end":778,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":139992,"byte_end":139995,"line_start":779,"line_end":779,"column_start":1,"column_end":4}},{"value":"/ During CIE/FDE parsing, if a relative pointer is encountered for a base","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":139996,"byte_end":140071,"line_start":780,"line_end":780,"column_start":1,"column_end":76}},{"value":"/ address that is unknown, an Err will be returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140072,"byte_end":140125,"line_start":781,"line_end":781,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140126,"byte_end":140129,"line_start":782,"line_end":782,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140130,"byte_end":140137,"line_start":783,"line_end":783,"column_start":1,"column_end":8}},{"value":"/ use gimli::BaseAddresses;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140138,"byte_end":140167,"line_start":784,"line_end":784,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140168,"byte_end":140171,"line_start":785,"line_end":785,"column_start":1,"column_end":4}},{"value":"/ # fn foo() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140172,"byte_end":140188,"line_start":786,"line_end":786,"column_start":1,"column_end":17}},{"value":"/ # let address_of_eh_frame_hdr_section_in_memory = unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140189,"byte_end":140260,"line_start":787,"line_end":787,"column_start":1,"column_end":72}},{"value":"/ # let address_of_eh_frame_section_in_memory = unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140261,"byte_end":140328,"line_start":788,"line_end":788,"column_start":1,"column_end":68}},{"value":"/ # let address_of_text_section_in_memory = unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140329,"byte_end":140392,"line_start":789,"line_end":789,"column_start":1,"column_end":64}},{"value":"/ # let address_of_got_section_in_memory = unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140393,"byte_end":140455,"line_start":790,"line_end":790,"column_start":1,"column_end":63}},{"value":"/ # let address_of_the_start_of_current_func = unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140456,"byte_end":140522,"line_start":791,"line_end":791,"column_start":1,"column_end":67}},{"value":"/ let bases = BaseAddresses::default()","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140523,"byte_end":140563,"line_start":792,"line_end":792,"column_start":1,"column_end":41}},{"value":"/     .set_eh_frame_hdr(address_of_eh_frame_hdr_section_in_memory)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140564,"byte_end":140632,"line_start":793,"line_end":793,"column_start":1,"column_end":69}},{"value":"/     .set_eh_frame(address_of_eh_frame_section_in_memory)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140633,"byte_end":140693,"line_start":794,"line_end":794,"column_start":1,"column_end":61}},{"value":"/     .set_text(address_of_text_section_in_memory)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140694,"byte_end":140746,"line_start":795,"line_end":795,"column_start":1,"column_end":53}},{"value":"/     .set_got(address_of_got_section_in_memory);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140747,"byte_end":140798,"line_start":796,"line_end":796,"column_start":1,"column_end":52}},{"value":"/ # let _ = bases;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140799,"byte_end":140819,"line_start":797,"line_end":797,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140820,"byte_end":140827,"line_start":798,"line_end":798,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140828,"byte_end":140835,"line_start":799,"line_end":799,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":5724},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140998,"byte_end":141010,"line_start":803,"line_end":803,"column_start":9,"column_end":21},"name":"eh_frame_hdr","qualname":"::read::cfi::BaseAddresses::eh_frame_hdr","value":"read::cfi::SectionBaseAddresses","parent":{"krate":0,"index":5723},"children":[],"decl_id":null,"docs":" The base addresses to use for pointers in the `.eh_frame_hdr` section.\n","sig":null,"attributes":[{"value":"/ The base addresses to use for pointers in the `.eh_frame_hdr` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":140915,"byte_end":140989,"line_start":802,"line_end":802,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":5725},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141118,"byte_end":141126,"line_start":806,"line_end":806,"column_start":9,"column_end":17},"name":"eh_frame","qualname":"::read::cfi::BaseAddresses::eh_frame","value":"read::cfi::SectionBaseAddresses","parent":{"krate":0,"index":5723},"children":[],"decl_id":null,"docs":" The base addresses to use for pointers in the `.eh_frame` section.\n","sig":null,"attributes":[{"value":"/ The base addresses to use for pointers in the `.eh_frame` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141039,"byte_end":141109,"line_start":805,"line_end":805,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":5739},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141401,"byte_end":141421,"line_start":814,"line_end":814,"column_start":12,"column_end":32},"name":"SectionBaseAddresses","qualname":"::read::cfi::SectionBaseAddresses","value":"SectionBaseAddresses { section, text, data }","parent":null,"children":[{"krate":0,"index":5740},{"krate":0,"index":5741},{"krate":0,"index":5742}],"decl_id":null,"docs":" Optional base addresses for the relative `DW_EH_PE_*` encoded pointers\n in a particular section.","sig":null,"attributes":[{"value":"/ Optional base addresses for the relative `DW_EH_PE_*` encoded pointers","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141153,"byte_end":141227,"line_start":809,"line_end":809,"column_start":1,"column_end":75}},{"value":"/ in a particular section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141228,"byte_end":141256,"line_start":810,"line_end":810,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141257,"byte_end":141260,"line_start":811,"line_end":811,"column_start":1,"column_end":4}},{"value":"/ See `BaseAddresses` for methods that are helpful in setting these addresses.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141261,"byte_end":141341,"line_start":812,"line_end":812,"column_start":1,"column_end":81}}]},{"kind":"Field","id":{"krate":0,"index":5740},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141491,"byte_end":141498,"line_start":816,"line_end":816,"column_start":9,"column_end":16},"name":"section","qualname":"::read::cfi::SectionBaseAddresses::section","value":"core::option::Option<u64>","parent":{"krate":0,"index":5739},"children":[],"decl_id":null,"docs":" The address of the section containing the pointer.\n","sig":null,"attributes":[{"value":"/ The address of the section containing the pointer.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141428,"byte_end":141482,"line_start":815,"line_end":815,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":5741},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141637,"byte_end":141641,"line_start":820,"line_end":820,"column_start":9,"column_end":13},"name":"text","qualname":"::read::cfi::SectionBaseAddresses::text","value":"core::option::Option<u64>","parent":{"krate":0,"index":5739},"children":[],"decl_id":null,"docs":" The base address for text relative pointers.\n This is generally the address of the `.text` section.\n","sig":null,"attributes":[{"value":"/ The base address for text relative pointers.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141518,"byte_end":141566,"line_start":818,"line_end":818,"column_start":5,"column_end":53}},{"value":"/ This is generally the address of the `.text` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141571,"byte_end":141628,"line_start":819,"line_end":819,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":5742},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141984,"byte_end":141988,"line_start":829,"line_end":829,"column_start":9,"column_end":13},"name":"data","qualname":"::read::cfi::SectionBaseAddresses::data","value":"core::option::Option<u64>","parent":{"krate":0,"index":5739},"children":[],"decl_id":null,"docs":" The base address for data relative pointers.","sig":null,"attributes":[{"value":"/ The base address for data relative pointers.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141661,"byte_end":141709,"line_start":822,"line_end":822,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141714,"byte_end":141717,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ For pointers in the `.eh_frame_hdr` section, this is the address","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141722,"byte_end":141790,"line_start":824,"line_end":824,"column_start":5,"column_end":73}},{"value":"/ of the `.eh_frame_hdr` section","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141795,"byte_end":141829,"line_start":825,"line_end":825,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141834,"byte_end":141837,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ For pointers in the `.eh_frame` section, this is generally the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141842,"byte_end":141908,"line_start":827,"line_end":827,"column_start":5,"column_end":71}},{"value":"/ global pointer, such as the address of the `.got` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":141913,"byte_end":141975,"line_start":828,"line_end":828,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":142106,"byte_end":142122,"line_start":835,"line_end":835,"column_start":12,"column_end":28},"name":"set_eh_frame_hdr","qualname":"<BaseAddresses>::set_eh_frame_hdr","value":"pub fn set_eh_frame_hdr(Self, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the `.eh_frame_hdr` section base address.\n","sig":null,"attributes":[{"value":"/ Set the `.eh_frame_hdr` section base address.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":142031,"byte_end":142080,"line_start":833,"line_end":833,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":142085,"byte_end":142094,"line_start":834,"line_end":834,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":142342,"byte_end":142354,"line_start":843,"line_end":843,"column_start":12,"column_end":24},"name":"set_eh_frame","qualname":"<BaseAddresses>::set_eh_frame","value":"pub fn set_eh_frame(Self, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the `.eh_frame` section base address.\n","sig":null,"attributes":[{"value":"/ Set the `.eh_frame` section base address.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":142271,"byte_end":142316,"line_start":841,"line_end":841,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":142321,"byte_end":142330,"line_start":842,"line_end":842,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":142521,"byte_end":142529,"line_start":850,"line_end":850,"column_start":12,"column_end":20},"name":"set_text","qualname":"<BaseAddresses>::set_text","value":"pub fn set_text(Self, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the `.text` section base address.\n","sig":null,"attributes":[{"value":"/ Set the `.text` section base address.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":142454,"byte_end":142495,"line_start":848,"line_end":848,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":142500,"byte_end":142509,"line_start":849,"line_end":849,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":142737,"byte_end":142744,"line_start":858,"line_end":858,"column_start":12,"column_end":19},"name":"set_got","qualname":"<BaseAddresses>::set_got","value":"pub fn set_got(Self, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the `.got` section base address.\n","sig":null,"attributes":[{"value":"/ Set the `.got` section base address.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":142671,"byte_end":142711,"line_start":856,"line_end":856,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":142716,"byte_end":142725,"line_start":857,"line_end":857,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":5756},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":144532,"byte_end":144546,"line_start":904,"line_end":904,"column_start":12,"column_end":26},"name":"CfiEntriesIter","qualname":"::read::cfi::CfiEntriesIter","value":"CfiEntriesIter {  }","parent":null,"children":[{"krate":0,"index":5760},{"krate":0,"index":5761},{"krate":0,"index":5762}],"decl_id":null,"docs":" An iterator over CIE and FDE entries in a `.debug_frame` or `.eh_frame`\n section.","sig":null,"attributes":[{"value":"/ An iterator over CIE and FDE entries in a `.debug_frame` or `.eh_frame`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":142839,"byte_end":142914,"line_start":864,"line_end":864,"column_start":1,"column_end":76}},{"value":"/ section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":142915,"byte_end":142927,"line_start":865,"line_end":865,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":142928,"byte_end":142931,"line_start":866,"line_end":866,"column_start":1,"column_end":4}},{"value":"/ Some pointers may be encoded relative to various base addresses. Use the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":142932,"byte_end":143008,"line_start":867,"line_end":867,"column_start":1,"column_end":77}},{"value":"/ [`BaseAddresses`](./struct.BaseAddresses.html) parameter to provide them. By","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143009,"byte_end":143089,"line_start":868,"line_end":868,"column_start":1,"column_end":81}},{"value":"/ default, none are provided. If a relative pointer is encountered for a base","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143090,"byte_end":143169,"line_start":869,"line_end":869,"column_start":1,"column_end":80}},{"value":"/ address that is unknown, an `Err` will be returned and iteration will abort.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143170,"byte_end":143250,"line_start":870,"line_end":870,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143251,"byte_end":143254,"line_start":871,"line_end":871,"column_start":1,"column_end":4}},{"value":"/ Can be [used with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143255,"byte_end":143276,"line_start":872,"line_end":872,"column_start":1,"column_end":22}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143277,"byte_end":143343,"line_start":873,"line_end":873,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143344,"byte_end":143347,"line_start":874,"line_end":874,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143348,"byte_end":143355,"line_start":875,"line_end":875,"column_start":1,"column_end":8}},{"value":"/ use gimli::{BaseAddresses, EhFrame, EndianSlice, NativeEndian, UnwindSection};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143356,"byte_end":143438,"line_start":876,"line_end":876,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143439,"byte_end":143442,"line_start":877,"line_end":877,"column_start":1,"column_end":4}},{"value":"/ # fn foo() -> gimli::Result<()> {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143443,"byte_end":143480,"line_start":878,"line_end":878,"column_start":1,"column_end":38}},{"value":"/ # let read_eh_frame_somehow = || unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143481,"byte_end":143535,"line_start":879,"line_end":879,"column_start":1,"column_end":55}},{"value":"/ let eh_frame = EhFrame::new(read_eh_frame_somehow(), NativeEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143536,"byte_end":143607,"line_start":880,"line_end":880,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143608,"byte_end":143611,"line_start":881,"line_end":881,"column_start":1,"column_end":4}},{"value":"/ # let address_of_eh_frame_hdr_section_in_memory = unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143612,"byte_end":143683,"line_start":882,"line_end":882,"column_start":1,"column_end":72}},{"value":"/ # let address_of_eh_frame_section_in_memory = unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143684,"byte_end":143751,"line_start":883,"line_end":883,"column_start":1,"column_end":68}},{"value":"/ # let address_of_text_section_in_memory = unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143752,"byte_end":143815,"line_start":884,"line_end":884,"column_start":1,"column_end":64}},{"value":"/ # let address_of_got_section_in_memory = unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143816,"byte_end":143878,"line_start":885,"line_end":885,"column_start":1,"column_end":63}},{"value":"/ # let address_of_the_start_of_current_func = unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143879,"byte_end":143945,"line_start":886,"line_end":886,"column_start":1,"column_end":67}},{"value":"/ // Provide base addresses for relative pointers.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143946,"byte_end":143998,"line_start":887,"line_end":887,"column_start":1,"column_end":53}},{"value":"/ let bases = BaseAddresses::default()","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":143999,"byte_end":144039,"line_start":888,"line_end":888,"column_start":1,"column_end":41}},{"value":"/     .set_eh_frame_hdr(address_of_eh_frame_hdr_section_in_memory)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":144040,"byte_end":144108,"line_start":889,"line_end":889,"column_start":1,"column_end":69}},{"value":"/     .set_eh_frame(address_of_eh_frame_section_in_memory)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":144109,"byte_end":144169,"line_start":890,"line_end":890,"column_start":1,"column_end":61}},{"value":"/     .set_text(address_of_text_section_in_memory)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":144170,"byte_end":144222,"line_start":891,"line_end":891,"column_start":1,"column_end":53}},{"value":"/     .set_got(address_of_got_section_in_memory);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":144223,"byte_end":144274,"line_start":892,"line_end":892,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":144275,"byte_end":144278,"line_start":893,"line_end":893,"column_start":1,"column_end":4}},{"value":"/ let mut entries = eh_frame.entries(&bases);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":144279,"byte_end":144326,"line_start":894,"line_end":894,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":144327,"byte_end":144330,"line_start":895,"line_end":895,"column_start":1,"column_end":4}},{"value":"/ # let do_stuff_with = |_| unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":144331,"byte_end":144378,"line_start":896,"line_end":896,"column_start":1,"column_end":48}},{"value":"/ while let Some(entry) = entries.next()? {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":144379,"byte_end":144424,"line_start":897,"line_end":897,"column_start":1,"column_end":46}},{"value":"/     do_stuff_with(entry)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":144425,"byte_end":144453,"line_start":898,"line_end":898,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":144454,"byte_end":144459,"line_start":899,"line_end":899,"column_start":1,"column_end":6}},{"value":"/ # unreachable!()","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":144460,"byte_end":144480,"line_start":900,"line_end":900,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":144481,"byte_end":144488,"line_start":901,"line_end":901,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":144489,"byte_end":144496,"line_start":902,"line_end":902,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":144867,"byte_end":144871,"line_start":920,"line_end":920,"column_start":12,"column_end":16},"name":"next","qualname":"<CfiEntriesIter>::next","value":"pub fn next(&mut Self) -> Result<Option<CieOrFde>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next entry.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":144812,"byte_end":144855,"line_start":919,"line_end":919,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5777},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":146009,"byte_end":146012,"line_start":961,"line_end":961,"column_start":5,"column_end":8},"name":"Cie","qualname":"::read::cfi::CieOrFde::Cie","value":"CieOrFde::Cie(CommonInformationEntry<R>)","parent":{"krate":0,"index":5773},"children":[],"decl_id":null,"docs":" This CFI entry is a `CommonInformationEntry`.\n","sig":null,"attributes":[{"value":"/ This CFI entry is a `CommonInformationEntry`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":145955,"byte_end":146004,"line_start":960,"line_end":960,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5780},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":146214,"byte_end":146217,"line_start":965,"line_end":965,"column_start":5,"column_end":8},"name":"Fde","qualname":"::read::cfi::CieOrFde::Fde","value":"CieOrFde::Fde(PartialFrameDescriptionEntry)","parent":{"krate":0,"index":5773},"children":[],"decl_id":null,"docs":" This CFI entry is a `FrameDescriptionEntry`, however fully parsing it\n requires parsing its CIE first, so it is left in a partially parsed\n state.\n","sig":null,"attributes":[{"value":"/ This CFI entry is a `FrameDescriptionEntry`, however fully parsing it","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":146045,"byte_end":146118,"line_start":962,"line_end":962,"column_start":5,"column_end":78}},{"value":"/ requires parsing its CIE first, so it is left in a partially parsed","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":146123,"byte_end":146194,"line_start":963,"line_end":963,"column_start":5,"column_end":76}},{"value":"/ state.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":146199,"byte_end":146209,"line_start":964,"line_end":964,"column_start":5,"column_end":15}}]},{"kind":"Enum","id":{"krate":0,"index":5773},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":145868,"byte_end":145876,"line_start":955,"line_end":955,"column_start":10,"column_end":18},"name":"CieOrFde","qualname":"::read::cfi::CieOrFde","value":"pub enum CieOrFde<'bases, Section, R> where R: Reader,\n         Section: UnwindSection<R> {\n\n    /// This CFI entry is a `CommonInformationEntry`.\n    Cie(CommonInformationEntry<R>),\n\n    /// This CFI entry is a `FrameDescriptionEntry`, however fully parsing it\n    /// requires parsing its CIE first, so it is left in a partially parsed\n    /// state.\n    Fde(PartialFrameDescriptionEntry),\n}","parent":null,"children":[{"krate":0,"index":5777},{"krate":0,"index":5780}],"decl_id":null,"docs":" Either a `CommonInformationEntry` (CIE) or a `FrameDescriptionEntry` (FDE).\n","sig":null,"attributes":[{"value":"/ Either a `CommonInformationEntry` (CIE) or a `FrameDescriptionEntry` (FDE).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":145740,"byte_end":145819,"line_start":953,"line_end":953,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":5812},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":148537,"byte_end":148549,"line_start":1031,"line_end":1031,"column_start":12,"column_end":24},"name":"Augmentation","qualname":"::read::cfi::Augmentation","value":"Augmentation {  }","parent":null,"children":[{"krate":0,"index":5813},{"krate":0,"index":5814},{"krate":0,"index":5815},{"krate":0,"index":5816}],"decl_id":null,"docs":" We support the z-style augmentation [defined by `.eh_frame`][ehframe].","sig":null,"attributes":[{"value":"/ We support the z-style augmentation [defined by `.eh_frame`][ehframe].","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":148281,"byte_end":148355,"line_start":1027,"line_end":1027,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":148356,"byte_end":148359,"line_start":1028,"line_end":1028,"column_start":1,"column_end":4}},{"value":"/ [ehframe]: http://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/ehframechpt.html","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":148360,"byte_end":148471,"line_start":1029,"line_end":1029,"column_start":1,"column_end":112}}]},{"kind":"Struct","id":{"krate":0,"index":5846},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":154193,"byte_end":154215,"line_start":1163,"line_end":1163,"column_start":12,"column_end":34},"name":"CommonInformationEntry","qualname":"::read::cfi::CommonInformationEntry","value":"CommonInformationEntry {  }","parent":null,"children":[{"krate":0,"index":5849},{"krate":0,"index":5850},{"krate":0,"index":5851},{"krate":0,"index":5852},{"krate":0,"index":5853},{"krate":0,"index":5854},{"krate":0,"index":5855},{"krate":0,"index":5856},{"krate":0,"index":5857},{"krate":0,"index":5858},{"krate":0,"index":5859}],"decl_id":null,"docs":" > A Common Information Entry holds information that is shared among many\n > Frame Description Entries. There is at least one CIE in every non-empty\n > `.debug_frame` section.\n","sig":null,"attributes":[{"value":"/ > A Common Information Entry holds information that is shared among many","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":153958,"byte_end":154034,"line_start":1159,"line_end":1159,"column_start":1,"column_end":77}},{"value":"/ > Frame Description Entries. There is at least one CIE in every non-empty","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":154035,"byte_end":154112,"line_start":1160,"line_end":1160,"column_start":1,"column_end":78}},{"value":"/ > `.debug_frame` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":154113,"byte_end":154142,"line_start":1161,"line_end":1161,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":159202,"byte_end":159208,"line_start":1307,"line_end":1307,"column_start":12,"column_end":18},"name":"offset","qualname":"<CommonInformationEntry<R>>::offset","value":"pub fn offset(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Get the offset of this entry from the start of its containing section.\n","sig":null,"attributes":[{"value":"/ Get the offset of this entry from the start of its containing section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":159116,"byte_end":159190,"line_start":1306,"line_end":1306,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":159322,"byte_end":159330,"line_start":1312,"line_end":1312,"column_start":12,"column_end":20},"name":"encoding","qualname":"<CommonInformationEntry<R>>::encoding","value":"pub fn encoding(&Self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding parameters for this CIE.\n","sig":null,"attributes":[{"value":"/ Return the encoding parameters for this CIE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":159262,"byte_end":159310,"line_start":1311,"line_end":1311,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":159577,"byte_end":159589,"line_start":1321,"line_end":1321,"column_start":12,"column_end":24},"name":"address_size","qualname":"<CommonInformationEntry<R>>::address_size","value":"pub fn address_size(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The size of addresses (in bytes) in this CIE.\n","sig":null,"attributes":[{"value":"/ The size of addresses (in bytes) in this CIE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":159516,"byte_end":159565,"line_start":1320,"line_end":1320,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":159808,"byte_end":159820,"line_start":1329,"line_end":1329,"column_start":12,"column_end":24},"name":"instructions","qualname":"<CommonInformationEntry<R>>::instructions","value":"pub fn instructions<'a, Section>(&Self, &'a Section, &'a BaseAddresses)\n-> CallFrameInstructionIter where Section: UnwindSection<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over this CIE's initial instructions.","sig":null,"attributes":[{"value":"/ Iterate over this CIE's initial instructions.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":159642,"byte_end":159691,"line_start":1325,"line_end":1325,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":159696,"byte_end":159699,"line_start":1326,"line_end":1326,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":159704,"byte_end":159725,"line_start":1327,"line_end":1327,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":159730,"byte_end":159796,"line_start":1328,"line_end":1328,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":160659,"byte_end":160668,"line_start":1353,"line_end":1353,"column_start":12,"column_end":21},"name":"entry_len","qualname":"<CommonInformationEntry<R>>::entry_len","value":"pub fn entry_len(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" > A constant that gives the number of bytes of the CIE structure, not\n > including the length field itself (see Section 7.2.2). The size of the\n > length field plus the value of length must be an integral multiple of\n > the address size.\n","sig":null,"attributes":[{"value":"/ > A constant that gives the number of bytes of the CIE structure, not","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":160385,"byte_end":160458,"line_start":1349,"line_end":1349,"column_start":5,"column_end":78}},{"value":"/ > including the length field itself (see Section 7.2.2). The size of the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":160463,"byte_end":160539,"line_start":1350,"line_end":1350,"column_start":5,"column_end":81}},{"value":"/ > length field plus the value of length must be an integral multiple of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":160544,"byte_end":160619,"line_start":1351,"line_end":1351,"column_start":5,"column_end":80}},{"value":"/ > the address size.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":160624,"byte_end":160647,"line_start":1352,"line_end":1352,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":160888,"byte_end":160895,"line_start":1359,"line_end":1359,"column_start":12,"column_end":19},"name":"version","qualname":"<CommonInformationEntry<R>>::version","value":"pub fn version(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" > A version number (see Section 7.23). This number is specific to the\n > call frame information and is independent of the DWARF version number.\n","sig":null,"attributes":[{"value":"/ > A version number (see Section 7.23). This number is specific to the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":160722,"byte_end":160795,"line_start":1357,"line_end":1357,"column_start":5,"column_end":78}},{"value":"/ > call frame information and is independent of the DWARF version number.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":160800,"byte_end":160876,"line_start":1358,"line_end":1358,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":161109,"byte_end":161121,"line_start":1367,"line_end":1367,"column_start":12,"column_end":24},"name":"augmentation","qualname":"<CommonInformationEntry<R>>::augmentation","value":"pub fn augmentation(&Self) -> Option<&Augmentation>","parent":null,"children":[],"decl_id":null,"docs":" Get the augmentation data, if any exists.","sig":null,"attributes":[{"value":"/ Get the augmentation data, if any exists.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":160943,"byte_end":160988,"line_start":1363,"line_end":1363,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":160993,"byte_end":160996,"line_start":1364,"line_end":1364,"column_start":5,"column_end":8}},{"value":"/ The only augmentation understood by `gimli` is that which is defined by","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":161001,"byte_end":161076,"line_start":1365,"line_end":1365,"column_start":5,"column_end":80}},{"value":"/ `.eh_frame`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":161081,"byte_end":161097,"line_start":1366,"line_end":1366,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":161254,"byte_end":161262,"line_start":1372,"line_end":1372,"column_start":12,"column_end":20},"name":"has_lsda","qualname":"<CommonInformationEntry<R>>::has_lsda","value":"pub fn has_lsda(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if this CIE's FDEs have a LSDA.\n","sig":null,"attributes":[{"value":"/ True if this CIE's FDEs have a LSDA.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":161202,"byte_end":161242,"line_start":1371,"line_end":1371,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":161429,"byte_end":161442,"line_start":1377,"line_end":1377,"column_start":12,"column_end":25},"name":"lsda_encoding","qualname":"<CommonInformationEntry<R>>::lsda_encoding","value":"pub fn lsda_encoding(&Self) -> Option<constants::DwEhPe>","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding of the LSDA address for this CIE's FDEs.\n","sig":null,"attributes":[{"value":"/ Return the encoding of the LSDA address for this CIE's FDEs.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":161353,"byte_end":161417,"line_start":1376,"line_end":1376,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":161650,"byte_end":161675,"line_start":1383,"line_end":1383,"column_start":12,"column_end":37},"name":"personality_with_encoding","qualname":"<CommonInformationEntry<R>>::personality_with_encoding","value":"pub fn personality_with_encoding(&Self)\n-> Option<(constants::DwEhPe, Pointer)>","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding and address of the personality routine handler\n for this CIE's FDEs.\n","sig":null,"attributes":[{"value":"/ Return the encoding and address of the personality routine handler","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":161539,"byte_end":161609,"line_start":1381,"line_end":1381,"column_start":5,"column_end":75}},{"value":"/ for this CIE's FDEs.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":161614,"byte_end":161638,"line_start":1382,"line_end":1382,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":161897,"byte_end":161908,"line_start":1389,"line_end":1389,"column_start":12,"column_end":23},"name":"personality","qualname":"<CommonInformationEntry<R>>::personality","value":"pub fn personality(&Self) -> Option<Pointer>","parent":null,"children":[],"decl_id":null,"docs":" Return the address of the personality routine handler\n for this CIE's FDEs.\n","sig":null,"attributes":[{"value":"/ Return the address of the personality routine handler","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":161799,"byte_end":161856,"line_start":1387,"line_end":1387,"column_start":5,"column_end":62}},{"value":"/ for this CIE's FDEs.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":161861,"byte_end":161885,"line_start":1388,"line_end":1388,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":162139,"byte_end":162159,"line_start":1397,"line_end":1397,"column_start":12,"column_end":32},"name":"fde_address_encoding","qualname":"<CommonInformationEntry<R>>::fde_address_encoding","value":"pub fn fde_address_encoding(&Self) -> Option<constants::DwEhPe>","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding of the addresses for this CIE's FDEs.\n","sig":null,"attributes":[{"value":"/ Return the encoding of the addresses for this CIE's FDEs.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":162066,"byte_end":162127,"line_start":1396,"line_end":1396,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":162348,"byte_end":162368,"line_start":1402,"line_end":1402,"column_start":12,"column_end":32},"name":"is_signal_trampoline","qualname":"<CommonInformationEntry<R>>::is_signal_trampoline","value":"pub fn is_signal_trampoline(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if this CIE's FDEs are trampolines for signal handlers.\n","sig":null,"attributes":[{"value":"/ True if this CIE's FDEs are trampolines for signal handlers.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":162272,"byte_end":162336,"line_start":1401,"line_end":1401,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":162584,"byte_end":162605,"line_start":1408,"line_end":1408,"column_start":12,"column_end":33},"name":"code_alignment_factor","qualname":"<CommonInformationEntry<R>>::code_alignment_factor","value":"pub fn code_alignment_factor(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" > A constant that is factored out of all advance location instructions\n > (see Section 6.4.2.1).\n","sig":null,"attributes":[{"value":"/ > A constant that is factored out of all advance location instructions","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":162465,"byte_end":162539,"line_start":1406,"line_end":1406,"column_start":5,"column_end":79}},{"value":"/ > (see Section 6.4.2.1).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":162544,"byte_end":162572,"line_start":1407,"line_end":1407,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":162829,"byte_end":162850,"line_start":1414,"line_end":1414,"column_start":12,"column_end":33},"name":"data_alignment_factor","qualname":"<CommonInformationEntry<R>>::data_alignment_factor","value":"pub fn data_alignment_factor(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" > A constant that is factored out of certain offset instructions (see\n > below). The resulting value is (operand * data_alignment_factor).\n","sig":null,"attributes":[{"value":"/ > A constant that is factored out of certain offset instructions (see","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":162668,"byte_end":162741,"line_start":1412,"line_end":1412,"column_start":5,"column_end":78}},{"value":"/ > below). The resulting value is (operand * data_alignment_factor).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":162746,"byte_end":162817,"line_start":1413,"line_end":1413,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":163142,"byte_end":163165,"line_start":1421,"line_end":1421,"column_start":12,"column_end":35},"name":"return_address_register","qualname":"<CommonInformationEntry<R>>::return_address_register","value":"pub fn return_address_register(&Self) -> Register","parent":null,"children":[],"decl_id":null,"docs":" > An unsigned ... constant that indicates which column in the rule\n > table represents the return address of the function. Note that this\n > column might not correspond to an actual machine register.\n","sig":null,"attributes":[{"value":"/ > An unsigned ... constant that indicates which column in the rule","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":162913,"byte_end":162983,"line_start":1418,"line_end":1418,"column_start":5,"column_end":75}},{"value":"/ > table represents the return address of the function. Note that this","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":162988,"byte_end":163061,"line_start":1419,"line_end":1419,"column_start":5,"column_end":78}},{"value":"/ > column might not correspond to an actual machine register.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":163066,"byte_end":163130,"line_start":1420,"line_end":1420,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":5883},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":163394,"byte_end":163422,"line_start":1430,"line_end":1430,"column_start":12,"column_end":40},"name":"PartialFrameDescriptionEntry","qualname":"::read::cfi::PartialFrameDescriptionEntry","value":"PartialFrameDescriptionEntry {  }","parent":null,"children":[{"krate":0,"index":5887},{"krate":0,"index":5888},{"krate":0,"index":5889},{"krate":0,"index":5890},{"krate":0,"index":5891},{"krate":0,"index":5892},{"krate":0,"index":5893}],"decl_id":null,"docs":" A partially parsed `FrameDescriptionEntry`.","sig":null,"attributes":[{"value":"/ A partially parsed `FrameDescriptionEntry`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":163233,"byte_end":163280,"line_start":1426,"line_end":1426,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":163281,"byte_end":163284,"line_start":1427,"line_end":1427,"column_start":1,"column_end":4}},{"value":"/ Fully parsing this FDE requires first parsing its CIE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":163285,"byte_end":163343,"line_start":1428,"line_end":1428,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":164469,"byte_end":164474,"line_start":1466,"line_end":1466,"column_start":12,"column_end":17},"name":"parse","qualname":"<PartialFrameDescriptionEntry>::parse","value":"pub fn parse<F>(&Self, F) -> Result<FrameDescriptionEntry<R>> where\nF: FnMut(&Section, &BaseAddresses, Section::Offset) ->\nResult<CommonInformationEntry<R>>","parent":null,"children":[],"decl_id":null,"docs":" Fully parse this FDE.","sig":null,"attributes":[{"value":"/ Fully parse this FDE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":164227,"byte_end":164252,"line_start":1461,"line_end":1461,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":164257,"byte_end":164260,"line_start":1462,"line_end":1462,"column_start":5,"column_end":8}},{"value":"/ You must provide a function get its associated CIE (either by parsing it","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":164265,"byte_end":164341,"line_start":1463,"line_end":1463,"column_start":5,"column_end":81}},{"value":"/ on demand, or looking it up in some table mapping offsets to CIEs that","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":164346,"byte_end":164420,"line_start":1464,"line_end":1464,"column_start":5,"column_end":79}},{"value":"/ you've already parsed, etc.)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":164425,"byte_end":164457,"line_start":1465,"line_end":1465,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":5923},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":165047,"byte_end":165068,"line_start":1485,"line_end":1485,"column_start":12,"column_end":33},"name":"FrameDescriptionEntry","qualname":"::read::cfi::FrameDescriptionEntry","value":"FrameDescriptionEntry {  }","parent":null,"children":[{"krate":0,"index":5926},{"krate":0,"index":5927},{"krate":0,"index":5928},{"krate":0,"index":5929},{"krate":0,"index":5930},{"krate":0,"index":5931},{"krate":0,"index":5932},{"krate":0,"index":5933},{"krate":0,"index":5934}],"decl_id":null,"docs":" A `FrameDescriptionEntry` is a set of CFA instructions for an address range.\n","sig":null,"attributes":[{"value":"/ A `FrameDescriptionEntry` is a set of CFA instructions for an address range.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":164916,"byte_end":164996,"line_start":1483,"line_end":1483,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":169260,"byte_end":169264,"line_start":1610,"line_end":1610,"column_start":12,"column_end":16},"name":"rows","qualname":"<FrameDescriptionEntry<R>>::rows","value":"pub fn rows<'a,\n            Section: UnwindSection<R>>(&Self, &'a Section, &'a BaseAddresses,\n                                       &'a mut UninitializedUnwindContext<R>)\n-> Result<UnwindTable>","parent":null,"children":[],"decl_id":null,"docs":" Return the table of unwind information for this FDE.\n","sig":null,"attributes":[{"value":"/ Return the table of unwind information for this FDE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":169178,"byte_end":169234,"line_start":1608,"line_end":1608,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":169239,"byte_end":169248,"line_start":1609,"line_end":1609,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":169887,"byte_end":169910,"line_start":1625,"line_end":1625,"column_start":12,"column_end":35},"name":"unwind_info_for_address","qualname":"<FrameDescriptionEntry<R>>::unwind_info_for_address","value":"pub fn unwind_info_for_address<Section: UnwindSection<R>>(&Self, &Section,\n                                                          &BaseAddresses,\n                                                          &mut UninitializedUnwindContext<R>,\n                                                          u64)\n-> Result<UnwindTableRow<R>>","parent":null,"children":[],"decl_id":null,"docs":" Find the frame unwind information for the given address.","sig":null,"attributes":[{"value":"/ Find the frame unwind information for the given address.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":169529,"byte_end":169589,"line_start":1619,"line_end":1619,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":169594,"byte_end":169597,"line_start":1620,"line_end":1620,"column_start":5,"column_end":8}},{"value":"/ If found, the unwind information is returned along with the reset","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":169602,"byte_end":169671,"line_start":1621,"line_end":1621,"column_start":5,"column_end":74}},{"value":"/ context in the form `Ok((unwind_info, context))`. If not found,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":169676,"byte_end":169743,"line_start":1622,"line_end":1622,"column_start":5,"column_end":72}},{"value":"/ `Err(gimli::Error::NoUnwindInfoForAddress)` is returned. If parsing or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":169748,"byte_end":169822,"line_start":1623,"line_end":1623,"column_start":5,"column_end":79}},{"value":"/ CFI evaluation fails, the error is returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":169827,"byte_end":169875,"line_start":1624,"line_end":1624,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":170700,"byte_end":170706,"line_start":1649,"line_end":1649,"column_start":12,"column_end":18},"name":"offset","qualname":"<FrameDescriptionEntry<R>>::offset","value":"pub fn offset(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Get the offset of this entry from the start of its containing section.\n","sig":null,"attributes":[{"value":"/ Get the offset of this entry from the start of its containing section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":170614,"byte_end":170688,"line_start":1648,"line_end":1648,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":170810,"byte_end":170813,"line_start":1654,"line_end":1654,"column_start":12,"column_end":15},"name":"cie","qualname":"<FrameDescriptionEntry<R>>::cie","value":"pub fn cie(&Self) -> &CommonInformationEntry<R>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this FDE's CIE.\n","sig":null,"attributes":[{"value":"/ Get a reference to this FDE's CIE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":170760,"byte_end":170798,"line_start":1653,"line_end":1653,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":171190,"byte_end":171199,"line_start":1662,"line_end":1662,"column_start":12,"column_end":21},"name":"entry_len","qualname":"<FrameDescriptionEntry<R>>::entry_len","value":"pub fn entry_len(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" > A constant that gives the number of bytes of the header and\n > instruction stream for this function, not including the length field\n > itself (see Section 7.2.2). The size of the length field plus the value\n > of length must be an integral multiple of the address size.\n","sig":null,"attributes":[{"value":"/ > A constant that gives the number of bytes of the header and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":170882,"byte_end":170947,"line_start":1658,"line_end":1658,"column_start":5,"column_end":70}},{"value":"/ > instruction stream for this function, not including the length field","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":170952,"byte_end":171026,"line_start":1659,"line_end":1659,"column_start":5,"column_end":79}},{"value":"/ > itself (see Section 7.2.2). The size of the length field plus the value","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":171031,"byte_end":171108,"line_start":1660,"line_end":1660,"column_start":5,"column_end":82}},{"value":"/ > of length must be an integral multiple of the address size.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":171113,"byte_end":171178,"line_start":1661,"line_end":1661,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":171539,"byte_end":171551,"line_start":1673,"line_end":1673,"column_start":12,"column_end":24},"name":"instructions","qualname":"<FrameDescriptionEntry<R>>::instructions","value":"pub fn instructions<'a, Section>(&Self, &'a Section, &'a BaseAddresses)\n-> CallFrameInstructionIter where Section: UnwindSection<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over this FDE's instructions.","sig":null,"attributes":[{"value":"/ Iterate over this FDE's instructions.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":171253,"byte_end":171294,"line_start":1666,"line_end":1666,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":171299,"byte_end":171302,"line_start":1667,"line_end":1667,"column_start":5,"column_end":8}},{"value":"/ Will not include the CIE's initial instructions, if you want those do","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":171307,"byte_end":171380,"line_start":1668,"line_end":1668,"column_start":5,"column_end":78}},{"value":"/ `fde.cie().instructions()` first.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":171385,"byte_end":171422,"line_start":1669,"line_end":1669,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":171427,"byte_end":171430,"line_start":1670,"line_end":1670,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":171435,"byte_end":171456,"line_start":1671,"line_end":1671,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":171461,"byte_end":171527,"line_start":1672,"line_end":1672,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":172250,"byte_end":172265,"line_start":1694,"line_end":1694,"column_start":12,"column_end":27},"name":"initial_address","qualname":"<FrameDescriptionEntry<R>>::initial_address","value":"pub fn initial_address(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The first address for which this entry has unwind information for.\n","sig":null,"attributes":[{"value":"/ The first address for which this entry has unwind information for.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":172168,"byte_end":172238,"line_start":1693,"line_end":1693,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":172425,"byte_end":172428,"line_start":1700,"line_end":1700,"column_start":12,"column_end":15},"name":"len","qualname":"<FrameDescriptionEntry<R>>::len","value":"pub fn len(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The number of bytes of instructions that this entry has unwind\n information for.\n","sig":null,"attributes":[{"value":"/ The number of bytes of instructions that this entry has unwind","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":172322,"byte_end":172388,"line_start":1698,"line_end":1698,"column_start":5,"column_end":71}},{"value":"/ information for.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":172393,"byte_end":172413,"line_start":1699,"line_end":1699,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":172704,"byte_end":172712,"line_start":1709,"line_end":1709,"column_start":12,"column_end":20},"name":"contains","qualname":"<FrameDescriptionEntry<R>>::contains","value":"pub fn contains(&Self, u64) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if the given address is within this FDE, `false`\n otherwise.","sig":null,"attributes":[{"value":"/ Return `true` if the given address is within this FDE, `false`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":172483,"byte_end":172549,"line_start":1704,"line_end":1704,"column_start":5,"column_end":71}},{"value":"/ otherwise.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":172554,"byte_end":172568,"line_start":1705,"line_end":1705,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":172573,"byte_end":172576,"line_start":1706,"line_end":1706,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `entry.initial_address() <= address <","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":172581,"byte_end":172644,"line_start":1707,"line_end":1707,"column_start":5,"column_end":68}},{"value":"/ entry.initial_address() + entry.len()`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":172649,"byte_end":172692,"line_start":1708,"line_end":1708,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":172979,"byte_end":172983,"line_start":1717,"line_end":1717,"column_start":12,"column_end":16},"name":"lsda","qualname":"<FrameDescriptionEntry<R>>::lsda","value":"pub fn lsda(&Self) -> Option<Pointer>","parent":null,"children":[],"decl_id":null,"docs":" The address of this FDE's language-specific data area (LSDA), if it has\n any.\n","sig":null,"attributes":[{"value":"/ The address of this FDE's language-specific data area (LSDA), if it has","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":172879,"byte_end":172954,"line_start":1715,"line_end":1715,"column_start":5,"column_end":80}},{"value":"/ any.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":172959,"byte_end":172967,"line_start":1716,"line_end":1716,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":173181,"byte_end":173201,"line_start":1723,"line_end":1723,"column_start":12,"column_end":32},"name":"is_signal_trampoline","qualname":"<FrameDescriptionEntry<R>>::is_signal_trampoline","value":"pub fn is_signal_trampoline(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if this FDE's function is a trampoline for a signal handler.\n","sig":null,"attributes":[{"value":"/ Return true if this FDE's function is a trampoline for a signal handler.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":173079,"byte_end":173155,"line_start":1721,"line_end":1721,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":173160,"byte_end":173169,"line_start":1722,"line_end":1722,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":173516,"byte_end":173527,"line_start":1731,"line_end":1731,"column_start":12,"column_end":23},"name":"personality","qualname":"<FrameDescriptionEntry<R>>::personality","value":"pub fn personality(&Self) -> Option<Pointer>","parent":null,"children":[],"decl_id":null,"docs":" Return the address of the FDE's function's personality routine\n handler. The personality routine does language-specific clean up when\n unwinding the stack frames with the intent to not run them again.\n","sig":null,"attributes":[{"value":"/ Return the address of the FDE's function's personality routine","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":173272,"byte_end":173338,"line_start":1727,"line_end":1727,"column_start":5,"column_end":71}},{"value":"/ handler. The personality routine does language-specific clean up when","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":173343,"byte_end":173416,"line_start":1728,"line_end":1728,"column_start":5,"column_end":78}},{"value":"/ unwinding the stack frames with the intent to not run them again.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":173421,"byte_end":173490,"line_start":1729,"line_end":1729,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":173495,"byte_end":173504,"line_start":1730,"line_end":1730,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":5958},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174967,"byte_end":174993,"line_start":1767,"line_end":1767,"column_start":12,"column_end":38},"name":"UninitializedUnwindContext","qualname":"::read::cfi::UninitializedUnwindContext","value":"","parent":null,"children":[],"decl_id":null,"docs":" Common context needed when evaluating the call frame unwinding information.","sig":null,"attributes":[{"value":"/ Common context needed when evaluating the call frame unwinding information.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":173598,"byte_end":173677,"line_start":1736,"line_end":1736,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":173678,"byte_end":173681,"line_start":1737,"line_end":1737,"column_start":1,"column_end":4}},{"value":"/ To avoid re-allocating the context multiple times when evaluating multiple","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":173682,"byte_end":173760,"line_start":1738,"line_end":1738,"column_start":1,"column_end":79}},{"value":"/ CFI programs, it can be reused. At first, a context is uninitialized","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":173761,"byte_end":173833,"line_start":1739,"line_end":1739,"column_start":1,"column_end":73}},{"value":"/ (`UninitializedUnwindContext`). It can be initialized by providing the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":173834,"byte_end":173908,"line_start":1740,"line_end":1740,"column_start":1,"column_end":75}},{"value":"/ `CommonInformationEntry` for the CFI program about to be evaluated and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":173909,"byte_end":173983,"line_start":1741,"line_end":1741,"column_start":1,"column_end":75}},{"value":"/ calling `UninitializedUnwindContext::initialize`. The result is a `&mut UnwindContext`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":173984,"byte_end":174074,"line_start":1742,"line_end":1742,"column_start":1,"column_end":91}},{"value":"/ which borrows the uninitialized context, and can be used to evaluate and run a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174075,"byte_end":174157,"line_start":1743,"line_end":1743,"column_start":1,"column_end":83}},{"value":"/ `FrameDescriptionEntry`'s CFI program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174158,"byte_end":174200,"line_start":1744,"line_end":1744,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174201,"byte_end":174204,"line_start":1745,"line_end":1745,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174205,"byte_end":174212,"line_start":1746,"line_end":1746,"column_start":1,"column_end":8}},{"value":"/ use gimli::{UninitializedUnwindContext, UnwindTable};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174213,"byte_end":174270,"line_start":1747,"line_end":1747,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174271,"byte_end":174274,"line_start":1748,"line_end":1748,"column_start":1,"column_end":4}},{"value":"/ # fn foo<'a>(some_fde: gimli::FrameDescriptionEntry<gimli::EndianSlice<'a, gimli::LittleEndian>>)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174275,"byte_end":174376,"line_start":1749,"line_end":1749,"column_start":1,"column_end":102}},{"value":"/ #            -> gimli::Result<()> {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174377,"byte_end":174416,"line_start":1750,"line_end":1750,"column_start":1,"column_end":40}},{"value":"/ # let eh_frame: gimli::EhFrame<_> = unreachable!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174417,"byte_end":174472,"line_start":1751,"line_end":1751,"column_start":1,"column_end":56}},{"value":"/ # let bases = unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174473,"byte_end":174508,"line_start":1752,"line_end":1752,"column_start":1,"column_end":36}},{"value":"/ // An uninitialized context.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174509,"byte_end":174541,"line_start":1753,"line_end":1753,"column_start":1,"column_end":33}},{"value":"/ let mut ctx = UninitializedUnwindContext::new();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174542,"byte_end":174594,"line_start":1754,"line_end":1754,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174595,"byte_end":174598,"line_start":1755,"line_end":1755,"column_start":1,"column_end":4}},{"value":"/ // Initialize the context by evaluating the CIE's initial instruction program,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174599,"byte_end":174681,"line_start":1756,"line_end":1756,"column_start":1,"column_end":83}},{"value":"/ // and generate the unwind table.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174682,"byte_end":174719,"line_start":1757,"line_end":1757,"column_start":1,"column_end":38}},{"value":"/ let mut table = some_fde.rows(&eh_frame, &bases, &mut ctx)?;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174720,"byte_end":174784,"line_start":1758,"line_end":1758,"column_start":1,"column_end":65}},{"value":"/ while let Some(row) = table.next_row()? {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174785,"byte_end":174830,"line_start":1759,"line_end":1759,"column_start":1,"column_end":46}},{"value":"/     // Do stuff with each row...","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174831,"byte_end":174867,"line_start":1760,"line_end":1760,"column_start":1,"column_end":37}},{"value":"/ #   let _ = row;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174868,"byte_end":174888,"line_start":1761,"line_end":1761,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174889,"byte_end":174894,"line_start":1762,"line_end":1762,"column_start":1,"column_end":6}},{"value":"/ # unreachable!()","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174895,"byte_end":174915,"line_start":1763,"line_end":1763,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174916,"byte_end":174923,"line_start":1764,"line_end":1764,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":174924,"byte_end":174931,"line_start":1765,"line_end":1765,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":175143,"byte_end":175146,"line_start":1771,"line_end":1771,"column_start":12,"column_end":15},"name":"new","qualname":"<UninitializedUnwindContext<R>>::new","value":"pub fn new() -> UninitializedUnwindContext<R>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new call frame unwinding context.\n","sig":null,"attributes":[{"value":"/ Construct a new call frame unwinding context.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":175082,"byte_end":175131,"line_start":1770,"line_end":1770,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":175673,"byte_end":175683,"line_start":1789,"line_end":1789,"column_start":12,"column_end":22},"name":"initialize","qualname":"<UninitializedUnwindContext<R>>::initialize","value":"pub fn initialize<Section: UnwindSection<R>>(&mut Self, &Section,\n                                             &BaseAddresses,\n                                             &CommonInformationEntry<R>)\n-> Result<&mut UnwindContext<R>>","parent":null,"children":[],"decl_id":null,"docs":" Run the CIE's initial instructions, creating and return an\n `UnwindContext`.\n","sig":null,"attributes":[{"value":"/ Run the CIE's initial instructions, creating and return an","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":175574,"byte_end":175636,"line_start":1787,"line_end":1787,"column_start":5,"column_end":67}},{"value":"/ `UnwindContext`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":175641,"byte_end":175661,"line_start":1788,"line_end":1788,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":5968},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":176256,"byte_end":176269,"line_start":1811,"line_end":1811,"column_start":12,"column_end":25},"name":"UnwindContext","qualname":"::read::cfi::UnwindContext","value":"UnwindContext {  }","parent":null,"children":[{"krate":0,"index":5970},{"krate":0,"index":5972},{"krate":0,"index":5973},{"krate":0,"index":5974}],"decl_id":null,"docs":" An unwinding context.\n","sig":null,"attributes":[{"value":"/ An unwinding context.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":176191,"byte_end":176216,"line_start":1809,"line_end":1809,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":5987},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":183278,"byte_end":183289,"line_start":2010,"line_end":2010,"column_start":12,"column_end":23},"name":"UnwindTable","qualname":"::read::cfi::UnwindTable","value":"UnwindTable {  }","parent":null,"children":[{"krate":0,"index":5990},{"krate":0,"index":5991},{"krate":0,"index":5992},{"krate":0,"index":5993},{"krate":0,"index":5994},{"krate":0,"index":5995},{"krate":0,"index":5996}],"decl_id":null,"docs":" The `UnwindTable` iteratively evaluates a `FrameDescriptionEntry`'s\n `CallFrameInstruction` program, yielding the each row one at a time.","sig":null,"attributes":[{"value":"/ The `UnwindTable` iteratively evaluates a `FrameDescriptionEntry`'s","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":180571,"byte_end":180642,"line_start":1953,"line_end":1953,"column_start":1,"column_end":72}},{"value":"/ `CallFrameInstruction` program, yielding the each row one at a time.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":180643,"byte_end":180715,"line_start":1954,"line_end":1954,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":180716,"byte_end":180719,"line_start":1955,"line_end":1955,"column_start":1,"column_end":4}},{"value":"/ > 6.4.1 Structure of Call Frame Information","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":180720,"byte_end":180767,"line_start":1956,"line_end":1956,"column_start":1,"column_end":48}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":180768,"byte_end":180773,"line_start":1957,"line_end":1957,"column_start":1,"column_end":6}},{"value":"/ > DWARF supports virtual unwinding by defining an architecture independent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":180774,"byte_end":180852,"line_start":1958,"line_end":1958,"column_start":1,"column_end":79}},{"value":"/ > basis for recording how procedures save and restore registers during their","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":180853,"byte_end":180933,"line_start":1959,"line_end":1959,"column_start":1,"column_end":81}},{"value":"/ > lifetimes. This basis must be augmented on some machines with specific","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":180934,"byte_end":181010,"line_start":1960,"line_end":1960,"column_start":1,"column_end":77}},{"value":"/ > information that is defined by an architecture specific ABI authoring","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181011,"byte_end":181086,"line_start":1961,"line_end":1961,"column_start":1,"column_end":76}},{"value":"/ > committee, a hardware vendor, or a compiler producer. The body defining a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181087,"byte_end":181166,"line_start":1962,"line_end":1962,"column_start":1,"column_end":80}},{"value":"/ > specific augmentation is referred to below as the “augmenter.”","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181167,"byte_end":181239,"line_start":1963,"line_end":1963,"column_start":1,"column_end":69}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181240,"byte_end":181245,"line_start":1964,"line_end":1964,"column_start":1,"column_end":6}},{"value":"/ > Abstractly, this mechanism describes a very large table that has the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181246,"byte_end":181320,"line_start":1965,"line_end":1965,"column_start":1,"column_end":75}},{"value":"/ > following structure:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181321,"byte_end":181347,"line_start":1966,"line_end":1966,"column_start":1,"column_end":27}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181348,"byte_end":181353,"line_start":1967,"line_end":1967,"column_start":1,"column_end":6}},{"value":"/ > <table>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181354,"byte_end":181367,"line_start":1968,"line_end":1968,"column_start":1,"column_end":14}},{"value":"/ >   <tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181368,"byte_end":181380,"line_start":1969,"line_end":1969,"column_start":1,"column_end":13}},{"value":"/ >     <th>LOC</th><th>CFA</th><th>R0</th><th>R1</th><td>...</td><th>RN</th>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181381,"byte_end":181460,"line_start":1970,"line_end":1970,"column_start":1,"column_end":80}},{"value":"/ >   </tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181461,"byte_end":181474,"line_start":1971,"line_end":1971,"column_start":1,"column_end":14}},{"value":"/ >   <tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181475,"byte_end":181487,"line_start":1972,"line_end":1972,"column_start":1,"column_end":13}},{"value":"/ >     <th>L0</th> <td></td>   <td></td>  <td></td>  <td></td>   <td></td>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181488,"byte_end":181565,"line_start":1973,"line_end":1973,"column_start":1,"column_end":78}},{"value":"/ >   </tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181566,"byte_end":181579,"line_start":1974,"line_end":1974,"column_start":1,"column_end":14}},{"value":"/ >   <tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181580,"byte_end":181592,"line_start":1975,"line_end":1975,"column_start":1,"column_end":13}},{"value":"/ >     <th>L1</th> <td></td>   <td></td>  <td></td>  <td></td>   <td></td>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181593,"byte_end":181670,"line_start":1976,"line_end":1976,"column_start":1,"column_end":78}},{"value":"/ >   </tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181671,"byte_end":181684,"line_start":1977,"line_end":1977,"column_start":1,"column_end":14}},{"value":"/ >   <tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181685,"byte_end":181697,"line_start":1978,"line_end":1978,"column_start":1,"column_end":13}},{"value":"/ >     <td>...</td><td></td>   <td></td>  <td></td>  <td></td>   <td></td>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181698,"byte_end":181775,"line_start":1979,"line_end":1979,"column_start":1,"column_end":78}},{"value":"/ >   </tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181776,"byte_end":181789,"line_start":1980,"line_end":1980,"column_start":1,"column_end":14}},{"value":"/ >   <tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181790,"byte_end":181802,"line_start":1981,"line_end":1981,"column_start":1,"column_end":13}},{"value":"/ >     <th>LN</th> <td></td>   <td></td>  <td></td>  <td></td>   <td></td>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181803,"byte_end":181880,"line_start":1982,"line_end":1982,"column_start":1,"column_end":78}},{"value":"/ >   </tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181881,"byte_end":181894,"line_start":1983,"line_end":1983,"column_start":1,"column_end":14}},{"value":"/ > </table>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181895,"byte_end":181909,"line_start":1984,"line_end":1984,"column_start":1,"column_end":15}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181910,"byte_end":181915,"line_start":1985,"line_end":1985,"column_start":1,"column_end":6}},{"value":"/ > The first column indicates an address for every location that contains code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181916,"byte_end":181997,"line_start":1986,"line_end":1986,"column_start":1,"column_end":82}},{"value":"/ > in a program. (In shared objects, this is an object-relative offset.) The","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":181998,"byte_end":182077,"line_start":1987,"line_end":1987,"column_start":1,"column_end":80}},{"value":"/ > remaining columns contain virtual unwinding rules that are associated with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":182078,"byte_end":182158,"line_start":1988,"line_end":1988,"column_start":1,"column_end":81}},{"value":"/ > the indicated location.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":182159,"byte_end":182188,"line_start":1989,"line_end":1989,"column_start":1,"column_end":30}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":182189,"byte_end":182194,"line_start":1990,"line_end":1990,"column_start":1,"column_end":6}},{"value":"/ > The CFA column defines the rule which computes the Canonical Frame Address","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":182195,"byte_end":182275,"line_start":1991,"line_end":1991,"column_start":1,"column_end":81}},{"value":"/ > value; it may be either a register and a signed offset that are added","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":182276,"byte_end":182351,"line_start":1992,"line_end":1992,"column_start":1,"column_end":76}},{"value":"/ > together, or a DWARF expression that is evaluated.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":182352,"byte_end":182408,"line_start":1993,"line_end":1993,"column_start":1,"column_end":57}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":182409,"byte_end":182414,"line_start":1994,"line_end":1994,"column_start":1,"column_end":6}},{"value":"/ > The remaining columns are labeled by register number. This includes some","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":182415,"byte_end":182493,"line_start":1995,"line_end":1995,"column_start":1,"column_end":79}},{"value":"/ > registers that have special designation on some architectures such as the PC","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":182494,"byte_end":182576,"line_start":1996,"line_end":1996,"column_start":1,"column_end":83}},{"value":"/ > and the stack pointer register. (The actual mapping of registers for a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":182577,"byte_end":182653,"line_start":1997,"line_end":1997,"column_start":1,"column_end":77}},{"value":"/ > particular architecture is defined by the augmenter.) The register columns","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":182654,"byte_end":182734,"line_start":1998,"line_end":1998,"column_start":1,"column_end":81}},{"value":"/ > contain rules that describe whether a given register has been saved and the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":182735,"byte_end":182816,"line_start":1999,"line_end":1999,"column_start":1,"column_end":82}},{"value":"/ > rule to find the value for the register in the previous frame.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":182817,"byte_end":182885,"line_start":2000,"line_end":2000,"column_start":1,"column_end":69}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":182886,"byte_end":182891,"line_start":2001,"line_end":2001,"column_start":1,"column_end":6}},{"value":"/ > ...","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":182892,"byte_end":182901,"line_start":2002,"line_end":2002,"column_start":1,"column_end":10}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":182902,"byte_end":182907,"line_start":2003,"line_end":2003,"column_start":1,"column_end":6}},{"value":"/ > This table would be extremely large if actually constructed as","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":182908,"byte_end":182976,"line_start":2004,"line_end":2004,"column_start":1,"column_end":69}},{"value":"/ > described. Most of the entries at any point in the table are identical to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":182977,"byte_end":183056,"line_start":2005,"line_end":2005,"column_start":1,"column_end":80}},{"value":"/ > the ones above them. The whole table can be represented quite compactly by","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":183057,"byte_end":183137,"line_start":2006,"line_end":2006,"column_start":1,"column_end":81}},{"value":"/ > recording just the differences starting at the beginning address of each","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":183138,"byte_end":183216,"line_start":2007,"line_end":2007,"column_start":1,"column_end":79}},{"value":"/ > subroutine in the program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":183217,"byte_end":183249,"line_start":2008,"line_end":2008,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":183872,"byte_end":183875,"line_start":2027,"line_end":2027,"column_start":12,"column_end":15},"name":"new","qualname":"<UnwindTable>::new","value":"pub fn new<Section: UnwindSection<R>>(&'a Section, &'a BaseAddresses,\n                                      &'a mut UninitializedUnwindContext<R>,\n                                      &FrameDescriptionEntry<R>)\n-> Result<UnwindTable>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `UnwindTable` for the given\n `FrameDescriptionEntry`'s CFI unwinding program.\n","sig":null,"attributes":[{"value":"/ Construct a new `UnwindTable` for the given","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":183756,"byte_end":183803,"line_start":2025,"line_end":2025,"column_start":5,"column_end":52}},{"value":"/ `FrameDescriptionEntry`'s CFI unwinding program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":183808,"byte_end":183860,"line_start":2026,"line_end":2026,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":185822,"byte_end":185830,"line_start":2078,"line_end":2078,"column_start":12,"column_end":20},"name":"next_row","qualname":"<UnwindTable>::next_row","value":"pub fn next_row(&mut Self) -> Result<Option<&UnwindTableRow<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate call frame instructions until the next row of the table is\n completed, and return it.","sig":null,"attributes":[{"value":"/ Evaluate call frame instructions until the next row of the table is","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":185566,"byte_end":185637,"line_start":2073,"line_end":2073,"column_start":5,"column_end":76}},{"value":"/ completed, and return it.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":185642,"byte_end":185671,"line_start":2074,"line_end":2074,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":185676,"byte_end":185679,"line_start":2075,"line_end":2075,"column_start":5,"column_end":8}},{"value":"/ Unfortunately, this cannot be used with `FallibleIterator` because of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":185684,"byte_end":185757,"line_start":2076,"line_end":2076,"column_start":5,"column_end":78}},{"value":"/ the restricted lifetime of the yielded item.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":185762,"byte_end":185810,"line_start":2077,"line_end":2077,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":6001},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":200735,"byte_end":200751,"line_start":2502,"line_end":2502,"column_start":12,"column_end":28},"name":"RegisterRuleIter","qualname":"::read::cfi::RegisterRuleIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An unordered iterator for register rules.\n","sig":null,"attributes":[{"value":"/ An unordered iterator for register rules.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":200654,"byte_end":200699,"line_start":2500,"line_end":2500,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6014},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":201237,"byte_end":201251,"line_start":2517,"line_end":2517,"column_start":12,"column_end":26},"name":"UnwindTableRow","qualname":"::read::cfi::UnwindTableRow","value":"UnwindTableRow {  }","parent":null,"children":[{"krate":0,"index":6016},{"krate":0,"index":6017},{"krate":0,"index":6018},{"krate":0,"index":6019},{"krate":0,"index":6020}],"decl_id":null,"docs":" A row in the virtual unwind table that describes how to find the values of\n the registers in the *previous* frame for a range of PC addresses.\n","sig":null,"attributes":[{"value":"/ A row in the virtual unwind table that describes how to find the values of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":201037,"byte_end":201115,"line_start":2514,"line_end":2514,"column_start":1,"column_end":79}},{"value":"/ the registers in the *previous* frame for a range of PC addresses.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":201116,"byte_end":201186,"line_start":2515,"line_end":2515,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":201985,"byte_end":201998,"line_start":2546,"line_end":2546,"column_start":12,"column_end":25},"name":"start_address","qualname":"<UnwindTableRow<R>>::start_address","value":"pub fn start_address(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the starting PC address that this row applies to.\n","sig":null,"attributes":[{"value":"/ Get the starting PC address that this row applies to.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":201916,"byte_end":201973,"line_start":2545,"line_end":2545,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":202420,"byte_end":202431,"line_start":2557,"line_end":2557,"column_start":12,"column_end":23},"name":"end_address","qualname":"<UnwindTableRow<R>>::end_address","value":"pub fn end_address(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the end PC address where this row's register rules become\n unapplicable.","sig":null,"attributes":[{"value":"/ Get the end PC address where this row's register rules become","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":202053,"byte_end":202118,"line_start":2550,"line_end":2550,"column_start":5,"column_end":70}},{"value":"/ unapplicable.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":202123,"byte_end":202140,"line_start":2551,"line_end":2551,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":202145,"byte_end":202148,"line_start":2552,"line_end":2552,"column_start":5,"column_end":8}},{"value":"/ In other words, this row describes how to recover the last frame's","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":202153,"byte_end":202223,"line_start":2553,"line_end":2553,"column_start":5,"column_end":75}},{"value":"/ registers for all PCs where `row.start_address() <= PC <","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":202228,"byte_end":202288,"line_start":2554,"line_end":2554,"column_start":5,"column_end":65}},{"value":"/ row.end_address()`. This row does NOT describe how to recover registers","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":202293,"byte_end":202368,"line_start":2555,"line_end":2555,"column_start":5,"column_end":80}},{"value":"/ when `PC == row.end_address()`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":202373,"byte_end":202408,"line_start":2556,"line_end":2556,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":202599,"byte_end":202607,"line_start":2563,"line_end":2563,"column_start":12,"column_end":20},"name":"contains","qualname":"<UnwindTableRow<R>>::contains","value":"pub fn contains(&Self, u64) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if the given `address` is within this row's address range,\n `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Return `true` if the given `address` is within this row's address range,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":202484,"byte_end":202560,"line_start":2561,"line_end":2561,"column_start":5,"column_end":81}},{"value":"/ `false` otherwise.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":202565,"byte_end":202587,"line_start":2562,"line_end":2562,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":202926,"byte_end":202941,"line_start":2571,"line_end":2571,"column_start":12,"column_end":27},"name":"saved_args_size","qualname":"<UnwindTableRow<R>>::saved_args_size","value":"pub fn saved_args_size(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the amount of args currently on the stack.","sig":null,"attributes":[{"value":"/ Returns the amount of args currently on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":202718,"byte_end":202772,"line_start":2567,"line_end":2567,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":202777,"byte_end":202780,"line_start":2568,"line_end":2568,"column_start":5,"column_end":8}},{"value":"/ When unwinding, if the personality function requested a change in IP,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":202785,"byte_end":202858,"line_start":2569,"line_end":2569,"column_start":5,"column_end":78}},{"value":"/ the SP needs to be adjusted by saved_args_size.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":202863,"byte_end":202914,"line_start":2570,"line_end":2570,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":203079,"byte_end":203082,"line_start":2576,"line_end":2576,"column_start":12,"column_end":15},"name":"cfa","qualname":"<UnwindTableRow<R>>::cfa","value":"pub fn cfa(&Self) -> &CfaRule<R>","parent":null,"children":[],"decl_id":null,"docs":" Get the canonical frame address (CFA) recovery rule for this row.\n","sig":null,"attributes":[{"value":"/ Get the canonical frame address (CFA) recovery rule for this row.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":202998,"byte_end":203067,"line_start":2575,"line_end":2575,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":206836,"byte_end":206844,"line_start":2624,"line_end":2624,"column_start":12,"column_end":20},"name":"register","qualname":"<UnwindTableRow<R>>::register","value":"pub fn register(&Self, Register) -> RegisterRule<R>","parent":null,"children":[],"decl_id":null,"docs":" Get the register recovery rule for the given register number.","sig":null,"attributes":[{"value":"/ Get the register recovery rule for the given register number.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":203136,"byte_end":203201,"line_start":2580,"line_end":2580,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":203206,"byte_end":203209,"line_start":2581,"line_end":2581,"column_start":5,"column_end":8}},{"value":"/ The register number mapping is architecture dependent. For example, in","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":203214,"byte_end":203288,"line_start":2582,"line_end":2582,"column_start":5,"column_end":79}},{"value":"/ the x86-64 ABI the register number mapping is defined in Figure 3.36:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":203293,"byte_end":203366,"line_start":2583,"line_end":2583,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":203371,"byte_end":203374,"line_start":2584,"line_end":2584,"column_start":5,"column_end":8}},{"value":"/ > Figure 3.36: DWARF Register Number Mapping","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":203379,"byte_end":203427,"line_start":2585,"line_end":2585,"column_start":5,"column_end":53}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":203432,"byte_end":203437,"line_start":2586,"line_end":2586,"column_start":5,"column_end":10}},{"value":"/ > <table>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":203442,"byte_end":203455,"line_start":2587,"line_end":2587,"column_start":5,"column_end":18}},{"value":"/ >   <tr><th>Register Name</th>                    <th>Number</th>  <th>Abbreviation</th></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":203460,"byte_end":203557,"line_start":2588,"line_end":2588,"column_start":5,"column_end":102}},{"value":"/ >   <tr><td>General Purpose Register RAX</td>     <td>0</td>       <td>%rax</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":203562,"byte_end":203651,"line_start":2589,"line_end":2589,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>General Purpose Register RDX</td>     <td>1</td>       <td>%rdx</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":203656,"byte_end":203745,"line_start":2590,"line_end":2590,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>General Purpose Register RCX</td>     <td>2</td>       <td>%rcx</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":203750,"byte_end":203839,"line_start":2591,"line_end":2591,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>General Purpose Register RBX</td>     <td>3</td>       <td>%rbx</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":203844,"byte_end":203933,"line_start":2592,"line_end":2592,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>General Purpose Register RSI</td>     <td>4</td>       <td>%rsi</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":203938,"byte_end":204027,"line_start":2593,"line_end":2593,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>General Purpose Register RDI</td>     <td>5</td>       <td>%rdi</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":204032,"byte_end":204121,"line_start":2594,"line_end":2594,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>General Purpose Register RBP</td>     <td>6</td>       <td>%rbp</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":204126,"byte_end":204215,"line_start":2595,"line_end":2595,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>Stack Pointer Register RSP</td>       <td>7</td>       <td>%rsp</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":204220,"byte_end":204309,"line_start":2596,"line_end":2596,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>Extended Integer Registers 8-15</td>  <td>8-15</td>    <td>%r8-%r15</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":204314,"byte_end":204407,"line_start":2597,"line_end":2597,"column_start":5,"column_end":98}},{"value":"/ >   <tr><td>Return Address RA</td>                <td>16</td>      <td></td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":204412,"byte_end":204497,"line_start":2598,"line_end":2598,"column_start":5,"column_end":90}},{"value":"/ >   <tr><td>Vector Registers 0–7</td>             <td>17-24</td>   <td>%xmm0–%xmm7</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":204502,"byte_end":204602,"line_start":2599,"line_end":2599,"column_start":5,"column_end":101}},{"value":"/ >   <tr><td>Extended Vector Registers 8–15</td>   <td>25-32</td>   <td>%xmm8–%xmm15</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":204607,"byte_end":204708,"line_start":2600,"line_end":2600,"column_start":5,"column_end":102}},{"value":"/ >   <tr><td>Floating Point Registers 0–7</td>     <td>33-40</td>   <td>%st0–%st7</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":204713,"byte_end":204811,"line_start":2601,"line_end":2601,"column_start":5,"column_end":99}},{"value":"/ >   <tr><td>MMX Registers 0–7</td>                <td>41-48</td>   <td>%mm0–%mm7</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":204816,"byte_end":204914,"line_start":2602,"line_end":2602,"column_start":5,"column_end":99}},{"value":"/ >   <tr><td>Flag Register</td>                    <td>49</td>      <td>%rFLAGS</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":204919,"byte_end":205011,"line_start":2603,"line_end":2603,"column_start":5,"column_end":97}},{"value":"/ >   <tr><td>Segment Register ES</td>              <td>50</td>      <td>%es</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":205016,"byte_end":205104,"line_start":2604,"line_end":2604,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>Segment Register CS</td>              <td>51</td>      <td>%cs</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":205109,"byte_end":205197,"line_start":2605,"line_end":2605,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>Segment Register SS</td>              <td>52</td>      <td>%ss</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":205202,"byte_end":205290,"line_start":2606,"line_end":2606,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>Segment Register DS</td>              <td>53</td>      <td>%ds</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":205295,"byte_end":205383,"line_start":2607,"line_end":2607,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>Segment Register FS</td>              <td>54</td>      <td>%fs</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":205388,"byte_end":205476,"line_start":2608,"line_end":2608,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>Segment Register GS</td>              <td>55</td>      <td>%gs</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":205481,"byte_end":205569,"line_start":2609,"line_end":2609,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>Reserved</td>                         <td>56-57</td>   <td></td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":205574,"byte_end":205659,"line_start":2610,"line_end":2610,"column_start":5,"column_end":90}},{"value":"/ >   <tr><td>FS Base address</td>                  <td>58</td>      <td>%fs.base</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":205664,"byte_end":205757,"line_start":2611,"line_end":2611,"column_start":5,"column_end":98}},{"value":"/ >   <tr><td>GS Base address</td>                  <td>59</td>      <td>%gs.base</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":205762,"byte_end":205855,"line_start":2612,"line_end":2612,"column_start":5,"column_end":98}},{"value":"/ >   <tr><td>Reserved</td>                         <td>60-61</td>   <td></td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":205860,"byte_end":205945,"line_start":2613,"line_end":2613,"column_start":5,"column_end":90}},{"value":"/ >   <tr><td>Task Register</td>                    <td>62</td>      <td>%tr</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":205950,"byte_end":206038,"line_start":2614,"line_end":2614,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>LDT Register</td>                     <td>63</td>      <td>%ldtr</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":206043,"byte_end":206133,"line_start":2615,"line_end":2615,"column_start":5,"column_end":95}},{"value":"/ >   <tr><td>128-bit Media Control and Status</td> <td>64</td>      <td>%mxcsr</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":206138,"byte_end":206229,"line_start":2616,"line_end":2616,"column_start":5,"column_end":96}},{"value":"/ >   <tr><td>x87 Control Word</td>                 <td>65</td>      <td>%fcw</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":206234,"byte_end":206323,"line_start":2617,"line_end":2617,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>x87 Status Word</td>                  <td>66</td>      <td>%fsw</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":206328,"byte_end":206417,"line_start":2618,"line_end":2618,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>Upper Vector Registers 16–31</td>     <td>67-82</td>   <td>%xmm16–%xmm31</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":206422,"byte_end":206524,"line_start":2619,"line_end":2619,"column_start":5,"column_end":103}},{"value":"/ >   <tr><td>Reserved</td>                         <td>83-117</td>  <td></td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":206529,"byte_end":206614,"line_start":2620,"line_end":2620,"column_start":5,"column_end":90}},{"value":"/ >   <tr><td>Vector Mask Registers 0–7</td>        <td>118-125</td> <td>%k0–%k7</td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":206619,"byte_end":206715,"line_start":2621,"line_end":2621,"column_start":5,"column_end":97}},{"value":"/ >   <tr><td>Reserved</td>                         <td>126-129</td> <td></td></tr>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":206720,"byte_end":206805,"line_start":2622,"line_end":2622,"column_start":5,"column_end":90}},{"value":"/ > </table>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":206810,"byte_end":206824,"line_start":2623,"line_end":2623,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":207556,"byte_end":207565,"line_start":2643,"line_end":2643,"column_start":12,"column_end":21},"name":"registers","qualname":"<UnwindTableRow<R>>::registers","value":"pub fn registers(&Self) -> RegisterRuleIter<, R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all defined register `(number, rule)` pairs.","sig":null,"attributes":[{"value":"/ Iterate over all defined register `(number, rule)` pairs.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":206941,"byte_end":207002,"line_start":2628,"line_end":2628,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":207007,"byte_end":207010,"line_start":2629,"line_end":2629,"column_start":5,"column_end":8}},{"value":"/ The rules are not iterated in any guaranteed order. Any register that","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":207015,"byte_end":207088,"line_start":2630,"line_end":2630,"column_start":5,"column_end":78}},{"value":"/ does not make an appearance in the iterator implicitly has the rule","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":207093,"byte_end":207164,"line_start":2631,"line_end":2631,"column_start":5,"column_end":76}},{"value":"/ `RegisterRule::Undefined`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":207169,"byte_end":207199,"line_start":2632,"line_end":2632,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":207204,"byte_end":207207,"line_start":2633,"line_end":2633,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":207212,"byte_end":207219,"line_start":2634,"line_end":2634,"column_start":5,"column_end":12}},{"value":"/ # use gimli::{EndianSlice, LittleEndian, UnwindTableRow};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":207224,"byte_end":207285,"line_start":2635,"line_end":2635,"column_start":5,"column_end":66}},{"value":"/ # fn foo<'input>(unwind_table_row: UnwindTableRow<EndianSlice<'input, LittleEndian>>) {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":207290,"byte_end":207381,"line_start":2636,"line_end":2636,"column_start":5,"column_end":96}},{"value":"/ for &(register, ref rule) in unwind_table_row.registers() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":207386,"byte_end":207449,"line_start":2637,"line_end":2637,"column_start":5,"column_end":68}},{"value":"/     // ...","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":207454,"byte_end":207468,"line_start":2638,"line_end":2638,"column_start":5,"column_end":19}},{"value":"/     # drop(register); drop(rule);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":207473,"byte_end":207510,"line_start":2639,"line_end":2639,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":207515,"byte_end":207520,"line_start":2640,"line_end":2640,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":207525,"byte_end":207532,"line_start":2641,"line_end":2641,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":207537,"byte_end":207544,"line_start":2642,"line_end":2642,"column_start":5,"column_end":12}}]},{"kind":"StructVariant","id":{"krate":0,"index":6040},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":207829,"byte_end":207846,"line_start":2652,"line_end":2652,"column_start":5,"column_end":22},"name":"RegisterAndOffset","qualname":"::read::cfi::CfaRule::RegisterAndOffset","value":"CfaRule::RegisterAndOffset { register, offset }","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" The CFA is given offset from the given register's value.\n","sig":null,"attributes":[{"value":"/ The CFA is given offset from the given register's value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":207764,"byte_end":207824,"line_start":2651,"line_end":2651,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6043},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":208111,"byte_end":208121,"line_start":2660,"line_end":2660,"column_start":5,"column_end":15},"name":"Expression","qualname":"::read::cfi::CfaRule::Expression","value":"CfaRule::Expression(Expression<R>)","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" The CFA is obtained by evaluating this `Reader` as a DWARF expression\n program.\n","sig":null,"attributes":[{"value":"/ The CFA is obtained by evaluating this `Reader` as a DWARF expression","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":208016,"byte_end":208089,"line_start":2658,"line_end":2658,"column_start":5,"column_end":78}},{"value":"/ program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":208094,"byte_end":208106,"line_start":2659,"line_end":2659,"column_start":5,"column_end":17}}]},{"kind":"Enum","id":{"krate":0,"index":6038},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":207739,"byte_end":207746,"line_start":2650,"line_end":2650,"column_start":10,"column_end":17},"name":"CfaRule","qualname":"::read::cfi::CfaRule","value":"pub enum CfaRule<R: Reader> {\n\n    /// The CFA is given offset from the given register's value.\n    RegisterAndOffset {\n        /// The register containing the base value.\n        register: Register,\n        /// The offset from the register's base value.\n        offset: i64,\n    },\n\n    /// The CFA is obtained by evaluating this `Reader` as a DWARF expression\n    /// program.\n    Expression(Expression<R>),\n}","parent":null,"children":[{"krate":0,"index":6040},{"krate":0,"index":6043}],"decl_id":null,"docs":" The canonical frame address (CFA) recovery rules.\n","sig":null,"attributes":[{"value":"/ The canonical frame address (CFA) recovery rules.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":207637,"byte_end":207690,"line_start":2648,"line_end":2648,"column_start":1,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6065},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209085,"byte_end":209094,"line_start":2693,"line_end":2693,"column_start":5,"column_end":14},"name":"Undefined","qualname":"::read::cfi::RegisterRule::Undefined","value":"RegisterRule::Undefined","parent":{"krate":0,"index":6063},"children":[],"decl_id":null,"docs":" > A register that has this rule has no recoverable value in the previous\n > frame. (By convention, it is not preserved by a callee.)\n","sig":null,"attributes":[{"value":"/ > A register that has this rule has no recoverable value in the previous","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":208937,"byte_end":209013,"line_start":2691,"line_end":2691,"column_start":5,"column_end":81}},{"value":"/ > frame. (By convention, it is not preserved by a callee.)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209018,"byte_end":209080,"line_start":2692,"line_end":2692,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6067},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209276,"byte_end":209285,"line_start":2698,"line_end":2698,"column_start":5,"column_end":14},"name":"SameValue","qualname":"::read::cfi::RegisterRule::SameValue","value":"RegisterRule::SameValue","parent":{"krate":0,"index":6063},"children":[],"decl_id":null,"docs":" > This register has not been modified from the previous frame. (By\n > convention, it is preserved by the callee, but the callee has not\n > modified it.)\n","sig":null,"attributes":[{"value":"/ > This register has not been modified from the previous frame. (By","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209101,"byte_end":209171,"line_start":2695,"line_end":2695,"column_start":5,"column_end":75}},{"value":"/ > convention, it is preserved by the callee, but the callee has not","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209176,"byte_end":209247,"line_start":2696,"line_end":2696,"column_start":5,"column_end":76}},{"value":"/ > modified it.)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209252,"byte_end":209271,"line_start":2697,"line_end":2697,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6069},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209437,"byte_end":209443,"line_start":2702,"line_end":2702,"column_start":5,"column_end":11},"name":"Offset","qualname":"::read::cfi::RegisterRule::Offset","value":"RegisterRule::Offset(i64)","parent":{"krate":0,"index":6063},"children":[],"decl_id":null,"docs":" \"The previous value of this register is saved at the address CFA+N where\n CFA is the current CFA value and N is a signed offset.\"\n","sig":null,"attributes":[{"value":"/ \"The previous value of this register is saved at the address CFA+N where","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209292,"byte_end":209368,"line_start":2700,"line_end":2700,"column_start":5,"column_end":81}},{"value":"/ CFA is the current CFA value and N is a signed offset.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209373,"byte_end":209432,"line_start":2701,"line_end":2701,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6072},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209589,"byte_end":209598,"line_start":2706,"line_end":2706,"column_start":5,"column_end":14},"name":"ValOffset","qualname":"::read::cfi::RegisterRule::ValOffset","value":"RegisterRule::ValOffset(i64)","parent":{"krate":0,"index":6063},"children":[],"decl_id":null,"docs":" \"The previous value of this register is the value CFA+N where CFA is the\n current CFA value and N is a signed offset.\"\n","sig":null,"attributes":[{"value":"/ \"The previous value of this register is the value CFA+N where CFA is the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209455,"byte_end":209531,"line_start":2704,"line_end":2704,"column_start":5,"column_end":81}},{"value":"/ current CFA value and N is a signed offset.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209536,"byte_end":209584,"line_start":2705,"line_end":2705,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6075},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209706,"byte_end":209714,"line_start":2710,"line_end":2710,"column_start":5,"column_end":13},"name":"Register","qualname":"::read::cfi::RegisterRule::Register","value":"RegisterRule::Register(Register)","parent":{"krate":0,"index":6063},"children":[],"decl_id":null,"docs":" \"The previous value of this register is stored in another register\n numbered R.\"\n","sig":null,"attributes":[{"value":"/ \"The previous value of this register is stored in another register","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209610,"byte_end":209680,"line_start":2708,"line_end":2708,"column_start":5,"column_end":75}},{"value":"/ numbered R.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209685,"byte_end":209701,"line_start":2709,"line_end":2709,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6078},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209855,"byte_end":209865,"line_start":2714,"line_end":2714,"column_start":5,"column_end":15},"name":"Expression","qualname":"::read::cfi::RegisterRule::Expression","value":"RegisterRule::Expression(Expression<R>)","parent":{"krate":0,"index":6063},"children":[],"decl_id":null,"docs":" \"The previous value of this register is located at the address produced\n by executing the DWARF expression.\"\n","sig":null,"attributes":[{"value":"/ \"The previous value of this register is located at the address produced","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209731,"byte_end":209806,"line_start":2712,"line_end":2712,"column_start":5,"column_end":80}},{"value":"/ by executing the DWARF expression.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209811,"byte_end":209850,"line_start":2713,"line_end":2713,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6081},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209998,"byte_end":210011,"line_start":2718,"line_end":2718,"column_start":5,"column_end":18},"name":"ValExpression","qualname":"::read::cfi::RegisterRule::ValExpression","value":"RegisterRule::ValExpression(Expression<R>)","parent":{"krate":0,"index":6063},"children":[],"decl_id":null,"docs":" \"The previous value of this register is the value produced by executing\n the DWARF expression.\"\n","sig":null,"attributes":[{"value":"/ \"The previous value of this register is the value produced by executing","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209887,"byte_end":209962,"line_start":2716,"line_end":2716,"column_start":5,"column_end":80}},{"value":"/ the DWARF expression.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":209967,"byte_end":209993,"line_start":2717,"line_end":2717,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6084},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":210114,"byte_end":210127,"line_start":2721,"line_end":2721,"column_start":5,"column_end":18},"name":"Architectural","qualname":"::read::cfi::RegisterRule::Architectural","value":"RegisterRule::Architectural","parent":{"krate":0,"index":6063},"children":[],"decl_id":null,"docs":" \"The rule is defined externally to this specification by the augmenter.\"\n","sig":null,"attributes":[{"value":"/ \"The rule is defined externally to this specification by the augmenter.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":210033,"byte_end":210109,"line_start":2720,"line_end":2720,"column_start":5,"column_end":81}}]},{"kind":"Enum","id":{"krate":0,"index":6063},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":208907,"byte_end":208919,"line_start":2690,"line_end":2690,"column_start":10,"column_end":22},"name":"RegisterRule","qualname":"::read::cfi::RegisterRule","value":"pub enum RegisterRule<R: Reader> {\n\n    /// > A register that has this rule has no recoverable value in the previous\n    /// > frame. (By convention, it is not preserved by a callee.)\n    Undefined,\n\n    /// > This register has not been modified from the previous frame. (By\n    /// > convention, it is preserved by the callee, but the callee has not\n    /// > modified it.)\n    SameValue,\n\n    /// \"The previous value of this register is saved at the address CFA+N where\n    /// CFA is the current CFA value and N is a signed offset.\"\n    Offset(i64),\n\n    /// \"The previous value of this register is the value CFA+N where CFA is the\n    /// current CFA value and N is a signed offset.\"\n    ValOffset(i64),\n\n    /// \"The previous value of this register is stored in another register\n    /// numbered R.\"\n    Register(Register),\n\n    /// \"The previous value of this register is located at the address produced\n    /// by executing the DWARF expression.\"\n    Expression(Expression<R>),\n\n    /// \"The previous value of this register is the value produced by executing\n    /// the DWARF expression.\"\n    ValExpression(Expression<R>),\n\n    /// \"The rule is defined externally to this specification by the augmenter.\"\n    Architectural,\n}","parent":null,"children":[{"krate":0,"index":6065},{"krate":0,"index":6067},{"krate":0,"index":6069},{"krate":0,"index":6072},{"krate":0,"index":6075},{"krate":0,"index":6078},{"krate":0,"index":6081},{"krate":0,"index":6084}],"decl_id":null,"docs":" An entry in the abstract CFI table that describes how to find the value of a\n register.","sig":null,"attributes":[{"value":"/ An entry in the abstract CFI table that describes how to find the value of a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":208586,"byte_end":208666,"line_start":2683,"line_end":2683,"column_start":1,"column_end":81}},{"value":"/ register.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":208667,"byte_end":208680,"line_start":2684,"line_end":2684,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":208681,"byte_end":208684,"line_start":2685,"line_end":2685,"column_start":1,"column_end":4}},{"value":"/ \"The register columns contain rules that describe whether a given register","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":208685,"byte_end":208763,"line_start":2686,"line_end":2686,"column_start":1,"column_end":79}},{"value":"/ has been saved and the rule to find the value for the register in the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":208764,"byte_end":208837,"line_start":2687,"line_end":2687,"column_start":1,"column_end":74}},{"value":"/ previous frame.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":208838,"byte_end":208858,"line_start":2688,"line_end":2688,"column_start":1,"column_end":21}}]},{"kind":"StructVariant","id":{"krate":0,"index":6105},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":211033,"byte_end":211039,"line_start":2746,"line_end":2746,"column_start":5,"column_end":11},"name":"SetLoc","qualname":"::read::cfi::CallFrameInstruction::SetLoc","value":"CallFrameInstruction::SetLoc { address }","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" > 1. DW_CFA_set_loc\n >\n > The DW_CFA_set_loc instruction takes a single operand that represents\n > a target address. The required action is to create a new table row\n > using the specified address as the location. All other values in the\n > new row are initially identical to the current row. The new location\n > value is always greater than the current one. If the segment_size\n > field of this FDE's CIE is non- zero, the initial location is preceded\n > by a segment selector of the given length.\n","sig":null,"attributes":[{"value":"/ > 1. DW_CFA_set_loc","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":210470,"byte_end":210493,"line_start":2737,"line_end":2737,"column_start":5,"column_end":28}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":210498,"byte_end":210503,"line_start":2738,"line_end":2738,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_set_loc instruction takes a single operand that represents","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":210508,"byte_end":210583,"line_start":2739,"line_end":2739,"column_start":5,"column_end":80}},{"value":"/ > a target address. The required action is to create a new table row","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":210588,"byte_end":210660,"line_start":2740,"line_end":2740,"column_start":5,"column_end":77}},{"value":"/ > using the specified address as the location. All other values in the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":210665,"byte_end":210739,"line_start":2741,"line_end":2741,"column_start":5,"column_end":79}},{"value":"/ > new row are initially identical to the current row. The new location","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":210744,"byte_end":210818,"line_start":2742,"line_end":2742,"column_start":5,"column_end":79}},{"value":"/ > value is always greater than the current one. If the segment_size","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":210823,"byte_end":210894,"line_start":2743,"line_end":2743,"column_start":5,"column_end":76}},{"value":"/ > field of this FDE's CIE is non- zero, the initial location is preceded","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":210899,"byte_end":210975,"line_start":2744,"line_end":2744,"column_start":5,"column_end":81}},{"value":"/ > by a segment selector of the given length.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":210980,"byte_end":211028,"line_start":2745,"line_end":2745,"column_start":5,"column_end":53}}]},{"kind":"StructVariant","id":{"krate":0,"index":6107},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":211716,"byte_end":211726,"line_start":2762,"line_end":2762,"column_start":5,"column_end":15},"name":"AdvanceLoc","qualname":"::read::cfi::CallFrameInstruction::AdvanceLoc","value":"CallFrameInstruction::AdvanceLoc { delta }","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" The `AdvanceLoc` instruction is used for all of `DW_CFA_advance_loc` and\n `DW_CFA_advance_loc{1,2,4}`.","sig":null,"attributes":[{"value":"/ The `AdvanceLoc` instruction is used for all of `DW_CFA_advance_loc` and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":211108,"byte_end":211184,"line_start":2751,"line_end":2751,"column_start":5,"column_end":81}},{"value":"/ `DW_CFA_advance_loc{1,2,4}`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":211189,"byte_end":211221,"line_start":2752,"line_end":2752,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":211226,"byte_end":211229,"line_start":2753,"line_end":2753,"column_start":5,"column_end":8}},{"value":"/ > 2. DW_CFA_advance_loc","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":211234,"byte_end":211261,"line_start":2754,"line_end":2754,"column_start":5,"column_end":32}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":211266,"byte_end":211271,"line_start":2755,"line_end":2755,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_advance instruction takes a single operand (encoded with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":211276,"byte_end":211349,"line_start":2756,"line_end":2756,"column_start":5,"column_end":78}},{"value":"/ > the opcode) that represents a constant delta. The required action is","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":211354,"byte_end":211428,"line_start":2757,"line_end":2757,"column_start":5,"column_end":79}},{"value":"/ > to create a new table row with a location value that is computed by","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":211433,"byte_end":211506,"line_start":2758,"line_end":2758,"column_start":5,"column_end":78}},{"value":"/ > taking the current entry’s location value and adding the value of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":211511,"byte_end":211584,"line_start":2759,"line_end":2759,"column_start":5,"column_end":76}},{"value":"/ > delta * code_alignment_factor. All other values in the new row are","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":211589,"byte_end":211661,"line_start":2760,"line_end":2760,"column_start":5,"column_end":77}},{"value":"/ > initially identical to the current row.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":211666,"byte_end":211711,"line_start":2761,"line_end":2761,"column_start":5,"column_end":50}}]},{"kind":"StructVariant","id":{"krate":0,"index":6109},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":212156,"byte_end":212162,"line_start":2774,"line_end":2774,"column_start":5,"column_end":11},"name":"DefCfa","qualname":"::read::cfi::CallFrameInstruction::DefCfa","value":"CallFrameInstruction::DefCfa { register, offset }","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" > 1. DW_CFA_def_cfa\n >\n > The DW_CFA_def_cfa instruction takes two unsigned LEB128 operands\n > representing a register number and a (non-factored) offset. The\n > required action is to define the current CFA rule to use the provided\n > register and offset.\n","sig":null,"attributes":[{"value":"/ > 1. DW_CFA_def_cfa","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":211857,"byte_end":211880,"line_start":2768,"line_end":2768,"column_start":5,"column_end":28}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":211885,"byte_end":211890,"line_start":2769,"line_end":2769,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_def_cfa instruction takes two unsigned LEB128 operands","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":211895,"byte_end":211966,"line_start":2770,"line_end":2770,"column_start":5,"column_end":76}},{"value":"/ > representing a register number and a (non-factored) offset. The","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":211971,"byte_end":212040,"line_start":2771,"line_end":2771,"column_start":5,"column_end":74}},{"value":"/ > required action is to define the current CFA rule to use the provided","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":212045,"byte_end":212120,"line_start":2772,"line_end":2772,"column_start":5,"column_end":80}},{"value":"/ > register and offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":212125,"byte_end":212151,"line_start":2773,"line_end":2773,"column_start":5,"column_end":31}}]},{"kind":"StructVariant","id":{"krate":0,"index":6112},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":212711,"byte_end":212719,"line_start":2788,"line_end":2788,"column_start":5,"column_end":13},"name":"DefCfaSf","qualname":"::read::cfi::CallFrameInstruction::DefCfaSf","value":"CallFrameInstruction::DefCfaSf { register, factored_offset }","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" > 2. DW_CFA_def_cfa_sf\n >\n > The DW_CFA_def_cfa_sf instruction takes two operands: an unsigned\n > LEB128 value representing a register number and a signed LEB128\n > factored offset. This instruction is identical to DW_CFA_def_cfa\n > except that the second operand is signed and factored. The resulting\n > offset is factored_offset * data_alignment_factor.\n","sig":null,"attributes":[{"value":"/ > 2. DW_CFA_def_cfa_sf","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":212305,"byte_end":212331,"line_start":2781,"line_end":2781,"column_start":5,"column_end":31}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":212336,"byte_end":212341,"line_start":2782,"line_end":2782,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_def_cfa_sf instruction takes two operands: an unsigned","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":212346,"byte_end":212417,"line_start":2783,"line_end":2783,"column_start":5,"column_end":76}},{"value":"/ > LEB128 value representing a register number and a signed LEB128","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":212422,"byte_end":212491,"line_start":2784,"line_end":2784,"column_start":5,"column_end":74}},{"value":"/ > factored offset. This instruction is identical to DW_CFA_def_cfa","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":212496,"byte_end":212566,"line_start":2785,"line_end":2785,"column_start":5,"column_end":75}},{"value":"/ > except that the second operand is signed and factored. The resulting","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":212571,"byte_end":212645,"line_start":2786,"line_end":2786,"column_start":5,"column_end":79}},{"value":"/ > offset is factored_offset * data_alignment_factor.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":212650,"byte_end":212706,"line_start":2787,"line_end":2787,"column_start":5,"column_end":61}}]},{"kind":"StructVariant","id":{"krate":0,"index":6115},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":213282,"byte_end":213296,"line_start":2802,"line_end":2802,"column_start":5,"column_end":19},"name":"DefCfaRegister","qualname":"::read::cfi::CallFrameInstruction::DefCfaRegister","value":"CallFrameInstruction::DefCfaRegister { register }","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" > 3. DW_CFA_def_cfa_register\n >\n > The DW_CFA_def_cfa_register instruction takes a single unsigned LEB128\n > operand representing a register number. The required action is to\n > define the current CFA rule to use the provided register (but to keep\n > the old offset). This operation is valid only if the current CFA rule\n > is defined to use a register and offset.\n","sig":null,"attributes":[{"value":"/ > 3. DW_CFA_def_cfa_register","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":212867,"byte_end":212899,"line_start":2795,"line_end":2795,"column_start":5,"column_end":37}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":212904,"byte_end":212909,"line_start":2796,"line_end":2796,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_def_cfa_register instruction takes a single unsigned LEB128","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":212914,"byte_end":212990,"line_start":2797,"line_end":2797,"column_start":5,"column_end":81}},{"value":"/ > operand representing a register number. The required action is to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":212995,"byte_end":213066,"line_start":2798,"line_end":2798,"column_start":5,"column_end":76}},{"value":"/ > define the current CFA rule to use the provided register (but to keep","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":213071,"byte_end":213146,"line_start":2799,"line_end":2799,"column_start":5,"column_end":80}},{"value":"/ > the old offset). This operation is valid only if the current CFA rule","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":213151,"byte_end":213226,"line_start":2800,"line_end":2800,"column_start":5,"column_end":80}},{"value":"/ > is defined to use a register and offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":213231,"byte_end":213277,"line_start":2801,"line_end":2801,"column_start":5,"column_end":51}}]},{"kind":"StructVariant","id":{"krate":0,"index":6117},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":213798,"byte_end":213810,"line_start":2814,"line_end":2814,"column_start":5,"column_end":17},"name":"DefCfaOffset","qualname":"::read::cfi::CallFrameInstruction::DefCfaOffset","value":"CallFrameInstruction::DefCfaOffset { offset }","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" > 4. DW_CFA_def_cfa_offset\n >\n > The DW_CFA_def_cfa_offset instruction takes a single unsigned LEB128\n > operand representing a (non-factored) offset. The required action is\n > to define the current CFA rule to use the provided offset (but to keep\n > the old register). This operation is valid only if the current CFA\n > rule is defined to use a register and offset.\n","sig":null,"attributes":[{"value":"/ > 4. DW_CFA_def_cfa_offset","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":213381,"byte_end":213411,"line_start":2807,"line_end":2807,"column_start":5,"column_end":35}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":213416,"byte_end":213421,"line_start":2808,"line_end":2808,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_def_cfa_offset instruction takes a single unsigned LEB128","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":213426,"byte_end":213500,"line_start":2809,"line_end":2809,"column_start":5,"column_end":79}},{"value":"/ > operand representing a (non-factored) offset. The required action is","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":213505,"byte_end":213579,"line_start":2810,"line_end":2810,"column_start":5,"column_end":79}},{"value":"/ > to define the current CFA rule to use the provided offset (but to keep","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":213584,"byte_end":213660,"line_start":2811,"line_end":2811,"column_start":5,"column_end":81}},{"value":"/ > the old register). This operation is valid only if the current CFA","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":213665,"byte_end":213737,"line_start":2812,"line_end":2812,"column_start":5,"column_end":77}},{"value":"/ > rule is defined to use a register and offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":213742,"byte_end":213793,"line_start":2813,"line_end":2813,"column_start":5,"column_end":56}}]},{"kind":"StructVariant","id":{"krate":0,"index":6119},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":214356,"byte_end":214370,"line_start":2827,"line_end":2827,"column_start":5,"column_end":19},"name":"DefCfaOffsetSf","qualname":"::read::cfi::CallFrameInstruction::DefCfaOffsetSf","value":"CallFrameInstruction::DefCfaOffsetSf { factored_offset }","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" > 5. DW_CFA_def_cfa_offset_sf\n >\n > The DW_CFA_def_cfa_offset_sf instruction takes a signed LEB128 operand\n > representing a factored offset. This instruction is identical to\n > DW_CFA_def_cfa_offset except that the operand is signed and\n > factored. The resulting offset is factored_offset *\n > data_alignment_factor. This operation is valid only if the current CFA\n > rule is defined to use a register and offset.\n","sig":null,"attributes":[{"value":"/ > 5. DW_CFA_def_cfa_offset_sf","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":213883,"byte_end":213916,"line_start":2819,"line_end":2819,"column_start":5,"column_end":38}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":213921,"byte_end":213926,"line_start":2820,"line_end":2820,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_def_cfa_offset_sf instruction takes a signed LEB128 operand","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":213931,"byte_end":214007,"line_start":2821,"line_end":2821,"column_start":5,"column_end":81}},{"value":"/ > representing a factored offset. This instruction is identical to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":214012,"byte_end":214082,"line_start":2822,"line_end":2822,"column_start":5,"column_end":75}},{"value":"/ > DW_CFA_def_cfa_offset except that the operand is signed and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":214087,"byte_end":214152,"line_start":2823,"line_end":2823,"column_start":5,"column_end":70}},{"value":"/ > factored. The resulting offset is factored_offset *","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":214157,"byte_end":214214,"line_start":2824,"line_end":2824,"column_start":5,"column_end":62}},{"value":"/ > data_alignment_factor. This operation is valid only if the current CFA","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":214219,"byte_end":214295,"line_start":2825,"line_end":2825,"column_start":5,"column_end":81}},{"value":"/ > rule is defined to use a register and offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":214300,"byte_end":214351,"line_start":2826,"line_end":2826,"column_start":5,"column_end":56}}]},{"kind":"StructVariant","id":{"krate":0,"index":6121},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":214773,"byte_end":214789,"line_start":2838,"line_end":2838,"column_start":5,"column_end":21},"name":"DefCfaExpression","qualname":"::read::cfi::CallFrameInstruction::DefCfaExpression","value":"CallFrameInstruction::DefCfaExpression { expression }","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" > 6. DW_CFA_def_cfa_expression\n >\n > The DW_CFA_def_cfa_expression instruction takes a single operand\n > encoded as a DW_FORM_exprloc value representing a DWARF\n > expression. The required action is to establish that expression as the\n > means by which the current CFA is computed.\n","sig":null,"attributes":[{"value":"/ > 6. DW_CFA_def_cfa_expression","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":214448,"byte_end":214482,"line_start":2832,"line_end":2832,"column_start":5,"column_end":39}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":214487,"byte_end":214492,"line_start":2833,"line_end":2833,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_def_cfa_expression instruction takes a single operand","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":214497,"byte_end":214567,"line_start":2834,"line_end":2834,"column_start":5,"column_end":75}},{"value":"/ > encoded as a DW_FORM_exprloc value representing a DWARF","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":214572,"byte_end":214633,"line_start":2835,"line_end":2835,"column_start":5,"column_end":66}},{"value":"/ > expression. The required action is to establish that expression as the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":214638,"byte_end":214714,"line_start":2836,"line_end":2836,"column_start":5,"column_end":81}},{"value":"/ > means by which the current CFA is computed.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":214719,"byte_end":214768,"line_start":2837,"line_end":2837,"column_start":5,"column_end":54}}]},{"kind":"StructVariant","id":{"krate":0,"index":6123},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":215178,"byte_end":215187,"line_start":2849,"line_end":2849,"column_start":5,"column_end":14},"name":"Undefined","qualname":"::read::cfi::CallFrameInstruction::Undefined","value":"CallFrameInstruction::Undefined { register }","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" > 1. DW_CFA_undefined\n >\n > The DW_CFA_undefined instruction takes a single unsigned LEB128\n > operand that represents a register number. The required action is to\n > set the rule for the specified register to “undefined.”\n","sig":null,"attributes":[{"value":"/ > 1. DW_CFA_undefined","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":214915,"byte_end":214940,"line_start":2844,"line_end":2844,"column_start":5,"column_end":30}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":214945,"byte_end":214950,"line_start":2845,"line_end":2845,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_undefined instruction takes a single unsigned LEB128","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":214955,"byte_end":215024,"line_start":2846,"line_end":2846,"column_start":5,"column_end":74}},{"value":"/ > operand that represents a register number. The required action is to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":215029,"byte_end":215103,"line_start":2847,"line_end":2847,"column_start":5,"column_end":79}},{"value":"/ > set the rule for the specified register to “undefined.”","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":215108,"byte_end":215173,"line_start":2848,"line_end":2848,"column_start":5,"column_end":66}}]},{"kind":"StructVariant","id":{"krate":0,"index":6125},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":215538,"byte_end":215547,"line_start":2859,"line_end":2859,"column_start":5,"column_end":14},"name":"SameValue","qualname":"::read::cfi::CallFrameInstruction::SameValue","value":"CallFrameInstruction::SameValue { register }","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" > 2. DW_CFA_same_value\n >\n > The DW_CFA_same_value instruction takes a single unsigned LEB128\n > operand that represents a register number. The required action is to\n > set the rule for the specified register to “same value.”\n","sig":null,"attributes":[{"value":"/ > 2. DW_CFA_same_value","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":215272,"byte_end":215298,"line_start":2854,"line_end":2854,"column_start":5,"column_end":31}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":215303,"byte_end":215308,"line_start":2855,"line_end":2855,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_same_value instruction takes a single unsigned LEB128","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":215313,"byte_end":215383,"line_start":2856,"line_end":2856,"column_start":5,"column_end":75}},{"value":"/ > operand that represents a register number. The required action is to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":215388,"byte_end":215462,"line_start":2857,"line_end":2857,"column_start":5,"column_end":79}},{"value":"/ > set the rule for the specified register to “same value.”","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":215467,"byte_end":215533,"line_start":2858,"line_end":2858,"column_start":5,"column_end":67}}]},{"kind":"StructVariant","id":{"krate":0,"index":6127},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":216169,"byte_end":216175,"line_start":2874,"line_end":2874,"column_start":5,"column_end":11},"name":"Offset","qualname":"::read::cfi::CallFrameInstruction::Offset","value":"CallFrameInstruction::Offset { register, factored_offset }","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" The `Offset` instruction represents both `DW_CFA_offset` and\n `DW_CFA_offset_extended`.","sig":null,"attributes":[{"value":"/ The `Offset` instruction represents both `DW_CFA_offset` and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":215632,"byte_end":215696,"line_start":2864,"line_end":2864,"column_start":5,"column_end":69}},{"value":"/ `DW_CFA_offset_extended`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":215701,"byte_end":215730,"line_start":2865,"line_end":2865,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":215735,"byte_end":215738,"line_start":2866,"line_end":2866,"column_start":5,"column_end":8}},{"value":"/ > 3. DW_CFA_offset","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":215743,"byte_end":215765,"line_start":2867,"line_end":2867,"column_start":5,"column_end":27}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":215770,"byte_end":215775,"line_start":2868,"line_end":2868,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_offset instruction takes two operands: a register number","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":215780,"byte_end":215853,"line_start":2869,"line_end":2869,"column_start":5,"column_end":78}},{"value":"/ > (encoded with the opcode) and an unsigned LEB128 constant representing","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":215858,"byte_end":215934,"line_start":2870,"line_end":2870,"column_start":5,"column_end":81}},{"value":"/ > a factored offset. The required action is to change the rule for the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":215939,"byte_end":216013,"line_start":2871,"line_end":2871,"column_start":5,"column_end":79}},{"value":"/ > register indicated by the register number to be an offset(N) rule","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":216018,"byte_end":216089,"line_start":2872,"line_end":2872,"column_start":5,"column_end":76}},{"value":"/ > where the value of N is factored offset * data_alignment_factor.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":216094,"byte_end":216164,"line_start":2873,"line_end":2873,"column_start":5,"column_end":75}}]},{"kind":"StructVariant","id":{"krate":0,"index":6130},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":216763,"byte_end":216779,"line_start":2889,"line_end":2889,"column_start":5,"column_end":21},"name":"OffsetExtendedSf","qualname":"::read::cfi::CallFrameInstruction::OffsetExtendedSf","value":"CallFrameInstruction::OffsetExtendedSf { register, factored_offset }","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" > 5. DW_CFA_offset_extended_sf\n >\n > The DW_CFA_offset_extended_sf instruction takes two operands: an\n > unsigned LEB128 value representing a register number and a signed\n > LEB128 factored offset. This instruction is identical to\n > DW_CFA_offset_extended except that the second operand is signed and\n > factored. The resulting offset is factored_offset *\n > data_alignment_factor.\n","sig":null,"attributes":[{"value":"/ > 5. DW_CFA_offset_extended_sf","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":216323,"byte_end":216357,"line_start":2881,"line_end":2881,"column_start":5,"column_end":39}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":216362,"byte_end":216367,"line_start":2882,"line_end":2882,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_offset_extended_sf instruction takes two operands: an","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":216372,"byte_end":216442,"line_start":2883,"line_end":2883,"column_start":5,"column_end":75}},{"value":"/ > unsigned LEB128 value representing a register number and a signed","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":216447,"byte_end":216518,"line_start":2884,"line_end":2884,"column_start":5,"column_end":76}},{"value":"/ > LEB128 factored offset. This instruction is identical to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":216523,"byte_end":216585,"line_start":2885,"line_end":2885,"column_start":5,"column_end":67}},{"value":"/ > DW_CFA_offset_extended except that the second operand is signed and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":216590,"byte_end":216663,"line_start":2886,"line_end":2886,"column_start":5,"column_end":78}},{"value":"/ > factored. The resulting offset is factored_offset *","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":216668,"byte_end":216725,"line_start":2887,"line_end":2887,"column_start":5,"column_end":62}},{"value":"/ > data_alignment_factor.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":216730,"byte_end":216758,"line_start":2888,"line_end":2888,"column_start":5,"column_end":33}}]},{"kind":"StructVariant","id":{"krate":0,"index":6133},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":217325,"byte_end":217334,"line_start":2903,"line_end":2903,"column_start":5,"column_end":14},"name":"ValOffset","qualname":"::read::cfi::CallFrameInstruction::ValOffset","value":"CallFrameInstruction::ValOffset { register, factored_offset }","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" > 6. DW_CFA_val_offset\n >\n > The DW_CFA_val_offset instruction takes two unsigned LEB128 operands\n > representing a register number and a factored offset. The required\n > action is to change the rule for the register indicated by the\n > register number to be a val_offset(N) rule where the value of N is\n > factored_offset * data_alignment_factor.\n","sig":null,"attributes":[{"value":"/ > 6. DW_CFA_val_offset","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":216927,"byte_end":216953,"line_start":2896,"line_end":2896,"column_start":5,"column_end":31}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":216958,"byte_end":216963,"line_start":2897,"line_end":2897,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_val_offset instruction takes two unsigned LEB128 operands","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":216968,"byte_end":217042,"line_start":2898,"line_end":2898,"column_start":5,"column_end":79}},{"value":"/ > representing a register number and a factored offset. The required","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":217047,"byte_end":217119,"line_start":2899,"line_end":2899,"column_start":5,"column_end":77}},{"value":"/ > action is to change the rule for the register indicated by the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":217124,"byte_end":217192,"line_start":2900,"line_end":2900,"column_start":5,"column_end":73}},{"value":"/ > register number to be a val_offset(N) rule where the value of N is","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":217197,"byte_end":217269,"line_start":2901,"line_end":2901,"column_start":5,"column_end":77}},{"value":"/ > factored_offset * data_alignment_factor.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":217274,"byte_end":217320,"line_start":2902,"line_end":2902,"column_start":5,"column_end":51}}]},{"kind":"StructVariant","id":{"krate":0,"index":6136},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":217897,"byte_end":217908,"line_start":2917,"line_end":2917,"column_start":5,"column_end":16},"name":"ValOffsetSf","qualname":"::read::cfi::CallFrameInstruction::ValOffsetSf","value":"CallFrameInstruction::ValOffsetSf { register, factored_offset }","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" > 7. DW_CFA_val_offset_sf\n >\n > The DW_CFA_val_offset_sf instruction takes two operands: an unsigned\n > LEB128 value representing a register number and a signed LEB128\n > factored offset. This instruction is identical to DW_CFA_val_offset\n > except that the second operand is signed and factored. The resulting\n > offset is factored_offset * data_alignment_factor.\n","sig":null,"attributes":[{"value":"/ > 7. DW_CFA_val_offset_sf","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":217482,"byte_end":217511,"line_start":2910,"line_end":2910,"column_start":5,"column_end":34}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":217516,"byte_end":217521,"line_start":2911,"line_end":2911,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_val_offset_sf instruction takes two operands: an unsigned","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":217526,"byte_end":217600,"line_start":2912,"line_end":2912,"column_start":5,"column_end":79}},{"value":"/ > LEB128 value representing a register number and a signed LEB128","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":217605,"byte_end":217674,"line_start":2913,"line_end":2913,"column_start":5,"column_end":74}},{"value":"/ > factored offset. This instruction is identical to DW_CFA_val_offset","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":217679,"byte_end":217752,"line_start":2914,"line_end":2914,"column_start":5,"column_end":78}},{"value":"/ > except that the second operand is signed and factored. The resulting","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":217757,"byte_end":217831,"line_start":2915,"line_end":2915,"column_start":5,"column_end":79}},{"value":"/ > offset is factored_offset * data_alignment_factor.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":217836,"byte_end":217892,"line_start":2916,"line_end":2916,"column_start":5,"column_end":61}}]},{"kind":"StructVariant","id":{"krate":0,"index":6139},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":218345,"byte_end":218353,"line_start":2930,"line_end":2930,"column_start":5,"column_end":13},"name":"Register","qualname":"::read::cfi::CallFrameInstruction::Register","value":"CallFrameInstruction::Register { dest_register, src_register }","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" > 8. DW_CFA_register\n >\n > The DW_CFA_register instruction takes two unsigned LEB128 operands\n > representing register numbers. The required action is to set the rule\n > for the first register to be register(R) where R is the second\n > register.\n","sig":null,"attributes":[{"value":"/ > 8. DW_CFA_register","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":218056,"byte_end":218080,"line_start":2924,"line_end":2924,"column_start":5,"column_end":29}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":218085,"byte_end":218090,"line_start":2925,"line_end":2925,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_register instruction takes two unsigned LEB128 operands","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":218095,"byte_end":218167,"line_start":2926,"line_end":2926,"column_start":5,"column_end":77}},{"value":"/ > representing register numbers. The required action is to set the rule","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":218172,"byte_end":218247,"line_start":2927,"line_end":2927,"column_start":5,"column_end":80}},{"value":"/ > for the first register to be register(R) where R is the second","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":218252,"byte_end":218320,"line_start":2928,"line_end":2928,"column_start":5,"column_end":73}},{"value":"/ > register.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":218325,"byte_end":218340,"line_start":2929,"line_end":2929,"column_start":5,"column_end":20}}]},{"kind":"StructVariant","id":{"krate":0,"index":6142},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":219190,"byte_end":219200,"line_start":2947,"line_end":2947,"column_start":5,"column_end":15},"name":"Expression","qualname":"::read::cfi::CallFrameInstruction::Expression","value":"CallFrameInstruction::Expression { register, expression }","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" > 9. DW_CFA_expression\n >\n > The DW_CFA_expression instruction takes two operands: an unsigned\n > LEB128 value representing a register number, and a DW_FORM_block value\n > representing a DWARF expression. The required action is to change the\n > rule for the register indicated by the register number to be an\n > expression(E) rule where E is the DWARF expression. That is, the DWARF\n > expression computes the address. The value of the CFA is pushed on the\n > DWARF evaluation stack prior to execution of the DWARF expression.\n","sig":null,"attributes":[{"value":"/ > 9. DW_CFA_expression","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":218599,"byte_end":218625,"line_start":2938,"line_end":2938,"column_start":5,"column_end":31}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":218630,"byte_end":218635,"line_start":2939,"line_end":2939,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_expression instruction takes two operands: an unsigned","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":218640,"byte_end":218711,"line_start":2940,"line_end":2940,"column_start":5,"column_end":76}},{"value":"/ > LEB128 value representing a register number, and a DW_FORM_block value","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":218716,"byte_end":218792,"line_start":2941,"line_end":2941,"column_start":5,"column_end":81}},{"value":"/ > representing a DWARF expression. The required action is to change the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":218797,"byte_end":218872,"line_start":2942,"line_end":2942,"column_start":5,"column_end":80}},{"value":"/ > rule for the register indicated by the register number to be an","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":218877,"byte_end":218946,"line_start":2943,"line_end":2943,"column_start":5,"column_end":74}},{"value":"/ > expression(E) rule where E is the DWARF expression. That is, the DWARF","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":218951,"byte_end":219027,"line_start":2944,"line_end":2944,"column_start":5,"column_end":81}},{"value":"/ > expression computes the address. The value of the CFA is pushed on the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":219032,"byte_end":219108,"line_start":2945,"line_end":2945,"column_start":5,"column_end":81}},{"value":"/ > DWARF evaluation stack prior to execution of the DWARF expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":219113,"byte_end":219185,"line_start":2946,"line_end":2946,"column_start":5,"column_end":77}}]},{"kind":"StructVariant","id":{"krate":0,"index":6145},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":219987,"byte_end":220000,"line_start":2964,"line_end":2964,"column_start":5,"column_end":18},"name":"ValExpression","qualname":"::read::cfi::CallFrameInstruction::ValExpression","value":"CallFrameInstruction::ValExpression { register, expression }","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" > 10. DW_CFA_val_expression\n >\n > The DW_CFA_val_expression instruction takes two operands: an unsigned\n > LEB128 value representing a register number, and a DW_FORM_block value\n > representing a DWARF expression. The required action is to change the\n > rule for the register indicated by the register number to be a\n > val_expression(E) rule where E is the DWARF expression. That is, the\n > DWARF expression computes the value of the given register. The value\n > of the CFA is pushed on the DWARF evaluation stack prior to execution\n > of the DWARF expression.\n","sig":null,"attributes":[{"value":"/ > 10. DW_CFA_val_expression","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":219354,"byte_end":219385,"line_start":2954,"line_end":2954,"column_start":5,"column_end":36}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":219390,"byte_end":219395,"line_start":2955,"line_end":2955,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_val_expression instruction takes two operands: an unsigned","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":219400,"byte_end":219475,"line_start":2956,"line_end":2956,"column_start":5,"column_end":80}},{"value":"/ > LEB128 value representing a register number, and a DW_FORM_block value","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":219480,"byte_end":219556,"line_start":2957,"line_end":2957,"column_start":5,"column_end":81}},{"value":"/ > representing a DWARF expression. The required action is to change the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":219561,"byte_end":219636,"line_start":2958,"line_end":2958,"column_start":5,"column_end":80}},{"value":"/ > rule for the register indicated by the register number to be a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":219641,"byte_end":219709,"line_start":2959,"line_end":2959,"column_start":5,"column_end":73}},{"value":"/ > val_expression(E) rule where E is the DWARF expression. That is, the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":219714,"byte_end":219788,"line_start":2960,"line_end":2960,"column_start":5,"column_end":79}},{"value":"/ > DWARF expression computes the value of the given register. The value","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":219793,"byte_end":219867,"line_start":2961,"line_end":2961,"column_start":5,"column_end":79}},{"value":"/ > of the CFA is pushed on the DWARF evaluation stack prior to execution","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":219872,"byte_end":219947,"line_start":2962,"line_end":2962,"column_start":5,"column_end":80}},{"value":"/ > of the DWARF expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":219952,"byte_end":219982,"line_start":2963,"line_end":2963,"column_start":5,"column_end":35}}]},{"kind":"StructVariant","id":{"krate":0,"index":6148},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":220595,"byte_end":220602,"line_start":2980,"line_end":2980,"column_start":5,"column_end":12},"name":"Restore","qualname":"::read::cfi::CallFrameInstruction::Restore","value":"CallFrameInstruction::Restore { register }","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" The `Restore` instruction represents both `DW_CFA_restore` and\n `DW_CFA_restore_extended`.","sig":null,"attributes":[{"value":"/ The `Restore` instruction represents both `DW_CFA_restore` and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":220154,"byte_end":220220,"line_start":2971,"line_end":2971,"column_start":5,"column_end":71}},{"value":"/ `DW_CFA_restore_extended`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":220225,"byte_end":220255,"line_start":2972,"line_end":2972,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":220260,"byte_end":220263,"line_start":2973,"line_end":2973,"column_start":5,"column_end":8}},{"value":"/ > 11. DW_CFA_restore","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":220268,"byte_end":220292,"line_start":2974,"line_end":2974,"column_start":5,"column_end":29}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":220297,"byte_end":220302,"line_start":2975,"line_end":2975,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_restore instruction takes a single operand (encoded with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":220307,"byte_end":220380,"line_start":2976,"line_end":2976,"column_start":5,"column_end":78}},{"value":"/ > the opcode) that represents a register number. The required action is","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":220385,"byte_end":220460,"line_start":2977,"line_end":2977,"column_start":5,"column_end":80}},{"value":"/ > to change the rule for the indicated register to the rule assigned it","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":220465,"byte_end":220540,"line_start":2978,"line_end":2978,"column_start":5,"column_end":80}},{"value":"/ > by the initial_instructions in the CIE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":220545,"byte_end":220590,"line_start":2979,"line_end":2979,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6150},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":220944,"byte_end":220957,"line_start":2991,"line_end":2991,"column_start":5,"column_end":18},"name":"RememberState","qualname":"::read::cfi::CallFrameInstruction::RememberState","value":"CallFrameInstruction::RememberState","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" > 1. DW_CFA_remember_state\n >\n > The DW_CFA_remember_state instruction takes no operands. The required\n > action is to push the set of rules for every register onto an implicit\n > stack.\n","sig":null,"attributes":[{"value":"/ > 1. DW_CFA_remember_state","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":220721,"byte_end":220751,"line_start":2986,"line_end":2986,"column_start":5,"column_end":35}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":220756,"byte_end":220761,"line_start":2987,"line_end":2987,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_remember_state instruction takes no operands. The required","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":220766,"byte_end":220841,"line_start":2988,"line_end":2988,"column_start":5,"column_end":80}},{"value":"/ > action is to push the set of rules for every register onto an implicit","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":220846,"byte_end":220922,"line_start":2989,"line_end":2989,"column_start":5,"column_end":81}},{"value":"/ > stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":220927,"byte_end":220939,"line_start":2990,"line_end":2990,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6152},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":221199,"byte_end":221211,"line_start":2998,"line_end":2998,"column_start":5,"column_end":17},"name":"RestoreState","qualname":"::read::cfi::CallFrameInstruction::RestoreState","value":"CallFrameInstruction::RestoreState","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" > 2. DW_CFA_restore_state\n >\n > The DW_CFA_restore_state instruction takes no operands. The required\n > action is to pop the set of rules off the implicit stack and place\n > them in the current row.\n","sig":null,"attributes":[{"value":"/ > 2. DW_CFA_restore_state","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":220964,"byte_end":220993,"line_start":2993,"line_end":2993,"column_start":5,"column_end":34}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":220998,"byte_end":221003,"line_start":2994,"line_end":2994,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_restore_state instruction takes no operands. The required","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":221008,"byte_end":221082,"line_start":2995,"line_end":2995,"column_start":5,"column_end":79}},{"value":"/ > action is to pop the set of rules off the implicit stack and place","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":221087,"byte_end":221159,"line_start":2996,"line_end":2996,"column_start":5,"column_end":77}},{"value":"/ > them in the current row.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":221164,"byte_end":221194,"line_start":2997,"line_end":2997,"column_start":5,"column_end":35}}]},{"kind":"StructVariant","id":{"krate":0,"index":6154},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":221529,"byte_end":221537,"line_start":3007,"line_end":3007,"column_start":5,"column_end":13},"name":"ArgsSize","qualname":"::read::cfi::CallFrameInstruction::ArgsSize","value":"CallFrameInstruction::ArgsSize { size }","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" > DW_CFA_GNU_args_size\n >\n > GNU Extension\n >\n > The DW_CFA_GNU_args_size instruction takes an unsigned LEB128 operand\n > representing an argument size. This instruction specifies the total of\n > the size of the arguments which have been pushed onto the stack.\n","sig":null,"attributes":[{"value":"/ > DW_CFA_GNU_args_size","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":221218,"byte_end":221244,"line_start":3000,"line_end":3000,"column_start":5,"column_end":31}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":221249,"byte_end":221254,"line_start":3001,"line_end":3001,"column_start":5,"column_end":10}},{"value":"/ > GNU Extension","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":221259,"byte_end":221278,"line_start":3002,"line_end":3002,"column_start":5,"column_end":24}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":221283,"byte_end":221288,"line_start":3003,"line_end":3003,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_GNU_args_size instruction takes an unsigned LEB128 operand","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":221293,"byte_end":221368,"line_start":3004,"line_end":3004,"column_start":5,"column_end":80}},{"value":"/ > representing an argument size. This instruction specifies the total of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":221373,"byte_end":221449,"line_start":3005,"line_end":3005,"column_start":5,"column_end":81}},{"value":"/ > the size of the arguments which have been pushed onto the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":221454,"byte_end":221524,"line_start":3006,"line_end":3006,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6156},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":221868,"byte_end":221871,"line_start":3017,"line_end":3017,"column_start":5,"column_end":8},"name":"Nop","qualname":"::read::cfi::CallFrameInstruction::Nop","value":"CallFrameInstruction::Nop","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" > 1. DW_CFA_nop\n >\n > The DW_CFA_nop instruction has no operands and no required actions. It\n > is used as padding to make a CIE or FDE an appropriate size.\n","sig":null,"attributes":[{"value":"/ > 1. DW_CFA_nop","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":221682,"byte_end":221701,"line_start":3013,"line_end":3013,"column_start":5,"column_end":24}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":221706,"byte_end":221711,"line_start":3014,"line_end":3014,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_nop instruction has no operands and no required actions. It","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":221716,"byte_end":221792,"line_start":3015,"line_end":3015,"column_start":5,"column_end":81}},{"value":"/ > is used as padding to make a CIE or FDE an appropriate size.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":221797,"byte_end":221863,"line_start":3016,"line_end":3016,"column_start":5,"column_end":71}}]},{"kind":"Enum","id":{"krate":0,"index":6103},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":210396,"byte_end":210416,"line_start":2735,"line_end":2735,"column_start":10,"column_end":30},"name":"CallFrameInstruction","qualname":"::read::cfi::CallFrameInstruction","value":"pub enum CallFrameInstruction<R: Reader> {\n\n    /// > 1. DW_CFA_set_loc\n    /// >\n    /// > The DW_CFA_set_loc instruction takes a single operand that represents\n    /// > a target address. The required action is to create a new table row\n    /// > using the specified address as the location. All other values in the\n    /// > new row are initially identical to the current row. The new location\n    /// > value is always greater than the current one. If the segment_size\n    /// > field of this FDE's CIE is non- zero, the initial location is preceded\n    /// > by a segment selector of the given length.\n    SetLoc {\n        /// The target address.\n        address: u64,\n    },\n\n    /// The `AdvanceLoc` instruction is used for all of `DW_CFA_advance_loc` and\n    /// `DW_CFA_advance_loc{1,2,4}`.\n    ///\n    /// > 2. DW_CFA_advance_loc\n    /// >\n    /// > The DW_CFA_advance instruction takes a single operand (encoded with\n    /// > the opcode) that represents a constant delta. The required action is\n    /// > to create a new table row with a location value that is computed by\n    /// > taking the current entry’s location value and adding the value of\n    /// > delta * code_alignment_factor. All other values in the new row are\n    /// > initially identical to the current row.\n    AdvanceLoc {\n        /// The delta to be added to the current address.\n        delta: u32,\n    },\n\n    /// > 1. DW_CFA_def_cfa\n    /// >\n    /// > The DW_CFA_def_cfa instruction takes two unsigned LEB128 operands\n    /// > representing a register number and a (non-factored) offset. The\n    /// > required action is to define the current CFA rule to use the provided\n    /// > register and offset.\n    DefCfa {\n        /// The target register's number.\n        register: Register,\n        /// The non-factored offset.\n        offset: u64,\n    },\n\n    /// > 2. DW_CFA_def_cfa_sf\n    /// >\n    /// > The DW_CFA_def_cfa_sf instruction takes two operands: an unsigned\n    /// > LEB128 value representing a register number and a signed LEB128\n    /// > factored offset. This instruction is identical to DW_CFA_def_cfa\n    /// > except that the second operand is signed and factored. The resulting\n    /// > offset is factored_offset * data_alignment_factor.\n    DefCfaSf {\n        /// The target register's number.\n        register: Register,\n        /// The factored offset.\n        factored_offset: i64,\n    },\n\n    /// > 3. DW_CFA_def_cfa_register\n    /// >\n    /// > The DW_CFA_def_cfa_register instruction takes a single unsigned LEB128\n    /// > operand representing a register number. The required action is to\n    /// > define the current CFA rule to use the provided register (but to keep\n    /// > the old offset). This operation is valid only if the current CFA rule\n    /// > is defined to use a register and offset.\n    DefCfaRegister {\n        /// The target register's number.\n        register: Register,\n    },\n\n    /// > 4. DW_CFA_def_cfa_offset\n    /// >\n    /// > The DW_CFA_def_cfa_offset instruction takes a single unsigned LEB128\n    /// > operand representing a (non-factored) offset. The required action is\n    /// > to define the current CFA rule to use the provided offset (but to keep\n    /// > the old register). This operation is valid only if the current CFA\n    /// > rule is defined to use a register and offset.\n    DefCfaOffset {\n        /// The non-factored offset.\n        offset: u64,\n    },\n\n    /// > 5. DW_CFA_def_cfa_offset_sf\n    /// >\n    /// > The DW_CFA_def_cfa_offset_sf instruction takes a signed LEB128 operand\n    /// > representing a factored offset. This instruction is identical to\n    /// > DW_CFA_def_cfa_offset except that the operand is signed and\n    /// > factored. The resulting offset is factored_offset *\n    /// > data_alignment_factor. This operation is valid only if the current CFA\n    /// > rule is defined to use a register and offset.\n    DefCfaOffsetSf {\n        /// The factored offset.\n        factored_offset: i64,\n    },\n\n    /// > 6. DW_CFA_def_cfa_expression\n    /// >\n    /// > The DW_CFA_def_cfa_expression instruction takes a single operand\n    /// > encoded as a DW_FORM_exprloc value representing a DWARF\n    /// > expression. The required action is to establish that expression as the\n    /// > means by which the current CFA is computed.\n    DefCfaExpression {\n        /// The DWARF expression.\n        expression: Expression<R>,\n    },\n\n    /// > 1. DW_CFA_undefined\n    /// >\n    /// > The DW_CFA_undefined instruction takes a single unsigned LEB128\n    /// > operand that represents a register number. The required action is to\n    /// > set the rule for the specified register to “undefined.”\n    Undefined {\n        /// The target register's number.\n        register: Register,\n    },\n\n    /// > 2. DW_CFA_same_value\n    /// >\n    /// > The DW_CFA_same_value instruction takes a single unsigned LEB128\n    /// > operand that represents a register number. The required action is to\n    /// > set the rule for the specified register to “same value.”\n    SameValue {\n        /// The target register's number.\n        register: Register,\n    },\n\n    /// The `Offset` instruction represents both `DW_CFA_offset` and\n    /// `DW_CFA_offset_extended`.\n    ///\n    /// > 3. DW_CFA_offset\n    /// >\n    /// > The DW_CFA_offset instruction takes two operands: a register number\n    /// > (encoded with the opcode) and an unsigned LEB128 constant representing\n    /// > a factored offset. The required action is to change the rule for the\n    /// > register indicated by the register number to be an offset(N) rule\n    /// > where the value of N is factored offset * data_alignment_factor.\n    Offset {\n        /// The target register's number.\n        register: Register,\n        /// The factored offset.\n        factored_offset: u64,\n    },\n\n    /// > 5. DW_CFA_offset_extended_sf\n    /// >\n    /// > The DW_CFA_offset_extended_sf instruction takes two operands: an\n    /// > unsigned LEB128 value representing a register number and a signed\n    /// > LEB128 factored offset. This instruction is identical to\n    /// > DW_CFA_offset_extended except that the second operand is signed and\n    /// > factored. The resulting offset is factored_offset *\n    /// > data_alignment_factor.\n    OffsetExtendedSf {\n        /// The target register's number.\n        register: Register,\n        /// The factored offset.\n        factored_offset: i64,\n    },\n\n    /// > 6. DW_CFA_val_offset\n    /// >\n    /// > The DW_CFA_val_offset instruction takes two unsigned LEB128 operands\n    /// > representing a register number and a factored offset. The required\n    /// > action is to change the rule for the register indicated by the\n    /// > register number to be a val_offset(N) rule where the value of N is\n    /// > factored_offset * data_alignment_factor.\n    ValOffset {\n        /// The target register's number.\n        register: Register,\n        /// The factored offset.\n        factored_offset: u64,\n    },\n\n    /// > 7. DW_CFA_val_offset_sf\n    /// >\n    /// > The DW_CFA_val_offset_sf instruction takes two operands: an unsigned\n    /// > LEB128 value representing a register number and a signed LEB128\n    /// > factored offset. This instruction is identical to DW_CFA_val_offset\n    /// > except that the second operand is signed and factored. The resulting\n    /// > offset is factored_offset * data_alignment_factor.\n    ValOffsetSf {\n        /// The target register's number.\n        register: Register,\n        /// The factored offset.\n        factored_offset: i64,\n    },\n\n    /// > 8. DW_CFA_register\n    /// >\n    /// > The DW_CFA_register instruction takes two unsigned LEB128 operands\n    /// > representing register numbers. The required action is to set the rule\n    /// > for the first register to be register(R) where R is the second\n    /// > register.\n    Register {\n        /// The number of the register whose rule is being changed.\n        dest_register: Register,\n        /// The number of the register where the other register's value can be\n        /// found.\n        src_register: Register,\n    },\n\n    /// > 9. DW_CFA_expression\n    /// >\n    /// > The DW_CFA_expression instruction takes two operands: an unsigned\n    /// > LEB128 value representing a register number, and a DW_FORM_block value\n    /// > representing a DWARF expression. The required action is to change the\n    /// > rule for the register indicated by the register number to be an\n    /// > expression(E) rule where E is the DWARF expression. That is, the DWARF\n    /// > expression computes the address. The value of the CFA is pushed on the\n    /// > DWARF evaluation stack prior to execution of the DWARF expression.\n    Expression {\n        /// The target register's number.\n        register: Register,\n        /// The DWARF expression.\n        expression: Expression<R>,\n    },\n\n    /// > 10. DW_CFA_val_expression\n    /// >\n    /// > The DW_CFA_val_expression instruction takes two operands: an unsigned\n    /// > LEB128 value representing a register number, and a DW_FORM_block value\n    /// > representing a DWARF expression. The required action is to change the\n    /// > rule for the register indicated by the register number to be a\n    /// > val_expression(E) rule where E is the DWARF expression. That is, the\n    /// > DWARF expression computes the value of the given register. The value\n    /// > of the CFA is pushed on the DWARF evaluation stack prior to execution\n    /// > of the DWARF expression.\n    ValExpression {\n        /// The target register's number.\n        register: Register,\n        /// The DWARF expression.\n        expression: Expression<R>,\n    },\n\n    /// The `Restore` instruction represents both `DW_CFA_restore` and\n    /// `DW_CFA_restore_extended`.\n    ///\n    /// > 11. DW_CFA_restore\n    /// >\n    /// > The DW_CFA_restore instruction takes a single operand (encoded with\n    /// > the opcode) that represents a register number. The required action is\n    /// > to change the rule for the indicated register to the rule assigned it\n    /// > by the initial_instructions in the CIE.\n    Restore {\n        /// The register to be reset.\n        register: Register,\n    },\n\n    /// > 1. DW_CFA_remember_state\n    /// >\n    /// > The DW_CFA_remember_state instruction takes no operands. The required\n    /// > action is to push the set of rules for every register onto an implicit\n    /// > stack.\n    RememberState,\n\n    /// > 2. DW_CFA_restore_state\n    /// >\n    /// > The DW_CFA_restore_state instruction takes no operands. The required\n    /// > action is to pop the set of rules off the implicit stack and place\n    /// > them in the current row.\n    RestoreState,\n\n    /// > DW_CFA_GNU_args_size\n    /// >\n    /// > GNU Extension\n    /// >\n    /// > The DW_CFA_GNU_args_size instruction takes an unsigned LEB128 operand\n    /// > representing an argument size. This instruction specifies the total of\n    /// > the size of the arguments which have been pushed onto the stack.\n    ArgsSize {\n        /// The size of the arguments which have been pushed onto the stack\n        size: u64,\n    },\n\n    /// > 1. DW_CFA_nop\n    /// >\n    /// > The DW_CFA_nop instruction has no operands and no required actions. It\n    /// > is used as padding to make a CIE or FDE an appropriate size.\n    Nop,\n}","parent":null,"children":[{"krate":0,"index":6105},{"krate":0,"index":6107},{"krate":0,"index":6109},{"krate":0,"index":6112},{"krate":0,"index":6115},{"krate":0,"index":6117},{"krate":0,"index":6119},{"krate":0,"index":6121},{"krate":0,"index":6123},{"krate":0,"index":6125},{"krate":0,"index":6127},{"krate":0,"index":6130},{"krate":0,"index":6133},{"krate":0,"index":6136},{"krate":0,"index":6139},{"krate":0,"index":6142},{"krate":0,"index":6145},{"krate":0,"index":6148},{"krate":0,"index":6150},{"krate":0,"index":6152},{"krate":0,"index":6154},{"krate":0,"index":6156}],"decl_id":null,"docs":" A parsed call frame instruction.\n","sig":null,"attributes":[{"value":"/ A parsed call frame instruction.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":210311,"byte_end":210347,"line_start":2733,"line_end":2733,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":6175},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":229983,"byte_end":230007,"line_start":3229,"line_end":3229,"column_start":12,"column_end":36},"name":"CallFrameInstructionIter","qualname":"::read::cfi::CallFrameInstructionIter","value":"CallFrameInstructionIter {  }","parent":null,"children":[{"krate":0,"index":6178},{"krate":0,"index":6179},{"krate":0,"index":6180}],"decl_id":null,"docs":" A lazy iterator parsing call frame instructions.","sig":null,"attributes":[{"value":"/ A lazy iterator parsing call frame instructions.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":229802,"byte_end":229854,"line_start":3224,"line_end":3224,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":229855,"byte_end":229858,"line_start":3225,"line_end":3225,"column_start":1,"column_end":4}},{"value":"/ Can be [used with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":229859,"byte_end":229880,"line_start":3226,"line_end":3226,"column_start":1,"column_end":22}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":229881,"byte_end":229947,"line_start":3227,"line_end":3227,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":230253,"byte_end":230257,"line_start":3237,"line_end":3237,"column_start":12,"column_end":16},"name":"next","qualname":"<CallFrameInstructionIter>::next","value":"pub fn next(&mut Self) -> Result<Option<CallFrameInstruction<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Parse the next call frame instruction.\n","sig":null,"attributes":[{"value":"/ Parse the next call frame instruction.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":230199,"byte_end":230241,"line_start":3236,"line_end":3236,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6190},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":231491,"byte_end":231497,"line_start":3281,"line_end":3281,"column_start":5,"column_end":11},"name":"Direct","qualname":"::read::cfi::Pointer::Direct","value":"Pointer::Direct(u64)","parent":{"krate":0,"index":6189},"children":[],"decl_id":null,"docs":" This value is the decoded pointer value.\n","sig":null,"attributes":[{"value":"/ This value is the decoded pointer value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":231442,"byte_end":231486,"line_start":3280,"line_end":3280,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6193},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":231806,"byte_end":231814,"line_start":3289,"line_end":3289,"column_start":5,"column_end":13},"name":"Indirect","qualname":"::read::cfi::Pointer::Indirect","value":"Pointer::Indirect(u64)","parent":{"krate":0,"index":6189},"children":[],"decl_id":null,"docs":" This value is *not* the pointer value, but points to the address of\n where the real pointer value lives. In other words, deref this pointer\n to get the real pointer value.","sig":null,"attributes":[{"value":"/ This value is *not* the pointer value, but points to the address of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":231509,"byte_end":231580,"line_start":3283,"line_end":3283,"column_start":5,"column_end":76}},{"value":"/ where the real pointer value lives. In other words, deref this pointer","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":231585,"byte_end":231659,"line_start":3284,"line_end":3284,"column_start":5,"column_end":79}},{"value":"/ to get the real pointer value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":231664,"byte_end":231698,"line_start":3285,"line_end":3285,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":231703,"byte_end":231706,"line_start":3286,"line_end":3286,"column_start":5,"column_end":8}},{"value":"/ Chase this pointer at your own risk: do you trust the DWARF data it came","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":231711,"byte_end":231787,"line_start":3287,"line_end":3287,"column_start":5,"column_end":81}},{"value":"/ from?","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":231792,"byte_end":231801,"line_start":3288,"line_end":3288,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":6189},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":231428,"byte_end":231435,"line_start":3279,"line_end":3279,"column_start":10,"column_end":17},"name":"Pointer","qualname":"::read::cfi::Pointer","value":"pub enum Pointer {\n\n    /// This value is the decoded pointer value.\n    Direct(u64),\n\n    /// This value is *not* the pointer value, but points to the address of\n    /// where the real pointer value lives. In other words, deref this pointer\n    /// to get the real pointer value.\n    ///\n    /// Chase this pointer at your own risk: do you trust the DWARF data it came\n    /// from?\n    Indirect(u64),\n}","parent":null,"children":[{"krate":0,"index":6190},{"krate":0,"index":6193}],"decl_id":null,"docs":" A decoded pointer.\n","sig":null,"attributes":[{"value":"/ A decoded pointer.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":231351,"byte_end":231373,"line_start":3277,"line_end":3277,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":6223},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371290,"byte_end":371295,"line_start":21,"line_end":21,"column_start":12,"column_end":17},"name":"Dwarf","qualname":"::read::dwarf::Dwarf","value":"Dwarf { debug_abbrev, debug_addr, debug_info, debug_line, debug_line_str, debug_str, debug_str_offsets, debug_str_sup, debug_types, locations, ranges }","parent":null,"children":[{"krate":0,"index":6225},{"krate":0,"index":6226},{"krate":0,"index":6227},{"krate":0,"index":6228},{"krate":0,"index":6229},{"krate":0,"index":6230},{"krate":0,"index":6231},{"krate":0,"index":6232},{"krate":0,"index":6233},{"krate":0,"index":6234},{"krate":0,"index":6235}],"decl_id":null,"docs":" All of the commonly used DWARF sections, and other common information.\n","sig":null,"attributes":[{"value":"/ All of the commonly used DWARF sections, and other common information.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371178,"byte_end":371252,"line_start":19,"line_end":19,"column_start":1,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":6225},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371346,"byte_end":371358,"line_start":23,"line_end":23,"column_start":9,"column_end":21},"name":"debug_abbrev","qualname":"::read::dwarf::Dwarf::debug_abbrev","value":"read::abbrev::DebugAbbrev<R>","parent":{"krate":0,"index":6223},"children":[],"decl_id":null,"docs":" The `.debug_abbrev` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_abbrev` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371305,"byte_end":371337,"line_start":22,"line_end":22,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":6226},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371420,"byte_end":371430,"line_start":26,"line_end":26,"column_start":9,"column_end":19},"name":"debug_addr","qualname":"::read::dwarf::Dwarf::debug_addr","value":"read::addr::DebugAddr<R>","parent":{"krate":0,"index":6223},"children":[],"decl_id":null,"docs":" The `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_addr` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371381,"byte_end":371411,"line_start":25,"line_end":25,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":6227},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371490,"byte_end":371500,"line_start":29,"line_end":29,"column_start":9,"column_end":19},"name":"debug_info","qualname":"::read::dwarf::Dwarf::debug_info","value":"read::unit::DebugInfo<R>","parent":{"krate":0,"index":6223},"children":[],"decl_id":null,"docs":" The `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_info` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371451,"byte_end":371481,"line_start":28,"line_end":28,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":6228},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371560,"byte_end":371570,"line_start":32,"line_end":32,"column_start":9,"column_end":19},"name":"debug_line","qualname":"::read::dwarf::Dwarf::debug_line","value":"read::line::DebugLine<R>","parent":{"krate":0,"index":6223},"children":[],"decl_id":null,"docs":" The `.debug_line` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_line` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371521,"byte_end":371551,"line_start":31,"line_end":31,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":6229},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371634,"byte_end":371648,"line_start":35,"line_end":35,"column_start":9,"column_end":23},"name":"debug_line_str","qualname":"::read::dwarf::Dwarf::debug_line_str","value":"read::str::DebugLineStr<R>","parent":{"krate":0,"index":6223},"children":[],"decl_id":null,"docs":" The `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_line_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371591,"byte_end":371625,"line_start":34,"line_end":34,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":6230},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371710,"byte_end":371719,"line_start":38,"line_end":38,"column_start":9,"column_end":18},"name":"debug_str","qualname":"::read::dwarf::Dwarf::debug_str","value":"read::str::DebugStr<R>","parent":{"krate":0,"index":6223},"children":[],"decl_id":null,"docs":" The `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371672,"byte_end":371701,"line_start":37,"line_end":37,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":6231},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371785,"byte_end":371802,"line_start":41,"line_end":41,"column_start":9,"column_end":26},"name":"debug_str_offsets","qualname":"::read::dwarf::Dwarf::debug_str_offsets","value":"read::str::DebugStrOffsets<R>","parent":{"krate":0,"index":6223},"children":[],"decl_id":null,"docs":" The `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_str_offsets` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371739,"byte_end":371776,"line_start":40,"line_end":40,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":6232},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371899,"byte_end":371912,"line_start":44,"line_end":44,"column_start":9,"column_end":22},"name":"debug_str_sup","qualname":"::read::dwarf::Dwarf::debug_str_sup","value":"read::str::DebugStr<R>","parent":{"krate":0,"index":6223},"children":[],"decl_id":null,"docs":" The `.debug_str` section for a supplementary object file.\n","sig":null,"attributes":[{"value":"/ The `.debug_str` section for a supplementary object file.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371829,"byte_end":371890,"line_start":43,"line_end":43,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":6233},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371972,"byte_end":371983,"line_start":47,"line_end":47,"column_start":9,"column_end":20},"name":"debug_types","qualname":"::read::dwarf::Dwarf::debug_types","value":"read::unit::DebugTypes<R>","parent":{"krate":0,"index":6223},"children":[],"decl_id":null,"docs":" The `.debug_types` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_types` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":371932,"byte_end":371963,"line_start":46,"line_end":46,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":6234},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":372088,"byte_end":372097,"line_start":50,"line_end":50,"column_start":9,"column_end":18},"name":"locations","qualname":"::read::dwarf::Dwarf::locations","value":"read::loclists::LocationLists<R>","parent":{"krate":0,"index":6223},"children":[],"decl_id":null,"docs":" The location lists in the `.debug_loc` and `.debug_loclists` sections.\n","sig":null,"attributes":[{"value":"/ The location lists in the `.debug_loc` and `.debug_loclists` sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":372005,"byte_end":372079,"line_start":49,"line_end":49,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":6235},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":372205,"byte_end":372211,"line_start":53,"line_end":53,"column_start":9,"column_end":15},"name":"ranges","qualname":"::read::dwarf::Dwarf::ranges","value":"read::rnglists::RangeLists<R>","parent":{"krate":0,"index":6223},"children":[],"decl_id":null,"docs":" The range lists in the `.debug_ranges` and `.debug_rnglists` sections.\n","sig":null,"attributes":[{"value":"/ The range lists in the `.debug_ranges` and `.debug_rnglists` sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":372122,"byte_end":372196,"line_start":52,"line_end":52,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":372805,"byte_end":372809,"line_start":66,"line_end":66,"column_start":12,"column_end":16},"name":"load","qualname":"<Dwarf<T>>::load","value":"pub fn load<F1, F2, E>(F1, F2) -> core::result::Result<Self, E> where\nF1: FnMut(SectionId) -> core::result::Result<T, E>, F2: FnMut(SectionId) ->\ncore::result::Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Try to load the DWARF sections using the given loader functions.","sig":null,"attributes":[{"value":"/ Try to load the DWARF sections using the given loader functions.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":372254,"byte_end":372322,"line_start":57,"line_end":57,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":372327,"byte_end":372330,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ `section` loads a DWARF section from the main object file.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":372335,"byte_end":372397,"line_start":59,"line_end":59,"column_start":5,"column_end":67}},{"value":"/ `sup` loads a DWARF sections from the supplementary object file.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":372402,"byte_end":372470,"line_start":60,"line_end":60,"column_start":5,"column_end":73}},{"value":"/ These functions should return an empty section if the section does not exist.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":372475,"byte_end":372556,"line_start":61,"line_end":61,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":372561,"byte_end":372564,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ The provided callback functions may either directly return a `Reader` instance","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":372569,"byte_end":372651,"line_start":63,"line_end":63,"column_start":5,"column_end":87}},{"value":"/ (such as `EndianSlice`), or they may return some other type and then convert","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":372656,"byte_end":372736,"line_start":64,"line_end":64,"column_start":5,"column_end":85}},{"value":"/ that type into a `Reader` using `Dwarf::borrow`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":372741,"byte_end":372793,"line_start":65,"line_end":65,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":375211,"byte_end":375217,"line_start":117,"line_end":117,"column_start":12,"column_end":18},"name":"borrow","qualname":"<Dwarf<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> Dwarf<R> where F: FnMut(&'a T) -> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `Dwarf` structure that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `Dwarf` structure that references the data in `self`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":373964,"byte_end":374030,"line_start":91,"line_end":91,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":374035,"byte_end":374038,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":374043,"byte_end":374108,"line_start":93,"line_end":93,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":374113,"byte_end":374116,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":374121,"byte_end":374141,"line_start":95,"line_end":95,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":374146,"byte_end":374149,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ It can be useful to load DWARF sections into owned data structures,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":374154,"byte_end":374225,"line_start":97,"line_end":97,"column_start":5,"column_end":76}},{"value":"/ such as `Vec`. However, we do not implement the `Reader` trait","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":374230,"byte_end":374296,"line_start":98,"line_end":98,"column_start":5,"column_end":71}},{"value":"/ for `Vec`, because it would be very inefficient, but this trait","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":374301,"byte_end":374368,"line_start":99,"line_end":99,"column_start":5,"column_end":72}},{"value":"/ is required for all of the methods that parse the DWARF data.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":374373,"byte_end":374438,"line_start":100,"line_end":100,"column_start":5,"column_end":70}},{"value":"/ So we first load the DWARF sections into `Vec`s, and then use","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":374443,"byte_end":374508,"line_start":101,"line_end":101,"column_start":5,"column_end":70}},{"value":"/ `borrow` to create `Reader`s that reference the data.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":374513,"byte_end":374570,"line_start":102,"line_end":102,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":374575,"byte_end":374578,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":374583,"byte_end":374601,"line_start":104,"line_end":104,"column_start":5,"column_end":23}},{"value":"/ # fn example() -> Result<(), gimli::Error> {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":374606,"byte_end":374654,"line_start":105,"line_end":105,"column_start":5,"column_end":53}},{"value":"/ # let loader = |name| -> Result<_, gimli::Error> { unimplemented!() };","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":374659,"byte_end":374733,"line_start":106,"line_end":106,"column_start":5,"column_end":79}},{"value":"/ # let sup_loader = |name| { unimplemented!() };","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":374738,"byte_end":374789,"line_start":107,"line_end":107,"column_start":5,"column_end":56}},{"value":"/ // Read the DWARF sections into `Vec`s with whatever object loader you're using.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":374794,"byte_end":374878,"line_start":108,"line_end":108,"column_start":5,"column_end":89}},{"value":"/ let owned_dwarf: gimli::Dwarf<Vec<u8>> = gimli::Dwarf::load(loader, sup_loader)?;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":374883,"byte_end":374968,"line_start":109,"line_end":109,"column_start":5,"column_end":90}},{"value":"/ // Create references to the DWARF sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":374973,"byte_end":375020,"line_start":110,"line_end":110,"column_start":5,"column_end":52}},{"value":"/ let dwarf = owned_dwarf.borrow(|section| {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":375025,"byte_end":375071,"line_start":111,"line_end":111,"column_start":5,"column_end":51}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":375076,"byte_end":375138,"line_start":112,"line_end":112,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":375143,"byte_end":375150,"line_start":113,"line_end":113,"column_start":5,"column_end":12}},{"value":"/ # unreachable!()","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":375155,"byte_end":375175,"line_start":114,"line_end":114,"column_start":5,"column_end":25}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":375180,"byte_end":375187,"line_start":115,"line_end":115,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":375192,"byte_end":375199,"line_start":116,"line_end":116,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376292,"byte_end":376297,"line_start":144,"line_end":144,"column_start":12,"column_end":17},"name":"units","qualname":"<Dwarf<R>>::units","value":"pub fn units(&Self) -> CompilationUnitHeadersIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the compilation- and partial-unit headers in the\n `.debug_info` section.","sig":null,"attributes":[{"value":"/ Iterate the compilation- and partial-unit headers in the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376070,"byte_end":376130,"line_start":138,"line_end":138,"column_start":5,"column_end":65}},{"value":"/ `.debug_info` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376135,"byte_end":376161,"line_start":139,"line_end":139,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376166,"byte_end":376169,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376174,"byte_end":376195,"line_start":141,"line_end":141,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376200,"byte_end":376266,"line_start":142,"line_end":142,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376271,"byte_end":376280,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376475,"byte_end":376479,"line_start":150,"line_end":150,"column_start":12,"column_end":16},"name":"unit","qualname":"<Dwarf<R>>::unit","value":"pub fn unit(&Self, CompilationUnitHeader<R>) -> Result<Unit<R>>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Unit` from the given compilation unit header.\n","sig":null,"attributes":[{"value":"/ Construct a new `Unit` from the given compilation unit header.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376383,"byte_end":376449,"line_start":148,"line_end":148,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376454,"byte_end":376463,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376780,"byte_end":376790,"line_start":159,"line_end":159,"column_start":12,"column_end":22},"name":"type_units","qualname":"<Dwarf<R>>::type_units","value":"pub fn type_units(&Self) -> TypeUnitHeadersIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the type-unit headers in the `.debug_types` section.","sig":null,"attributes":[{"value":"/ Iterate the type-unit headers in the `.debug_types` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376585,"byte_end":376649,"line_start":154,"line_end":154,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376654,"byte_end":376657,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376662,"byte_end":376683,"line_start":156,"line_end":156,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376688,"byte_end":376754,"line_start":157,"line_end":157,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376759,"byte_end":376768,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376955,"byte_end":376964,"line_start":165,"line_end":165,"column_start":12,"column_end":21},"name":"type_unit","qualname":"<Dwarf<R>>::type_unit","value":"pub fn type_unit(&Self, TypeUnitHeader<R>) -> Result<Unit<R>>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Unit` from the given type unit header.\n","sig":null,"attributes":[{"value":"/ Construct a new `Unit` from the given type unit header.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376870,"byte_end":376929,"line_start":163,"line_end":163,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376934,"byte_end":376943,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":377196,"byte_end":377209,"line_start":172,"line_end":172,"column_start":12,"column_end":25},"name":"abbreviations","qualname":"<Dwarf<R>>::abbreviations","value":"pub fn abbreviations(&Self, &CompilationUnitHeader<R>)\n-> Result<Abbreviations>","parent":null,"children":[],"decl_id":null,"docs":" Parse the abbreviations for a compilation unit.\n","sig":null,"attributes":[{"value":"/ Parse the abbreviations for a compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":377073,"byte_end":377124,"line_start":169,"line_end":169,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":377175,"byte_end":377184,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":377451,"byte_end":377469,"line_start":179,"line_end":179,"column_start":12,"column_end":30},"name":"type_abbreviations","qualname":"<Dwarf<R>>::type_abbreviations","value":"pub fn type_abbreviations(&Self, &TypeUnitHeader<R>) -> Result<Abbreviations>","parent":null,"children":[],"decl_id":null,"docs":" Parse the abbreviations for a type unit.\n","sig":null,"attributes":[{"value":"/ Parse the abbreviations for a type unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":377335,"byte_end":377379,"line_start":176,"line_end":176,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":377430,"byte_end":377439,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":377662,"byte_end":377675,"line_start":185,"line_end":185,"column_start":12,"column_end":25},"name":"string_offset","qualname":"<Dwarf<R>>::string_offset","value":"pub fn string_offset(&Self, &Unit<R>, DebugStrOffsetsIndex<R::Offset>)\n-> Result<DebugStrOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Return the string offset at the given index.\n","sig":null,"attributes":[{"value":"/ Return the string offset at the given index.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":377588,"byte_end":377636,"line_start":183,"line_end":183,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":377641,"byte_end":377650,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":378015,"byte_end":378021,"line_start":196,"line_end":196,"column_start":12,"column_end":18},"name":"string","qualname":"<Dwarf<R>>::string","value":"pub fn string(&Self, DebugStrOffset<R::Offset>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Return the string at the given offset in `.debug_str`.\n","sig":null,"attributes":[{"value":"/ Return the string at the given offset in `.debug_str`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":377931,"byte_end":377989,"line_start":194,"line_end":194,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":377994,"byte_end":378003,"line_start":195,"line_end":195,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":378218,"byte_end":378229,"line_start":202,"line_end":202,"column_start":12,"column_end":23},"name":"line_string","qualname":"<Dwarf<R>>::line_string","value":"pub fn line_string(&Self, DebugLineStrOffset<R::Offset>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Return the string at the given offset in `.debug_line_str`.\n","sig":null,"attributes":[{"value":"/ Return the string at the given offset in `.debug_line_str`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":378129,"byte_end":378192,"line_start":200,"line_end":200,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":378197,"byte_end":378206,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":379042,"byte_end":379053,"line_start":220,"line_end":220,"column_start":12,"column_end":23},"name":"attr_string","qualname":"<Dwarf<R>>::attr_string","value":"pub fn attr_string(&Self, &Unit<R>, AttributeValue<R>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Return an attribute value as a string slice.","sig":null,"attributes":[{"value":"/ Return an attribute value as a string slice.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":378346,"byte_end":378394,"line_start":206,"line_end":206,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":378399,"byte_end":378402,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ If the attribute value is one of:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":378407,"byte_end":378444,"line_start":208,"line_end":208,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":378449,"byte_end":378452,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ - an inline `DW_FORM_string` string","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":378457,"byte_end":378496,"line_start":210,"line_end":210,"column_start":5,"column_end":44}},{"value":"/ - a `DW_FORM_strp` reference to an offset into the `.debug_str` section","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":378501,"byte_end":378576,"line_start":211,"line_end":211,"column_start":5,"column_end":80}},{"value":"/ - a `DW_FORM_strp_sup` reference to an offset into a supplementary","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":378581,"byte_end":378651,"line_start":212,"line_end":212,"column_start":5,"column_end":75}},{"value":"/ object file","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":378656,"byte_end":378671,"line_start":213,"line_end":213,"column_start":5,"column_end":20}},{"value":"/ - a `DW_FORM_line_strp` reference to an offset into the `.debug_line_str`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":378676,"byte_end":378753,"line_start":214,"line_end":214,"column_start":5,"column_end":82}},{"value":"/ section","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":378758,"byte_end":378769,"line_start":215,"line_end":215,"column_start":5,"column_end":16}},{"value":"/ - a `DW_FORM_strx` index into the `.debug_str_offsets` entries for the unit","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":378774,"byte_end":378853,"line_start":216,"line_end":216,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":378858,"byte_end":378861,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ then return the attribute's string value. Returns an error if the attribute","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":378866,"byte_end":378945,"line_start":218,"line_end":218,"column_start":5,"column_end":84}},{"value":"/ value does not have a string form, or if a string form has an invalid value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":378950,"byte_end":379030,"line_start":219,"line_end":219,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":379917,"byte_end":379924,"line_start":239,"line_end":239,"column_start":12,"column_end":19},"name":"address","qualname":"<Dwarf<R>>::address","value":"pub fn address(&Self, &Unit<R>, DebugAddrIndex<R::Offset>) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Return the address at the given index.\n","sig":null,"attributes":[{"value":"/ Return the address at the given index.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":379863,"byte_end":379905,"line_start":238,"line_end":238,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":380176,"byte_end":380189,"line_start":245,"line_end":245,"column_start":12,"column_end":25},"name":"ranges_offset","qualname":"<Dwarf<R>>::ranges_offset","value":"pub fn ranges_offset(&Self, &Unit<R>, DebugRngListsIndex<R::Offset>)\n-> Result<RangeListsOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Return the range list offset at the given index.\n","sig":null,"attributes":[{"value":"/ Return the range list offset at the given index.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":380112,"byte_end":380164,"line_start":244,"line_end":244,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":380502,"byte_end":380508,"line_start":255,"line_end":255,"column_start":12,"column_end":18},"name":"ranges","qualname":"<Dwarf<R>>::ranges","value":"pub fn ranges(&Self, &Unit<R>, RangeListsOffset<R::Offset>)\n-> Result<RngListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the `RangeListEntry`s starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Iterate over the `RangeListEntry`s starting at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":380422,"byte_end":380490,"line_start":254,"line_end":254,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":381229,"byte_end":381247,"line_start":278,"line_end":278,"column_start":12,"column_end":30},"name":"attr_ranges_offset","qualname":"<Dwarf<R>>::attr_ranges_offset","value":"pub fn attr_ranges_offset(&Self, &Unit<R>, AttributeValue<R>)\n-> Result<Option<RangeListsOffset<R::Offset>>>","parent":null,"children":[],"decl_id":null,"docs":" Try to return an attribute value as a range list offset.","sig":null,"attributes":[{"value":"/ Try to return an attribute value as a range list offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":380809,"byte_end":380869,"line_start":269,"line_end":269,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":380874,"byte_end":380877,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ If the attribute value is one of:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":380882,"byte_end":380919,"line_start":271,"line_end":271,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":380924,"byte_end":380927,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ - a `DW_FORM_sec_offset` reference to the `.debug_ranges` or `.debug_rnglists` sections","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":380932,"byte_end":381023,"line_start":273,"line_end":273,"column_start":5,"column_end":96}},{"value":"/ - a `DW_FORM_rnglistx` index into the `.debug_rnglists` entries for the unit","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":381028,"byte_end":381108,"line_start":274,"line_end":274,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":381113,"byte_end":381116,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ then return the range list offset of the range list.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":381121,"byte_end":381177,"line_start":276,"line_end":276,"column_start":5,"column_end":61}},{"value":"/ Returns `None` for other forms.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":381182,"byte_end":381217,"line_start":277,"line_end":277,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":382051,"byte_end":382062,"line_start":299,"line_end":299,"column_start":12,"column_end":23},"name":"attr_ranges","qualname":"<Dwarf<R>>::attr_ranges","value":"pub fn attr_ranges(&Self, &Unit<R>, AttributeValue<R>)\n-> Result<Option<RngListIter<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Try to return an attribute value as a range list entry iterator.","sig":null,"attributes":[{"value":"/ Try to return an attribute value as a range list entry iterator.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":381616,"byte_end":381684,"line_start":290,"line_end":290,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":381689,"byte_end":381692,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ If the attribute value is one of:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":381697,"byte_end":381734,"line_start":292,"line_end":292,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":381739,"byte_end":381742,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ - a `DW_FORM_sec_offset` reference to the `.debug_ranges` or `.debug_rnglists` sections","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":381747,"byte_end":381838,"line_start":294,"line_end":294,"column_start":5,"column_end":96}},{"value":"/ - a `DW_FORM_rnglistx` index into the `.debug_rnglists` entries for the unit","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":381843,"byte_end":381923,"line_start":295,"line_end":295,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":381928,"byte_end":381931,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ then return an iterator over the entries in the range list.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":381936,"byte_end":381999,"line_start":297,"line_end":297,"column_start":5,"column_end":68}},{"value":"/ Returns `None` for other forms.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":382004,"byte_end":382039,"line_start":298,"line_end":298,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":382517,"byte_end":382527,"line_start":313,"line_end":313,"column_start":12,"column_end":22},"name":"die_ranges","qualname":"<Dwarf<R>>::die_ranges","value":"pub fn die_ranges(&Self, &Unit<R>, &DebuggingInformationEntry<, , R>)\n-> Result<RangeIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator for the address ranges of a `DebuggingInformationEntry`.","sig":null,"attributes":[{"value":"/ Return an iterator for the address ranges of a `DebuggingInformationEntry`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":382348,"byte_end":382427,"line_start":310,"line_end":310,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":382432,"byte_end":382435,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ This uses `DW_AT_low_pc`, `DW_AT_high_pc` and `DW_AT_ranges`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":382440,"byte_end":382505,"line_start":312,"line_end":312,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":384129,"byte_end":384140,"line_start":354,"line_end":354,"column_start":12,"column_end":23},"name":"unit_ranges","qualname":"<Dwarf<R>>::unit_ranges","value":"pub fn unit_ranges(&Self, &Unit<R>) -> Result<RangeIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator for the address ranges of a `Unit`.","sig":null,"attributes":[{"value":"/ Return an iterator for the address ranges of a `Unit`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":383933,"byte_end":383991,"line_start":350,"line_end":350,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":383996,"byte_end":383999,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ This uses `DW_AT_low_pc`, `DW_AT_high_pc` and `DW_AT_ranges` of the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":384004,"byte_end":384075,"line_start":352,"line_end":352,"column_start":5,"column_end":76}},{"value":"/ root `DebuggingInformationEntry`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":384080,"byte_end":384117,"line_start":353,"line_end":353,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":384466,"byte_end":384482,"line_start":362,"line_end":362,"column_start":12,"column_end":28},"name":"locations_offset","qualname":"<Dwarf<R>>::locations_offset","value":"pub fn locations_offset(&Self, &Unit<R>, DebugLocListsIndex<R::Offset>)\n-> Result<LocationListsOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Return the location list offset at the given index.\n","sig":null,"attributes":[{"value":"/ Return the location list offset at the given index.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":384399,"byte_end":384454,"line_start":361,"line_end":361,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":384804,"byte_end":384813,"line_start":372,"line_end":372,"column_start":12,"column_end":21},"name":"locations","qualname":"<Dwarf<R>>::locations","value":"pub fn locations(&Self, &Unit<R>, LocationListsOffset<R::Offset>)\n-> Result<LocListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the `LocationListEntry`s starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Iterate over the `LocationListEntry`s starting at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":384721,"byte_end":384792,"line_start":371,"line_end":371,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":385549,"byte_end":385570,"line_start":395,"line_end":395,"column_start":12,"column_end":33},"name":"attr_locations_offset","qualname":"<Dwarf<R>>::attr_locations_offset","value":"pub fn attr_locations_offset(&Self, &Unit<R>, AttributeValue<R>)\n-> Result<Option<LocationListsOffset<R::Offset>>>","parent":null,"children":[],"decl_id":null,"docs":" Try to return an attribute value as a location list offset.","sig":null,"attributes":[{"value":"/ Try to return an attribute value as a location list offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":385123,"byte_end":385186,"line_start":386,"line_end":386,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":385191,"byte_end":385194,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ If the attribute value is one of:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":385199,"byte_end":385236,"line_start":388,"line_end":388,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":385241,"byte_end":385244,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ - a `DW_FORM_sec_offset` reference to the `.debug_loc` or `.debug_loclists` sections","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":385249,"byte_end":385337,"line_start":390,"line_end":390,"column_start":5,"column_end":93}},{"value":"/ - a `DW_FORM_loclistx` index into the `.debug_loclists` entries for the unit","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":385342,"byte_end":385422,"line_start":391,"line_end":391,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":385427,"byte_end":385430,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ then return the location list offset of the location list.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":385435,"byte_end":385497,"line_start":393,"line_end":393,"column_start":5,"column_end":67}},{"value":"/ Returns `None` for other forms.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":385502,"byte_end":385537,"line_start":394,"line_end":394,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":386417,"byte_end":386431,"line_start":418,"line_end":418,"column_start":12,"column_end":26},"name":"attr_locations","qualname":"<Dwarf<R>>::attr_locations","value":"pub fn attr_locations(&Self, &Unit<R>, AttributeValue<R>)\n-> Result<Option<LocListIter<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Try to return an attribute value as a location list entry iterator.","sig":null,"attributes":[{"value":"/ Try to return an attribute value as a location list entry iterator.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":385979,"byte_end":386050,"line_start":409,"line_end":409,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":386055,"byte_end":386058,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ If the attribute value is one of:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":386063,"byte_end":386100,"line_start":411,"line_end":411,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":386105,"byte_end":386108,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ - a `DW_FORM_sec_offset` reference to the `.debug_loc` or `.debug_loclists` sections","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":386113,"byte_end":386201,"line_start":413,"line_end":413,"column_start":5,"column_end":93}},{"value":"/ - a `DW_FORM_loclistx` index into the `.debug_loclists` entries for the unit","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":386206,"byte_end":386286,"line_start":414,"line_end":414,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":386291,"byte_end":386294,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ then return an iterator over the entries in the location list.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":386299,"byte_end":386365,"line_start":416,"line_end":416,"column_start":5,"column_end":71}},{"value":"/ Returns `None` for other forms.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":386370,"byte_end":386405,"line_start":417,"line_end":417,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":386901,"byte_end":386917,"line_start":432,"line_end":432,"column_start":12,"column_end":28},"name":"lookup_offset_id","qualname":"<Dwarf<R>>::lookup_offset_id","value":"pub fn lookup_offset_id(&Self, ReaderOffsetId)\n-> Option<(bool, SectionId, R::Offset)>","parent":null,"children":[],"decl_id":null,"docs":" Call `Reader::lookup_offset_id` for each section, and return the first match.","sig":null,"attributes":[{"value":"/ Call `Reader::lookup_offset_id` for each section, and return the first match.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":386723,"byte_end":386804,"line_start":429,"line_end":429,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":386809,"byte_end":386812,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ The first element of the tuple is `true` for supplementary sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":386817,"byte_end":386889,"line_start":431,"line_end":431,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":388029,"byte_end":388041,"line_start":454,"line_end":454,"column_start":12,"column_end":24},"name":"format_error","qualname":"<Dwarf<R>>::format_error","value":"pub fn format_error(&Self, Error) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns a string representation of the given error.","sig":null,"attributes":[{"value":"/ Returns a string representation of the given error.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":387857,"byte_end":387912,"line_start":451,"line_end":451,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":387917,"byte_end":387920,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ This uses information from the DWARF sections to provide more information in some cases.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":387925,"byte_end":388017,"line_start":453,"line_end":453,"column_start":5,"column_end":97}}]},{"kind":"Struct","id":{"krate":0,"index":6242},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":388793,"byte_end":388797,"line_start":478,"line_end":478,"column_start":12,"column_end":16},"name":"Unit","qualname":"::read::dwarf::Unit","value":"Unit { offset, header, abbreviations, name, comp_dir, low_pc, str_offsets_base, addr_base, loclists_base, rnglists_base, line_program }","parent":null,"children":[{"krate":0,"index":6245},{"krate":0,"index":6246},{"krate":0,"index":6247},{"krate":0,"index":6248},{"krate":0,"index":6249},{"krate":0,"index":6250},{"krate":0,"index":6251},{"krate":0,"index":6252},{"krate":0,"index":6253},{"krate":0,"index":6254},{"krate":0,"index":6255}],"decl_id":null,"docs":" All of the commonly used information for a unit in the `.debug_info` or `.debug_types`\n sections.\n","sig":null,"attributes":[{"value":"/ All of the commonly used information for a unit in the `.debug_info` or `.debug_types`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":388660,"byte_end":388750,"line_start":475,"line_end":475,"column_start":1,"column_end":91}},{"value":"/ sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":388751,"byte_end":388764,"line_start":476,"line_end":476,"column_start":1,"column_end":14}}]},{"kind":"Field","id":{"krate":0,"index":6245},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":388947,"byte_end":388953,"line_start":484,"line_end":484,"column_start":9,"column_end":15},"name":"offset","qualname":"::read::dwarf::Unit::offset","value":"common::UnitSectionOffset<Offset>","parent":{"krate":0,"index":6242},"children":[],"decl_id":null,"docs":" The section offset of the unit.\n","sig":null,"attributes":[{"value":"/ The section offset of the unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":388903,"byte_end":388938,"line_start":483,"line_end":483,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":6246},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":389023,"byte_end":389029,"line_start":487,"line_end":487,"column_start":9,"column_end":15},"name":"header","qualname":"::read::dwarf::Unit::header","value":"read::unit::UnitHeader<R, Offset>","parent":{"krate":0,"index":6242},"children":[],"decl_id":null,"docs":" The header of the unit.\n","sig":null,"attributes":[{"value":"/ The header of the unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":388987,"byte_end":389014,"line_start":486,"line_end":486,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":6247},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":389110,"byte_end":389123,"line_start":490,"line_end":490,"column_start":9,"column_end":22},"name":"abbreviations","qualname":"::read::dwarf::Unit::abbreviations","value":"read::abbrev::Abbreviations","parent":{"krate":0,"index":6242},"children":[],"decl_id":null,"docs":" The parsed abbreviations for the unit.\n","sig":null,"attributes":[{"value":"/ The parsed abbreviations for the unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":389059,"byte_end":389101,"line_start":489,"line_end":489,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":6248},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":389197,"byte_end":389201,"line_start":493,"line_end":493,"column_start":9,"column_end":13},"name":"name","qualname":"::read::dwarf::Unit::name","value":"core::option::Option<R>","parent":{"krate":0,"index":6242},"children":[],"decl_id":null,"docs":" The `DW_AT_name` attribute of the unit.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_name` attribute of the unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":389145,"byte_end":389188,"line_start":492,"line_end":492,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":6249},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":389275,"byte_end":389283,"line_start":496,"line_end":496,"column_start":9,"column_end":17},"name":"comp_dir","qualname":"::read::dwarf::Unit::comp_dir","value":"core::option::Option<R>","parent":{"krate":0,"index":6242},"children":[],"decl_id":null,"docs":" The `DW_AT_comp_dir` attribute of the unit.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_comp_dir` attribute of the unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":389219,"byte_end":389266,"line_start":495,"line_end":495,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":6250},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":389370,"byte_end":389376,"line_start":499,"line_end":499,"column_start":9,"column_end":15},"name":"low_pc","qualname":"::read::dwarf::Unit::low_pc","value":"u64","parent":{"krate":0,"index":6242},"children":[],"decl_id":null,"docs":" The `DW_AT_low_pc` attribute of the unit. Defaults to 0.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_low_pc` attribute of the unit. Defaults to 0.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":389301,"byte_end":389361,"line_start":498,"line_end":498,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":6251},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":389467,"byte_end":389483,"line_start":502,"line_end":502,"column_start":9,"column_end":25},"name":"str_offsets_base","qualname":"::read::dwarf::Unit::str_offsets_base","value":"common::DebugStrOffsetsBase<Offset>","parent":{"krate":0,"index":6242},"children":[],"decl_id":null,"docs":" The `DW_AT_str_offsets_base` attribute of the unit. Defaults to 0.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_str_offsets_base` attribute of the unit. Defaults to 0.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":389388,"byte_end":389458,"line_start":501,"line_end":501,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":6252},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":389591,"byte_end":389600,"line_start":505,"line_end":505,"column_start":9,"column_end":18},"name":"addr_base","qualname":"::read::dwarf::Unit::addr_base","value":"common::DebugAddrBase<Offset>","parent":{"krate":0,"index":6242},"children":[],"decl_id":null,"docs":" The `DW_AT_addr_base` attribute of the unit. Defaults to 0.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_addr_base` attribute of the unit. Defaults to 0.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":389519,"byte_end":389582,"line_start":504,"line_end":504,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":6253},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":389706,"byte_end":389719,"line_start":508,"line_end":508,"column_start":9,"column_end":22},"name":"loclists_base","qualname":"::read::dwarf::Unit::loclists_base","value":"common::DebugLocListsBase<Offset>","parent":{"krate":0,"index":6242},"children":[],"decl_id":null,"docs":" The `DW_AT_loclists_base` attribute of the unit. Defaults to 0.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_loclists_base` attribute of the unit. Defaults to 0.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":389630,"byte_end":389697,"line_start":507,"line_end":507,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":6254},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":389829,"byte_end":389842,"line_start":511,"line_end":511,"column_start":9,"column_end":22},"name":"rnglists_base","qualname":"::read::dwarf::Unit::rnglists_base","value":"common::DebugRngListsBase<Offset>","parent":{"krate":0,"index":6242},"children":[],"decl_id":null,"docs":" The `DW_AT_rnglists_base` attribute of the unit. Defaults to 0.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_rnglists_base` attribute of the unit. Defaults to 0.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":389753,"byte_end":389820,"line_start":510,"line_end":510,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":6255},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":389925,"byte_end":389937,"line_start":514,"line_end":514,"column_start":9,"column_end":21},"name":"line_program","qualname":"::read::dwarf::Unit::line_program","value":"core::option::Option<read::line::IncompleteLineProgram<R, Offset>>","parent":{"krate":0,"index":6242},"children":[],"decl_id":null,"docs":" The line number program of the unit.\n","sig":null,"attributes":[{"value":"/ The line number program of the unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":389876,"byte_end":389916,"line_start":513,"line_end":513,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":390106,"byte_end":390109,"line_start":520,"line_end":520,"column_start":12,"column_end":15},"name":"new","qualname":"<Unit<R>>::new","value":"pub fn new(&Dwarf<R>, CompilationUnitHeader<R>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Unit` from the given compilation unit header.\n","sig":null,"attributes":[{"value":"/ Construct a new `Unit` from the given compilation unit header.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":390014,"byte_end":390080,"line_start":518,"line_end":518,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":390085,"byte_end":390094,"line_start":519,"line_end":519,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":390427,"byte_end":390440,"line_start":530,"line_end":530,"column_start":12,"column_end":25},"name":"new_type_unit","qualname":"<Unit<R>>::new_type_unit","value":"pub fn new_type_unit(&Dwarf<R>, TypeUnitHeader<R>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Unit` from the given type unit header.\n","sig":null,"attributes":[{"value":"/ Construct a new `Unit` from the given type unit header.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":390342,"byte_end":390401,"line_start":528,"line_end":528,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":390406,"byte_end":390415,"line_start":529,"line_end":529,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":394302,"byte_end":394310,"line_start":632,"line_end":632,"column_start":12,"column_end":20},"name":"encoding","qualname":"<Unit<R>>::encoding","value":"pub fn encoding(&Self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding parameters for this unit.\n","sig":null,"attributes":[{"value":"/ Return the encoding parameters for this unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":394227,"byte_end":394276,"line_start":630,"line_end":630,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":394281,"byte_end":394290,"line_start":631,"line_end":631,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":394447,"byte_end":394452,"line_start":637,"line_end":637,"column_start":12,"column_end":17},"name":"entry","qualname":"<Unit<R>>::entry","value":"pub fn entry(&Self, UnitOffset<R::Offset>)\n-> Result<DebuggingInformationEntry<, , R>>","parent":null,"children":[],"decl_id":null,"docs":" Read the `DebuggingInformationEntry` at the given offset.\n","sig":null,"attributes":[{"value":"/ Read the `DebuggingInformationEntry` at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":394374,"byte_end":394435,"line_start":636,"line_end":636,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":394679,"byte_end":394686,"line_start":643,"line_end":643,"column_start":12,"column_end":19},"name":"entries","qualname":"<Unit<R>>::entries","value":"pub fn entries(&Self) -> EntriesCursor<, , R>","parent":null,"children":[],"decl_id":null,"docs":" Navigate this unit's `DebuggingInformationEntry`s.\n","sig":null,"attributes":[{"value":"/ Navigate this unit's `DebuggingInformationEntry`s.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":394599,"byte_end":394653,"line_start":641,"line_end":641,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":394658,"byte_end":394667,"line_start":642,"line_end":642,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":394893,"byte_end":394910,"line_start":650,"line_end":650,"column_start":12,"column_end":29},"name":"entries_at_offset","qualname":"<Unit<R>>::entries_at_offset","value":"pub fn entries_at_offset(&Self, UnitOffset<R::Offset>)\n-> Result<EntriesCursor<, , R>>","parent":null,"children":[],"decl_id":null,"docs":" Navigate this unit's `DebuggingInformationEntry`s\n starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Navigate this unit's `DebuggingInformationEntry`s","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":394776,"byte_end":394829,"line_start":647,"line_end":647,"column_start":5,"column_end":58}},{"value":"/ starting at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":394834,"byte_end":394867,"line_start":648,"line_end":648,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":394872,"byte_end":394881,"line_start":649,"line_end":649,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":395184,"byte_end":395196,"line_start":657,"line_end":657,"column_start":12,"column_end":24},"name":"entries_tree","qualname":"<Unit<R>>::entries_tree","value":"pub fn entries_tree(&Self, Option<UnitOffset<R::Offset>>)\n-> Result<EntriesTree<, , R>>","parent":null,"children":[],"decl_id":null,"docs":" Navigate this unit's `DebuggingInformationEntry`s as a tree\n starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Navigate this unit's `DebuggingInformationEntry`s as a tree","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":395057,"byte_end":395120,"line_start":654,"line_end":654,"column_start":5,"column_end":68}},{"value":"/ starting at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":395125,"byte_end":395158,"line_start":655,"line_end":655,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":395163,"byte_end":395172,"line_start":656,"line_end":656,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":395439,"byte_end":395450,"line_start":663,"line_end":663,"column_start":12,"column_end":23},"name":"entries_raw","qualname":"<Unit<R>>::entries_raw","value":"pub fn entries_raw(&Self, Option<UnitOffset<R::Offset>>)\n-> Result<EntriesRaw<, , R>>","parent":null,"children":[],"decl_id":null,"docs":" Read the raw data that defines the Debugging Information Entries.\n","sig":null,"attributes":[{"value":"/ Read the raw data that defines the Debugging Information Entries.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":395344,"byte_end":395413,"line_start":661,"line_end":661,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":395418,"byte_end":395427,"line_start":662,"line_end":662,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":395849,"byte_end":395863,"line_start":672,"line_end":672,"column_start":12,"column_end":26},"name":"to_unit_offset","qualname":"<UnitSectionOffset<T>>::to_unit_offset","value":"pub fn to_unit_offset<R>(&Self, &Unit<R>) -> Option<UnitOffset<T>> where\nR: Reader<Offset = T>","parent":null,"children":[],"decl_id":null,"docs":" Convert an offset to be relative to the start of the given unit,\n instead of relative to the start of the section.\n Returns `None` if the offset is not within the unit entries.\n","sig":null,"attributes":[{"value":"/ Convert an offset to be relative to the start of the given unit,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":395643,"byte_end":395711,"line_start":669,"line_end":669,"column_start":5,"column_end":73}},{"value":"/ instead of relative to the start of the section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":395716,"byte_end":395768,"line_start":670,"line_end":670,"column_start":5,"column_end":57}},{"value":"/ Returns `None` if the offset is not within the unit entries.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":395773,"byte_end":395837,"line_start":671,"line_end":671,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":396963,"byte_end":396985,"line_start":703,"line_end":703,"column_start":12,"column_end":34},"name":"to_unit_section_offset","qualname":"<UnitOffset<T>>::to_unit_section_offset","value":"pub fn to_unit_section_offset<R>(&Self, &Unit<R>) -> UnitSectionOffset<T>\nwhere R: Reader<Offset = T>","parent":null,"children":[],"decl_id":null,"docs":" Convert an offset to be relative to the start of the .debug_info section,\n instead of relative to the start of the given compilation unit.","sig":null,"attributes":[{"value":"/ Convert an offset to be relative to the start of the .debug_info section,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":396745,"byte_end":396822,"line_start":699,"line_end":699,"column_start":5,"column_end":82}},{"value":"/ instead of relative to the start of the given compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":396827,"byte_end":396894,"line_start":700,"line_end":700,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":396899,"byte_end":396902,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ Does not check that the offset is valid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":396907,"byte_end":396951,"line_start":702,"line_end":702,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":6260},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":397642,"byte_end":397651,"line_start":722,"line_end":722,"column_start":12,"column_end":21},"name":"RangeIter","qualname":"::read::dwarf::RangeIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator for the address ranges of a `DebuggingInformationEntry`.","sig":null,"attributes":[{"value":"/ An iterator for the address ranges of a `DebuggingInformationEntry`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":397475,"byte_end":397547,"line_start":718,"line_end":718,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":397548,"byte_end":397551,"line_start":719,"line_end":719,"column_start":1,"column_end":4}},{"value":"/ Returned by `Dwarf::die_ranges` and `Dwarf::unit_ranges`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":397552,"byte_end":397613,"line_start":720,"line_end":720,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":398007,"byte_end":398011,"line_start":738,"line_end":738,"column_start":12,"column_end":16},"name":"next","qualname":"<RangeIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<Range>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next range.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next range.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":397952,"byte_end":397995,"line_start":737,"line_end":737,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":6278},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":400682,"byte_end":400693,"line_start":15,"line_end":15,"column_start":12,"column_end":23},"name":"EndianSlice","qualname":"::read::endian_slice::EndianSlice","value":"EndianSlice {  }","parent":null,"children":[{"krate":0,"index":6281},{"krate":0,"index":6282}],"decl_id":null,"docs":" A `&[u8]` slice with endianity metadata.","sig":null,"attributes":[{"value":"/ A `&[u8]` slice with endianity metadata.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":400473,"byte_end":400517,"line_start":11,"line_end":11,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":400518,"byte_end":400521,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This implements the `Reader` trait, which is used for all reading of DWARF sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":400522,"byte_end":400610,"line_start":13,"line_end":13,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":400968,"byte_end":400971,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<EndianSlice>::new","value":"pub fn new(&'input [u8], Endian) -> EndianSlice","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `EndianSlice` with the given slice and endianity.\n","sig":null,"attributes":[{"value":"/ Construct a new `EndianSlice` with the given slice and endianity.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":400873,"byte_end":400942,"line_start":27,"line_end":27,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":400947,"byte_end":400956,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":401260,"byte_end":401263,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"buf","qualname":"<EndianSlice>::buf","value":"pub fn buf(&Self) -> &'input [u8]","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the raw slice.\n","sig":null,"attributes":[{"value":"/ Return a reference to the raw slice.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":401091,"byte_end":401131,"line_start":33,"line_end":33,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":401136,"byte_end":401145,"line_start":34,"line_end":34,"column_start":5,"column_end":14}},{"value":"deprecated(note =\n             \"Method renamed to EndianSlice::slice; use that instead.\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":401169,"byte_end":401248,"line_start":36,"line_end":36,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":401385,"byte_end":401390,"line_start":43,"line_end":43,"column_start":12,"column_end":17},"name":"slice","qualname":"<EndianSlice>::slice","value":"pub fn slice(&Self) -> &'input [u8]","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the raw slice.\n","sig":null,"attributes":[{"value":"/ Return a reference to the raw slice.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":401319,"byte_end":401359,"line_start":41,"line_end":41,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":401364,"byte_end":401373,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":401673,"byte_end":401681,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"split_at","qualname":"<EndianSlice>::split_at","value":"pub fn split_at(&Self, usize) -> (EndianSlice, EndianSlice)","parent":null,"children":[],"decl_id":null,"docs":" Split the slice in two at the given index, resulting in the tuple where\n the first item has range [0, idx), and the second has range [idx,\n len). Panics if the index is out of bounds.\n","sig":null,"attributes":[{"value":"/ Split the slice in two at the given index, resulting in the tuple where","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":401446,"byte_end":401521,"line_start":47,"line_end":47,"column_start":5,"column_end":80}},{"value":"/ the first item has range [0, idx), and the second has range [idx,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":401526,"byte_end":401595,"line_start":48,"line_end":48,"column_start":5,"column_end":74}},{"value":"/ len). Panics if the index is out of bounds.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":401600,"byte_end":401647,"line_start":49,"line_end":49,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":401652,"byte_end":401661,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":401954,"byte_end":401958,"line_start":60,"line_end":60,"column_start":12,"column_end":16},"name":"find","qualname":"<EndianSlice>::find","value":"pub fn find(&Self, u8) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Find the first occurence of a byte in the slice, and return its index.\n","sig":null,"attributes":[{"value":"/ Find the first occurence of a byte in the slice, and return its index.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":401854,"byte_end":401928,"line_start":58,"line_end":58,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":401933,"byte_end":401942,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":402182,"byte_end":402193,"line_start":67,"line_end":67,"column_start":12,"column_end":23},"name":"offset_from","qualname":"<EndianSlice>::offset_from","value":"pub fn offset_from(&Self, EndianSlice) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the offset of the start of the slice relative to the start\n of the given slice.\n","sig":null,"attributes":[{"value":"/ Return the offset of the start of the slice relative to the start","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":402059,"byte_end":402128,"line_start":64,"line_end":64,"column_start":5,"column_end":74}},{"value":"/ of the given slice.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":402133,"byte_end":402156,"line_start":65,"line_end":65,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":402161,"byte_end":402170,"line_start":66,"line_end":66,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":402685,"byte_end":402694,"line_start":79,"line_end":79,"column_start":12,"column_end":21},"name":"to_string","qualname":"<EndianSlice>::to_string","value":"pub fn to_string(&Self) -> Result<&'input str>","parent":null,"children":[],"decl_id":null,"docs":" Converts the slice to a string using `str::from_utf8`.","sig":null,"attributes":[{"value":"/ Converts the slice to a string using `str::from_utf8`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":402526,"byte_end":402584,"line_start":75,"line_end":75,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":402589,"byte_end":402592,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the slice contains invalid characters.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":402597,"byte_end":402659,"line_start":77,"line_end":77,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":402664,"byte_end":402673,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":402933,"byte_end":402948,"line_start":86,"line_end":86,"column_start":12,"column_end":27},"name":"to_string_lossy","qualname":"<EndianSlice>::to_string_lossy","value":"pub fn to_string_lossy(&Self) -> Cow","parent":null,"children":[],"decl_id":null,"docs":" Converts the slice to a string, including invalid characters,\n using `String::from_utf8_lossy`.\n","sig":null,"attributes":[{"value":"/ Converts the slice to a string, including invalid characters,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":402801,"byte_end":402866,"line_start":83,"line_end":83,"column_start":5,"column_end":70}},{"value":"/ using `String::from_utf8_lossy`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":402871,"byte_end":402907,"line_start":84,"line_end":84,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":402912,"byte_end":402921,"line_start":85,"line_end":85,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":404133,"byte_end":404138,"line_start":123,"line_end":123,"column_start":12,"column_end":17},"name":"range","qualname":"<EndianSlice>::range","value":"pub fn range(&Self, Range<usize>) -> EndianSlice","parent":null,"children":[],"decl_id":null,"docs":" Take the given `start..end` range of the underlying slice and return a\n new `EndianSlice`.","sig":null,"attributes":[{"value":"/ Take the given `start..end` range of the underlying slice and return a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":403708,"byte_end":403782,"line_start":112,"line_end":112,"column_start":5,"column_end":79}},{"value":"/ new `EndianSlice`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":403787,"byte_end":403809,"line_start":113,"line_end":113,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":403814,"byte_end":403817,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":403822,"byte_end":403829,"line_start":115,"line_end":115,"column_start":5,"column_end":12}},{"value":"/ use gimli::{EndianSlice, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":403834,"byte_end":403877,"line_start":116,"line_end":116,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":403882,"byte_end":403885,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ let slice = &[0x01, 0x02, 0x03, 0x04];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":403890,"byte_end":403932,"line_start":118,"line_end":118,"column_start":5,"column_end":47}},{"value":"/ let endian_slice = EndianSlice::new(slice, LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":403937,"byte_end":403998,"line_start":119,"line_end":119,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(endian_slice.range(1..3),","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":404003,"byte_end":404043,"line_start":120,"line_end":120,"column_start":5,"column_end":45}},{"value":"/            EndianSlice::new(&slice[1..3], LittleEndian));","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":404048,"byte_end":404109,"line_start":121,"line_end":121,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":404114,"byte_end":404121,"line_start":122,"line_end":122,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":404736,"byte_end":404746,"line_start":141,"line_end":141,"column_start":12,"column_end":22},"name":"range_from","qualname":"<EndianSlice>::range_from","value":"pub fn range_from(&Self, RangeFrom<usize>) -> EndianSlice","parent":null,"children":[],"decl_id":null,"docs":" Take the given `start..` range of the underlying slice and return a new\n `EndianSlice`.","sig":null,"attributes":[{"value":"/ Take the given `start..` range of the underlying slice and return a new","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":404311,"byte_end":404386,"line_start":130,"line_end":130,"column_start":5,"column_end":80}},{"value":"/ `EndianSlice`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":404391,"byte_end":404409,"line_start":131,"line_end":131,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":404414,"byte_end":404417,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":404422,"byte_end":404429,"line_start":133,"line_end":133,"column_start":5,"column_end":12}},{"value":"/ use gimli::{EndianSlice, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":404434,"byte_end":404477,"line_start":134,"line_end":134,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":404482,"byte_end":404485,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ let slice = &[0x01, 0x02, 0x03, 0x04];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":404490,"byte_end":404532,"line_start":136,"line_end":136,"column_start":5,"column_end":47}},{"value":"/ let endian_slice = EndianSlice::new(slice, LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":404537,"byte_end":404598,"line_start":137,"line_end":137,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(endian_slice.range_from(2..),","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":404603,"byte_end":404647,"line_start":138,"line_end":138,"column_start":5,"column_end":49}},{"value":"/            EndianSlice::new(&slice[2..], LittleEndian));","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":404652,"byte_end":404712,"line_start":139,"line_end":139,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":404717,"byte_end":404724,"line_start":140,"line_end":140,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":405344,"byte_end":405352,"line_start":159,"line_end":159,"column_start":12,"column_end":20},"name":"range_to","qualname":"<EndianSlice>::range_to","value":"pub fn range_to(&Self, RangeTo<usize>) -> EndianSlice","parent":null,"children":[],"decl_id":null,"docs":" Take the given `..end` range of the underlying slice and return a new\n `EndianSlice`.","sig":null,"attributes":[{"value":"/ Take the given `..end` range of the underlying slice and return a new","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":404923,"byte_end":404996,"line_start":148,"line_end":148,"column_start":5,"column_end":78}},{"value":"/ `EndianSlice`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":405001,"byte_end":405019,"line_start":149,"line_end":149,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":405024,"byte_end":405027,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":405032,"byte_end":405039,"line_start":151,"line_end":151,"column_start":5,"column_end":12}},{"value":"/ use gimli::{EndianSlice, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":405044,"byte_end":405087,"line_start":152,"line_end":152,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":405092,"byte_end":405095,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ let slice = &[0x01, 0x02, 0x03, 0x04];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":405100,"byte_end":405142,"line_start":154,"line_end":154,"column_start":5,"column_end":47}},{"value":"/ let endian_slice = EndianSlice::new(slice, LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":405147,"byte_end":405208,"line_start":155,"line_end":155,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(endian_slice.range_to(..3),","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":405213,"byte_end":405255,"line_start":156,"line_end":156,"column_start":5,"column_end":47}},{"value":"/            EndianSlice::new(&slice[..3], LittleEndian));","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":405260,"byte_end":405320,"line_start":157,"line_end":157,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":405325,"byte_end":405332,"line_start":158,"line_end":158,"column_start":5,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":780},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410166,"byte_end":410179,"line_start":28,"line_end":28,"column_start":10,"column_end":23},"name":"EndianRcSlice","qualname":"::read::endian_reader::EndianRcSlice","value":"EndianReader<Endian, Rc<[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" A reference counted, non-thread-safe slice of bytes and associated\n endianity.","sig":null,"attributes":[{"value":"/ A reference counted, non-thread-safe slice of bytes and associated","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":409851,"byte_end":409921,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/ endianity.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":409922,"byte_end":409936,"line_start":17,"line_end":17,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":409937,"byte_end":409940,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":409941,"byte_end":409948,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":409949,"byte_end":409980,"line_start":20,"line_end":20,"column_start":1,"column_end":32}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":409981,"byte_end":410001,"line_start":21,"line_end":21,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410002,"byte_end":410005,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ let buf = Rc::from(&[1, 2, 3, 4][..]);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410006,"byte_end":410048,"line_start":23,"line_end":23,"column_start":1,"column_end":43}},{"value":"/ let reader = gimli::EndianRcSlice::new(buf, gimli::NativeEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410049,"byte_end":410118,"line_start":24,"line_end":24,"column_start":1,"column_end":70}},{"value":"/ # let _ = reader;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410119,"byte_end":410140,"line_start":25,"line_end":25,"column_start":1,"column_end":22}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410141,"byte_end":410148,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410149,"byte_end":410156,"line_start":27,"line_end":27,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":782},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410551,"byte_end":410565,"line_start":42,"line_end":42,"column_start":10,"column_end":24},"name":"EndianArcSlice","qualname":"::read::endian_reader::EndianArcSlice","value":"EndianReader<Endian, Arc<[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" An atomically reference counted, thread-safe slice of bytes and associated\n endianity.","sig":null,"attributes":[{"value":"/ An atomically reference counted, thread-safe slice of bytes and associated","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410223,"byte_end":410301,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ endianity.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410302,"byte_end":410316,"line_start":31,"line_end":31,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410317,"byte_end":410320,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410321,"byte_end":410328,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410329,"byte_end":410360,"line_start":34,"line_end":34,"column_start":1,"column_end":32}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410361,"byte_end":410384,"line_start":35,"line_end":35,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410385,"byte_end":410388,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let buf = Arc::from(&[1, 2, 3, 4][..]);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410389,"byte_end":410432,"line_start":37,"line_end":37,"column_start":1,"column_end":44}},{"value":"/ let reader = gimli::EndianArcSlice::new(buf, gimli::NativeEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410433,"byte_end":410503,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"/ # let _ = reader;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410504,"byte_end":410525,"line_start":39,"line_end":39,"column_start":1,"column_end":22}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410526,"byte_end":410533,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410534,"byte_end":410541,"line_start":41,"line_end":41,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":6318},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":413164,"byte_end":413176,"line_start":120,"line_end":120,"column_start":12,"column_end":24},"name":"EndianReader","qualname":"::read::endian_reader::EndianReader","value":"EndianReader {  }","parent":null,"children":[{"krate":0,"index":6321},{"krate":0,"index":6322}],"decl_id":null,"docs":" An easy way to define a custom `Reader` implementation with a reference to a\n generic buffer of bytes and an associated endianity.","sig":null,"attributes":[{"value":"/ An easy way to define a custom `Reader` implementation with a reference to a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410610,"byte_end":410690,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/ generic buffer of bytes and an associated endianity.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410691,"byte_end":410747,"line_start":45,"line_end":45,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410748,"byte_end":410751,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Note that the whole original buffer is kept alive in memory even if there is","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410752,"byte_end":410832,"line_start":47,"line_end":47,"column_start":1,"column_end":81}},{"value":"/ only one reader that references only a handful of bytes from that original","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410833,"byte_end":410911,"line_start":48,"line_end":48,"column_start":1,"column_end":79}},{"value":"/ buffer. That is, `EndianReader` will not do any copying, moving, or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410912,"byte_end":410983,"line_start":49,"line_end":49,"column_start":1,"column_end":72}},{"value":"/ compacting in order to free up unused regions of the original buffer. If you","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":410984,"byte_end":411064,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"/ require this kind of behavior, it is up to you to implement `Reader`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411065,"byte_end":411137,"line_start":51,"line_end":51,"column_start":1,"column_end":73}},{"value":"/ directly by-hand.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411138,"byte_end":411159,"line_start":52,"line_end":52,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411160,"byte_end":411163,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411164,"byte_end":411177,"line_start":54,"line_end":54,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411178,"byte_end":411181,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Say you have an `mmap`ed file that you want to serve as a `gimli::Reader`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411182,"byte_end":411260,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"/ You can wrap that `mmap`ed file up in a `MmapFile` type and use","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411261,"byte_end":411328,"line_start":57,"line_end":57,"column_start":1,"column_end":68}},{"value":"/ `EndianReader<Rc<MmapFile>>` or `EndianReader<Arc<MmapFile>>` as readers as","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411329,"byte_end":411408,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"/ long as `MmapFile` dereferences to the underlying `[u8]` data.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411409,"byte_end":411475,"line_start":59,"line_end":59,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411476,"byte_end":411479,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411480,"byte_end":411487,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/ use std::io;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411488,"byte_end":411504,"line_start":62,"line_end":62,"column_start":1,"column_end":17}},{"value":"/ use std::ops::Deref;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411505,"byte_end":411529,"line_start":63,"line_end":63,"column_start":1,"column_end":25}},{"value":"/ use std::path::Path;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411530,"byte_end":411554,"line_start":64,"line_end":64,"column_start":1,"column_end":25}},{"value":"/ use std::slice;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411555,"byte_end":411574,"line_start":65,"line_end":65,"column_start":1,"column_end":20}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411575,"byte_end":411598,"line_start":66,"line_end":66,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411599,"byte_end":411602,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ /// A type that represents an `mmap`ed file.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411603,"byte_end":411651,"line_start":68,"line_end":68,"column_start":1,"column_end":49}},{"value":"/ #[derive(Debug)]","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411652,"byte_end":411672,"line_start":69,"line_end":69,"column_start":1,"column_end":21}},{"value":"/ pub struct MmapFile {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411673,"byte_end":411698,"line_start":70,"line_end":70,"column_start":1,"column_end":26}},{"value":"/     ptr: *const u8,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411699,"byte_end":411722,"line_start":71,"line_end":71,"column_start":1,"column_end":24}},{"value":"/     len: usize,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411723,"byte_end":411742,"line_start":72,"line_end":72,"column_start":1,"column_end":20}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411743,"byte_end":411748,"line_start":73,"line_end":73,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411749,"byte_end":411752,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ impl MmapFile {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411753,"byte_end":411772,"line_start":75,"line_end":75,"column_start":1,"column_end":20}},{"value":"/     pub fn new(path: &Path) -> io::Result<MmapFile> {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411773,"byte_end":411830,"line_start":76,"line_end":76,"column_start":1,"column_end":58}},{"value":"/         // Call `mmap` and check for errors and all that...","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411831,"byte_end":411894,"line_start":77,"line_end":77,"column_start":1,"column_end":64}},{"value":"/ #       unimplemented!()","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411895,"byte_end":411923,"line_start":78,"line_end":78,"column_start":1,"column_end":29}},{"value":"/     }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411924,"byte_end":411933,"line_start":79,"line_end":79,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411934,"byte_end":411939,"line_start":80,"line_end":80,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411940,"byte_end":411943,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ impl Drop for MmapFile {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411944,"byte_end":411972,"line_start":82,"line_end":82,"column_start":1,"column_end":29}},{"value":"/     fn drop(&mut self) {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":411973,"byte_end":412001,"line_start":83,"line_end":83,"column_start":1,"column_end":29}},{"value":"/         // Call `munmap` to clean up after ourselves...","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412002,"byte_end":412061,"line_start":84,"line_end":84,"column_start":1,"column_end":60}},{"value":"/ #       unimplemented!()","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412062,"byte_end":412090,"line_start":85,"line_end":85,"column_start":1,"column_end":29}},{"value":"/     }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412091,"byte_end":412100,"line_start":86,"line_end":86,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412101,"byte_end":412106,"line_start":87,"line_end":87,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412107,"byte_end":412110,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ // And `MmapFile` can deref to a slice of the `mmap`ed region of memory.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412111,"byte_end":412187,"line_start":89,"line_end":89,"column_start":1,"column_end":77}},{"value":"/ impl Deref for MmapFile {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412188,"byte_end":412217,"line_start":90,"line_end":90,"column_start":1,"column_end":30}},{"value":"/     type Target = [u8];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412218,"byte_end":412245,"line_start":91,"line_end":91,"column_start":1,"column_end":28}},{"value":"/     fn deref(&self) -> &[u8] {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412246,"byte_end":412280,"line_start":92,"line_end":92,"column_start":1,"column_end":35}},{"value":"/         unsafe {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412281,"byte_end":412301,"line_start":93,"line_end":93,"column_start":1,"column_end":21}},{"value":"/             slice::from_raw_parts(self.ptr, self.len)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412302,"byte_end":412359,"line_start":94,"line_end":94,"column_start":1,"column_end":58}},{"value":"/         }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412360,"byte_end":412373,"line_start":95,"line_end":95,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412374,"byte_end":412383,"line_start":96,"line_end":96,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412384,"byte_end":412389,"line_start":97,"line_end":97,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412390,"byte_end":412393,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ /// A type that represents a shared `mmap`ed file.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412394,"byte_end":412448,"line_start":99,"line_end":99,"column_start":1,"column_end":55}},{"value":"/ #[derive(Debug, Clone)]","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412449,"byte_end":412476,"line_start":100,"line_end":100,"column_start":1,"column_end":28}},{"value":"/ pub struct ArcMmapFile(Arc<MmapFile>);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412477,"byte_end":412519,"line_start":101,"line_end":101,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412520,"byte_end":412523,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ // And `ArcMmapFile` can deref to a slice of the `mmap`ed region of memory.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412524,"byte_end":412603,"line_start":103,"line_end":103,"column_start":1,"column_end":80}},{"value":"/ impl Deref for ArcMmapFile {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412604,"byte_end":412636,"line_start":104,"line_end":104,"column_start":1,"column_end":33}},{"value":"/     type Target = [u8];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412637,"byte_end":412664,"line_start":105,"line_end":105,"column_start":1,"column_end":28}},{"value":"/     fn deref(&self) -> &[u8] {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412665,"byte_end":412699,"line_start":106,"line_end":106,"column_start":1,"column_end":35}},{"value":"/         &self.0","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412700,"byte_end":412719,"line_start":107,"line_end":107,"column_start":1,"column_end":20}},{"value":"/     }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412720,"byte_end":412729,"line_start":108,"line_end":108,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412730,"byte_end":412735,"line_start":109,"line_end":109,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412736,"byte_end":412739,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ // These are both valid for any `Rc` or `Arc`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412740,"byte_end":412790,"line_start":111,"line_end":111,"column_start":1,"column_end":51}},{"value":"/ unsafe impl gimli::StableDeref for ArcMmapFile {}","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412791,"byte_end":412844,"line_start":112,"line_end":112,"column_start":1,"column_end":54}},{"value":"/ unsafe impl gimli::CloneStableDeref for ArcMmapFile {}","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412845,"byte_end":412903,"line_start":113,"line_end":113,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412904,"byte_end":412907,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ /// A `gimli::Reader` that is backed by an `mmap`ed file!","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412908,"byte_end":412969,"line_start":115,"line_end":115,"column_start":1,"column_end":62}},{"value":"/ pub type MmapFileReader<Endian> = gimli::EndianReader<Endian, ArcMmapFile>;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":412970,"byte_end":413049,"line_start":116,"line_end":116,"column_start":1,"column_end":80}},{"value":"/ # fn test(_: &MmapFileReader<gimli::NativeEndian>) { }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":413050,"byte_end":413108,"line_start":117,"line_end":117,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":413109,"byte_end":413116,"line_start":118,"line_end":118,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":416325,"byte_end":416328,"line_start":229,"line_end":229,"column_start":12,"column_end":15},"name":"new","qualname":"<EndianReader<Endian, T>>::new","value":"pub fn new(T, Endian) -> EndianReader<Endian, T>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `EndianReader` with the given bytes.\n","sig":null,"attributes":[{"value":"/ Construct a new `EndianReader` with the given bytes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":416243,"byte_end":416299,"line_start":227,"line_end":227,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":416304,"byte_end":416313,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":416578,"byte_end":416583,"line_start":238,"line_end":238,"column_start":12,"column_end":17},"name":"bytes","qualname":"<EndianReader<Endian, T>>::bytes","value":"pub fn bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the raw bytes underlying this reader.\n","sig":null,"attributes":[{"value":"/ Return a reference to the raw bytes underlying this reader.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":416489,"byte_end":416552,"line_start":236,"line_end":236,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":416557,"byte_end":416566,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417639,"byte_end":417644,"line_start":272,"line_end":272,"column_start":12,"column_end":17},"name":"range","qualname":"<EndianReader<Endian, T>>::range","value":"pub fn range(&Self, Range<usize>) -> EndianReader<Endian, T>","parent":null,"children":[],"decl_id":null,"docs":" Take the given `start..end` range of the underlying buffer and return a\n new `EndianReader`.","sig":null,"attributes":[{"value":"/ Take the given `start..end` range of the underlying buffer and return a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417041,"byte_end":417116,"line_start":254,"line_end":254,"column_start":5,"column_end":80}},{"value":"/ new `EndianReader`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417121,"byte_end":417144,"line_start":255,"line_end":255,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417149,"byte_end":417152,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417157,"byte_end":417164,"line_start":257,"line_end":257,"column_start":5,"column_end":12}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417169,"byte_end":417200,"line_start":258,"line_end":258,"column_start":5,"column_end":36}},{"value":"/ use gimli::{EndianReader, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417205,"byte_end":417249,"line_start":259,"line_end":259,"column_start":5,"column_end":49}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417254,"byte_end":417277,"line_start":260,"line_end":260,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417282,"byte_end":417285,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ let buf = Arc::<[u8]>::from(&[0x01, 0x02, 0x03, 0x04][..]);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417290,"byte_end":417353,"line_start":262,"line_end":262,"column_start":5,"column_end":68}},{"value":"/ let reader = EndianReader::new(buf.clone(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417358,"byte_end":417420,"line_start":263,"line_end":263,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(reader.range(1..3),","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417425,"byte_end":417459,"line_start":264,"line_end":264,"column_start":5,"column_end":39}},{"value":"/            EndianReader::new(&buf[1..3], LittleEndian));","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417464,"byte_end":417524,"line_start":265,"line_end":265,"column_start":5,"column_end":65}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417529,"byte_end":417536,"line_start":266,"line_end":266,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417541,"byte_end":417548,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417553,"byte_end":417556,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417561,"byte_end":417573,"line_start":269,"line_end":269,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417578,"byte_end":417581,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ Panics if the range is out of bounds.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417586,"byte_end":417627,"line_start":271,"line_end":271,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":813},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418423,"byte_end":418433,"line_start":297,"line_end":297,"column_start":12,"column_end":22},"name":"range_from","qualname":"<EndianReader<Endian, T>>::range_from","value":"pub fn range_from(&Self, RangeFrom<usize>) -> EndianReader<Endian, T>","parent":null,"children":[],"decl_id":null,"docs":" Take the given `start..` range of the underlying buffer and return a new\n `EndianReader`.","sig":null,"attributes":[{"value":"/ Take the given `start..` range of the underlying buffer and return a new","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417825,"byte_end":417901,"line_start":279,"line_end":279,"column_start":5,"column_end":81}},{"value":"/ `EndianReader`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417906,"byte_end":417925,"line_start":280,"line_end":280,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417930,"byte_end":417933,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417938,"byte_end":417945,"line_start":282,"line_end":282,"column_start":5,"column_end":12}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417950,"byte_end":417981,"line_start":283,"line_end":283,"column_start":5,"column_end":36}},{"value":"/ use gimli::{EndianReader, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":417986,"byte_end":418030,"line_start":284,"line_end":284,"column_start":5,"column_end":49}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418035,"byte_end":418058,"line_start":285,"line_end":285,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418063,"byte_end":418066,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ let buf = Arc::<[u8]>::from(&[0x01, 0x02, 0x03, 0x04][..]);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418071,"byte_end":418134,"line_start":287,"line_end":287,"column_start":5,"column_end":68}},{"value":"/ let reader = EndianReader::new(buf.clone(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418139,"byte_end":418201,"line_start":288,"line_end":288,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(reader.range_from(2..),","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418206,"byte_end":418244,"line_start":289,"line_end":289,"column_start":5,"column_end":43}},{"value":"/            EndianReader::new(&buf[2..], LittleEndian));","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418249,"byte_end":418308,"line_start":290,"line_end":290,"column_start":5,"column_end":64}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418313,"byte_end":418320,"line_start":291,"line_end":291,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418325,"byte_end":418332,"line_start":292,"line_end":292,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418337,"byte_end":418340,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418345,"byte_end":418357,"line_start":294,"line_end":294,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418362,"byte_end":418365,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ Panics if the range is out of bounds.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418370,"byte_end":418411,"line_start":296,"line_end":296,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":419175,"byte_end":419183,"line_start":321,"line_end":321,"column_start":12,"column_end":20},"name":"range_to","qualname":"<EndianReader<Endian, T>>::range_to","value":"pub fn range_to(&Self, RangeTo<usize>) -> EndianReader<Endian, T>","parent":null,"children":[],"decl_id":null,"docs":" Take the given `..end` range of the underlying buffer and return a new\n `EndianReader`.","sig":null,"attributes":[{"value":"/ Take the given `..end` range of the underlying buffer and return a new","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418581,"byte_end":418655,"line_start":303,"line_end":303,"column_start":5,"column_end":79}},{"value":"/ `EndianReader`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418660,"byte_end":418679,"line_start":304,"line_end":304,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418684,"byte_end":418687,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418692,"byte_end":418699,"line_start":306,"line_end":306,"column_start":5,"column_end":12}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418704,"byte_end":418735,"line_start":307,"line_end":307,"column_start":5,"column_end":36}},{"value":"/ use gimli::{EndianReader, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418740,"byte_end":418784,"line_start":308,"line_end":308,"column_start":5,"column_end":49}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418789,"byte_end":418812,"line_start":309,"line_end":309,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418817,"byte_end":418820,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ let buf = Arc::<[u8]>::from(&[0x01, 0x02, 0x03, 0x04][..]);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418825,"byte_end":418888,"line_start":311,"line_end":311,"column_start":5,"column_end":68}},{"value":"/ let reader = EndianReader::new(buf.clone(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418893,"byte_end":418955,"line_start":312,"line_end":312,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(reader.range_to(..3),","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":418960,"byte_end":418996,"line_start":313,"line_end":313,"column_start":5,"column_end":41}},{"value":"/            EndianReader::new(&buf[..3], LittleEndian));","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":419001,"byte_end":419060,"line_start":314,"line_end":314,"column_start":5,"column_end":64}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":419065,"byte_end":419072,"line_start":315,"line_end":315,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":419077,"byte_end":419084,"line_start":316,"line_end":316,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":419089,"byte_end":419092,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":419097,"byte_end":419109,"line_start":318,"line_end":318,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":419114,"byte_end":419117,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ Panics if the range is out of bounds.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":419122,"byte_end":419163,"line_start":320,"line_end":320,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6367},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428168,"byte_end":428182,"line_start":17,"line_end":17,"column_start":12,"column_end":26},"name":"ReaderOffsetId","qualname":"::read::reader::ReaderOffsetId","value":"","parent":null,"children":[],"decl_id":null,"docs":" An identifier for an offset within a section reader.","sig":null,"attributes":[{"value":"/ An identifier for an offset within a section reader.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":427806,"byte_end":427862,"line_start":11,"line_end":11,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":427863,"byte_end":427866,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This is used for error reporting. The meaning of this value is specific to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":427867,"byte_end":427945,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ each reader implementation. The values should be chosen to be unique amongst","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":427946,"byte_end":428026,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/ all readers. If values are not unique then errors may point to the wrong reader.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428027,"byte_end":428111,"line_start":15,"line_end":15,"column_start":1,"column_end":85}}]},{"kind":"Field","id":{"krate":0,"index":6369},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428183,"byte_end":428190,"line_start":17,"line_end":17,"column_start":27,"column_end":34},"name":"0","qualname":"::read::reader::ReaderOffsetId::0","value":"u64","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":866},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428342,"byte_end":428354,"line_start":22,"line_end":22,"column_start":11,"column_end":23},"name":"ReaderOffset","qualname":"::read::reader::ReaderOffset","value":"ReaderOffset: Debug + Copy + Eq + Ord + Hash + Add<Output = Self> + AddAssign + Sub<Output =\nSelf>","parent":null,"children":[{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874}],"decl_id":null,"docs":" A trait for offsets with a DWARF section.","sig":null,"attributes":[{"value":"/ A trait for offsets with a DWARF section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428194,"byte_end":428239,"line_start":19,"line_end":19,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428240,"byte_end":428243,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This allows consumers to choose a size that is appropriate for their address space.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428244,"byte_end":428331,"line_start":21,"line_end":21,"column_start":1,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428489,"byte_end":428496,"line_start":26,"line_end":26,"column_start":8,"column_end":15},"name":"from_u8","qualname":"::read::reader::ReaderOffset::from_u8","value":"pub fn from_u8(u8) -> Self","parent":{"krate":0,"index":866},"children":[],"decl_id":null,"docs":" Convert a u8 to an offset.\n","sig":null,"attributes":[{"value":"/ Convert a u8 to an offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428451,"byte_end":428481,"line_start":25,"line_end":25,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428562,"byte_end":428570,"line_start":29,"line_end":29,"column_start":8,"column_end":16},"name":"from_u16","qualname":"::read::reader::ReaderOffset::from_u16","value":"pub fn from_u16(u16) -> Self","parent":{"krate":0,"index":866},"children":[],"decl_id":null,"docs":" Convert a u16 to an offset.\n","sig":null,"attributes":[{"value":"/ Convert a u16 to an offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428523,"byte_end":428554,"line_start":28,"line_end":28,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428638,"byte_end":428646,"line_start":32,"line_end":32,"column_start":8,"column_end":16},"name":"from_i16","qualname":"::read::reader::ReaderOffset::from_i16","value":"pub fn from_i16(i16) -> Self","parent":{"krate":0,"index":866},"children":[],"decl_id":null,"docs":" Convert an i16 to an offset.\n","sig":null,"attributes":[{"value":"/ Convert an i16 to an offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428598,"byte_end":428630,"line_start":31,"line_end":31,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428713,"byte_end":428721,"line_start":35,"line_end":35,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::read::reader::ReaderOffset::from_u32","value":"pub fn from_u32(u32) -> Self","parent":{"krate":0,"index":866},"children":[],"decl_id":null,"docs":" Convert a u32 to an offset.\n","sig":null,"attributes":[{"value":"/ Convert a u32 to an offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428674,"byte_end":428705,"line_start":34,"line_end":34,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428866,"byte_end":428874,"line_start":40,"line_end":40,"column_start":8,"column_end":16},"name":"from_u64","qualname":"::read::reader::ReaderOffset::from_u64","value":"pub fn from_u64(u64) -> Result<Self>","parent":{"krate":0,"index":866},"children":[],"decl_id":null,"docs":" Convert a u64 to an offset.","sig":null,"attributes":[{"value":"/ Convert a u64 to an offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428749,"byte_end":428780,"line_start":37,"line_end":37,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428785,"byte_end":428788,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ Returns `Error::UnsupportedOffset` if the value is too large.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428793,"byte_end":428858,"line_start":39,"line_end":39,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428949,"byte_end":428957,"line_start":43,"line_end":43,"column_start":8,"column_end":16},"name":"into_u64","qualname":"::read::reader::ReaderOffset::into_u64","value":"pub fn into_u64(Self) -> u64","parent":{"krate":0,"index":866},"children":[],"decl_id":null,"docs":" Convert an offset to a u64.\n","sig":null,"attributes":[{"value":"/ Convert an offset to a u64.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428910,"byte_end":428941,"line_start":42,"line_end":42,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":429042,"byte_end":429054,"line_start":46,"line_end":46,"column_start":8,"column_end":20},"name":"wrapping_add","qualname":"::read::reader::ReaderOffset::wrapping_add","value":"pub fn wrapping_add(Self, Self) -> Self","parent":{"krate":0,"index":866},"children":[],"decl_id":null,"docs":" Wrapping (modular) addition. Computes `self + other`.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) addition. Computes `self + other`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428977,"byte_end":429034,"line_start":45,"line_end":45,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":429145,"byte_end":429156,"line_start":49,"line_end":49,"column_start":8,"column_end":19},"name":"checked_sub","qualname":"::read::reader::ReaderOffset::checked_sub","value":"pub fn checked_sub(Self, Self) -> Option<Self>","parent":{"krate":0,"index":866},"children":[],"decl_id":null,"docs":" Checked subtraction. Computes `self - other`.\n","sig":null,"attributes":[{"value":"/ Checked subtraction. Computes `self - other`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":429088,"byte_end":429137,"line_start":48,"line_end":48,"column_start":5,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":902},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433301,"byte_end":433307,"line_start":207,"line_end":207,"column_start":11,"column_end":17},"name":"Reader","qualname":"::read::reader::Reader","value":"Reader: Debug + Clone","parent":null,"children":[{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909},{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":924},{"krate":0,"index":926},{"krate":0,"index":928},{"krate":0,"index":930},{"krate":0,"index":932},{"krate":0,"index":934},{"krate":0,"index":936},{"krate":0,"index":938},{"krate":0,"index":940},{"krate":0,"index":942},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955}],"decl_id":null,"docs":" A trait for reading the data from a DWARF section.","sig":null,"attributes":[{"value":"/ A trait for reading the data from a DWARF section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":431707,"byte_end":431761,"line_start":188,"line_end":188,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":431762,"byte_end":431765,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ All read operations advance the section offset of the reader","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":431766,"byte_end":431830,"line_start":190,"line_end":190,"column_start":1,"column_end":65}},{"value":"/ unless specified otherwise.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":431831,"byte_end":431862,"line_start":191,"line_end":191,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":431863,"byte_end":431866,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ ## Choosing a `Reader` Implementation","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":431867,"byte_end":431908,"line_start":193,"line_end":193,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":431909,"byte_end":431912,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ `gimli` comes with a few different `Reader` implementations and lets you","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":431913,"byte_end":431989,"line_start":195,"line_end":195,"column_start":1,"column_end":77}},{"value":"/ choose the one that is right for your use case. A `Reader` is essentially a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":431990,"byte_end":432069,"line_start":196,"line_end":196,"column_start":1,"column_end":80}},{"value":"/ view into the raw bytes that make up some DWARF, but this view might borrow","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":432070,"byte_end":432149,"line_start":197,"line_end":197,"column_start":1,"column_end":80}},{"value":"/ the underlying data or use reference counting ownership, and it might be","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":432150,"byte_end":432226,"line_start":198,"line_end":198,"column_start":1,"column_end":77}},{"value":"/ thread safe or not.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":432227,"byte_end":432250,"line_start":199,"line_end":199,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":432251,"byte_end":432254,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ | Implementation    | Ownership         | Thread Safe | Notes |","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":432255,"byte_end":432322,"line_start":201,"line_end":201,"column_start":1,"column_end":68}},{"value":"/ |:------------------|:------------------|:------------|:------|","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":432323,"byte_end":432390,"line_start":202,"line_end":202,"column_start":1,"column_end":68}},{"value":"/ | [`EndianSlice`](./struct.EndianSlice.html)        | Borrowed          | Yes         | Fastest, but requires that all of your code work with borrows. |","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":432391,"byte_end":432547,"line_start":203,"line_end":203,"column_start":1,"column_end":157}},{"value":"/ | [`EndianRcSlice`](./struct.EndianRcSlice.html)    | Reference counted | No          | Shared ownership via reference counting, which alleviates the borrow restrictions of `EndianSlice` but imposes reference counting increments and decrements. Cannot be sent across threads, because the reference count is not atomic. |","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":432548,"byte_end":432872,"line_start":204,"line_end":204,"column_start":1,"column_end":325}},{"value":"/ | [`EndianArcSlice`](./struct.EndianArcSlice.html)  | Reference counted | Yes         | The same as `EndianRcSlice`, but uses atomic reference counting, and therefore reference counting operations are slower but `EndianArcSlice`s may be sent across threads. |","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":432873,"byte_end":433136,"line_start":205,"line_end":205,"column_start":1,"column_end":264}},{"value":"/ | [`EndianReader<T>`](./struct.EndianReader.html)   | Same as `T`       | Same as `T` | Escape hatch for easily defining your own type of `Reader`. |","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433137,"byte_end":433290,"line_start":206,"line_end":206,"column_start":1,"column_end":154}}]},{"kind":"Type","id":{"krate":0,"index":903},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433380,"byte_end":433386,"line_start":209,"line_end":209,"column_start":10,"column_end":16},"name":"Endian","qualname":"::read::reader::Reader::Endian","value":"type Endian: Endianity;","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" The endianity of bytes that are read.\n","sig":null,"attributes":[{"value":"/ The endianity of bytes that are read.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433329,"byte_end":433370,"line_start":208,"line_end":208,"column_start":5,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":904},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433456,"byte_end":433462,"line_start":212,"line_end":212,"column_start":10,"column_end":16},"name":"Offset","qualname":"::read::reader::Reader::Offset","value":"type Offset: ReaderOffset;","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" The type used for offsets and lengths.\n","sig":null,"attributes":[{"value":"/ The type used for offsets and lengths.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433404,"byte_end":433446,"line_start":211,"line_end":211,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433539,"byte_end":433545,"line_start":215,"line_end":215,"column_start":8,"column_end":14},"name":"endian","qualname":"::read::reader::Reader::endian","value":"pub fn endian(&Self) -> Self::Endian","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Return the endianity of bytes that are read.\n","sig":null,"attributes":[{"value":"/ Return the endianity of bytes that are read.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433483,"byte_end":433531,"line_start":214,"line_end":214,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433624,"byte_end":433627,"line_start":218,"line_end":218,"column_start":8,"column_end":11},"name":"len","qualname":"::read::reader::Reader::len","value":"pub fn len(&Self) -> Self::Offset","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Return the number of bytes remaining.\n","sig":null,"attributes":[{"value":"/ Return the number of bytes remaining.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433575,"byte_end":433616,"line_start":217,"line_end":217,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433711,"byte_end":433716,"line_start":221,"line_end":221,"column_start":8,"column_end":13},"name":"empty","qualname":"::read::reader::Reader::empty","value":"pub fn empty(&mut Self)","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Set the number of bytes remaining to zero.\n","sig":null,"attributes":[{"value":"/ Set the number of bytes remaining to zero.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433657,"byte_end":433703,"line_start":220,"line_end":220,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433804,"byte_end":433812,"line_start":224,"line_end":224,"column_start":8,"column_end":16},"name":"truncate","qualname":"::read::reader::Reader::truncate","value":"pub fn truncate(&mut Self, Self::Offset) -> Result<()>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Set the number of bytes remaining to the specified length.\n","sig":null,"attributes":[{"value":"/ Set the number of bytes remaining to the specified length.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433734,"byte_end":433796,"line_start":223,"line_end":223,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":434087,"byte_end":434098,"line_start":231,"line_end":231,"column_start":8,"column_end":19},"name":"offset_from","qualname":"::read::reader::Reader::offset_from","value":"pub fn offset_from(&Self, &Self) -> Self::Offset","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Return the offset of this reader's data relative to the start of\n the given base reader's data.","sig":null,"attributes":[{"value":"/ Return the offset of this reader's data relative to the start of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433863,"byte_end":433931,"line_start":226,"line_end":226,"column_start":5,"column_end":73}},{"value":"/ the given base reader's data.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433936,"byte_end":433969,"line_start":227,"line_end":227,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433974,"byte_end":433977,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ May panic if this reader's data is not contained within the given","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433982,"byte_end":434051,"line_start":229,"line_end":229,"column_start":5,"column_end":74}},{"value":"/ base reader's data.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":434056,"byte_end":434079,"line_start":230,"line_end":230,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":434204,"byte_end":434213,"line_start":234,"line_end":234,"column_start":8,"column_end":17},"name":"offset_id","qualname":"::read::reader::Reader::offset_id","value":"pub fn offset_id(&Self) -> ReaderOffsetId","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Return an identifier for the current reader offset.\n","sig":null,"attributes":[{"value":"/ Return an identifier for the current reader offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":434141,"byte_end":434196,"line_start":233,"line_end":233,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":434352,"byte_end":434368,"line_start":238,"line_end":238,"column_start":8,"column_end":24},"name":"lookup_offset_id","qualname":"::read::reader::Reader::lookup_offset_id","value":"pub fn lookup_offset_id(&Self, ReaderOffsetId) -> Option<Self::Offset>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Return the offset corresponding to the given `id` if\n it is associated with this reader.\n","sig":null,"attributes":[{"value":"/ Return the offset corresponding to the given `id` if","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":434245,"byte_end":434301,"line_start":236,"line_end":236,"column_start":5,"column_end":61}},{"value":"/ it is associated with this reader.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":434306,"byte_end":434344,"line_start":237,"line_end":237,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":434543,"byte_end":434547,"line_start":242,"line_end":242,"column_start":8,"column_end":12},"name":"find","qualname":"::read::reader::Reader::find","value":"pub fn find(&Self, u8) -> Result<Self::Offset>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Find the index of the first occurence of the given byte.\n The offset of the reader is not changed.\n","sig":null,"attributes":[{"value":"/ Find the index of the first occurence of the given byte.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":434426,"byte_end":434486,"line_start":240,"line_end":240,"column_start":5,"column_end":65}},{"value":"/ The offset of the reader is not changed.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":434491,"byte_end":434535,"line_start":241,"line_end":241,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":434645,"byte_end":434649,"line_start":245,"line_end":245,"column_start":8,"column_end":12},"name":"skip","qualname":"::read::reader::Reader::skip","value":"pub fn skip(&mut Self, Self::Offset) -> Result<()>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Discard the specified number of bytes.\n","sig":null,"attributes":[{"value":"/ Discard the specified number of bytes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":434595,"byte_end":434637,"line_start":244,"line_end":244,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":434885,"byte_end":434890,"line_start":251,"line_end":251,"column_start":8,"column_end":13},"name":"split","qualname":"::read::reader::Reader::split","value":"pub fn split(&mut Self, Self::Offset) -> Result<Self>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Split a reader in two.","sig":null,"attributes":[{"value":"/ Split a reader in two.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":434700,"byte_end":434726,"line_start":247,"line_end":247,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":434731,"byte_end":434734,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ A new reader is returned that can be used to read the next","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":434739,"byte_end":434801,"line_start":249,"line_end":249,"column_start":5,"column_end":67}},{"value":"/ `len` bytes, and `self` is advanced so that it reads the remainder.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":434806,"byte_end":434877,"line_start":250,"line_end":250,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435171,"byte_end":435179,"line_start":259,"line_end":259,"column_start":8,"column_end":16},"name":"to_slice","qualname":"::read::reader::Reader::to_slice","value":"pub fn to_slice(&Self) -> Result<Cow<, [u8]>>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Return all remaining data as a clone-on-write slice.","sig":null,"attributes":[{"value":"/ Return all remaining data as a clone-on-write slice.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":434943,"byte_end":434999,"line_start":253,"line_end":253,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435004,"byte_end":435007,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ The slice will be borrowed where possible, but some readers may","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435012,"byte_end":435079,"line_start":255,"line_end":255,"column_start":5,"column_end":72}},{"value":"/ always return an owned vector.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435084,"byte_end":435118,"line_start":256,"line_end":256,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435123,"byte_end":435126,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ Does not advance the reader.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435131,"byte_end":435163,"line_start":258,"line_end":258,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435519,"byte_end":435528,"line_start":269,"line_end":269,"column_start":8,"column_end":17},"name":"to_string","qualname":"::read::reader::Reader::to_string","value":"pub fn to_string(&Self) -> Result<Cow<, str>>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Convert all remaining data to a clone-on-write string.","sig":null,"attributes":[{"value":"/ Convert all remaining data to a clone-on-write string.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435214,"byte_end":435272,"line_start":261,"line_end":261,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435277,"byte_end":435280,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ The string will be borrowed where possible, but some readers may","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435285,"byte_end":435353,"line_start":263,"line_end":263,"column_start":5,"column_end":73}},{"value":"/ always return an owned string.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435358,"byte_end":435392,"line_start":264,"line_end":264,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435397,"byte_end":435400,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ Does not advance the reader.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435405,"byte_end":435437,"line_start":266,"line_end":266,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435442,"byte_end":435445,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the data contains invalid characters.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435450,"byte_end":435511,"line_start":268,"line_end":268,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435823,"byte_end":435838,"line_start":277,"line_end":277,"column_start":8,"column_end":23},"name":"to_string_lossy","qualname":"::read::reader::Reader::to_string_lossy","value":"pub fn to_string_lossy(&Self) -> Result<Cow<, str>>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Convert all remaining data to a clone-on-write string, including invalid characters.","sig":null,"attributes":[{"value":"/ Convert all remaining data to a clone-on-write string, including invalid characters.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435562,"byte_end":435650,"line_start":271,"line_end":271,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435655,"byte_end":435658,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ The string will be borrowed where possible, but some readers may","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435663,"byte_end":435731,"line_start":273,"line_end":273,"column_start":5,"column_end":73}},{"value":"/ always return an owned string.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435736,"byte_end":435770,"line_start":274,"line_end":274,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435775,"byte_end":435778,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ Does not advance the reader.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435783,"byte_end":435815,"line_start":276,"line_end":276,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435926,"byte_end":435936,"line_start":280,"line_end":280,"column_start":8,"column_end":18},"name":"read_slice","qualname":"::read::reader::Reader::read_slice","value":"pub fn read_slice(&mut Self, &mut [u8]) -> Result<()>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Read exactly `buf.len()` bytes into `buf`.\n","sig":null,"attributes":[{"value":"/ Read exactly `buf.len()` bytes into `buf`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435872,"byte_end":435918,"line_start":279,"line_end":279,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":919},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":436026,"byte_end":436039,"line_start":284,"line_end":284,"column_start":8,"column_end":21},"name":"read_u8_array","qualname":"::read::reader::Reader::read_u8_array","value":"pub fn read_u8_array<A>(&mut Self) -> Result<A> where A: Sized + Default +\nAsMut<[u8]>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Read a u8 array.\n","sig":null,"attributes":[{"value":"/ Read a u8 array.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":435984,"byte_end":436004,"line_start":282,"line_end":282,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":436009,"byte_end":436018,"line_start":283,"line_end":283,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":436337,"byte_end":436345,"line_start":295,"line_end":295,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::read::reader::Reader::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Return true if the number of bytes remaining is zero.\n","sig":null,"attributes":[{"value":"/ Return true if the number of bytes remaining is zero.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":436258,"byte_end":436315,"line_start":293,"line_end":293,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":436320,"byte_end":436329,"line_start":294,"line_end":294,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":436457,"byte_end":436464,"line_start":301,"line_end":301,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::read::reader::Reader::read_u8","value":"pub fn read_u8(&mut Self) -> Result<u8>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Read a u8.\n","sig":null,"attributes":[{"value":"/ Read a u8.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":436421,"byte_end":436435,"line_start":299,"line_end":299,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":436440,"byte_end":436449,"line_start":300,"line_end":300,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":436605,"byte_end":436612,"line_start":308,"line_end":308,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::read::reader::Reader::read_i8","value":"pub fn read_i8(&mut Self) -> Result<i8>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Read an i8.\n","sig":null,"attributes":[{"value":"/ Read an i8.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":436568,"byte_end":436583,"line_start":306,"line_end":306,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":436588,"byte_end":436597,"line_start":307,"line_end":307,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":436759,"byte_end":436767,"line_start":315,"line_end":315,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::read::reader::Reader::read_u16","value":"pub fn read_u16(&mut Self) -> Result<u16>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Read a u16.\n","sig":null,"attributes":[{"value":"/ Read a u16.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":436722,"byte_end":436737,"line_start":313,"line_end":313,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":436742,"byte_end":436751,"line_start":314,"line_end":314,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":436932,"byte_end":436940,"line_start":322,"line_end":322,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::read::reader::Reader::read_i16","value":"pub fn read_i16(&mut Self) -> Result<i16>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Read an i16.\n","sig":null,"attributes":[{"value":"/ Read an i16.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":436894,"byte_end":436910,"line_start":320,"line_end":320,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":436915,"byte_end":436924,"line_start":321,"line_end":321,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":437104,"byte_end":437112,"line_start":329,"line_end":329,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::read::reader::Reader::read_u32","value":"pub fn read_u32(&mut Self) -> Result<u32>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Read a u32.\n","sig":null,"attributes":[{"value":"/ Read a u32.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":437067,"byte_end":437082,"line_start":327,"line_end":327,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":437087,"byte_end":437096,"line_start":328,"line_end":328,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":437277,"byte_end":437285,"line_start":336,"line_end":336,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::read::reader::Reader::read_i32","value":"pub fn read_i32(&mut Self) -> Result<i32>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Read an i32.\n","sig":null,"attributes":[{"value":"/ Read an i32.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":437239,"byte_end":437255,"line_start":334,"line_end":334,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":437260,"byte_end":437269,"line_start":335,"line_end":335,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":437449,"byte_end":437457,"line_start":343,"line_end":343,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::read::reader::Reader::read_u64","value":"pub fn read_u64(&mut Self) -> Result<u64>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Read a u64.\n","sig":null,"attributes":[{"value":"/ Read a u64.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":437412,"byte_end":437427,"line_start":341,"line_end":341,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":437432,"byte_end":437441,"line_start":342,"line_end":342,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":437622,"byte_end":437630,"line_start":350,"line_end":350,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::read::reader::Reader::read_i64","value":"pub fn read_i64(&mut Self) -> Result<i64>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Read an i64.\n","sig":null,"attributes":[{"value":"/ Read an i64.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":437584,"byte_end":437600,"line_start":348,"line_end":348,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":437605,"byte_end":437614,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":437794,"byte_end":437802,"line_start":357,"line_end":357,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::read::reader::Reader::read_f32","value":"pub fn read_f32(&mut Self) -> Result<f32>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Read a f32.\n","sig":null,"attributes":[{"value":"/ Read a f32.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":437757,"byte_end":437772,"line_start":355,"line_end":355,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":437777,"byte_end":437786,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":437966,"byte_end":437974,"line_start":364,"line_end":364,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::read::reader::Reader::read_f64","value":"pub fn read_f64(&mut Self) -> Result<f64>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Read a f64.\n","sig":null,"attributes":[{"value":"/ Read a f64.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":437929,"byte_end":437944,"line_start":362,"line_end":362,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":437949,"byte_end":437958,"line_start":363,"line_end":363,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":438242,"byte_end":438251,"line_start":375,"line_end":375,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::read::reader::Reader::read_uint","value":"pub fn read_uint(&mut Self, usize) -> Result<u64>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Read an unsigned n-bytes integer u64.","sig":null,"attributes":[{"value":"/ Read an unsigned n-bytes integer u64.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":438101,"byte_end":438142,"line_start":369,"line_end":369,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":438147,"byte_end":438150,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":438155,"byte_end":438167,"line_start":371,"line_end":371,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":438172,"byte_end":438175,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ Panics when nbytes < 1 or nbytes > 8","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":438180,"byte_end":438220,"line_start":373,"line_end":373,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":438225,"byte_end":438234,"line_start":374,"line_end":374,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":438496,"byte_end":438522,"line_start":382,"line_end":382,"column_start":8,"column_end":34},"name":"read_null_terminated_slice","qualname":"::read::reader::Reader::read_null_terminated_slice","value":"pub fn read_null_terminated_slice(&mut Self) -> Result<Self>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Read a null-terminated slice, and return it (excluding the null).\n","sig":null,"attributes":[{"value":"/ Read a null-terminated slice, and return it (excluding the null).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":438419,"byte_end":438488,"line_start":381,"line_end":381,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":945},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":438746,"byte_end":438758,"line_start":390,"line_end":390,"column_start":8,"column_end":20},"name":"read_uleb128","qualname":"::read::reader::Reader::read_uleb128","value":"pub fn read_uleb128(&mut Self) -> Result<u64>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Read an unsigned LEB128 encoded integer.\n","sig":null,"attributes":[{"value":"/ Read an unsigned LEB128 encoded integer.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":438694,"byte_end":438738,"line_start":389,"line_end":389,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":438883,"byte_end":438899,"line_start":395,"line_end":395,"column_start":8,"column_end":24},"name":"read_uleb128_u16","qualname":"::read::reader::Reader::read_uleb128_u16","value":"pub fn read_uleb128_u16(&mut Self) -> Result<u16>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Read an unsigned LEB128 encoded u16.\n","sig":null,"attributes":[{"value":"/ Read an unsigned LEB128 encoded u16.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":438835,"byte_end":438875,"line_start":394,"line_end":394,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":439020,"byte_end":439032,"line_start":400,"line_end":400,"column_start":8,"column_end":20},"name":"read_sleb128","qualname":"::read::reader::Reader::read_sleb128","value":"pub fn read_sleb128(&mut Self) -> Result<i64>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Read a signed LEB128 encoded integer.\n","sig":null,"attributes":[{"value":"/ Read a signed LEB128 encoded integer.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":438971,"byte_end":439012,"line_start":399,"line_end":399,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":439283,"byte_end":439302,"line_start":408,"line_end":408,"column_start":8,"column_end":27},"name":"read_initial_length","qualname":"::read::reader::Reader::read_initial_length","value":"pub fn read_initial_length(&mut Self) -> Result<(Self::Offset, Format)>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Read an initial length field.","sig":null,"attributes":[{"value":"/ Read an initial length field.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":439107,"byte_end":439140,"line_start":404,"line_end":404,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":439145,"byte_end":439148,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ This field is encoded as either a 32-bit length or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":439153,"byte_end":439207,"line_start":406,"line_end":406,"column_start":5,"column_end":59}},{"value":"/ a 64-bit length, and the returned `Format` indicates which.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":439212,"byte_end":439275,"line_start":407,"line_end":407,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":439936,"byte_end":439948,"line_start":424,"line_end":424,"column_start":8,"column_end":20},"name":"read_address","qualname":"::read::reader::Reader::read_address","value":"pub fn read_address(&mut Self, u8) -> Result<u64>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Read an address-sized integer, and return it as a `u64`.\n","sig":null,"attributes":[{"value":"/ Read an address-sized integer, and return it as a `u64`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":439868,"byte_end":439928,"line_start":423,"line_end":423,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":440488,"byte_end":440497,"line_start":438,"line_end":438,"column_start":8,"column_end":17},"name":"read_word","qualname":"::read::reader::Reader::read_word","value":"pub fn read_word(&mut Self, Format) -> Result<Self::Offset>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Parse a word-sized integer according to the DWARF format.","sig":null,"attributes":[{"value":"/ Parse a word-sized integer according to the DWARF format.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":440297,"byte_end":440358,"line_start":434,"line_end":434,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":440363,"byte_end":440366,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ These are always used to encode section offsets or lengths,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":440371,"byte_end":440434,"line_start":436,"line_end":436,"column_start":5,"column_end":68}},{"value":"/ and so have a type of `Self::Offset`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":440439,"byte_end":440480,"line_start":437,"line_end":437,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":440842,"byte_end":440853,"line_start":447,"line_end":447,"column_start":8,"column_end":19},"name":"read_length","qualname":"::read::reader::Reader::read_length","value":"pub fn read_length(&mut Self, Format) -> Result<Self::Offset>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Parse a word-sized section length according to the DWARF format.\n","sig":null,"attributes":[{"value":"/ Parse a word-sized section length according to the DWARF format.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":440752,"byte_end":440820,"line_start":445,"line_end":445,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":440825,"byte_end":440834,"line_start":446,"line_end":446,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":441039,"byte_end":441050,"line_start":453,"line_end":453,"column_start":8,"column_end":19},"name":"read_offset","qualname":"::read::reader::Reader::read_offset","value":"pub fn read_offset(&mut Self, Format) -> Result<Self::Offset>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Parse a word-sized section offset according to the DWARF format.\n","sig":null,"attributes":[{"value":"/ Parse a word-sized section offset according to the DWARF format.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":440949,"byte_end":441017,"line_start":451,"line_end":451,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":441022,"byte_end":441031,"line_start":452,"line_end":452,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":955},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":441278,"byte_end":441295,"line_start":460,"line_end":460,"column_start":8,"column_end":25},"name":"read_sized_offset","qualname":"::read::reader::Reader::read_sized_offset","value":"pub fn read_sized_offset(&mut Self, u8) -> Result<Self::Offset>","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" Parse a section offset of the given size.","sig":null,"attributes":[{"value":"/ Parse a section offset of the given size.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":441146,"byte_end":441191,"line_start":457,"line_end":457,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":441196,"byte_end":441199,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ This is used for `DW_FORM_ref_addr` values in DWARF version 2.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":441204,"byte_end":441270,"line_start":459,"line_end":459,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":6382},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":442305,"byte_end":442316,"line_start":19,"line_end":19,"column_start":12,"column_end":23},"name":"DebugAbbrev","qualname":"::read::abbrev::DebugAbbrev","value":"DebugAbbrev {  }","parent":null,"children":[{"krate":0,"index":6384}],"decl_id":null,"docs":" The `DebugAbbrev` struct represents the abbreviations describing\n `DebuggingInformationEntry`s' attribute names and forms found in the\n `.debug_abbrev` section.\n","sig":null,"attributes":[{"value":"/ The `DebugAbbrev` struct represents the abbreviations describing","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":442084,"byte_end":442152,"line_start":15,"line_end":15,"column_start":1,"column_end":69}},{"value":"/ `DebuggingInformationEntry`s' attribute names and forms found in the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":442153,"byte_end":442225,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/ `.debug_abbrev` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":442226,"byte_end":442254,"line_start":17,"line_end":17,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":981},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443057,"byte_end":443060,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugAbbrev<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugAbbrev` instance from the data in the `.debug_abbrev`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugAbbrev` instance from the data in the `.debug_abbrev`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":442451,"byte_end":442530,"line_start":27,"line_end":27,"column_start":5,"column_end":84}},{"value":"/ section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":442535,"byte_end":442547,"line_start":28,"line_end":28,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":442552,"byte_end":442555,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_abbrev` section and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":442560,"byte_end":442637,"line_start":30,"line_end":30,"column_start":5,"column_end":82}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":442642,"byte_end":442712,"line_start":31,"line_end":31,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":442717,"byte_end":442756,"line_start":32,"line_end":32,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":442761,"byte_end":442764,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":442769,"byte_end":442776,"line_start":34,"line_end":34,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugAbbrev, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":442781,"byte_end":442824,"line_start":35,"line_end":35,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":442829,"byte_end":442832,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":442837,"byte_end":442878,"line_start":37,"line_end":37,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_abbrev_section_somehow = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":442883,"byte_end":442937,"line_start":38,"line_end":38,"column_start":5,"column_end":59}},{"value":"/ let debug_abbrev = DebugAbbrev::new(read_debug_abbrev_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":442942,"byte_end":443033,"line_start":39,"line_end":39,"column_start":5,"column_end":96}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443038,"byte_end":443045,"line_start":40,"line_end":40,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443421,"byte_end":443434,"line_start":51,"line_end":51,"column_start":12,"column_end":25},"name":"abbreviations","qualname":"<DebugAbbrev<R>>::abbreviations","value":"pub fn abbreviations(&Self, DebugAbbrevOffset<R::Offset>)\n-> Result<Abbreviations>","parent":null,"children":[],"decl_id":null,"docs":" Parse the abbreviations at the given `offset` within this\n `.debug_abbrev` section.","sig":null,"attributes":[{"value":"/ Parse the abbreviations at the given `offset` within this","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443236,"byte_end":443297,"line_start":47,"line_end":47,"column_start":5,"column_end":66}},{"value":"/ `.debug_abbrev` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443302,"byte_end":443330,"line_start":48,"line_end":48,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443335,"byte_end":443338,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ The `offset` should generally be retrieved from a unit header.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443343,"byte_end":443409,"line_start":50,"line_end":50,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":987},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":444355,"byte_end":444361,"line_start":77,"line_end":77,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugAbbrev<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugAbbrev<R> where F: FnMut(&'a T)\n-> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugAbbrev` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugAbbrev` section that references the data in `self`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443721,"byte_end":443791,"line_start":62,"line_end":62,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443796,"byte_end":443799,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443804,"byte_end":443869,"line_start":64,"line_end":64,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443874,"byte_end":443877,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443882,"byte_end":443902,"line_start":66,"line_end":66,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443907,"byte_end":443910,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443915,"byte_end":443933,"line_start":68,"line_end":68,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443938,"byte_end":443983,"line_start":69,"line_end":69,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443988,"byte_end":444072,"line_start":70,"line_end":70,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugAbbrev<Vec<u8>> = load_section();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":444077,"byte_end":444145,"line_start":71,"line_end":71,"column_start":5,"column_end":73}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":444150,"byte_end":444197,"line_start":72,"line_end":72,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":444202,"byte_end":444252,"line_start":73,"line_end":73,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":444257,"byte_end":444319,"line_start":74,"line_end":74,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":444324,"byte_end":444331,"line_start":75,"line_end":75,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":444336,"byte_end":444343,"line_start":76,"line_end":76,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":6396},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":445070,"byte_end":445083,"line_start":109,"line_end":109,"column_start":12,"column_end":25},"name":"Abbreviations","qualname":"::read::abbrev::Abbreviations","value":"Abbreviations {  }","parent":null,"children":[{"krate":0,"index":6397},{"krate":0,"index":6398}],"decl_id":null,"docs":" A set of type abbreviations.","sig":null,"attributes":[{"value":"/ A set of type abbreviations.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":444857,"byte_end":444889,"line_start":103,"line_end":103,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":444890,"byte_end":444893,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ Construct an `Abbreviations` instance with the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":444894,"byte_end":444944,"line_start":105,"line_end":105,"column_start":1,"column_end":51}},{"value":"/ [`abbreviations()`](struct.UnitHeader.html#method.abbreviations)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":444945,"byte_end":445013,"line_start":106,"line_end":106,"column_start":1,"column_end":69}},{"value":"/ method.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":445014,"byte_end":445025,"line_start":107,"line_end":107,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":446845,"byte_end":446848,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"get","qualname":"<Abbreviations>::get","value":"pub fn get(&Self, u64) -> Option<&Abbreviation>","parent":null,"children":[],"decl_id":null,"docs":" Get the abbreviation associated with the given code.\n","sig":null,"attributes":[{"value":"/ Get the abbreviation associated with the given code.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":446763,"byte_end":446819,"line_start":155,"line_end":155,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":446824,"byte_end":446833,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":6405},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":447765,"byte_end":447777,"line_start":185,"line_end":185,"column_start":12,"column_end":24},"name":"Abbreviation","qualname":"::read::abbrev::Abbreviation","value":"Abbreviation {  }","parent":null,"children":[{"krate":0,"index":6406},{"krate":0,"index":6407},{"krate":0,"index":6408},{"krate":0,"index":6409}],"decl_id":null,"docs":" An abbreviation describes the shape of a `DebuggingInformationEntry`'s type:\n its code, tag type, whether it has children, and its set of attributes.\n","sig":null,"attributes":[{"value":"/ An abbreviation describes the shape of a `DebuggingInformationEntry`'s type:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":447558,"byte_end":447638,"line_start":182,"line_end":182,"column_start":1,"column_end":81}},{"value":"/ its code, tag type, whether it has children, and its set of attributes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":447639,"byte_end":447714,"line_start":183,"line_end":183,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":448413,"byte_end":448417,"line_start":215,"line_end":215,"column_start":12,"column_end":16},"name":"code","qualname":"<Abbreviation>::code","value":"pub fn code(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get this abbreviation's code.\n","sig":null,"attributes":[{"value":"/ Get this abbreviation's code.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":448354,"byte_end":448387,"line_start":213,"line_end":213,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":448392,"byte_end":448401,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1007},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":448521,"byte_end":448524,"line_start":221,"line_end":221,"column_start":12,"column_end":15},"name":"tag","qualname":"<Abbreviation>::tag","value":"pub fn tag(&Self) -> constants::DwTag","parent":null,"children":[],"decl_id":null,"docs":" Get this abbreviation's tag.\n","sig":null,"attributes":[{"value":"/ Get this abbreviation's tag.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":448463,"byte_end":448495,"line_start":219,"line_end":219,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":448500,"byte_end":448509,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":448682,"byte_end":448694,"line_start":227,"line_end":227,"column_start":12,"column_end":24},"name":"has_children","qualname":"<Abbreviation>::has_children","value":"pub fn has_children(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if this abbreviation's type has children, false otherwise.\n","sig":null,"attributes":[{"value":"/ Return true if this abbreviation's type has children, false otherwise.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":448582,"byte_end":448656,"line_start":225,"line_end":225,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":448661,"byte_end":448670,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1009},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":448844,"byte_end":448854,"line_start":233,"line_end":233,"column_start":12,"column_end":22},"name":"attributes","qualname":"<Abbreviation>::attributes","value":"pub fn attributes(&Self) -> &[AttributeSpecification]","parent":null,"children":[],"decl_id":null,"docs":" Get this abbreviation's attributes.\n","sig":null,"attributes":[{"value":"/ Get this abbreviation's attributes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":448779,"byte_end":448818,"line_start":231,"line_end":231,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":448823,"byte_end":448832,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":6431},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":452974,"byte_end":452996,"line_start":376,"line_end":376,"column_start":12,"column_end":34},"name":"AttributeSpecification","qualname":"::read::abbrev::AttributeSpecification","value":"AttributeSpecification {  }","parent":null,"children":[{"krate":0,"index":6432},{"krate":0,"index":6433},{"krate":0,"index":6434}],"decl_id":null,"docs":" The description of an attribute in an abbreviated type. It is a pair of name\n and form.\n","sig":null,"attributes":[{"value":"/ The description of an attribute in an abbreviated type. It is a pair of name","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":452823,"byte_end":452903,"line_start":373,"line_end":373,"column_start":1,"column_end":81}},{"value":"/ and form.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":452904,"byte_end":452917,"line_start":374,"line_end":374,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1037},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":453256,"byte_end":453259,"line_start":386,"line_end":386,"column_start":12,"column_end":15},"name":"new","qualname":"<AttributeSpecification>::new","value":"pub fn new(constants::DwAt, constants::DwForm, Option<i64>)\n-> AttributeSpecification","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `AttributeSpecification` from the given name and form\n and implicit const value.\n","sig":null,"attributes":[{"value":"/ Construct a new `AttributeSpecification` from the given name and form","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":453123,"byte_end":453196,"line_start":383,"line_end":383,"column_start":5,"column_end":78}},{"value":"/ and implicit const value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":453201,"byte_end":453230,"line_start":384,"line_end":384,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":453235,"byte_end":453244,"line_start":385,"line_end":385,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1038},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":453837,"byte_end":453841,"line_start":404,"line_end":404,"column_start":12,"column_end":16},"name":"name","qualname":"<AttributeSpecification>::name","value":"pub fn name(&Self) -> constants::DwAt","parent":null,"children":[],"decl_id":null,"docs":" Get the attribute's name.\n","sig":null,"attributes":[{"value":"/ Get the attribute's name.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":453782,"byte_end":453811,"line_start":402,"line_end":402,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":453816,"byte_end":453825,"line_start":403,"line_end":403,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1039},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":453954,"byte_end":453958,"line_start":410,"line_end":410,"column_start":12,"column_end":16},"name":"form","qualname":"<AttributeSpecification>::form","value":"pub fn form(&Self) -> constants::DwForm","parent":null,"children":[],"decl_id":null,"docs":" Get the attribute's form.\n","sig":null,"attributes":[{"value":"/ Get the attribute's form.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":453899,"byte_end":453928,"line_start":408,"line_end":408,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":453933,"byte_end":453942,"line_start":409,"line_end":409,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1040},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":454089,"byte_end":454109,"line_start":416,"line_end":416,"column_start":12,"column_end":32},"name":"implicit_const_value","qualname":"<AttributeSpecification>::implicit_const_value","value":"pub fn implicit_const_value(&Self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Get the attribute's implicit const value.\n","sig":null,"attributes":[{"value":"/ Get the attribute's implicit const value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":454018,"byte_end":454063,"line_start":414,"line_end":414,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":454068,"byte_end":454077,"line_start":415,"line_end":415,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1041},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":454511,"byte_end":454515,"line_start":428,"line_end":428,"column_start":12,"column_end":16},"name":"size","qualname":"<AttributeSpecification>::size","value":"pub fn size<R: Reader>(&Self, &UnitHeader<R>) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return the size of the attribute, in bytes.","sig":null,"attributes":[{"value":"/ Return the size of the attribute, in bytes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":454293,"byte_end":454340,"line_start":424,"line_end":424,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":454345,"byte_end":454348,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ Note that because some attributes are variably sized, the size cannot","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":454353,"byte_end":454426,"line_start":426,"line_end":426,"column_start":5,"column_end":78}},{"value":"/ always be known without parsing, in which case we return `None`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":454431,"byte_end":454499,"line_start":427,"line_end":427,"column_start":5,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":6470},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":474262,"byte_end":474273,"line_start":21,"line_end":21,"column_start":12,"column_end":23},"name":"ArangeEntry","qualname":"::read::aranges::ArangeEntry","value":"ArangeEntry {  }","parent":null,"children":[{"krate":0,"index":6472},{"krate":0,"index":6473},{"krate":0,"index":6474},{"krate":0,"index":6475}],"decl_id":null,"docs":" A single parsed arange.\n","sig":null,"attributes":[{"value":"/ A single parsed arange.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":474184,"byte_end":474211,"line_start":19,"line_end":19,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":474509,"byte_end":474516,"line_start":31,"line_end":31,"column_start":12,"column_end":19},"name":"segment","qualname":"<ArangeEntry<T>>::segment","value":"pub fn segment(&Self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Return the segment selector of this arange.\n","sig":null,"attributes":[{"value":"/ Return the segment selector of this arange.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":474436,"byte_end":474483,"line_start":29,"line_end":29,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":474488,"byte_end":474497,"line_start":30,"line_end":30,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1071},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":474647,"byte_end":474654,"line_start":37,"line_end":37,"column_start":12,"column_end":19},"name":"address","qualname":"<ArangeEntry<T>>::address","value":"pub fn address(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Return the beginning address of this arange.\n","sig":null,"attributes":[{"value":"/ Return the beginning address of this arange.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":474573,"byte_end":474621,"line_start":35,"line_end":35,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":474626,"byte_end":474635,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":474766,"byte_end":474772,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"length","qualname":"<ArangeEntry<T>>::length","value":"pub fn length(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Return the length of this arange.\n","sig":null,"attributes":[{"value":"/ Return the length of this arange.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":474703,"byte_end":474740,"line_start":41,"line_end":41,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":474745,"byte_end":474754,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1073},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":474913,"byte_end":474930,"line_start":49,"line_end":49,"column_start":12,"column_end":29},"name":"debug_info_offset","qualname":"<ArangeEntry<T>>::debug_info_offset","value":"pub fn debug_info_offset(&Self) -> DebugInfoOffset<T>","parent":null,"children":[],"decl_id":null,"docs":" Return the offset into the .debug_info section for this arange.\n","sig":null,"attributes":[{"value":"/ Return the offset into the .debug_info section for this arange.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":474820,"byte_end":474887,"line_start":47,"line_end":47,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":474892,"byte_end":474901,"line_start":48,"line_end":48,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":6502},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479106,"byte_end":479118,"line_start":173,"line_end":173,"column_start":12,"column_end":24},"name":"DebugAranges","qualname":"::read::aranges::DebugAranges","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `DebugAranges` struct represents the DWARF address range information\n found in the `.debug_aranges` section.\n","sig":null,"attributes":[{"value":"/ The `DebugAranges` struct represents the DWARF address range information","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":478951,"byte_end":479027,"line_start":170,"line_end":170,"column_start":1,"column_end":77}},{"value":"/ found in the `.debug_aranges` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479028,"byte_end":479070,"line_start":171,"line_end":171,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479851,"byte_end":479854,"line_start":194,"line_end":194,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugAranges<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugAranges` instance from the data in the `.debug_aranges`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugAranges` instance from the data in the `.debug_aranges`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479263,"byte_end":479344,"line_start":179,"line_end":179,"column_start":5,"column_end":86}},{"value":"/ section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479349,"byte_end":479361,"line_start":180,"line_end":180,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479366,"byte_end":479369,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_aranges` section and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479374,"byte_end":479452,"line_start":182,"line_end":182,"column_start":5,"column_end":83}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479457,"byte_end":479527,"line_start":183,"line_end":183,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479532,"byte_end":479571,"line_start":184,"line_end":184,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479576,"byte_end":479579,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479584,"byte_end":479591,"line_start":186,"line_end":186,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugAranges, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479596,"byte_end":479640,"line_start":187,"line_end":187,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479645,"byte_end":479648,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479653,"byte_end":479672,"line_start":189,"line_end":189,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_aranges_section = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479677,"byte_end":479724,"line_start":190,"line_end":190,"column_start":5,"column_end":52}},{"value":"/ let debug_aranges =","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479729,"byte_end":479752,"line_start":191,"line_end":191,"column_start":5,"column_end":28}},{"value":"/     DebugAranges::new(read_debug_aranges_section(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479757,"byte_end":479827,"line_start":192,"line_end":192,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479832,"byte_end":479839,"line_start":193,"line_end":193,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480585,"byte_end":480590,"line_start":214,"line_end":214,"column_start":12,"column_end":17},"name":"items","qualname":"<DebugAranges<R>>::items","value":"pub fn items(&Self) -> ArangeEntryIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the aranges in the `.debug_aranges` section.","sig":null,"attributes":[{"value":"/ Iterate the aranges in the `.debug_aranges` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480033,"byte_end":480089,"line_start":200,"line_end":200,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480094,"byte_end":480097,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480102,"byte_end":480109,"line_start":202,"line_end":202,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugAranges, EndianSlice, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480114,"byte_end":480171,"line_start":203,"line_end":203,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480176,"byte_end":480179,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480184,"byte_end":480203,"line_start":205,"line_end":205,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_aranges_section = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480208,"byte_end":480255,"line_start":206,"line_end":206,"column_start":5,"column_end":52}},{"value":"/ let debug_aranges = DebugAranges::new(read_debug_aranges_section(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480260,"byte_end":480346,"line_start":207,"line_end":207,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480351,"byte_end":480354,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ let mut iter = debug_aranges.items();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480359,"byte_end":480400,"line_start":209,"line_end":209,"column_start":5,"column_end":46}},{"value":"/ while let Some(arange) = iter.next().unwrap() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480405,"byte_end":480456,"line_start":210,"line_end":210,"column_start":5,"column_end":56}},{"value":"/     println!(\"arange starts at {}, has length {}\", arange.address(), arange.length());","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480461,"byte_end":480551,"line_start":211,"line_end":211,"column_start":5,"column_end":95}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480556,"byte_end":480561,"line_start":212,"line_end":212,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480566,"byte_end":480573,"line_start":213,"line_end":213,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":6512},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":481208,"byte_end":481223,"line_start":240,"line_end":240,"column_start":12,"column_end":27},"name":"ArangeEntryIter","qualname":"::read::aranges::ArangeEntryIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the aranges from a `.debug_aranges` section.","sig":null,"attributes":[{"value":"/ An iterator over the aranges from a `.debug_aranges` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":481014,"byte_end":481079,"line_start":235,"line_end":235,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":481080,"byte_end":481083,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ Can be [used with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":481084,"byte_end":481105,"line_start":237,"line_end":237,"column_start":1,"column_end":22}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":481106,"byte_end":481172,"line_start":238,"line_end":238,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1103},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":481709,"byte_end":481713,"line_start":249,"line_end":249,"column_start":12,"column_end":16},"name":"next","qualname":"<ArangeEntryIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<ArangeEntry<R::Offset>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator and return the next arange.","sig":null,"attributes":[{"value":"/ Advance the iterator and return the next arange.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":481315,"byte_end":481367,"line_start":243,"line_end":243,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":481372,"byte_end":481375,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Returns the newly parsed arange as `Ok(Some(arange))`. Returns `Ok(None)`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":481380,"byte_end":481457,"line_start":245,"line_end":245,"column_start":5,"column_end":82}},{"value":"/ when iteration is complete and all aranges have already been parsed and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":481462,"byte_end":481537,"line_start":246,"line_end":246,"column_start":5,"column_end":80}},{"value":"/ yielded. If an error occurs while parsing the next arange, then this error","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":481542,"byte_end":481620,"line_start":247,"line_end":247,"column_start":5,"column_end":83}},{"value":"/ is returned as `Err(e)`, and all subsequent calls return `Ok(None)`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":481625,"byte_end":481697,"line_start":248,"line_end":248,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":6522},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":490149,"byte_end":490158,"line_start":17,"line_end":17,"column_start":12,"column_end":21},"name":"DebugLine","qualname":"::read::line::DebugLine","value":"DebugLine {  }","parent":null,"children":[{"krate":0,"index":6524}],"decl_id":null,"docs":" The `DebugLine` struct contains the source location to instruction mapping\n found in the `.debug_line` section.\n","sig":null,"attributes":[{"value":"/ The `DebugLine` struct contains the source location to instruction mapping","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":489980,"byte_end":490058,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ found in the `.debug_line` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":490059,"byte_end":490098,"line_start":15,"line_end":15,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1137},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":490879,"byte_end":490882,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugLine<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugLine` instance from the data in the `.debug_line`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugLine` instance from the data in the `.debug_line`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":490289,"byte_end":490364,"line_start":25,"line_end":25,"column_start":5,"column_end":80}},{"value":"/ section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":490369,"byte_end":490381,"line_start":26,"line_end":26,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":490386,"byte_end":490389,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_line` section and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":490394,"byte_end":490469,"line_start":28,"line_end":28,"column_start":5,"column_end":80}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":490474,"byte_end":490544,"line_start":29,"line_end":29,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":490549,"byte_end":490588,"line_start":30,"line_end":30,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":490593,"byte_end":490596,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":490601,"byte_end":490608,"line_start":32,"line_end":32,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugLine, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":490613,"byte_end":490654,"line_start":33,"line_end":33,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":490659,"byte_end":490662,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":490667,"byte_end":490708,"line_start":35,"line_end":35,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_line_section_somehow = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":490713,"byte_end":490765,"line_start":36,"line_end":36,"column_start":5,"column_end":57}},{"value":"/ let debug_line = DebugLine::new(read_debug_line_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":490770,"byte_end":490855,"line_start":37,"line_end":37,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":490860,"byte_end":490867,"line_start":38,"line_end":38,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1140},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":492204,"byte_end":492211,"line_start":69,"line_end":69,"column_start":12,"column_end":19},"name":"program","qualname":"<DebugLine<R>>::program","value":"pub fn program(&Self, DebugLineOffset<R::Offset>, u8, Option<R>, Option<R>)\n-> Result<IncompleteLineProgram<R>>","parent":null,"children":[],"decl_id":null,"docs":" Parse the line number program whose header is at the given `offset` in the\n `.debug_line` section.","sig":null,"attributes":[{"value":"/ Parse the line number program whose header is at the given `offset` in the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491052,"byte_end":491130,"line_start":45,"line_end":45,"column_start":5,"column_end":83}},{"value":"/ `.debug_line` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491135,"byte_end":491161,"line_start":46,"line_end":46,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491166,"byte_end":491169,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ The `address_size` must match the compilation unit that the lines apply to.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491174,"byte_end":491253,"line_start":48,"line_end":48,"column_start":5,"column_end":84}},{"value":"/ The `comp_dir` should be from the `DW_AT_comp_dir` attribute of the compilation","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491258,"byte_end":491341,"line_start":49,"line_end":49,"column_start":5,"column_end":88}},{"value":"/ unit. The `comp_name` should be from the `DW_AT_name` attribute of the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491346,"byte_end":491420,"line_start":50,"line_end":50,"column_start":5,"column_end":79}},{"value":"/ compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491425,"byte_end":491446,"line_start":51,"line_end":51,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491451,"byte_end":491454,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491459,"byte_end":491477,"line_start":53,"line_end":53,"column_start":5,"column_end":23}},{"value":"/ use gimli::{DebugLine, DebugLineOffset, IncompleteLineProgram, EndianSlice, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491482,"byte_end":491576,"line_start":54,"line_end":54,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491581,"byte_end":491584,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491589,"byte_end":491608,"line_start":56,"line_end":56,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_line_section_somehow = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491613,"byte_end":491665,"line_start":57,"line_end":57,"column_start":5,"column_end":57}},{"value":"/ let debug_line = DebugLine::new(read_debug_line_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491670,"byte_end":491755,"line_start":58,"line_end":58,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491760,"byte_end":491763,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ // In a real example, we'd grab the offset via a compilation unit","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491768,"byte_end":491837,"line_start":60,"line_end":60,"column_start":5,"column_end":74}},{"value":"/ // entry's `DW_AT_stmt_list` attribute, and the address size from that","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491842,"byte_end":491916,"line_start":61,"line_end":61,"column_start":5,"column_end":79}},{"value":"/ // unit directly.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491921,"byte_end":491942,"line_start":62,"line_end":62,"column_start":5,"column_end":26}},{"value":"/ let offset = DebugLineOffset(0);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491947,"byte_end":491983,"line_start":63,"line_end":63,"column_start":5,"column_end":41}},{"value":"/ let address_size = 8;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491988,"byte_end":492013,"line_start":64,"line_end":64,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":492018,"byte_end":492021,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ let program = debug_line.program(offset, address_size, None, None)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":492026,"byte_end":492096,"line_start":66,"line_end":66,"column_start":5,"column_end":75}},{"value":"/     .expect(\"should have found a header at that offset, and parsed it OK\");","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":492101,"byte_end":492180,"line_start":67,"line_end":67,"column_start":5,"column_end":84}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":492185,"byte_end":492192,"line_start":68,"line_end":68,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1143},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":493330,"byte_end":493336,"line_start":100,"line_end":100,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugLine<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugLine<R> where F: FnMut(&'a T) ->\nR","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugLine` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugLine` section that references the data in `self`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":492700,"byte_end":492768,"line_start":85,"line_end":85,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":492773,"byte_end":492776,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":492781,"byte_end":492846,"line_start":87,"line_end":87,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":492851,"byte_end":492854,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":492859,"byte_end":492879,"line_start":89,"line_end":89,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":492884,"byte_end":492887,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":492892,"byte_end":492910,"line_start":91,"line_end":91,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":492915,"byte_end":492960,"line_start":92,"line_end":92,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":492965,"byte_end":493049,"line_start":93,"line_end":93,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugLine<Vec<u8>> = load_section();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":493054,"byte_end":493120,"line_start":94,"line_end":94,"column_start":5,"column_end":71}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":493125,"byte_end":493172,"line_start":95,"line_end":95,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":493177,"byte_end":493227,"line_start":96,"line_end":96,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":493232,"byte_end":493294,"line_start":97,"line_end":97,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":493299,"byte_end":493306,"line_start":98,"line_end":98,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":493311,"byte_end":493318,"line_start":99,"line_end":99,"column_start":5,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":1154},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":493966,"byte_end":493983,"line_start":126,"line_end":126,"column_start":10,"column_end":27},"name":"LineNumberProgram","qualname":"::read::line::LineNumberProgram","value":"LineProgram<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `LineNumberProgram` has been renamed to `LineProgram`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `LineNumberProgram` has been renamed to `LineProgram`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":493793,"byte_end":493863,"line_start":124,"line_end":124,"column_start":1,"column_end":71}},{"value":"deprecated(note =\n             \"LineNumberProgram has been renamed to LineProgram, use that instead.\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":493864,"byte_end":493956,"line_start":125,"line_end":125,"column_start":1,"column_end":93}}]},{"kind":"Trait","id":{"krate":0,"index":1157},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":494221,"byte_end":494232,"line_start":131,"line_end":131,"column_start":11,"column_end":22},"name":"LineProgram","qualname":"::read::line::LineProgram","value":"LineProgram<R, Offset = <R as Reader>::Offset>","parent":null,"children":[{"krate":0,"index":1160},{"krate":0,"index":1161}],"decl_id":null,"docs":" A `LineProgram` provides access to a `LineProgramHeader` and\n a way to add files to the files table if necessary. Gimli consumers should\n never need to use or see this trait.\n","sig":null,"attributes":[{"value":"/ A `LineProgram` provides access to a `LineProgramHeader` and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":494026,"byte_end":494090,"line_start":128,"line_end":128,"column_start":1,"column_end":65}},{"value":"/ a way to add files to the files table if necessary. Gimli consumers should","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":494091,"byte_end":494169,"line_start":129,"line_end":129,"column_start":1,"column_end":79}},{"value":"/ never need to use or see this trait.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":494170,"byte_end":494210,"line_start":130,"line_end":130,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":494398,"byte_end":494404,"line_start":137,"line_end":137,"column_start":8,"column_end":14},"name":"header","qualname":"::read::line::LineProgram::header","value":"pub fn header(&Self) -> &LineProgramHeader<R, Offset>","parent":{"krate":0,"index":1157},"children":[],"decl_id":null,"docs":" Get a reference to the held `LineProgramHeader`.\n","sig":null,"attributes":[{"value":"/ Get a reference to the held `LineProgramHeader`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":494338,"byte_end":494390,"line_start":136,"line_end":136,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":494504,"byte_end":494512,"line_start":139,"line_end":139,"column_start":8,"column_end":16},"name":"add_file","qualname":"::read::line::LineProgram::add_file","value":"pub fn add_file(&mut Self, FileEntry<R, Offset>)","parent":{"krate":0,"index":1157},"children":[],"decl_id":null,"docs":" Add a file to the file table if necessary.\n","sig":null,"attributes":[{"value":"/ Add a file to the file table if necessary.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":494450,"byte_end":494496,"line_start":138,"line_end":138,"column_start":5,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":1173},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":495405,"byte_end":495417,"line_start":170,"line_end":170,"column_start":10,"column_end":22},"name":"StateMachine","qualname":"::read::line::StateMachine","value":"LineRows<R, Program, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `StateMachine` has been renamed to `LineRows`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `StateMachine` has been renamed to `LineRows`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":495248,"byte_end":495310,"line_start":168,"line_end":168,"column_start":1,"column_end":63}},{"value":"deprecated(note =\n             \"StateMachine has been renamed to LineRows, use that instead.\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":495311,"byte_end":495395,"line_start":169,"line_end":169,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":6536},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":495798,"byte_end":495806,"line_start":178,"line_end":178,"column_start":12,"column_end":20},"name":"LineRows","qualname":"::read::line::LineRows","value":"LineRows {  }","parent":null,"children":[{"krate":0,"index":6540},{"krate":0,"index":6541},{"krate":0,"index":6542}],"decl_id":null,"docs":" Executes a `LineProgram` to iterate over the rows in the matrix of line number information.","sig":null,"attributes":[{"value":"/ Executes a `LineProgram` to iterate over the rows in the matrix of line number information.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":495471,"byte_end":495566,"line_start":172,"line_end":172,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":495567,"byte_end":495570,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ \"The hypothetical machine used by a consumer of the line number information","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":495571,"byte_end":495650,"line_start":174,"line_end":174,"column_start":1,"column_end":80}},{"value":"/ to expand the byte-coded instruction stream into a matrix of line number","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":495651,"byte_end":495727,"line_start":175,"line_end":175,"column_start":1,"column_end":77}},{"value":"/ information.\" -- Section 6.2.1","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":495728,"byte_end":495762,"line_start":176,"line_end":176,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":497328,"byte_end":497334,"line_start":230,"line_end":230,"column_start":12,"column_end":18},"name":"header","qualname":"<LineRows<R, Program, Offset>>::header","value":"pub fn header(&Self) -> &LineProgramHeader<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the header for this state machine's line number\n program.\n","sig":null,"attributes":[{"value":"/ Get a reference to the header for this state machine's line number","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":497215,"byte_end":497285,"line_start":227,"line_end":227,"column_start":5,"column_end":75}},{"value":"/ program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":497290,"byte_end":497302,"line_start":228,"line_end":228,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":497307,"byte_end":497316,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":497960,"byte_end":497968,"line_start":244,"line_end":244,"column_start":12,"column_end":20},"name":"next_row","qualname":"<LineRows<R, Program, Offset>>::next_row","value":"pub fn next_row(&mut Self)\n-> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>>","parent":null,"children":[],"decl_id":null,"docs":" Parse and execute the next instructions in the line number program until\n another row in the line number matrix is computed.","sig":null,"attributes":[{"value":"/ Parse and execute the next instructions in the line number program until","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":497418,"byte_end":497494,"line_start":234,"line_end":234,"column_start":5,"column_end":81}},{"value":"/ another row in the line number matrix is computed.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":497499,"byte_end":497553,"line_start":235,"line_end":235,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":497558,"byte_end":497561,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ The freshly computed row is returned as `Ok(Some((header, row)))`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":497566,"byte_end":497636,"line_start":237,"line_end":237,"column_start":5,"column_end":75}},{"value":"/ If the matrix is complete, and there are no more new rows in the line","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":497641,"byte_end":497714,"line_start":238,"line_end":238,"column_start":5,"column_end":78}},{"value":"/ number matrix, then `Ok(None)` is returned. If there was an error parsing","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":497719,"byte_end":497796,"line_start":239,"line_end":239,"column_start":5,"column_end":82}},{"value":"/ an instruction, then `Err(e)` is returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":497801,"byte_end":497847,"line_start":240,"line_end":240,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":497852,"byte_end":497855,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ Unfortunately, the references mean that this cannot be a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":497860,"byte_end":497920,"line_start":242,"line_end":242,"column_start":5,"column_end":65}},{"value":"/ `FallibleIterator`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":497925,"byte_end":497948,"line_start":243,"line_end":243,"column_start":5,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":1193},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":498964,"byte_end":498970,"line_start":267,"line_end":267,"column_start":10,"column_end":16},"name":"Opcode","qualname":"::read::line::Opcode","value":"LineInstruction<R, <R as Reader>::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `Opcode` has been renamed to `LineInstruction`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `Opcode` has been renamed to `LineInstruction`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":498805,"byte_end":498868,"line_start":265,"line_end":265,"column_start":1,"column_end":64}},{"value":"deprecated(note =\n             \"Opcode has been renamed to LineInstruction, use that instead.\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":498869,"byte_end":498954,"line_start":266,"line_end":266,"column_start":1,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6556},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":500172,"byte_end":500179,"line_start":299,"line_end":299,"column_start":5,"column_end":12},"name":"Special","qualname":"::read::line::LineInstruction::Special","value":"LineInstruction::Special(u8)","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" > ### 6.2.5.1 Special Opcodes\n >\n > Each ubyte special opcode has the following effect on the state machine:\n >\n >   1. Add a signed integer to the line register.\n >\n >   2. Modify the operation pointer by incrementing the address and\n >   op_index registers as described below.\n >\n >   3. Append a row to the matrix using the current values of the state\n >   machine registers.\n >\n >   4. Set the basic_block register to “false.”\n >\n >   5. Set the prologue_end register to “false.”\n >\n >   6. Set the epilogue_begin register to “false.”\n >\n >   7. Set the discriminator register to 0.\n >\n > All of the special opcodes do those same seven things; they differ from\n > one another only in what values they add to the line, address and\n > op_index registers.\n","sig":null,"attributes":[{"value":"/ > ### 6.2.5.1 Special Opcodes","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499241,"byte_end":499274,"line_start":276,"line_end":276,"column_start":5,"column_end":38}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499279,"byte_end":499284,"line_start":277,"line_end":277,"column_start":5,"column_end":10}},{"value":"/ > Each ubyte special opcode has the following effect on the state machine:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499289,"byte_end":499367,"line_start":278,"line_end":278,"column_start":5,"column_end":83}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499372,"byte_end":499377,"line_start":279,"line_end":279,"column_start":5,"column_end":10}},{"value":"/ >   1. Add a signed integer to the line register.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499382,"byte_end":499435,"line_start":280,"line_end":280,"column_start":5,"column_end":58}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499440,"byte_end":499445,"line_start":281,"line_end":281,"column_start":5,"column_end":10}},{"value":"/ >   2. Modify the operation pointer by incrementing the address and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499450,"byte_end":499521,"line_start":282,"line_end":282,"column_start":5,"column_end":76}},{"value":"/ >   op_index registers as described below.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499526,"byte_end":499572,"line_start":283,"line_end":283,"column_start":5,"column_end":51}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499577,"byte_end":499582,"line_start":284,"line_end":284,"column_start":5,"column_end":10}},{"value":"/ >   3. Append a row to the matrix using the current values of the state","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499587,"byte_end":499662,"line_start":285,"line_end":285,"column_start":5,"column_end":80}},{"value":"/ >   machine registers.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499667,"byte_end":499693,"line_start":286,"line_end":286,"column_start":5,"column_end":31}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499698,"byte_end":499703,"line_start":287,"line_end":287,"column_start":5,"column_end":10}},{"value":"/ >   4. Set the basic_block register to “false.”","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499708,"byte_end":499763,"line_start":288,"line_end":288,"column_start":5,"column_end":56}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499768,"byte_end":499773,"line_start":289,"line_end":289,"column_start":5,"column_end":10}},{"value":"/ >   5. Set the prologue_end register to “false.”","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499778,"byte_end":499834,"line_start":290,"line_end":290,"column_start":5,"column_end":57}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499839,"byte_end":499844,"line_start":291,"line_end":291,"column_start":5,"column_end":10}},{"value":"/ >   6. Set the epilogue_begin register to “false.”","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499849,"byte_end":499907,"line_start":292,"line_end":292,"column_start":5,"column_end":59}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499912,"byte_end":499917,"line_start":293,"line_end":293,"column_start":5,"column_end":10}},{"value":"/ >   7. Set the discriminator register to 0.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499922,"byte_end":499969,"line_start":294,"line_end":294,"column_start":5,"column_end":52}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499974,"byte_end":499979,"line_start":295,"line_end":295,"column_start":5,"column_end":10}},{"value":"/ > All of the special opcodes do those same seven things; they differ from","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499984,"byte_end":500061,"line_start":296,"line_end":296,"column_start":5,"column_end":82}},{"value":"/ > one another only in what values they add to the line, address and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":500066,"byte_end":500137,"line_start":297,"line_end":297,"column_start":5,"column_end":76}},{"value":"/ > op_index registers.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":500142,"byte_end":500167,"line_start":298,"line_end":298,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6559},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":500465,"byte_end":500469,"line_start":305,"line_end":305,"column_start":5,"column_end":9},"name":"Copy","qualname":"::read::line::LineInstruction::Copy","value":"LineInstruction::Copy","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" \"[`LineInstruction::Copy`] appends a row to the matrix using the current\n values of the state machine registers. Then it sets the discriminator\n register to 0, and sets the basic_block, prologue_end and epilogue_begin\n registers to “false.”\"\n","sig":null,"attributes":[{"value":"/ \"[`LineInstruction::Copy`] appends a row to the matrix using the current","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":500190,"byte_end":500266,"line_start":301,"line_end":301,"column_start":5,"column_end":81}},{"value":"/ values of the state machine registers. Then it sets the discriminator","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":500271,"byte_end":500344,"line_start":302,"line_end":302,"column_start":5,"column_end":78}},{"value":"/ register to 0, and sets the basic_block, prologue_end and epilogue_begin","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":500349,"byte_end":500425,"line_start":303,"line_end":303,"column_start":5,"column_end":81}},{"value":"/ registers to “false.”\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":500430,"byte_end":500460,"line_start":304,"line_end":304,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6561},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":500684,"byte_end":500693,"line_start":310,"line_end":310,"column_start":5,"column_end":14},"name":"AdvancePc","qualname":"::read::line::LineInstruction::AdvancePc","value":"LineInstruction::AdvancePc(u64)","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" \"The DW_LNS_advance_pc opcode takes a single unsigned LEB128 operand as\n the operation advance and modifies the address and op_index registers\n [the same as `LineInstruction::Special`]\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_advance_pc opcode takes a single unsigned LEB128 operand as","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":500476,"byte_end":500551,"line_start":307,"line_end":307,"column_start":5,"column_end":80}},{"value":"/ the operation advance and modifies the address and op_index registers","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":500556,"byte_end":500629,"line_start":308,"line_end":308,"column_start":5,"column_end":78}},{"value":"/ [the same as `LineInstruction::Special`]\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":500634,"byte_end":500679,"line_start":309,"line_end":309,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6564},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":500854,"byte_end":500865,"line_start":314,"line_end":314,"column_start":5,"column_end":16},"name":"AdvanceLine","qualname":"::read::line::LineInstruction::AdvanceLine","value":"LineInstruction::AdvanceLine(i64)","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" \"The DW_LNS_advance_line opcode takes a single signed LEB128 operand and\n adds that value to the line register of the state machine.\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_advance_line opcode takes a single signed LEB128 operand and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":500705,"byte_end":500781,"line_start":312,"line_end":312,"column_start":5,"column_end":81}},{"value":"/ adds that value to the line register of the state machine.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":500786,"byte_end":500849,"line_start":313,"line_end":313,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6567},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":501018,"byte_end":501025,"line_start":318,"line_end":318,"column_start":5,"column_end":12},"name":"SetFile","qualname":"::read::line::LineInstruction::SetFile","value":"LineInstruction::SetFile(u64)","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" \"The DW_LNS_set_file opcode takes a single unsigned LEB128 operand and\n stores it in the file register of the state machine.\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_set_file opcode takes a single unsigned LEB128 operand and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":500877,"byte_end":500951,"line_start":316,"line_end":316,"column_start":5,"column_end":79}},{"value":"/ stores it in the file register of the state machine.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":500956,"byte_end":501013,"line_start":317,"line_end":317,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6570},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":501182,"byte_end":501191,"line_start":322,"line_end":322,"column_start":5,"column_end":14},"name":"SetColumn","qualname":"::read::line::LineInstruction::SetColumn","value":"LineInstruction::SetColumn(u64)","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" \"The DW_LNS_set_column opcode takes a single unsigned LEB128 operand and\n stores it in the column register of the state machine.\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_set_column opcode takes a single unsigned LEB128 operand and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":501037,"byte_end":501113,"line_start":320,"line_end":320,"column_start":5,"column_end":81}},{"value":"/ stores it in the column register of the state machine.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":501118,"byte_end":501177,"line_start":321,"line_end":321,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6573},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":501374,"byte_end":501389,"line_start":327,"line_end":327,"column_start":5,"column_end":20},"name":"NegateStatement","qualname":"::read::line::LineInstruction::NegateStatement","value":"LineInstruction::NegateStatement","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" \"The DW_LNS_negate_stmt opcode takes no operands. It sets the is_stmt\n register of the state machine to the logical negation of its current\n value.\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_negate_stmt opcode takes no operands. It sets the is_stmt","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":501203,"byte_end":501276,"line_start":324,"line_end":324,"column_start":5,"column_end":78}},{"value":"/ register of the state machine to the logical negation of its current","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":501281,"byte_end":501353,"line_start":325,"line_end":325,"column_start":5,"column_end":77}},{"value":"/ value.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":501358,"byte_end":501369,"line_start":326,"line_end":326,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6575},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":501536,"byte_end":501549,"line_start":331,"line_end":331,"column_start":5,"column_end":18},"name":"SetBasicBlock","qualname":"::read::line::LineInstruction::SetBasicBlock","value":"LineInstruction::SetBasicBlock","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" \"The DW_LNS_set_basic_block opcode takes no operands. It sets the\n basic_block register of the state machine to “true.”\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_set_basic_block opcode takes no operands. It sets the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":501396,"byte_end":501465,"line_start":329,"line_end":329,"column_start":5,"column_end":74}},{"value":"/ basic_block register of the state machine to “true.”\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":501470,"byte_end":501531,"line_start":330,"line_end":330,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6577},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":502304,"byte_end":502314,"line_start":344,"line_end":344,"column_start":5,"column_end":15},"name":"ConstAddPc","qualname":"::read::line::LineInstruction::ConstAddPc","value":"LineInstruction::ConstAddPc","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" > The DW_LNS_const_add_pc opcode takes no operands. It advances the\n > address and op_index registers by the increments corresponding to\n > special opcode 255.\n >\n > When the line number program needs to advance the address by a small\n > amount, it can use a single special opcode, which occupies a single\n > byte. When it needs to advance the address by up to twice the range of\n > the last special opcode, it can use DW_LNS_const_add_pc followed by a\n > special opcode, for a total of two bytes. Only if it needs to advance\n > the address by more than twice that range will it need to use both\n > DW_LNS_advance_pc and a special opcode, requiring three or more bytes.\n","sig":null,"attributes":[{"value":"/ > The DW_LNS_const_add_pc opcode takes no operands. It advances the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":501556,"byte_end":501627,"line_start":333,"line_end":333,"column_start":5,"column_end":76}},{"value":"/ > address and op_index registers by the increments corresponding to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":501632,"byte_end":501703,"line_start":334,"line_end":334,"column_start":5,"column_end":76}},{"value":"/ > special opcode 255.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":501708,"byte_end":501733,"line_start":335,"line_end":335,"column_start":5,"column_end":30}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":501738,"byte_end":501743,"line_start":336,"line_end":336,"column_start":5,"column_end":10}},{"value":"/ > When the line number program needs to advance the address by a small","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":501748,"byte_end":501822,"line_start":337,"line_end":337,"column_start":5,"column_end":79}},{"value":"/ > amount, it can use a single special opcode, which occupies a single","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":501827,"byte_end":501900,"line_start":338,"line_end":338,"column_start":5,"column_end":78}},{"value":"/ > byte. When it needs to advance the address by up to twice the range of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":501905,"byte_end":501981,"line_start":339,"line_end":339,"column_start":5,"column_end":81}},{"value":"/ > the last special opcode, it can use DW_LNS_const_add_pc followed by a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":501986,"byte_end":502061,"line_start":340,"line_end":340,"column_start":5,"column_end":80}},{"value":"/ > special opcode, for a total of two bytes. Only if it needs to advance","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":502066,"byte_end":502141,"line_start":341,"line_end":341,"column_start":5,"column_end":80}},{"value":"/ > the address by more than twice that range will it need to use both","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":502146,"byte_end":502218,"line_start":342,"line_end":342,"column_start":5,"column_end":77}},{"value":"/ > DW_LNS_advance_pc and a special opcode, requiring three or more bytes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":502223,"byte_end":502299,"line_start":343,"line_end":343,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6579},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":502714,"byte_end":502724,"line_start":351,"line_end":351,"column_start":5,"column_end":15},"name":"FixedAddPc","qualname":"::read::line::LineInstruction::FixedAddPc","value":"LineInstruction::FixedAddPc(u16)","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" > The DW_LNS_fixed_advance_pc opcode takes a single uhalf (unencoded)\n > operand and adds it to the address register of the state machine and\n > sets the op_index register to 0. This is the only standard opcode whose\n > operand is not a variable length number. It also does not multiply the\n > operand by the minimum_instruction_length field of the header.\n","sig":null,"attributes":[{"value":"/ > The DW_LNS_fixed_advance_pc opcode takes a single uhalf (unencoded)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":502321,"byte_end":502394,"line_start":346,"line_end":346,"column_start":5,"column_end":78}},{"value":"/ > operand and adds it to the address register of the state machine and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":502399,"byte_end":502473,"line_start":347,"line_end":347,"column_start":5,"column_end":79}},{"value":"/ > sets the op_index register to 0. This is the only standard opcode whose","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":502478,"byte_end":502555,"line_start":348,"line_end":348,"column_start":5,"column_end":82}},{"value":"/ > operand is not a variable length number. It also does not multiply the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":502560,"byte_end":502636,"line_start":349,"line_end":349,"column_start":5,"column_end":81}},{"value":"/ > operand by the minimum_instruction_length field of the header.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":502641,"byte_end":502709,"line_start":350,"line_end":350,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6582},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":502828,"byte_end":502842,"line_start":354,"line_end":354,"column_start":5,"column_end":19},"name":"SetPrologueEnd","qualname":"::read::line::LineInstruction::SetPrologueEnd","value":"LineInstruction::SetPrologueEnd","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" \"[`LineInstruction::SetPrologueEnd`] sets the prologue_end register to “true”.\"\n","sig":null,"attributes":[{"value":"/ \"[`LineInstruction::SetPrologueEnd`] sets the prologue_end register to “true”.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":502736,"byte_end":502823,"line_start":353,"line_end":353,"column_start":5,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6584},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":502953,"byte_end":502969,"line_start":358,"line_end":358,"column_start":5,"column_end":21},"name":"SetEpilogueBegin","qualname":"::read::line::LineInstruction::SetEpilogueBegin","value":"LineInstruction::SetEpilogueBegin","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" \"[`LineInstruction::SetEpilogueBegin`] sets the epilogue_begin register to\n “true”.\"\n","sig":null,"attributes":[{"value":"/ \"[`LineInstruction::SetEpilogueBegin`] sets the epilogue_begin register to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":502849,"byte_end":502927,"line_start":356,"line_end":356,"column_start":5,"column_end":83}},{"value":"/ “true”.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":502932,"byte_end":502948,"line_start":357,"line_end":357,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6586},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":503123,"byte_end":503129,"line_start":362,"line_end":362,"column_start":5,"column_end":11},"name":"SetIsa","qualname":"::read::line::LineInstruction::SetIsa","value":"LineInstruction::SetIsa(u64)","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" \"The DW_LNS_set_isa opcode takes a single unsigned LEB128 operand and\n stores that value in the isa register of the state machine.\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_set_isa opcode takes a single unsigned LEB128 operand and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":502976,"byte_end":503049,"line_start":360,"line_end":360,"column_start":5,"column_end":78}},{"value":"/ stores that value in the isa register of the state machine.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":503054,"byte_end":503118,"line_start":361,"line_end":361,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6589},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":503196,"byte_end":503212,"line_start":365,"line_end":365,"column_start":5,"column_end":21},"name":"UnknownStandard0","qualname":"::read::line::LineInstruction::UnknownStandard0","value":"LineInstruction::UnknownStandard0(constants::DwLns)","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" An unknown standard opcode with zero operands.\n","sig":null,"attributes":[{"value":"/ An unknown standard opcode with zero operands.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":503141,"byte_end":503191,"line_start":364,"line_end":364,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6592},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":503290,"byte_end":503306,"line_start":368,"line_end":368,"column_start":5,"column_end":21},"name":"UnknownStandard1","qualname":"::read::line::LineInstruction::UnknownStandard1","value":"LineInstruction::UnknownStandard1(constants::DwLns, u64)","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" An unknown standard opcode with one operand.\n","sig":null,"attributes":[{"value":"/ An unknown standard opcode with one operand.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":503237,"byte_end":503285,"line_start":367,"line_end":367,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6596},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":503395,"byte_end":503411,"line_start":371,"line_end":371,"column_start":5,"column_end":21},"name":"UnknownStandardN","qualname":"::read::line::LineInstruction::UnknownStandardN","value":"LineInstruction::UnknownStandardN(constants::DwLns, R)","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" An unknown standard opcode with multiple operands.\n","sig":null,"attributes":[{"value":"/ An unknown standard opcode with multiple operands.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":503336,"byte_end":503390,"line_start":370,"line_end":370,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6600},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":503981,"byte_end":503992,"line_start":380,"line_end":380,"column_start":5,"column_end":16},"name":"EndSequence","qualname":"::read::line::LineInstruction::EndSequence","value":"LineInstruction::EndSequence","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" > [`LineInstruction::EndSequence`] sets the end_sequence register of the state\n > machine to “true” and appends a row to the matrix using the current\n > values of the state-machine registers. Then it resets the registers to\n > the initial values specified above (see Section 6.2.2). Every line\n > number program sequence must end with a DW_LNE_end_sequence instruction\n > which creates a row whose address is that of the byte after the last\n > target machine instruction of the sequence.\n","sig":null,"attributes":[{"value":"/ > [`LineInstruction::EndSequence`] sets the end_sequence register of the state","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":503439,"byte_end":503521,"line_start":373,"line_end":373,"column_start":5,"column_end":87}},{"value":"/ > machine to “true” and appends a row to the matrix using the current","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":503526,"byte_end":503603,"line_start":374,"line_end":374,"column_start":5,"column_end":78}},{"value":"/ > values of the state-machine registers. Then it resets the registers to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":503608,"byte_end":503684,"line_start":375,"line_end":375,"column_start":5,"column_end":81}},{"value":"/ > the initial values specified above (see Section 6.2.2). Every line","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":503689,"byte_end":503761,"line_start":376,"line_end":376,"column_start":5,"column_end":77}},{"value":"/ > number program sequence must end with a DW_LNE_end_sequence instruction","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":503766,"byte_end":503843,"line_start":377,"line_end":377,"column_start":5,"column_end":82}},{"value":"/ > which creates a row whose address is that of the byte after the last","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":503848,"byte_end":503922,"line_start":378,"line_end":378,"column_start":5,"column_end":79}},{"value":"/ > target machine instruction of the sequence.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":503927,"byte_end":503976,"line_start":379,"line_end":379,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6602},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":504502,"byte_end":504512,"line_start":390,"line_end":390,"column_start":5,"column_end":15},"name":"SetAddress","qualname":"::read::line::LineInstruction::SetAddress","value":"LineInstruction::SetAddress(u64)","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" > The DW_LNE_set_address opcode takes a single relocatable address as an\n > operand. The size of the operand is the size of an address on the target\n > machine. It sets the address register to the value given by the\n > relocatable address and sets the op_index register to 0.\n >\n > All of the other line number program opcodes that affect the address\n > register add a delta to it. This instruction stores a relocatable value\n > into it instead.\n","sig":null,"attributes":[{"value":"/ > The DW_LNE_set_address opcode takes a single relocatable address as an","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":503999,"byte_end":504075,"line_start":382,"line_end":382,"column_start":5,"column_end":81}},{"value":"/ > operand. The size of the operand is the size of an address on the target","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":504080,"byte_end":504158,"line_start":383,"line_end":383,"column_start":5,"column_end":83}},{"value":"/ > machine. It sets the address register to the value given by the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":504163,"byte_end":504232,"line_start":384,"line_end":384,"column_start":5,"column_end":74}},{"value":"/ > relocatable address and sets the op_index register to 0.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":504237,"byte_end":504299,"line_start":385,"line_end":385,"column_start":5,"column_end":67}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":504304,"byte_end":504309,"line_start":386,"line_end":386,"column_start":5,"column_end":10}},{"value":"/ > All of the other line number program opcodes that affect the address","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":504314,"byte_end":504388,"line_start":387,"line_end":387,"column_start":5,"column_end":79}},{"value":"/ > register add a delta to it. This instruction stores a relocatable value","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":504393,"byte_end":504470,"line_start":388,"line_end":388,"column_start":5,"column_end":82}},{"value":"/ > into it instead.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":504475,"byte_end":504497,"line_start":389,"line_end":389,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6605},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":504666,"byte_end":504676,"line_start":394,"line_end":394,"column_start":5,"column_end":15},"name":"DefineFile","qualname":"::read::line::LineInstruction::DefineFile","value":"LineInstruction::DefineFile(FileEntry<R, Offset>)","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" Defines a new source file in the line number program and appends it to\n the line number program header's list of source files.\n","sig":null,"attributes":[{"value":"/ Defines a new source file in the line number program and appends it to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":504524,"byte_end":504598,"line_start":392,"line_end":392,"column_start":5,"column_end":79}},{"value":"/ the line number program header's list of source files.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":504603,"byte_end":504661,"line_start":393,"line_end":393,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6608},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":504874,"byte_end":504890,"line_start":399,"line_end":399,"column_start":5,"column_end":21},"name":"SetDiscriminator","qualname":"::read::line::LineInstruction::SetDiscriminator","value":"LineInstruction::SetDiscriminator(u64)","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" \"The DW_LNE_set_discriminator opcode takes a single parameter, an\n unsigned LEB128 integer. It sets the discriminator register to the new\n value.\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNE_set_discriminator opcode takes a single parameter, an","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":504705,"byte_end":504774,"line_start":396,"line_end":396,"column_start":5,"column_end":74}},{"value":"/ unsigned LEB128 integer. It sets the discriminator register to the new","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":504779,"byte_end":504853,"line_start":397,"line_end":397,"column_start":5,"column_end":79}},{"value":"/ value.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":504858,"byte_end":504869,"line_start":398,"line_end":398,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6611},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":504977,"byte_end":504992,"line_start":402,"line_end":402,"column_start":5,"column_end":20},"name":"UnknownExtended","qualname":"::read::line::LineInstruction::UnknownExtended","value":"LineInstruction::UnknownExtended(constants::DwLne, R)","parent":{"krate":0,"index":6553},"children":[],"decl_id":null,"docs":" An unknown extended opcode and the slice of its unparsed operands.\n","sig":null,"attributes":[{"value":"/ An unknown extended opcode and the slice of its unparsed operands.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":504902,"byte_end":504972,"line_start":401,"line_end":401,"column_start":5,"column_end":75}}]},{"kind":"Enum","id":{"krate":0,"index":6553},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499120,"byte_end":499135,"line_start":271,"line_end":271,"column_start":10,"column_end":25},"name":"LineInstruction","qualname":"::read::line::LineInstruction","value":"pub enum LineInstruction<R, Offset = <R as Reader>::Offset> where\n         R: Reader<Offset = Offset>, Offset: ReaderOffset {\n\n    /// > ### 6.2.5.1 Special Opcodes\n    /// >\n    /// > Each ubyte special opcode has the following effect on the state machine:\n    /// >\n    /// >   1. Add a signed integer to the line register.\n    /// >\n    /// >   2. Modify the operation pointer by incrementing the address and\n    /// >   op_index registers as described below.\n    /// >\n    /// >   3. Append a row to the matrix using the current values of the state\n    /// >   machine registers.\n    /// >\n    /// >   4. Set the basic_block register to “false.”\n    /// >\n    /// >   5. Set the prologue_end register to “false.”\n    /// >\n    /// >   6. Set the epilogue_begin register to “false.”\n    /// >\n    /// >   7. Set the discriminator register to 0.\n    /// >\n    /// > All of the special opcodes do those same seven things; they differ from\n    /// > one another only in what values they add to the line, address and\n    /// > op_index registers.\n    Special(u8),\n\n    /// \"[`LineInstruction::Copy`] appends a row to the matrix using the current\n    /// values of the state machine registers. Then it sets the discriminator\n    /// register to 0, and sets the basic_block, prologue_end and epilogue_begin\n    /// registers to “false.”\"\n    Copy,\n\n    /// \"The DW_LNS_advance_pc opcode takes a single unsigned LEB128 operand as\n    /// the operation advance and modifies the address and op_index registers\n    /// [the same as `LineInstruction::Special`]\"\n    AdvancePc(u64),\n\n    /// \"The DW_LNS_advance_line opcode takes a single signed LEB128 operand and\n    /// adds that value to the line register of the state machine.\"\n    AdvanceLine(i64),\n\n    /// \"The DW_LNS_set_file opcode takes a single unsigned LEB128 operand and\n    /// stores it in the file register of the state machine.\"\n    SetFile(u64),\n\n    /// \"The DW_LNS_set_column opcode takes a single unsigned LEB128 operand and\n    /// stores it in the column register of the state machine.\"\n    SetColumn(u64),\n\n    /// \"The DW_LNS_negate_stmt opcode takes no operands. It sets the is_stmt\n    /// register of the state machine to the logical negation of its current\n    /// value.\"\n    NegateStatement,\n\n    /// \"The DW_LNS_set_basic_block opcode takes no operands. It sets the\n    /// basic_block register of the state machine to “true.”\"\n    SetBasicBlock,\n\n    /// > The DW_LNS_const_add_pc opcode takes no operands. It advances the\n    /// > address and op_index registers by the increments corresponding to\n    /// > special opcode 255.\n    /// >\n    /// > When the line number program needs to advance the address by a small\n    /// > amount, it can use a single special opcode, which occupies a single\n    /// > byte. When it needs to advance the address by up to twice the range of\n    /// > the last special opcode, it can use DW_LNS_const_add_pc followed by a\n    /// > special opcode, for a total of two bytes. Only if it needs to advance\n    /// > the address by more than twice that range will it need to use both\n    /// > DW_LNS_advance_pc and a special opcode, requiring three or more bytes.\n    ConstAddPc,\n\n    /// > The DW_LNS_fixed_advance_pc opcode takes a single uhalf (unencoded)\n    /// > operand and adds it to the address register of the state machine and\n    /// > sets the op_index register to 0. This is the only standard opcode whose\n    /// > operand is not a variable length number. It also does not multiply the\n    /// > operand by the minimum_instruction_length field of the header.\n    FixedAddPc(u16),\n\n    /// \"[`LineInstruction::SetPrologueEnd`] sets the prologue_end register to “true”.\"\n    SetPrologueEnd,\n\n    /// \"[`LineInstruction::SetEpilogueBegin`] sets the epilogue_begin register to\n    /// “true”.\"\n    SetEpilogueBegin,\n\n    /// \"The DW_LNS_set_isa opcode takes a single unsigned LEB128 operand and\n    /// stores that value in the isa register of the state machine.\"\n    SetIsa(u64),\n\n    /// An unknown standard opcode with zero operands.\n    UnknownStandard0(constants::DwLns),\n\n    /// An unknown standard opcode with one operand.\n    UnknownStandard1(constants::DwLns, u64),\n\n    /// An unknown standard opcode with multiple operands.\n    UnknownStandardN(constants::DwLns, R),\n\n    /// > [`LineInstruction::EndSequence`] sets the end_sequence register of the state\n    /// > machine to “true” and appends a row to the matrix using the current\n    /// > values of the state-machine registers. Then it resets the registers to\n    /// > the initial values specified above (see Section 6.2.2). Every line\n    /// > number program sequence must end with a DW_LNE_end_sequence instruction\n    /// > which creates a row whose address is that of the byte after the last\n    /// > target machine instruction of the sequence.\n    EndSequence,\n\n    /// > The DW_LNE_set_address opcode takes a single relocatable address as an\n    /// > operand. The size of the operand is the size of an address on the target\n    /// > machine. It sets the address register to the value given by the\n    /// > relocatable address and sets the op_index register to 0.\n    /// >\n    /// > All of the other line number program opcodes that affect the address\n    /// > register add a delta to it. This instruction stores a relocatable value\n    /// > into it instead.\n    SetAddress(u64),\n\n    /// Defines a new source file in the line number program and appends it to\n    /// the line number program header's list of source files.\n    DefineFile(FileEntry<R, Offset>),\n\n    /// \"The DW_LNE_set_discriminator opcode takes a single parameter, an\n    /// unsigned LEB128 integer. It sets the discriminator register to the new\n    /// value.\"\n    SetDiscriminator(u64),\n\n    /// An unknown extended opcode and the slice of its unparsed operands.\n    UnknownExtended(constants::DwLne, R),\n}","parent":null,"children":[{"krate":0,"index":6556},{"krate":0,"index":6559},{"krate":0,"index":6561},{"krate":0,"index":6564},{"krate":0,"index":6567},{"krate":0,"index":6570},{"krate":0,"index":6573},{"krate":0,"index":6575},{"krate":0,"index":6577},{"krate":0,"index":6579},{"krate":0,"index":6582},{"krate":0,"index":6584},{"krate":0,"index":6586},{"krate":0,"index":6589},{"krate":0,"index":6592},{"krate":0,"index":6596},{"krate":0,"index":6600},{"krate":0,"index":6602},{"krate":0,"index":6605},{"krate":0,"index":6608},{"krate":0,"index":6611}],"decl_id":null,"docs":" A parsed line number program instruction.\n","sig":null,"attributes":[{"value":"/ A parsed line number program instruction.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":499020,"byte_end":499065,"line_start":269,"line_end":269,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1204},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":512563,"byte_end":512574,"line_start":577,"line_end":577,"column_start":10,"column_end":21},"name":"OpcodesIter","qualname":"::read::line::OpcodesIter","value":"LineInstructions<R>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `OpcodesIter` has been renamed to `LineInstructions`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `OpcodesIter` has been renamed to `LineInstructions`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":512392,"byte_end":512461,"line_start":575,"line_end":575,"column_start":1,"column_end":70}},{"value":"deprecated(note =\n             \"OpcodesIter has been renamed to LineInstructions, use that instead.\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":512462,"byte_end":512553,"line_start":576,"line_end":576,"column_start":1,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":6641},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":512810,"byte_end":512826,"line_start":585,"line_end":585,"column_start":12,"column_end":28},"name":"LineInstructions","qualname":"::read::line::LineInstructions","value":"LineInstructions {  }","parent":null,"children":[{"krate":0,"index":6643}],"decl_id":null,"docs":" An iterator yielding parsed instructions.","sig":null,"attributes":[{"value":"/ An iterator yielding parsed instructions.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":512602,"byte_end":512647,"line_start":579,"line_end":579,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":512648,"byte_end":512651,"line_start":580,"line_end":580,"column_start":1,"column_end":4}},{"value":"/ See","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":512652,"byte_end":512659,"line_start":581,"line_end":581,"column_start":1,"column_end":8}},{"value":"/ [`LineProgramHeader::instructions`](./struct.LineProgramHeader.html#method.instructions)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":512660,"byte_end":512752,"line_start":582,"line_end":582,"column_start":1,"column_end":93}},{"value":"/ for more details.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":512753,"byte_end":512774,"line_start":583,"line_end":583,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1211},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":513806,"byte_end":513822,"line_start":611,"line_end":611,"column_start":12,"column_end":28},"name":"next_instruction","qualname":"<LineInstructions<R>>::next_instruction","value":"pub fn next_instruction(&mut Self, &LineProgramHeader<R>)\n-> Result<Option<LineInstruction<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator and return the next instruction.","sig":null,"attributes":[{"value":"/ Advance the iterator and return the next instruction.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":513213,"byte_end":513270,"line_start":599,"line_end":599,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":513275,"byte_end":513278,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ Returns the newly parsed instruction as `Ok(Some(instruction))`. Returns","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":513283,"byte_end":513359,"line_start":601,"line_end":601,"column_start":5,"column_end":81}},{"value":"/ `Ok(None)` when iteration is complete and all instructions have already been","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":513364,"byte_end":513444,"line_start":602,"line_end":602,"column_start":5,"column_end":85}},{"value":"/ parsed and yielded. If an error occurs while parsing the next attribute,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":513449,"byte_end":513525,"line_start":603,"line_end":603,"column_start":5,"column_end":81}},{"value":"/ then this error is returned as `Err(e)`, and all subsequent calls return","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":513530,"byte_end":513606,"line_start":604,"line_end":604,"column_start":5,"column_end":81}},{"value":"/ `Ok(None)`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":513611,"byte_end":513626,"line_start":605,"line_end":605,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":513631,"byte_end":513634,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ Unfortunately, the `header` parameter means that this cannot be a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":513639,"byte_end":513708,"line_start":607,"line_end":607,"column_start":5,"column_end":74}},{"value":"/ `FallibleIterator`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":513713,"byte_end":513736,"line_start":608,"line_end":608,"column_start":5,"column_end":28}},{"value":"allow(clippy :: inline_always)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":513741,"byte_end":513772,"line_start":609,"line_end":609,"column_start":5,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":513777,"byte_end":513794,"line_start":610,"line_end":610,"column_start":5,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":1212},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":514394,"byte_end":514407,"line_start":631,"line_end":631,"column_start":10,"column_end":23},"name":"LineNumberRow","qualname":"::read::line::LineNumberRow","value":"LineRow","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `LineNumberRow` has been renamed to `LineRow`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `LineNumberRow` has been renamed to `LineRow`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":514237,"byte_end":514299,"line_start":629,"line_end":629,"column_start":1,"column_end":63}},{"value":"deprecated(note =\n             \"LineNumberRow has been renamed to LineRow, use that instead.\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":514300,"byte_end":514384,"line_start":630,"line_end":630,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":6650},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":514628,"byte_end":514635,"line_start":637,"line_end":637,"column_start":12,"column_end":19},"name":"LineRow","qualname":"::read::line::LineRow","value":"LineRow {  }","parent":null,"children":[{"krate":0,"index":6651},{"krate":0,"index":6652},{"krate":0,"index":6653},{"krate":0,"index":6654},{"krate":0,"index":6655},{"krate":0,"index":6656},{"krate":0,"index":6657},{"krate":0,"index":6658},{"krate":0,"index":6659},{"krate":0,"index":6660},{"krate":0,"index":6661},{"krate":0,"index":6662}],"decl_id":null,"docs":" A row in the line number program's resulting matrix.","sig":null,"attributes":[{"value":"/ A row in the line number program's resulting matrix.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":514420,"byte_end":514476,"line_start":633,"line_end":633,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":514477,"byte_end":514480,"line_start":634,"line_end":634,"column_start":1,"column_end":4}},{"value":"/ Each row is a copy of the registers of the state machine, as defined in section 6.2.2.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":514481,"byte_end":514571,"line_start":635,"line_end":635,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":515012,"byte_end":515015,"line_start":654,"line_end":654,"column_start":12,"column_end":15},"name":"new","qualname":"<LineRow>::new","value":"pub fn new<R: Reader>(&LineProgramHeader<R>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a line number row in the initial state for the given program.\n","sig":null,"attributes":[{"value":"/ Create a line number row in the initial state for the given program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":514928,"byte_end":515000,"line_start":653,"line_end":653,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1216},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516135,"byte_end":516142,"line_start":681,"line_end":681,"column_start":12,"column_end":19},"name":"address","qualname":"<LineRow>::address","value":"pub fn address(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" \"The program-counter value corresponding to a machine instruction\n generated by the compiler.\"\n","sig":null,"attributes":[{"value":"/ \"The program-counter value corresponding to a machine instruction","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516004,"byte_end":516073,"line_start":678,"line_end":678,"column_start":5,"column_end":74}},{"value":"/ generated by the compiler.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516078,"byte_end":516109,"line_start":679,"line_end":679,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516114,"byte_end":516123,"line_start":680,"line_end":680,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1217},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516620,"byte_end":516628,"line_start":693,"line_end":693,"column_start":12,"column_end":20},"name":"op_index","qualname":"<LineRow>::op_index","value":"pub fn op_index(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" > An unsigned integer representing the index of an operation within a VLIW\n > instruction. The index of the first operation is 0. For non-VLIW\n > architectures, this register will always be 0.\n >\n > The address and op_index registers, taken together, form an operation\n > pointer that can reference any individual operation with the\n > instruction stream.\n","sig":null,"attributes":[{"value":"/ > An unsigned integer representing the index of an operation within a VLIW","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516193,"byte_end":516271,"line_start":685,"line_end":685,"column_start":5,"column_end":83}},{"value":"/ > instruction. The index of the first operation is 0. For non-VLIW","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516276,"byte_end":516346,"line_start":686,"line_end":686,"column_start":5,"column_end":75}},{"value":"/ > architectures, this register will always be 0.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516351,"byte_end":516403,"line_start":687,"line_end":687,"column_start":5,"column_end":57}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516408,"byte_end":516413,"line_start":688,"line_end":688,"column_start":5,"column_end":10}},{"value":"/ > The address and op_index registers, taken together, form an operation","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516418,"byte_end":516493,"line_start":689,"line_end":689,"column_start":5,"column_end":80}},{"value":"/ > pointer that can reference any individual operation with the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516498,"byte_end":516564,"line_start":690,"line_end":690,"column_start":5,"column_end":71}},{"value":"/ > instruction stream.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516569,"byte_end":516594,"line_start":691,"line_end":691,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516599,"byte_end":516608,"line_start":692,"line_end":692,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1218},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516822,"byte_end":516832,"line_start":700,"line_end":700,"column_start":12,"column_end":22},"name":"file_index","qualname":"<LineRow>::file_index","value":"pub fn file_index(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" \"An unsigned integer indicating the identity of the source file\n corresponding to a machine instruction.\"\n","sig":null,"attributes":[{"value":"/ \"An unsigned integer indicating the identity of the source file","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516680,"byte_end":516747,"line_start":697,"line_end":697,"column_start":5,"column_end":72}},{"value":"/ corresponding to a machine instruction.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516752,"byte_end":516796,"line_start":698,"line_end":698,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516801,"byte_end":516810,"line_start":699,"line_end":699,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1219},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516973,"byte_end":516977,"line_start":706,"line_end":706,"column_start":12,"column_end":16},"name":"file","qualname":"<LineRow>::file","value":"pub fn file<'header, R: Reader>(&Self, &'header LineProgramHeader<R>)\n-> Option<&'header FileEntry<R>>","parent":null,"children":[],"decl_id":null,"docs":" The source file corresponding to the current machine instruction.\n","sig":null,"attributes":[{"value":"/ The source file corresponding to the current machine instruction.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516878,"byte_end":516947,"line_start":704,"line_end":704,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":516952,"byte_end":516961,"line_start":705,"line_end":705,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1222},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":517384,"byte_end":517388,"line_start":717,"line_end":717,"column_start":12,"column_end":16},"name":"line","qualname":"<LineRow>::line","value":"pub fn line(&Self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" \"An unsigned integer indicating a source line number. Lines are numbered\n beginning at 1. The compiler may emit the value 0 in cases where an\n instruction cannot be attributed to any source line.\"\n","sig":null,"attributes":[{"value":"/ \"An unsigned integer indicating a source line number. Lines are numbered","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":517144,"byte_end":517220,"line_start":713,"line_end":713,"column_start":5,"column_end":81}},{"value":"/ beginning at 1. The compiler may emit the value 0 in cases where an","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":517225,"byte_end":517296,"line_start":714,"line_end":714,"column_start":5,"column_end":76}},{"value":"/ instruction cannot be attributed to any source line.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":517301,"byte_end":517358,"line_start":715,"line_end":715,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":517363,"byte_end":517372,"line_start":716,"line_end":716,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1223},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":517777,"byte_end":517783,"line_start":729,"line_end":729,"column_start":12,"column_end":18},"name":"column","qualname":"<LineRow>::column","value":"pub fn column(&Self) -> ColumnType","parent":null,"children":[],"decl_id":null,"docs":" \"An unsigned integer indicating a column number within a source\n line. Columns are numbered beginning at 1. The value 0 is reserved to\n indicate that a statement begins at the “left edge” of the line.\"\n","sig":null,"attributes":[{"value":"/ \"An unsigned integer indicating a column number within a source","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":517528,"byte_end":517595,"line_start":725,"line_end":725,"column_start":5,"column_end":72}},{"value":"/ line. Columns are numbered beginning at 1. The value 0 is reserved to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":517600,"byte_end":517673,"line_start":726,"line_end":726,"column_start":5,"column_end":78}},{"value":"/ indicate that a statement begins at the “left edge” of the line.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":517678,"byte_end":517751,"line_start":727,"line_end":727,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":517756,"byte_end":517765,"line_start":728,"line_end":728,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":518235,"byte_end":518242,"line_start":742,"line_end":742,"column_start":12,"column_end":19},"name":"is_stmt","qualname":"<LineRow>::is_stmt","value":"pub fn is_stmt(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" \"A boolean indicating that the current instruction is a recommended\n breakpoint location. A recommended breakpoint location is intended to\n “represent” a line, a statement and/or a semantically distinct subpart\n of a statement.\"\n","sig":null,"attributes":[{"value":"/ \"A boolean indicating that the current instruction is a recommended","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":517952,"byte_end":518023,"line_start":737,"line_end":737,"column_start":5,"column_end":76}},{"value":"/ breakpoint location. A recommended breakpoint location is intended to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":518028,"byte_end":518101,"line_start":738,"line_end":738,"column_start":5,"column_end":78}},{"value":"/ “represent” a line, a statement and/or a semantically distinct subpart","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":518106,"byte_end":518184,"line_start":739,"line_end":739,"column_start":5,"column_end":79}},{"value":"/ of a statement.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":518189,"byte_end":518209,"line_start":740,"line_end":740,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":518214,"byte_end":518223,"line_start":741,"line_end":741,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1225},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":518416,"byte_end":518427,"line_start":749,"line_end":749,"column_start":12,"column_end":23},"name":"basic_block","qualname":"<LineRow>::basic_block","value":"pub fn basic_block(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" \"A boolean indicating that the current instruction is the beginning of a\n basic block.\"\n","sig":null,"attributes":[{"value":"/ \"A boolean indicating that the current instruction is the beginning of a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":518292,"byte_end":518368,"line_start":746,"line_end":746,"column_start":5,"column_end":81}},{"value":"/ basic block.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":518373,"byte_end":518390,"line_start":747,"line_end":747,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":518395,"byte_end":518404,"line_start":748,"line_end":748,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":518776,"byte_end":518788,"line_start":758,"line_end":758,"column_start":12,"column_end":24},"name":"end_sequence","qualname":"<LineRow>::end_sequence","value":"pub fn end_sequence(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" \"A boolean indicating that the current address is that of the first byte\n after the end of a sequence of target machine instructions. end_sequence\n terminates a sequence of lines; therefore other information in the same\n row is not meaningful.\"\n","sig":null,"attributes":[{"value":"/ \"A boolean indicating that the current address is that of the first byte","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":518481,"byte_end":518557,"line_start":753,"line_end":753,"column_start":5,"column_end":81}},{"value":"/ after the end of a sequence of target machine instructions. end_sequence","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":518562,"byte_end":518638,"line_start":754,"line_end":754,"column_start":5,"column_end":81}},{"value":"/ terminates a sequence of lines; therefore other information in the same","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":518643,"byte_end":518718,"line_start":755,"line_end":755,"column_start":5,"column_end":80}},{"value":"/ row is not meaningful.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":518723,"byte_end":518750,"line_start":756,"line_end":756,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":518755,"byte_end":518764,"line_start":757,"line_end":757,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1227},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":519037,"byte_end":519049,"line_start":766,"line_end":766,"column_start":12,"column_end":24},"name":"prologue_end","qualname":"<LineRow>::prologue_end","value":"pub fn prologue_end(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" \"A boolean indicating that the current address is one (of possibly many)\n where execution should be suspended for an entry breakpoint of a\n function.\"\n","sig":null,"attributes":[{"value":"/ \"A boolean indicating that the current address is one (of possibly many)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":518843,"byte_end":518919,"line_start":762,"line_end":762,"column_start":5,"column_end":81}},{"value":"/ where execution should be suspended for an entry breakpoint of a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":518924,"byte_end":518992,"line_start":763,"line_end":763,"column_start":5,"column_end":73}},{"value":"/ function.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":518997,"byte_end":519011,"line_start":764,"line_end":764,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":519016,"byte_end":519025,"line_start":765,"line_end":765,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":519297,"byte_end":519311,"line_start":774,"line_end":774,"column_start":12,"column_end":26},"name":"epilogue_begin","qualname":"<LineRow>::epilogue_begin","value":"pub fn epilogue_begin(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" \"A boolean indicating that the current address is one (of possibly many)\n where execution should be suspended for an exit breakpoint of a\n function.\"\n","sig":null,"attributes":[{"value":"/ \"A boolean indicating that the current address is one (of possibly many)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":519104,"byte_end":519180,"line_start":770,"line_end":770,"column_start":5,"column_end":81}},{"value":"/ where execution should be suspended for an exit breakpoint of a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":519185,"byte_end":519252,"line_start":771,"line_end":771,"column_start":5,"column_end":72}},{"value":"/ function.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":519257,"byte_end":519271,"line_start":772,"line_end":772,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":519276,"byte_end":519285,"line_start":773,"line_end":773,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1229},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":519818,"byte_end":519821,"line_start":787,"line_end":787,"column_start":12,"column_end":15},"name":"isa","qualname":"<LineRow>::isa","value":"pub fn isa(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Tag for the current instruction set architecture.","sig":null,"attributes":[{"value":"/ Tag for the current instruction set architecture.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":519368,"byte_end":519421,"line_start":778,"line_end":778,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":519426,"byte_end":519429,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ > An unsigned integer whose value encodes the applicable instruction set","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":519434,"byte_end":519510,"line_start":780,"line_end":780,"column_start":5,"column_end":81}},{"value":"/ > architecture for the current instruction.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":519515,"byte_end":519562,"line_start":781,"line_end":781,"column_start":5,"column_end":52}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":519567,"byte_end":519572,"line_start":782,"line_end":782,"column_start":5,"column_end":10}},{"value":"/ > The encoding of instruction sets should be shared by all users of a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":519577,"byte_end":519650,"line_start":783,"line_end":783,"column_start":5,"column_end":78}},{"value":"/ > given architecture. It is recommended that this encoding be defined by","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":519655,"byte_end":519731,"line_start":784,"line_end":784,"column_start":5,"column_end":81}},{"value":"/ > the ABI authoring committee for each architecture.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":519736,"byte_end":519792,"line_start":785,"line_end":785,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":519797,"byte_end":519806,"line_start":786,"line_end":786,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1230},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":520305,"byte_end":520318,"line_start":798,"line_end":798,"column_start":12,"column_end":25},"name":"discriminator","qualname":"<LineRow>::discriminator","value":"pub fn discriminator(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" \"An unsigned integer identifying the block to which the current\n instruction belongs. Discriminator values are assigned arbitrarily by\n the DWARF producer and serve to distinguish among multiple blocks that\n may all be associated with the same source file, line, and column. Where\n only one block exists for a given source position, the discriminator\n value should be zero.\"\n","sig":null,"attributes":[{"value":"/ \"An unsigned integer identifying the block to which the current","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":519866,"byte_end":519933,"line_start":791,"line_end":791,"column_start":5,"column_end":72}},{"value":"/ instruction belongs. Discriminator values are assigned arbitrarily by","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":519938,"byte_end":520011,"line_start":792,"line_end":792,"column_start":5,"column_end":78}},{"value":"/ the DWARF producer and serve to distinguish among multiple blocks that","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":520016,"byte_end":520090,"line_start":793,"line_end":793,"column_start":5,"column_end":79}},{"value":"/ may all be associated with the same source file, line, and column. Where","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":520095,"byte_end":520171,"line_start":794,"line_end":794,"column_start":5,"column_end":81}},{"value":"/ only one block exists for a given source position, the discriminator","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":520176,"byte_end":520248,"line_start":795,"line_end":795,"column_start":5,"column_end":77}},{"value":"/ value should be zero.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":520253,"byte_end":520279,"line_start":796,"line_end":796,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":520284,"byte_end":520293,"line_start":797,"line_end":797,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":520574,"byte_end":520581,"line_start":807,"line_end":807,"column_start":12,"column_end":19},"name":"execute","qualname":"<LineRow>::execute","value":"pub fn execute<R, Program>(&mut Self, LineInstruction<R>, &mut Program)\n-> bool where Program: LineProgram<R>, R: Reader","parent":null,"children":[],"decl_id":null,"docs":" Execute the given instruction, and return true if a new row in the\n line number matrix needs to be generated.","sig":null,"attributes":[{"value":"/ Execute the given instruction, and return true if a new row in the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":520373,"byte_end":520443,"line_start":802,"line_end":802,"column_start":5,"column_end":75}},{"value":"/ line number matrix needs to be generated.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":520448,"byte_end":520493,"line_start":803,"line_end":803,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":520498,"byte_end":520501,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ Unknown opcodes are treated as no-ops.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":520506,"byte_end":520548,"line_start":805,"line_end":805,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":520553,"byte_end":520562,"line_start":806,"line_end":806,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1234},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":523714,"byte_end":523719,"line_start":913,"line_end":913,"column_start":12,"column_end":17},"name":"reset","qualname":"<LineRow>::reset","value":"pub fn reset<R: Reader>(&mut Self, &LineProgramHeader<R>)","parent":null,"children":[],"decl_id":null,"docs":" Perform any reset that was required after copying the previous row.\n","sig":null,"attributes":[{"value":"/ Perform any reset that was required after copying the previous row.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":523617,"byte_end":523688,"line_start":911,"line_end":911,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":523693,"byte_end":523702,"line_start":912,"line_end":912,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6676},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":526946,"byte_end":526954,"line_start":997,"line_end":997,"column_start":5,"column_end":13},"name":"LeftEdge","qualname":"::read::line::ColumnType::LeftEdge","value":"ColumnType::LeftEdge","parent":{"krate":0,"index":6675},"children":[],"decl_id":null,"docs":" The `LeftEdge` means that the statement begins at the start of the new\n line.\n","sig":null,"attributes":[{"value":"/ The `LeftEdge` means that the statement begins at the start of the new","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":526853,"byte_end":526927,"line_start":995,"line_end":995,"column_start":5,"column_end":79}},{"value":"/ line.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":526932,"byte_end":526941,"line_start":996,"line_end":996,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6678},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":527010,"byte_end":527016,"line_start":999,"line_end":999,"column_start":5,"column_end":11},"name":"Column","qualname":"::read::line::ColumnType::Column","value":"ColumnType::Column(u64)","parent":{"krate":0,"index":6675},"children":[],"decl_id":null,"docs":" A column number, whose range begins at 1.\n","sig":null,"attributes":[{"value":"/ A column number, whose range begins at 1.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":526960,"byte_end":527005,"line_start":998,"line_end":998,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":6675},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":526836,"byte_end":526846,"line_start":994,"line_end":994,"column_start":10,"column_end":20},"name":"ColumnType","qualname":"::read::line::ColumnType","value":"pub enum ColumnType {\n\n    /// The `LeftEdge` means that the statement begins at the start of the new\n    /// line.\n    LeftEdge,\n\n    /// A column number, whose range begins at 1.\n    Column(u64),\n}","parent":null,"children":[{"krate":0,"index":6676},{"krate":0,"index":6678}],"decl_id":null,"docs":" The type of column that a row is referring to.\n","sig":null,"attributes":[{"value":"/ The type of column that a row is referring to.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":526714,"byte_end":526764,"line_start":992,"line_end":992,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":1243},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":527203,"byte_end":527221,"line_start":1004,"line_end":1004,"column_start":10,"column_end":28},"name":"LineNumberSequence","qualname":"::read::line::LineNumberSequence","value":"LineSequence<R>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `LineNumberSequence` has been renamed to `LineSequence`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `LineNumberSequence` has been renamed to `LineSequence`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":527026,"byte_end":527098,"line_start":1002,"line_end":1002,"column_start":1,"column_end":73}},{"value":"deprecated(note =\n             \"LineNumberSequence has been renamed to LineSequence, use that instead.\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":527099,"byte_end":527193,"line_start":1003,"line_end":1003,"column_start":1,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":6701},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":527488,"byte_end":527500,"line_start":1010,"line_end":1010,"column_start":12,"column_end":24},"name":"LineSequence","qualname":"::read::line::LineSequence","value":"LineSequence { start, end }","parent":null,"children":[{"krate":0,"index":6703},{"krate":0,"index":6704},{"krate":0,"index":6705}],"decl_id":null,"docs":" A sequence within a line number program.  A sequence, as defined in section\n 6.2.5 of the standard, is a linear subset of a line number program within\n which addresses are monotonically increasing.\n","sig":null,"attributes":[{"value":"/ A sequence within a line number program.  A sequence, as defined in section","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":527245,"byte_end":527324,"line_start":1006,"line_end":1006,"column_start":1,"column_end":80}},{"value":"/ 6.2.5 of the standard, is a linear subset of a line number program within","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":527325,"byte_end":527402,"line_start":1007,"line_end":1007,"column_start":1,"column_end":78}},{"value":"/ which addresses are monotonically increasing.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":527403,"byte_end":527452,"line_start":1008,"line_end":1008,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":6703},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":527621,"byte_end":527626,"line_start":1013,"line_end":1013,"column_start":9,"column_end":14},"name":"start","qualname":"::read::line::LineSequence::start","value":"u64","parent":{"krate":0,"index":6701},"children":[],"decl_id":null,"docs":" The first address that is covered by this sequence within the line number\n program.\n","sig":null,"attributes":[{"value":"/ The first address that is covered by this sequence within the line number","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":527518,"byte_end":527595,"line_start":1011,"line_end":1011,"column_start":5,"column_end":82}},{"value":"/ program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":527600,"byte_end":527612,"line_start":1012,"line_end":1012,"column_start":5,"column_end":17}}]},{"kind":"Field","id":{"krate":0,"index":6704},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":527746,"byte_end":527749,"line_start":1016,"line_end":1016,"column_start":9,"column_end":12},"name":"end","qualname":"::read::line::LineSequence::end","value":"u64","parent":{"krate":0,"index":6701},"children":[],"decl_id":null,"docs":" The first address that is *not* covered by this sequence within the line\n number program.\n","sig":null,"attributes":[{"value":"/ The first address that is *not* covered by this sequence within the line","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":527637,"byte_end":527713,"line_start":1014,"line_end":1014,"column_start":5,"column_end":81}},{"value":"/ number program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":527718,"byte_end":527737,"line_start":1015,"line_end":1015,"column_start":5,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":1245},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":528001,"byte_end":528024,"line_start":1024,"line_end":1024,"column_start":10,"column_end":33},"name":"LineNumberProgramHeader","qualname":"::read::line::LineNumberProgramHeader","value":"LineProgramHeader<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `LineNumberProgramHeader` has been renamed to `LineProgramHeader`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `LineNumberProgramHeader` has been renamed to `LineProgramHeader`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":527798,"byte_end":527880,"line_start":1020,"line_end":1020,"column_start":1,"column_end":83}},{"value":"deprecated(note =\n             \"LineNumberProgramHeader has been renamed to LineProgramHeader, use that instead.\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":527881,"byte_end":527991,"line_start":1021,"line_end":1023,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":6712},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":528237,"byte_end":528254,"line_start":1029,"line_end":1029,"column_start":12,"column_end":29},"name":"LineProgramHeader","qualname":"::read::line::LineProgramHeader","value":"LineProgramHeader {  }","parent":null,"children":[{"krate":0,"index":6715},{"krate":0,"index":6716},{"krate":0,"index":6717},{"krate":0,"index":6718},{"krate":0,"index":6719},{"krate":0,"index":6720},{"krate":0,"index":6721},{"krate":0,"index":6722},{"krate":0,"index":6723},{"krate":0,"index":6724},{"krate":0,"index":6725},{"krate":0,"index":6726},{"krate":0,"index":6727},{"krate":0,"index":6728}],"decl_id":null,"docs":" A header for a line number program in the `.debug_line` section, as defined\n in section 6.2.4 of the standard.\n","sig":null,"attributes":[{"value":"/ A header for a line number program in the `.debug_line` section, as defined","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":528069,"byte_end":528148,"line_start":1026,"line_end":1026,"column_start":1,"column_end":80}},{"value":"/ in section 6.2.4 of the standard.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":528149,"byte_end":528186,"line_start":1027,"line_end":1027,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1251},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":530328,"byte_end":530334,"line_start":1088,"line_end":1088,"column_start":12,"column_end":18},"name":"offset","qualname":"<LineProgramHeader<R, Offset>>::offset","value":"pub fn offset(&Self) -> DebugLineOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Return the offset of the line number program header in the `.debug_line` section.\n","sig":null,"attributes":[{"value":"/ Return the offset of the line number program header in the `.debug_line` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":530231,"byte_end":530316,"line_start":1087,"line_end":1087,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":530540,"byte_end":530551,"line_start":1094,"line_end":1094,"column_start":12,"column_end":23},"name":"unit_length","qualname":"<LineProgramHeader<R, Offset>>::unit_length","value":"pub fn unit_length(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Return the length of the line number program and header, not including\n the length of the encoded length itself.\n","sig":null,"attributes":[{"value":"/ Return the length of the line number program and header, not including","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":530405,"byte_end":530479,"line_start":1092,"line_end":1092,"column_start":5,"column_end":79}},{"value":"/ the length of the encoded length itself.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":530484,"byte_end":530528,"line_start":1093,"line_end":1093,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1253},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":530688,"byte_end":530696,"line_start":1099,"line_end":1099,"column_start":12,"column_end":20},"name":"encoding","qualname":"<LineProgramHeader<R, Offset>>::encoding","value":"pub fn encoding(&Self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding parameters for this header's line program.\n","sig":null,"attributes":[{"value":"/ Return the encoding parameters for this header's line program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":530610,"byte_end":530676,"line_start":1098,"line_end":1098,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1254},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":530813,"byte_end":530820,"line_start":1104,"line_end":1104,"column_start":12,"column_end":19},"name":"version","qualname":"<LineProgramHeader<R, Offset>>::version","value":"pub fn version(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Get the version of this header's line program.\n","sig":null,"attributes":[{"value":"/ Get the version of this header's line program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":530751,"byte_end":530801,"line_start":1103,"line_end":1103,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":531014,"byte_end":531027,"line_start":1110,"line_end":1110,"column_start":12,"column_end":25},"name":"header_length","qualname":"<LineProgramHeader<R, Offset>>::header_length","value":"pub fn header_length(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the encoded line number program header, not including\n the length of the encoded length itself.\n","sig":null,"attributes":[{"value":"/ Get the length of the encoded line number program header, not including","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":530878,"byte_end":530953,"line_start":1108,"line_end":1108,"column_start":5,"column_end":80}},{"value":"/ the length of the encoded length itself.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":530958,"byte_end":531002,"line_start":1109,"line_end":1109,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1256},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":531154,"byte_end":531166,"line_start":1115,"line_end":1115,"column_start":12,"column_end":24},"name":"address_size","qualname":"<LineProgramHeader<R, Offset>>::address_size","value":"pub fn address_size(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the size in bytes of a target machine address.\n","sig":null,"attributes":[{"value":"/ Get the size in bytes of a target machine address.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":531088,"byte_end":531142,"line_start":1114,"line_end":1114,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1257},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":531304,"byte_end":531310,"line_start":1120,"line_end":1120,"column_start":12,"column_end":18},"name":"format","qualname":"<LineProgramHeader<R, Offset>>::format","value":"pub fn format(&Self) -> Format","parent":null,"children":[],"decl_id":null,"docs":" Whether this line program is encoded in 64- or 32-bit DWARF.\n","sig":null,"attributes":[{"value":"/ Whether this line program is encoded in 64- or 32-bit DWARF.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":531228,"byte_end":531292,"line_start":1119,"line_end":1119,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1258},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":531450,"byte_end":531463,"line_start":1125,"line_end":1125,"column_start":12,"column_end":25},"name":"line_encoding","qualname":"<LineProgramHeader<R, Offset>>::line_encoding","value":"pub fn line_encoding(&Self) -> LineEncoding","parent":null,"children":[],"decl_id":null,"docs":" Get the line encoding parameters for this header's line program.\n","sig":null,"attributes":[{"value":"/ Get the line encoding parameters for this header's line program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":531370,"byte_end":531438,"line_start":1124,"line_end":1124,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1259},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":531641,"byte_end":531667,"line_start":1131,"line_end":1131,"column_start":12,"column_end":38},"name":"minimum_instruction_length","qualname":"<LineProgramHeader<R, Offset>>::minimum_instruction_length","value":"pub fn minimum_instruction_length(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum instruction length any instruction in this header's line\n program may have.\n","sig":null,"attributes":[{"value":"/ Get the minimum instruction length any instruction in this header's line","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":531527,"byte_end":531603,"line_start":1129,"line_end":1129,"column_start":5,"column_end":81}},{"value":"/ program may have.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":531608,"byte_end":531629,"line_start":1130,"line_end":1130,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1260},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":531865,"byte_end":531899,"line_start":1137,"line_end":1137,"column_start":12,"column_end":46},"name":"maximum_operations_per_instruction","qualname":"<LineProgramHeader<R, Offset>>::maximum_operations_per_instruction","value":"pub fn maximum_operations_per_instruction(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the maximum number of operations each instruction in this header's\n line program may have.\n","sig":null,"attributes":[{"value":"/ Get the maximum number of operations each instruction in this header's","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":531748,"byte_end":531822,"line_start":1135,"line_end":1135,"column_start":5,"column_end":79}},{"value":"/ line program may have.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":531827,"byte_end":531853,"line_start":1136,"line_end":1136,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1261},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":532091,"byte_end":532106,"line_start":1143,"line_end":1143,"column_start":12,"column_end":27},"name":"default_is_stmt","qualname":"<LineProgramHeader<R, Offset>>::default_is_stmt","value":"pub fn default_is_stmt(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Get the default value of the `is_stmt` register for this header's line\n program.\n","sig":null,"attributes":[{"value":"/ Get the default value of the `is_stmt` register for this header's line","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":531988,"byte_end":532062,"line_start":1141,"line_end":1141,"column_start":5,"column_end":79}},{"value":"/ program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":532067,"byte_end":532079,"line_start":1142,"line_end":1142,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1262},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":532243,"byte_end":532252,"line_start":1148,"line_end":1148,"column_start":12,"column_end":21},"name":"line_base","qualname":"<LineProgramHeader<R, Offset>>::line_base","value":"pub fn line_base(&Self) -> i8","parent":null,"children":[],"decl_id":null,"docs":" Get the line base for this header's line program.\n","sig":null,"attributes":[{"value":"/ Get the line base for this header's line program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":532178,"byte_end":532231,"line_start":1147,"line_end":1147,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1263},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":532382,"byte_end":532392,"line_start":1153,"line_end":1153,"column_start":12,"column_end":22},"name":"line_range","qualname":"<LineProgramHeader<R, Offset>>::line_range","value":"pub fn line_range(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the line range for this header's line program.\n","sig":null,"attributes":[{"value":"/ Get the line range for this header's line program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":532316,"byte_end":532370,"line_start":1152,"line_end":1152,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1264},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":532520,"byte_end":532531,"line_start":1158,"line_end":1158,"column_start":12,"column_end":23},"name":"opcode_base","qualname":"<LineProgramHeader<R, Offset>>::opcode_base","value":"pub fn opcode_base(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get opcode base for this header's line program.\n","sig":null,"attributes":[{"value":"/ Get opcode base for this header's line program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":532457,"byte_end":532508,"line_start":1157,"line_end":1157,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1265},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":532702,"byte_end":532725,"line_start":1164,"line_end":1164,"column_start":12,"column_end":35},"name":"standard_opcode_lengths","qualname":"<LineProgramHeader<R, Offset>>::standard_opcode_lengths","value":"pub fn standard_opcode_lengths(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" An array of `u8` that specifies the number of LEB128 operands for\n each of the standard opcodes.\n","sig":null,"attributes":[{"value":"/ An array of `u8` that specifies the number of LEB128 operands for","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":532583,"byte_end":532652,"line_start":1162,"line_end":1162,"column_start":5,"column_end":74}},{"value":"/ each of the standard opcodes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":532657,"byte_end":532690,"line_start":1163,"line_end":1163,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":532842,"byte_end":532864,"line_start":1169,"line_end":1169,"column_start":12,"column_end":34},"name":"directory_entry_format","qualname":"<LineProgramHeader<R, Offset>>::directory_entry_format","value":"pub fn directory_entry_format(&Self) -> &[FileEntryFormat]","parent":null,"children":[],"decl_id":null,"docs":" Get the format of a directory entry.\n","sig":null,"attributes":[{"value":"/ Get the format of a directory entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":532790,"byte_end":532830,"line_start":1168,"line_end":1168,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1267},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":533207,"byte_end":533226,"line_start":1177,"line_end":1177,"column_start":12,"column_end":31},"name":"include_directories","qualname":"<LineProgramHeader<R, Offset>>::include_directories","value":"pub fn include_directories(&Self) -> &[AttributeValue<R, Offset>]","parent":null,"children":[],"decl_id":null,"docs":" Get the set of include directories for this header's line program.","sig":null,"attributes":[{"value":"/ Get the set of include directories for this header's line program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":532948,"byte_end":533018,"line_start":1173,"line_end":1173,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":533023,"byte_end":533026,"line_start":1174,"line_end":1174,"column_start":5,"column_end":8}},{"value":"/ For DWARF version <= 4, the compilation's current directory is not included","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":533031,"byte_end":533110,"line_start":1175,"line_end":1175,"column_start":5,"column_end":84}},{"value":"/ in the return value, but is implicitly considered to be in the set per spec.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":533115,"byte_end":533195,"line_start":1176,"line_end":1176,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":533472,"byte_end":533481,"line_start":1184,"line_end":1184,"column_start":12,"column_end":21},"name":"directory","qualname":"<LineProgramHeader<R, Offset>>::directory","value":"pub fn directory(&Self, u64) -> Option<AttributeValue<R, Offset>>","parent":null,"children":[],"decl_id":null,"docs":" The include directory with the given directory index.","sig":null,"attributes":[{"value":"/ The include directory with the given directory index.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":533317,"byte_end":533374,"line_start":1181,"line_end":1181,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":533379,"byte_end":533382,"line_start":1182,"line_end":1182,"column_start":5,"column_end":8}},{"value":"/ A directory index of 0 corresponds to the compilation unit directory.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":533387,"byte_end":533460,"line_start":1183,"line_end":1183,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1269},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":533998,"byte_end":534020,"line_start":1198,"line_end":1198,"column_start":12,"column_end":34},"name":"file_name_entry_format","qualname":"<LineProgramHeader<R, Offset>>::file_name_entry_format","value":"pub fn file_name_entry_format(&Self) -> &[FileEntryFormat]","parent":null,"children":[],"decl_id":null,"docs":" Get the format of a file name entry.\n","sig":null,"attributes":[{"value":"/ Get the format of a file name entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":533946,"byte_end":533986,"line_start":1197,"line_end":1197,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1270},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":534282,"byte_end":534300,"line_start":1206,"line_end":1206,"column_start":12,"column_end":30},"name":"file_has_timestamp","qualname":"<LineProgramHeader<R, Offset>>::file_has_timestamp","value":"pub fn file_has_timestamp(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the file entries may have valid timestamps.","sig":null,"attributes":[{"value":"/ Return true if the file entries may have valid timestamps.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":534104,"byte_end":534166,"line_start":1202,"line_end":1202,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":534171,"byte_end":534174,"line_start":1203,"line_end":1203,"column_start":5,"column_end":8}},{"value":"/ Only returns false if we definitely know that all timestamp fields","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":534179,"byte_end":534249,"line_start":1204,"line_end":1204,"column_start":5,"column_end":75}},{"value":"/ are invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":534254,"byte_end":534270,"line_start":1205,"line_end":1205,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":534689,"byte_end":534702,"line_start":1218,"line_end":1218,"column_start":12,"column_end":25},"name":"file_has_size","qualname":"<LineProgramHeader<R, Offset>>::file_has_size","value":"pub fn file_has_size(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the file entries may have valid sizes.","sig":null,"attributes":[{"value":"/ Return true if the file entries may have valid sizes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":534521,"byte_end":534578,"line_start":1214,"line_end":1214,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":534583,"byte_end":534586,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ Only returns false if we definitely know that all size fields","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":534591,"byte_end":534656,"line_start":1216,"line_end":1216,"column_start":5,"column_end":70}},{"value":"/ are invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":534661,"byte_end":534677,"line_start":1217,"line_end":1217,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":534998,"byte_end":535010,"line_start":1227,"line_end":1227,"column_start":12,"column_end":24},"name":"file_has_md5","qualname":"<LineProgramHeader<R, Offset>>::file_has_md5","value":"pub fn file_has_md5(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the file name entry format contains an MD5 field.\n","sig":null,"attributes":[{"value":"/ Return true if the file name entry format contains an MD5 field.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":534918,"byte_end":534986,"line_start":1226,"line_end":1226,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":535245,"byte_end":535255,"line_start":1234,"line_end":1234,"column_start":12,"column_end":22},"name":"file_names","qualname":"<LineProgramHeader<R, Offset>>::file_names","value":"pub fn file_names(&Self) -> &[FileEntry<R, Offset>]","parent":null,"children":[],"decl_id":null,"docs":" Get the list of source files that appear in this header's line program.\n","sig":null,"attributes":[{"value":"/ Get the list of source files that appear in this header's line program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":535158,"byte_end":535233,"line_start":1233,"line_end":1233,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1277},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":535571,"byte_end":535575,"line_start":1243,"line_end":1243,"column_start":12,"column_end":16},"name":"file","qualname":"<LineProgramHeader<R, Offset>>::file","value":"pub fn file(&Self, u64) -> Option<&FileEntry<R, Offset>>","parent":null,"children":[],"decl_id":null,"docs":" The source file with the given file index.","sig":null,"attributes":[{"value":"/ The source file with the given file index.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":535332,"byte_end":535378,"line_start":1238,"line_end":1238,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":535383,"byte_end":535386,"line_start":1239,"line_end":1239,"column_start":5,"column_end":8}},{"value":"/ A file index of 0 corresponds to the compilation unit file.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":535391,"byte_end":535454,"line_start":1240,"line_end":1240,"column_start":5,"column_end":68}},{"value":"/ Note that a file index of 0 is invalid for DWARF version <= 4,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":535459,"byte_end":535525,"line_start":1241,"line_end":1241,"column_start":5,"column_end":71}},{"value":"/ but we support it anyway.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":535530,"byte_end":535559,"line_start":1242,"line_end":1242,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1278},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536641,"byte_end":536656,"line_start":1274,"line_end":1274,"column_start":12,"column_end":27},"name":"raw_program_buf","qualname":"<LineProgramHeader<R, Offset>>::raw_program_buf","value":"pub fn raw_program_buf(&Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Get the raw, un-parsed `EndianSlice` containing this header's line number\n program.","sig":null,"attributes":[{"value":"/ Get the raw, un-parsed `EndianSlice` containing this header's line number","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":535944,"byte_end":536021,"line_start":1256,"line_end":1256,"column_start":5,"column_end":82}},{"value":"/ program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536026,"byte_end":536038,"line_start":1257,"line_end":1257,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536043,"byte_end":536046,"line_start":1258,"line_end":1258,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536051,"byte_end":536058,"line_start":1259,"line_end":1259,"column_start":5,"column_end":12}},{"value":"/ # fn foo() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536063,"byte_end":536079,"line_start":1260,"line_end":1260,"column_start":5,"column_end":21}},{"value":"/ use gimli::{LineProgramHeader, EndianSlice, NativeEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536084,"byte_end":536146,"line_start":1261,"line_end":1261,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536151,"byte_end":536154,"line_start":1262,"line_end":1262,"column_start":5,"column_end":8}},{"value":"/ fn get_line_number_program_header<'a>() -> LineProgramHeader<EndianSlice<'a, NativeEndian>> {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536159,"byte_end":536256,"line_start":1263,"line_end":1263,"column_start":5,"column_end":102}},{"value":"/     // Get a line number program header from some offset in a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536261,"byte_end":536326,"line_start":1264,"line_end":1264,"column_start":5,"column_end":70}},{"value":"/     // `.debug_line` section...","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536331,"byte_end":536366,"line_start":1265,"line_end":1265,"column_start":5,"column_end":40}},{"value":"/ #   unimplemented!()","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536371,"byte_end":536395,"line_start":1266,"line_end":1266,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536400,"byte_end":536405,"line_start":1267,"line_end":1267,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536410,"byte_end":536413,"line_start":1268,"line_end":1268,"column_start":5,"column_end":8}},{"value":"/ let header = get_line_number_program_header();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536418,"byte_end":536468,"line_start":1269,"line_end":1269,"column_start":5,"column_end":55}},{"value":"/ let raw_program = header.raw_program_buf();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536473,"byte_end":536520,"line_start":1270,"line_end":1270,"column_start":5,"column_end":52}},{"value":"/ println!(\"The length of the raw program in bytes is {}\", raw_program.len());","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536525,"byte_end":536605,"line_start":1271,"line_end":1271,"column_start":5,"column_end":85}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536610,"byte_end":536617,"line_start":1272,"line_end":1272,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536622,"byte_end":536629,"line_start":1273,"line_end":1273,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1279},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536829,"byte_end":536841,"line_start":1280,"line_end":1280,"column_start":12,"column_end":24},"name":"instructions","qualname":"<LineProgramHeader<R, Offset>>::instructions","value":"pub fn instructions(&Self) -> LineInstructions<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the instructions in this header's line number program, parsing\n them as we go.\n","sig":null,"attributes":[{"value":"/ Iterate over the instructions in this header's line number program, parsing","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536715,"byte_end":536794,"line_start":1278,"line_end":1278,"column_start":5,"column_end":84}},{"value":"/ them as we go.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":536799,"byte_end":536817,"line_start":1279,"line_end":1279,"column_start":5,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":1283},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":541769,"byte_end":541796,"line_start":1432,"line_end":1432,"column_start":10,"column_end":37},"name":"IncompleteLineNumberProgram","qualname":"::read::line::IncompleteLineNumberProgram","value":"IncompleteLineProgram<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `IncompleteLineNumberProgram` has been renamed to `IncompleteLineProgram`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `IncompleteLineNumberProgram` has been renamed to `IncompleteLineProgram`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":541550,"byte_end":541640,"line_start":1428,"line_end":1428,"column_start":1,"column_end":91}},{"value":"deprecated(note =\n             \"IncompleteLineNumberProgram has been renamed to IncompleteLineProgram, use that instead.\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":541641,"byte_end":541759,"line_start":1429,"line_end":1431,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":6752},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":541958,"byte_end":541979,"line_start":1436,"line_end":1436,"column_start":12,"column_end":33},"name":"IncompleteLineProgram","qualname":"::read::line::IncompleteLineProgram","value":"IncompleteLineProgram {  }","parent":null,"children":[{"krate":0,"index":6755}],"decl_id":null,"docs":" A line number program that has not been run to completion.\n","sig":null,"attributes":[{"value":"/ A line number program that has not been run to completion.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":541845,"byte_end":541907,"line_start":1434,"line_end":1434,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1289},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":542311,"byte_end":542317,"line_start":1450,"line_end":1450,"column_start":12,"column_end":18},"name":"header","qualname":"<IncompleteLineProgram<R, Offset>>::header","value":"pub fn header(&Self) -> &LineProgramHeader<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the `LineProgramHeader` for this program.\n","sig":null,"attributes":[{"value":"/ Retrieve the `LineProgramHeader` for this program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":542245,"byte_end":542299,"line_start":1449,"line_end":1449,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":542522,"byte_end":542526,"line_start":1456,"line_end":1456,"column_start":12,"column_end":16},"name":"rows","qualname":"<IncompleteLineProgram<R, Offset>>::rows","value":"pub fn rows(Self) -> OneShotLineRows<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `LineRows` for executing this program to iterate\n over rows in the line information matrix.\n","sig":null,"attributes":[{"value":"/ Construct a new `LineRows` for executing this program to iterate","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":542392,"byte_end":542460,"line_start":1454,"line_end":1454,"column_start":5,"column_end":73}},{"value":"/ over rows in the line information matrix.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":542465,"byte_end":542510,"line_start":1455,"line_end":1455,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":543516,"byte_end":543525,"line_start":1481,"line_end":1481,"column_start":12,"column_end":21},"name":"sequences","qualname":"<IncompleteLineProgram<R, Offset>>::sequences","value":"pub fn sequences(Self)\n-> Result<(CompleteLineProgram<R, Offset>, Vec<LineSequence<R>>)>","parent":null,"children":[],"decl_id":null,"docs":" Execute the line number program, completing the `IncompleteLineProgram`\n into a `CompleteLineProgram` and producing an array of sequences within\n the line number program that can later be used with\n `CompleteLineProgram::resume_from`.","sig":null,"attributes":[{"value":"/ Execute the line number program, completing the `IncompleteLineProgram`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":542611,"byte_end":542686,"line_start":1460,"line_end":1460,"column_start":5,"column_end":80}},{"value":"/ into a `CompleteLineProgram` and producing an array of sequences within","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":542691,"byte_end":542766,"line_start":1461,"line_end":1461,"column_start":5,"column_end":80}},{"value":"/ the line number program that can later be used with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":542771,"byte_end":542826,"line_start":1462,"line_end":1462,"column_start":5,"column_end":60}},{"value":"/ `CompleteLineProgram::resume_from`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":542831,"byte_end":542870,"line_start":1463,"line_end":1463,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":542875,"byte_end":542878,"line_start":1464,"line_end":1464,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":542883,"byte_end":542890,"line_start":1465,"line_end":1465,"column_start":5,"column_end":12}},{"value":"/ # fn foo() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":542895,"byte_end":542911,"line_start":1466,"line_end":1466,"column_start":5,"column_end":21}},{"value":"/ use gimli::{IncompleteLineProgram, EndianSlice, NativeEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":542916,"byte_end":542982,"line_start":1467,"line_end":1467,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":542987,"byte_end":542990,"line_start":1468,"line_end":1468,"column_start":5,"column_end":8}},{"value":"/ fn get_line_number_program<'a>() -> IncompleteLineProgram<EndianSlice<'a, NativeEndian>> {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":542995,"byte_end":543089,"line_start":1469,"line_end":1469,"column_start":5,"column_end":99}},{"value":"/     // Get a line number program from some offset in a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":543094,"byte_end":543152,"line_start":1470,"line_end":1470,"column_start":5,"column_end":63}},{"value":"/     // `.debug_line` section...","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":543157,"byte_end":543192,"line_start":1471,"line_end":1471,"column_start":5,"column_end":40}},{"value":"/ #   unimplemented!()","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":543197,"byte_end":543221,"line_start":1472,"line_end":1472,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":543226,"byte_end":543231,"line_start":1473,"line_end":1473,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":543236,"byte_end":543239,"line_start":1474,"line_end":1474,"column_start":5,"column_end":8}},{"value":"/ let program = get_line_number_program();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":543244,"byte_end":543288,"line_start":1475,"line_end":1475,"column_start":5,"column_end":49}},{"value":"/ let (program, sequences) = program.sequences().unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":543293,"byte_end":543353,"line_start":1476,"line_end":1476,"column_start":5,"column_end":65}},{"value":"/ println!(\"There are {} sequences in this line number program\", sequences.len());","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":543358,"byte_end":543442,"line_start":1477,"line_end":1477,"column_start":5,"column_end":89}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":543447,"byte_end":543454,"line_start":1478,"line_end":1478,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":543459,"byte_end":543466,"line_start":1479,"line_end":1479,"column_start":5,"column_end":12}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":543471,"byte_end":543504,"line_start":1480,"line_end":1480,"column_start":5,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":1292},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":545080,"byte_end":545105,"line_start":1525,"line_end":1525,"column_start":10,"column_end":35},"name":"CompleteLineNumberProgram","qualname":"::read::line::CompleteLineNumberProgram","value":"CompleteLineProgram<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `CompleteLineNumberProgram` has been renamed to `CompleteLineProgram`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `CompleteLineNumberProgram` has been renamed to `CompleteLineProgram`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":544869,"byte_end":544955,"line_start":1521,"line_end":1521,"column_start":1,"column_end":87}},{"value":"deprecated(note =\n             \"CompleteLineNumberProgram has been renamed to CompleteLineProgram, use that instead.\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":544956,"byte_end":545070,"line_start":1522,"line_end":1524,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":6779},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":545272,"byte_end":545291,"line_start":1529,"line_end":1529,"column_start":12,"column_end":31},"name":"CompleteLineProgram","qualname":"::read::line::CompleteLineProgram","value":"CompleteLineProgram {  }","parent":null,"children":[{"krate":0,"index":6782}],"decl_id":null,"docs":" A line number program that has previously been run to completion.\n","sig":null,"attributes":[{"value":"/ A line number program that has previously been run to completion.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":545152,"byte_end":545221,"line_start":1527,"line_end":1527,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1298},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":545621,"byte_end":545627,"line_start":1543,"line_end":1543,"column_start":12,"column_end":18},"name":"header","qualname":"<CompleteLineProgram<R, Offset>>::header","value":"pub fn header(&Self) -> &LineProgramHeader<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the `LineProgramHeader` for this program.\n","sig":null,"attributes":[{"value":"/ Retrieve the `LineProgramHeader` for this program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":545555,"byte_end":545609,"line_start":1542,"line_end":1542,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1299},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":546492,"byte_end":546503,"line_start":1568,"line_end":1568,"column_start":12,"column_end":23},"name":"resume_from","qualname":"<CompleteLineProgram<R, Offset>>::resume_from","value":"pub fn resume_from<'program>(&'program Self, &LineSequence<R>)\n-> ResumedLineRows","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `LineRows` for executing the subset of the line\n number program identified by 'sequence' and  generating the line information\n matrix.","sig":null,"attributes":[{"value":"/ Construct a new `LineRows` for executing the subset of the line","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":545702,"byte_end":545769,"line_start":1547,"line_end":1547,"column_start":5,"column_end":72}},{"value":"/ number program identified by 'sequence' and  generating the line information","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":545774,"byte_end":545854,"line_start":1548,"line_end":1548,"column_start":5,"column_end":85}},{"value":"/ matrix.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":545859,"byte_end":545870,"line_start":1549,"line_end":1549,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":545875,"byte_end":545878,"line_start":1550,"line_end":1550,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":545883,"byte_end":545890,"line_start":1551,"line_end":1551,"column_start":5,"column_end":12}},{"value":"/ # fn foo() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":545895,"byte_end":545911,"line_start":1552,"line_end":1552,"column_start":5,"column_end":21}},{"value":"/ use gimli::{IncompleteLineProgram, EndianSlice, NativeEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":545916,"byte_end":545982,"line_start":1553,"line_end":1553,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":545987,"byte_end":545990,"line_start":1554,"line_end":1554,"column_start":5,"column_end":8}},{"value":"/ fn get_line_number_program<'a>() -> IncompleteLineProgram<EndianSlice<'a, NativeEndian>> {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":545995,"byte_end":546089,"line_start":1555,"line_end":1555,"column_start":5,"column_end":99}},{"value":"/     // Get a line number program from some offset in a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":546094,"byte_end":546152,"line_start":1556,"line_end":1556,"column_start":5,"column_end":63}},{"value":"/     // `.debug_line` section...","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":546157,"byte_end":546192,"line_start":1557,"line_end":1557,"column_start":5,"column_end":40}},{"value":"/ #   unimplemented!()","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":546197,"byte_end":546221,"line_start":1558,"line_end":1558,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":546226,"byte_end":546231,"line_start":1559,"line_end":1559,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":546236,"byte_end":546239,"line_start":1560,"line_end":1560,"column_start":5,"column_end":8}},{"value":"/ let program = get_line_number_program();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":546244,"byte_end":546288,"line_start":1561,"line_end":1561,"column_start":5,"column_end":49}},{"value":"/ let (program, sequences) = program.sequences().unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":546293,"byte_end":546353,"line_start":1562,"line_end":1562,"column_start":5,"column_end":65}},{"value":"/ for sequence in &sequences {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":546358,"byte_end":546390,"line_start":1563,"line_end":1563,"column_start":5,"column_end":37}},{"value":"/     let mut sm = program.resume_from(sequence);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":546395,"byte_end":546446,"line_start":1564,"line_end":1564,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":546451,"byte_end":546456,"line_start":1565,"line_end":1565,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":546461,"byte_end":546468,"line_start":1566,"line_end":1566,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":546473,"byte_end":546480,"line_start":1567,"line_end":1567,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":6806},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":546796,"byte_end":546805,"line_start":1578,"line_end":1578,"column_start":12,"column_end":21},"name":"FileEntry","qualname":"::read::line::FileEntry","value":"FileEntry {  }","parent":null,"children":[{"krate":0,"index":6809},{"krate":0,"index":6810},{"krate":0,"index":6811},{"krate":0,"index":6812},{"krate":0,"index":6813}],"decl_id":null,"docs":" An entry in the `LineProgramHeader`'s `file_names` set.\n","sig":null,"attributes":[{"value":"/ An entry in the `LineProgramHeader`'s `file_names` set.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":546680,"byte_end":546739,"line_start":1576,"line_end":1576,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":547988,"byte_end":547997,"line_start":1617,"line_end":1617,"column_start":12,"column_end":21},"name":"path_name","qualname":"<FileEntry<R, Offset>>::path_name","value":"pub fn path_name(&Self) -> AttributeValue<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" > A slice containing the full or relative path name of\n > a source file. If the entry contains a file name or a relative path\n > name, the file is located relative to either the compilation directory\n > (as specified by the DW_AT_comp_dir attribute given in the compilation\n > unit) or one of the directories in the include_directories section.\n","sig":null,"attributes":[{"value":"/ > A slice containing the full or relative path name of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":547600,"byte_end":547658,"line_start":1612,"line_end":1612,"column_start":5,"column_end":63}},{"value":"/ > a source file. If the entry contains a file name or a relative path","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":547663,"byte_end":547736,"line_start":1613,"line_end":1613,"column_start":5,"column_end":78}},{"value":"/ > name, the file is located relative to either the compilation directory","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":547741,"byte_end":547817,"line_start":1614,"line_end":1614,"column_start":5,"column_end":81}},{"value":"/ > (as specified by the DW_AT_comp_dir attribute given in the compilation","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":547822,"byte_end":547898,"line_start":1615,"line_end":1615,"column_start":5,"column_end":81}},{"value":"/ > unit) or one of the directories in the include_directories section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":547903,"byte_end":547976,"line_start":1616,"line_end":1616,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":548662,"byte_end":548677,"line_start":1632,"line_end":1632,"column_start":12,"column_end":27},"name":"directory_index","qualname":"<FileEntry<R, Offset>>::directory_index","value":"pub fn directory_index(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" > An unsigned LEB128 number representing the directory index of the\n > directory in which the file was found.\n >\n > ...\n >\n > The directory index represents an entry in the include_directories\n > section of the line number program header. The index is 0 if the file\n > was found in the current directory of the compilation, 1 if it was found\n > in the first directory in the include_directories section, and so\n > on. The directory index is ignored for file names that represent full\n > path names.\n","sig":null,"attributes":[{"value":"/ > An unsigned LEB128 number representing the directory index of the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":548078,"byte_end":548149,"line_start":1621,"line_end":1621,"column_start":5,"column_end":76}},{"value":"/ > directory in which the file was found.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":548154,"byte_end":548198,"line_start":1622,"line_end":1622,"column_start":5,"column_end":49}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":548203,"byte_end":548208,"line_start":1623,"line_end":1623,"column_start":5,"column_end":10}},{"value":"/ > ...","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":548213,"byte_end":548222,"line_start":1624,"line_end":1624,"column_start":5,"column_end":14}},{"value":"/ >","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":548227,"byte_end":548232,"line_start":1625,"line_end":1625,"column_start":5,"column_end":10}},{"value":"/ > The directory index represents an entry in the include_directories","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":548237,"byte_end":548309,"line_start":1626,"line_end":1626,"column_start":5,"column_end":77}},{"value":"/ > section of the line number program header. The index is 0 if the file","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":548314,"byte_end":548389,"line_start":1627,"line_end":1627,"column_start":5,"column_end":80}},{"value":"/ > was found in the current directory of the compilation, 1 if it was found","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":548394,"byte_end":548472,"line_start":1628,"line_end":1628,"column_start":5,"column_end":83}},{"value":"/ > in the first directory in the include_directories section, and so","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":548477,"byte_end":548548,"line_start":1629,"line_end":1629,"column_start":5,"column_end":76}},{"value":"/ > on. The directory index is ignored for file names that represent full","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":548553,"byte_end":548628,"line_start":1630,"line_end":1630,"column_start":5,"column_end":80}},{"value":"/ > path names.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":548633,"byte_end":548650,"line_start":1631,"line_end":1631,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":548862,"byte_end":548871,"line_start":1639,"line_end":1639,"column_start":12,"column_end":21},"name":"directory","qualname":"<FileEntry<R, Offset>>::directory","value":"pub fn directory(&Self, &LineProgramHeader<R>)\n-> Option<AttributeValue<R, Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Get this file's directory.","sig":null,"attributes":[{"value":"/ Get this file's directory.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":548734,"byte_end":548764,"line_start":1636,"line_end":1636,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":548769,"byte_end":548772,"line_start":1637,"line_end":1637,"column_start":5,"column_end":8}},{"value":"/ A directory index of 0 corresponds to the compilation unit directory.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":548777,"byte_end":548850,"line_start":1638,"line_end":1638,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":549119,"byte_end":549128,"line_start":1645,"line_end":1645,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<FileEntry<R, Offset>>::timestamp","value":"pub fn timestamp(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The implementation-defined time of last modification of the file,\n or 0 if not available.\n","sig":null,"attributes":[{"value":"/ The implementation-defined time of last modification of the file,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":549007,"byte_end":549076,"line_start":1643,"line_end":1643,"column_start":5,"column_end":74}},{"value":"/ or 0 if not available.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":549081,"byte_end":549107,"line_start":1644,"line_end":1644,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":549375,"byte_end":549392,"line_start":1653,"line_end":1653,"column_start":12,"column_end":29},"name":"last_modification","qualname":"<FileEntry<R, Offset>>::last_modification","value":"pub fn last_modification(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" \"An unsigned LEB128 number representing the time of last modification of\n the file, or 0 if not available.\"\n","sig":null,"attributes":[{"value":"/ \"An unsigned LEB128 number representing the time of last modification of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":549179,"byte_end":549255,"line_start":1649,"line_end":1649,"column_start":5,"column_end":81}},{"value":"/ the file, or 0 if not available.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":549260,"byte_end":549297,"line_start":1650,"line_end":1650,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":549512,"byte_end":549516,"line_start":1658,"line_end":1658,"column_start":12,"column_end":16},"name":"size","qualname":"<FileEntry<R, Offset>>::size","value":"pub fn size(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The size of the file in bytes, or 0 if not available.\n","sig":null,"attributes":[{"value":"/ The size of the file in bytes, or 0 if not available.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":549443,"byte_end":549500,"line_start":1657,"line_end":1657,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":549748,"byte_end":549754,"line_start":1666,"line_end":1666,"column_start":12,"column_end":18},"name":"length","qualname":"<FileEntry<R, Offset>>::length","value":"pub fn length(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" \"An unsigned LEB128 number representing the length in bytes of the file,\n or 0 if not available.\"\n","sig":null,"attributes":[{"value":"/ \"An unsigned LEB128 number representing the length in bytes of the file,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":549562,"byte_end":549638,"line_start":1662,"line_end":1662,"column_start":5,"column_end":81}},{"value":"/ or 0 if not available.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":549643,"byte_end":549670,"line_start":1663,"line_end":1663,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1313},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":549938,"byte_end":549941,"line_start":1673,"line_end":1673,"column_start":12,"column_end":15},"name":"md5","qualname":"<FileEntry<R, Offset>>::md5","value":"pub fn md5(&Self) -> &[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" A 16-byte MD5 digest of the file contents.","sig":null,"attributes":[{"value":"/ A 16-byte MD5 digest of the file contents.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":549800,"byte_end":549846,"line_start":1670,"line_end":1670,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":549851,"byte_end":549854,"line_start":1671,"line_end":1671,"column_start":5,"column_end":8}},{"value":"/ Only valid if `LineProgramHeader::file_has_md5` returns `true`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":549859,"byte_end":549926,"line_start":1672,"line_end":1672,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":6842},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":550121,"byte_end":550136,"line_start":1680,"line_end":1680,"column_start":12,"column_end":27},"name":"FileEntryFormat","qualname":"::read::line::FileEntryFormat","value":"FileEntryFormat { content_type, form }","parent":null,"children":[{"krate":0,"index":6843},{"krate":0,"index":6844}],"decl_id":null,"docs":" The format of a component of an include directory or file name entry.\n","sig":null,"attributes":[{"value":"/ The format of a component of an include directory or file name entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":549991,"byte_end":550064,"line_start":1678,"line_end":1678,"column_start":1,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":6843},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":550217,"byte_end":550229,"line_start":1682,"line_end":1682,"column_start":9,"column_end":21},"name":"content_type","qualname":"::read::line::FileEntryFormat::content_type","value":"constants::DwLnct","parent":{"krate":0,"index":6842},"children":[],"decl_id":null,"docs":" The type of information that is represented by the component.\n","sig":null,"attributes":[{"value":"/ The type of information that is represented by the component.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":550143,"byte_end":550208,"line_start":1681,"line_end":1681,"column_start":5,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":6844},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":550309,"byte_end":550313,"line_start":1685,"line_end":1685,"column_start":9,"column_end":13},"name":"form","qualname":"::read::line::FileEntryFormat::form","value":"constants::DwForm","parent":{"krate":0,"index":6842},"children":[],"decl_id":null,"docs":" The encoding form of the component value.\n","sig":null,"attributes":[{"value":"/ The encoding form of the component value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":550255,"byte_end":550300,"line_start":1684,"line_end":1684,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":6857},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":597769,"byte_end":597777,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"DebugLoc","qualname":"::read::loclists::DebugLoc","value":"DebugLoc {  }","parent":null,"children":[{"krate":0,"index":6859}],"decl_id":null,"docs":" The raw contents of the `.debug_loc` section.\n","sig":null,"attributes":[{"value":"/ The raw contents of the `.debug_loc` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":597669,"byte_end":597718,"line_start":12,"line_end":12,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1353},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":598489,"byte_end":598492,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugLoc<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugLoc` instance from the data in the `.debug_loc`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugLoc` instance from the data in the `.debug_loc`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":597907,"byte_end":597980,"line_start":22,"line_end":22,"column_start":5,"column_end":78}},{"value":"/ section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":597985,"byte_end":597997,"line_start":23,"line_end":23,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":598002,"byte_end":598005,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_loc` section and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":598010,"byte_end":598084,"line_start":25,"line_end":25,"column_start":5,"column_end":79}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":598089,"byte_end":598159,"line_start":26,"line_end":26,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":598164,"byte_end":598203,"line_start":27,"line_end":27,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":598208,"byte_end":598211,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":598216,"byte_end":598223,"line_start":29,"line_end":29,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugLoc, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":598228,"byte_end":598268,"line_start":30,"line_end":30,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":598273,"byte_end":598276,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":598281,"byte_end":598322,"line_start":32,"line_end":32,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_loc_section_somehow = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":598327,"byte_end":598378,"line_start":33,"line_end":33,"column_start":5,"column_end":56}},{"value":"/ let debug_loc = DebugLoc::new(read_debug_loc_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":598383,"byte_end":598465,"line_start":34,"line_end":34,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":598470,"byte_end":598477,"line_start":35,"line_end":35,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":6871},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599021,"byte_end":599034,"line_start":60,"line_end":60,"column_start":12,"column_end":25},"name":"DebugLocLists","qualname":"::read::loclists::DebugLocLists","value":"DebugLocLists {  }","parent":null,"children":[{"krate":0,"index":6873}],"decl_id":null,"docs":" The `DebugLocLists` struct represents the DWARF data\n found in the `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ The `DebugLocLists` struct represents the DWARF data","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":598870,"byte_end":598926,"line_start":57,"line_end":57,"column_start":1,"column_end":57}},{"value":"/ found in the `.debug_loclists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":598927,"byte_end":598970,"line_start":58,"line_end":58,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599780,"byte_end":599783,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugLocLists<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugLocLists` instance from the data in the `.debug_loclists`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugLocLists` instance from the data in the `.debug_loclists`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599158,"byte_end":599241,"line_start":68,"line_end":68,"column_start":5,"column_end":88}},{"value":"/ section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599246,"byte_end":599258,"line_start":69,"line_end":69,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599263,"byte_end":599266,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_loclists` section and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599271,"byte_end":599350,"line_start":71,"line_end":71,"column_start":5,"column_end":84}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599355,"byte_end":599425,"line_start":72,"line_end":72,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599430,"byte_end":599469,"line_start":73,"line_end":73,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599474,"byte_end":599477,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599482,"byte_end":599489,"line_start":75,"line_end":75,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugLocLists, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599494,"byte_end":599539,"line_start":76,"line_end":76,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599544,"byte_end":599547,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599552,"byte_end":599593,"line_start":78,"line_end":78,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_loclists_section_somehow = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599598,"byte_end":599654,"line_start":79,"line_end":79,"column_start":5,"column_end":61}},{"value":"/ let debug_loclists = DebugLocLists::new(read_debug_loclists_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599659,"byte_end":599756,"line_start":80,"line_end":80,"column_start":5,"column_end":102}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599761,"byte_end":599768,"line_start":81,"line_end":81,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":6893},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":601798,"byte_end":601811,"line_start":163,"line_end":163,"column_start":12,"column_end":25},"name":"LocationLists","qualname":"::read::loclists::LocationLists","value":"LocationLists {  }","parent":null,"children":[{"krate":0,"index":6895},{"krate":0,"index":6896}],"decl_id":null,"docs":" The DWARF data found in `.debug_loc` and `.debug_loclists` sections.\n","sig":null,"attributes":[{"value":"/ The DWARF data found in `.debug_loc` and `.debug_loclists` sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":601675,"byte_end":601747,"line_start":161,"line_end":161,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602047,"byte_end":602050,"line_start":171,"line_end":171,"column_start":12,"column_end":15},"name":"new","qualname":"<LocationLists<R>>::new","value":"pub fn new(DebugLoc<R>, DebugLocLists<R>) -> LocationLists<R>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `LocationLists` instance from the data in the `.debug_loc` and\n `.debug_loclists` sections.\n","sig":null,"attributes":[{"value":"/ Construct a new `LocationLists` instance from the data in the `.debug_loc` and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":601917,"byte_end":601999,"line_start":169,"line_end":169,"column_start":5,"column_end":87}},{"value":"/ `.debug_loclists` sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602004,"byte_end":602035,"line_start":170,"line_end":170,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1383},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602886,"byte_end":602892,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"name":"borrow","qualname":"<LocationLists<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> LocationLists<R> where F: FnMut(&'a T)\n-> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `LocationLists` that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `LocationLists` that references the data in `self`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602256,"byte_end":602320,"line_start":180,"line_end":180,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602325,"byte_end":602328,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602333,"byte_end":602398,"line_start":182,"line_end":182,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602403,"byte_end":602406,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602411,"byte_end":602431,"line_start":184,"line_end":184,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602436,"byte_end":602439,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602444,"byte_end":602462,"line_start":186,"line_end":186,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602467,"byte_end":602512,"line_start":187,"line_end":187,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602517,"byte_end":602601,"line_start":188,"line_end":188,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::LocationLists<Vec<u8>> = load_section();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602606,"byte_end":602676,"line_start":189,"line_end":189,"column_start":5,"column_end":75}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602681,"byte_end":602728,"line_start":190,"line_end":190,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602733,"byte_end":602783,"line_start":191,"line_end":191,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602788,"byte_end":602850,"line_start":192,"line_end":192,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602855,"byte_end":602862,"line_start":193,"line_end":193,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602867,"byte_end":602874,"line_start":194,"line_end":194,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1389},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":603708,"byte_end":603717,"line_start":218,"line_end":218,"column_start":12,"column_end":21},"name":"locations","qualname":"<LocationLists<R>>::locations","value":"pub fn locations(&Self, LocationListsOffset<R::Offset>, Encoding, u64,\n                 &DebugAddr<R>, DebugAddrBase<R::Offset>)\n-> Result<LocListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the `LocationListEntry`s starting at the given offset.","sig":null,"attributes":[{"value":"/ Iterate over the `LocationListEntry`s starting at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":603212,"byte_end":603283,"line_start":207,"line_end":207,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":603288,"byte_end":603291,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ The `unit_encoding` must match the compilation unit that the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":603296,"byte_end":603360,"line_start":209,"line_end":209,"column_start":5,"column_end":69}},{"value":"/ offset was contained in.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":603365,"byte_end":603393,"line_start":210,"line_end":210,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":603398,"byte_end":603401,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ The `base_address` should be obtained from the `DW_AT_low_pc` attribute in the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":603406,"byte_end":603488,"line_start":212,"line_end":212,"column_start":5,"column_end":87}},{"value":"/ `DW_TAG_compile_unit` entry for the compilation unit that contains this location","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":603493,"byte_end":603577,"line_start":213,"line_end":213,"column_start":5,"column_end":89}},{"value":"/ list.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":603582,"byte_end":603591,"line_start":214,"line_end":214,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":603596,"byte_end":603599,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":603604,"byte_end":603625,"line_start":216,"line_end":216,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":603630,"byte_end":603696,"line_start":217,"line_end":217,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":604586,"byte_end":604599,"line_start":244,"line_end":244,"column_start":12,"column_end":25},"name":"raw_locations","qualname":"<LocationLists<R>>::raw_locations","value":"pub fn raw_locations(&Self, LocationListsOffset<R::Offset>, Encoding)\n-> Result<RawLocListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the raw `LocationListEntry`s starting at the given offset.","sig":null,"attributes":[{"value":"/ Iterate over the raw `LocationListEntry`s starting at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":604156,"byte_end":604231,"line_start":234,"line_end":234,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":604236,"byte_end":604239,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ The `unit_encoding` must match the compilation unit that the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":604244,"byte_end":604308,"line_start":236,"line_end":236,"column_start":5,"column_end":69}},{"value":"/ offset was contained in.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":604313,"byte_end":604341,"line_start":237,"line_end":237,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":604346,"byte_end":604349,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ This iterator does not perform any processing of the location entries,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":604354,"byte_end":604428,"line_start":239,"line_end":239,"column_start":5,"column_end":79}},{"value":"/ such as handling base addresses.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":604433,"byte_end":604469,"line_start":240,"line_end":240,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":604474,"byte_end":604477,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":604482,"byte_end":604503,"line_start":242,"line_end":242,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":604508,"byte_end":604574,"line_start":243,"line_end":243,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1391},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":605343,"byte_end":605353,"line_start":264,"line_end":264,"column_start":12,"column_end":22},"name":"get_offset","qualname":"<LocationLists<R>>::get_offset","value":"pub fn get_offset(&Self, Encoding, DebugLocListsBase<R::Offset>,\n                  DebugLocListsIndex<R::Offset>)\n-> Result<LocationListsOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `.debug_loclists` offset at the given `base` and `index`.","sig":null,"attributes":[{"value":"/ Returns the `.debug_loclists` offset at the given `base` and `index`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":605005,"byte_end":605078,"line_start":258,"line_end":258,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":605083,"byte_end":605086,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ The `base` must be the `DW_AT_loclists_base` value from the compilation unit DIE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":605091,"byte_end":605176,"line_start":260,"line_end":260,"column_start":5,"column_end":90}},{"value":"/ This is an offset that points to the first entry following the header.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":605181,"byte_end":605255,"line_start":261,"line_end":261,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":605260,"byte_end":605263,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ The `index` is the value of a `DW_FORM_loclistx` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":605268,"byte_end":605331,"line_start":263,"line_end":263,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1393},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":606000,"byte_end":606016,"line_start":282,"line_end":282,"column_start":12,"column_end":28},"name":"lookup_offset_id","qualname":"<LocationLists<R>>::lookup_offset_id","value":"pub fn lookup_offset_id(&Self, ReaderOffsetId)\n-> Option<(SectionId, R::Offset)>","parent":null,"children":[],"decl_id":null,"docs":" Call `Reader::lookup_offset_id` for each section, and return the first match.\n","sig":null,"attributes":[{"value":"/ Call `Reader::lookup_offset_id` for each section, and return the first match.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":605907,"byte_end":605988,"line_start":281,"line_end":281,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":6908},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":606397,"byte_end":606411,"line_start":294,"line_end":294,"column_start":12,"column_end":26},"name":"RawLocListIter","qualname":"::read::loclists::RawLocListIter","value":"RawLocListIter {  }","parent":null,"children":[{"krate":0,"index":6910},{"krate":0,"index":6911}],"decl_id":null,"docs":" A raw iterator over a location list.","sig":null,"attributes":[{"value":"/ A raw iterator over a location list.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":606212,"byte_end":606252,"line_start":289,"line_end":289,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":606253,"byte_end":606256,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ This iterator does not perform any processing of the location entries,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":606257,"byte_end":606331,"line_start":291,"line_end":291,"column_start":1,"column_end":75}},{"value":"/ such as handling base addresses.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":606332,"byte_end":606368,"line_start":292,"line_end":292,"column_start":1,"column_end":37}}]},{"kind":"StructVariant","id":{"krate":0,"index":6917},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":606612,"byte_end":606631,"line_start":303,"line_end":303,"column_start":5,"column_end":24},"name":"AddressOrOffsetPair","qualname":"::read::loclists::RawLocListEntry::AddressOrOffsetPair","value":"RawLocListEntry::AddressOrOffsetPair { begin, end, data }","parent":{"krate":0,"index":6915},"children":[],"decl_id":null,"docs":" A location from DWARF version <= 4.\n","sig":null,"attributes":[{"value":"/ A location from DWARF version <= 4.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":606568,"byte_end":606607,"line_start":302,"line_end":302,"column_start":5,"column_end":44}}]},{"kind":"StructVariant","id":{"krate":0,"index":6921},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":606881,"byte_end":606892,"line_start":312,"line_end":312,"column_start":5,"column_end":16},"name":"BaseAddress","qualname":"::read::loclists::RawLocListEntry::BaseAddress","value":"RawLocListEntry::BaseAddress { addr }","parent":{"krate":0,"index":6915},"children":[],"decl_id":null,"docs":" DW_LLE_base_address\n","sig":null,"attributes":[{"value":"/ DW_LLE_base_address","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":606853,"byte_end":606876,"line_start":311,"line_end":311,"column_start":5,"column_end":28}}]},{"kind":"StructVariant","id":{"krate":0,"index":6923},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":606979,"byte_end":606991,"line_start":317,"line_end":317,"column_start":5,"column_end":17},"name":"BaseAddressx","qualname":"::read::loclists::RawLocListEntry::BaseAddressx","value":"RawLocListEntry::BaseAddressx { addr }","parent":{"krate":0,"index":6915},"children":[],"decl_id":null,"docs":" DW_LLE_base_addressx\n","sig":null,"attributes":[{"value":"/ DW_LLE_base_addressx","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":606950,"byte_end":606974,"line_start":316,"line_end":316,"column_start":5,"column_end":29}}]},{"kind":"StructVariant","id":{"krate":0,"index":6925},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":607098,"byte_end":607108,"line_start":322,"line_end":322,"column_start":5,"column_end":15},"name":"StartxEndx","qualname":"::read::loclists::RawLocListEntry::StartxEndx","value":"RawLocListEntry::StartxEndx { begin, end, data }","parent":{"krate":0,"index":6915},"children":[],"decl_id":null,"docs":" DW_LLE_startx_endx\n","sig":null,"attributes":[{"value":"/ DW_LLE_startx_endx","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":607071,"byte_end":607093,"line_start":321,"line_end":321,"column_start":5,"column_end":27}}]},{"kind":"StructVariant","id":{"krate":0,"index":6929},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":607337,"byte_end":607349,"line_start":331,"line_end":331,"column_start":5,"column_end":17},"name":"StartxLength","qualname":"::read::loclists::RawLocListEntry::StartxLength","value":"RawLocListEntry::StartxLength { begin, length, data }","parent":{"krate":0,"index":6915},"children":[],"decl_id":null,"docs":" DW_LLE_startx_length\n","sig":null,"attributes":[{"value":"/ DW_LLE_startx_length","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":607308,"byte_end":607332,"line_start":330,"line_end":330,"column_start":5,"column_end":29}}]},{"kind":"StructVariant","id":{"krate":0,"index":6933},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":607560,"byte_end":607570,"line_start":340,"line_end":340,"column_start":5,"column_end":15},"name":"OffsetPair","qualname":"::read::loclists::RawLocListEntry::OffsetPair","value":"RawLocListEntry::OffsetPair { begin, end, data }","parent":{"krate":0,"index":6915},"children":[],"decl_id":null,"docs":" DW_LLE_offset_pair\n","sig":null,"attributes":[{"value":"/ DW_LLE_offset_pair","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":607533,"byte_end":607555,"line_start":339,"line_end":339,"column_start":5,"column_end":27}}]},{"kind":"StructVariant","id":{"krate":0,"index":6937},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":607758,"byte_end":607773,"line_start":349,"line_end":349,"column_start":5,"column_end":20},"name":"DefaultLocation","qualname":"::read::loclists::RawLocListEntry::DefaultLocation","value":"RawLocListEntry::DefaultLocation { data }","parent":{"krate":0,"index":6915},"children":[],"decl_id":null,"docs":" DW_LLE_default_location\n","sig":null,"attributes":[{"value":"/ DW_LLE_default_location","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":607726,"byte_end":607753,"line_start":348,"line_end":348,"column_start":5,"column_end":32}}]},{"kind":"StructVariant","id":{"krate":0,"index":6939},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":607864,"byte_end":607872,"line_start":354,"line_end":354,"column_start":5,"column_end":13},"name":"StartEnd","qualname":"::read::loclists::RawLocListEntry::StartEnd","value":"RawLocListEntry::StartEnd { begin, end, data }","parent":{"krate":0,"index":6915},"children":[],"decl_id":null,"docs":" DW_LLE_start_end\n","sig":null,"attributes":[{"value":"/ DW_LLE_start_end","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":607839,"byte_end":607859,"line_start":353,"line_end":353,"column_start":5,"column_end":25}}]},{"kind":"StructVariant","id":{"krate":0,"index":6943},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":608056,"byte_end":608067,"line_start":363,"line_end":363,"column_start":5,"column_end":16},"name":"StartLength","qualname":"::read::loclists::RawLocListEntry::StartLength","value":"RawLocListEntry::StartLength { begin, length, data }","parent":{"krate":0,"index":6915},"children":[],"decl_id":null,"docs":" DW_LLE_start_length\n","sig":null,"attributes":[{"value":"/ DW_LLE_start_length","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":608028,"byte_end":608051,"line_start":362,"line_end":362,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":6915},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":606535,"byte_end":606550,"line_start":301,"line_end":301,"column_start":10,"column_end":25},"name":"RawLocListEntry","qualname":"::read::loclists::RawLocListEntry","value":"pub enum RawLocListEntry<R: Reader> {\n\n    /// A location from DWARF version <= 4.\n    AddressOrOffsetPair {\n        /// Start of range. May be an address or an offset.\n        begin: u64,\n        /// End of range. May be an address or an offset.\n        end: u64,\n        /// expression\n        data: Expression<R>,\n    },\n\n    /// DW_LLE_base_address\n    BaseAddress {\n        /// base address\n        addr: u64,\n    },\n\n    /// DW_LLE_base_addressx\n    BaseAddressx {\n        /// base address\n        addr: DebugAddrIndex<R::Offset>,\n    },\n\n    /// DW_LLE_startx_endx\n    StartxEndx {\n        /// start of range\n        begin: DebugAddrIndex<R::Offset>,\n        /// end of range\n        end: DebugAddrIndex<R::Offset>,\n        /// expression\n        data: Expression<R>,\n    },\n\n    /// DW_LLE_startx_length\n    StartxLength {\n        /// start of range\n        begin: DebugAddrIndex<R::Offset>,\n        /// length of range\n        length: u64,\n        /// expression\n        data: Expression<R>,\n    },\n\n    /// DW_LLE_offset_pair\n    OffsetPair {\n        /// start of range\n        begin: u64,\n        /// end of range\n        end: u64,\n        /// expression\n        data: Expression<R>,\n    },\n\n    /// DW_LLE_default_location\n    DefaultLocation {\n        /// expression\n        data: Expression<R>,\n    },\n\n    /// DW_LLE_start_end\n    StartEnd {\n        /// start of range\n        begin: u64,\n        /// end of range\n        end: u64,\n        /// expression\n        data: Expression<R>,\n    },\n\n    /// DW_LLE_start_length\n    StartLength {\n        /// start of range\n        begin: u64,\n        /// length of range\n        length: u64,\n        /// expression\n        data: Expression<R>,\n    },\n}","parent":null,"children":[{"krate":0,"index":6917},{"krate":0,"index":6921},{"krate":0,"index":6923},{"krate":0,"index":6925},{"krate":0,"index":6929},{"krate":0,"index":6933},{"krate":0,"index":6937},{"krate":0,"index":6939},{"krate":0,"index":6943}],"decl_id":null,"docs":" A raw entry in .debug_loclists.\n","sig":null,"attributes":[{"value":"/ A raw entry in .debug_loclists.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":606466,"byte_end":606501,"line_start":299,"line_end":299,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1402},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":611377,"byte_end":611380,"line_start":442,"line_end":442,"column_start":12,"column_end":15},"name":"new","qualname":"<RawLocListIter<R>>::new","value":"pub fn new(R, Encoding) -> RawLocListIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `RawLocListIter`.\n","sig":null,"attributes":[{"value":"/ Construct a `RawLocListIter`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":611332,"byte_end":611365,"line_start":441,"line_end":441,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1403},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":611546,"byte_end":611550,"line_start":447,"line_end":447,"column_start":12,"column_end":16},"name":"next","qualname":"<RawLocListIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<RawLocListEntry<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next location.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next location.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":611488,"byte_end":611534,"line_start":446,"line_end":446,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":6953},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":612609,"byte_end":612620,"line_start":483,"line_end":483,"column_start":12,"column_end":23},"name":"LocListIter","qualname":"::read::loclists::LocListIter","value":"LocListIter {  }","parent":null,"children":[{"krate":0,"index":6955},{"krate":0,"index":6956},{"krate":0,"index":6957},{"krate":0,"index":6958}],"decl_id":null,"docs":" An iterator over a location list.","sig":null,"attributes":[{"value":"/ An iterator over a location list.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":612329,"byte_end":612366,"line_start":477,"line_end":477,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":612367,"byte_end":612370,"line_start":478,"line_end":478,"column_start":1,"column_end":4}},{"value":"/ This iterator internally handles processing of base address selection entries","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":612371,"byte_end":612452,"line_start":479,"line_end":479,"column_start":1,"column_end":82}},{"value":"/ and list end entries.  Thus, it only returns location entries that are valid","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":612453,"byte_end":612533,"line_start":480,"line_end":480,"column_start":1,"column_end":81}},{"value":"/ and already adjusted for the base address.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":612534,"byte_end":612580,"line_start":481,"line_end":481,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1413},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":613420,"byte_end":613424,"line_start":513,"line_end":513,"column_start":12,"column_end":16},"name":"next","qualname":"<LocListIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<LocationListEntry<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next location.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next location.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":613362,"byte_end":613408,"line_start":512,"line_end":512,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":6962},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":616290,"byte_end":616307,"line_start":592,"line_end":592,"column_start":12,"column_end":29},"name":"LocationListEntry","qualname":"::read::loclists::LocationListEntry","value":"LocationListEntry { range, data }","parent":null,"children":[{"krate":0,"index":6964},{"krate":0,"index":6965}],"decl_id":null,"docs":" A location list entry from the `.debug_loc` or `.debug_loclists` sections.\n","sig":null,"attributes":[{"value":"/ A location list entry from the `.debug_loc` or `.debug_loclists` sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":616149,"byte_end":616227,"line_start":590,"line_end":590,"column_start":1,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":6964},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":616388,"byte_end":616393,"line_start":594,"line_end":594,"column_start":9,"column_end":14},"name":"range","qualname":"::read::loclists::LocationListEntry::range","value":"read::rnglists::Range","parent":{"krate":0,"index":6962},"children":[],"decl_id":null,"docs":" The address range that this location is valid for.\n","sig":null,"attributes":[{"value":"/ The address range that this location is valid for.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":616325,"byte_end":616379,"line_start":593,"line_end":593,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":6965},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":616470,"byte_end":616474,"line_start":597,"line_end":597,"column_start":9,"column_end":13},"name":"data","qualname":"::read::loclists::LocationListEntry::data","value":"read::op::Expression<R>","parent":{"krate":0,"index":6962},"children":[],"decl_id":null,"docs":" The data containing a single location description.\n","sig":null,"attributes":[{"value":"/ The data containing a single location description.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":616407,"byte_end":616461,"line_start":596,"line_end":596,"column_start":5,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":1434},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/lookup.rs","byte_start":645398,"byte_end":645404,"line_start":17,"line_end":17,"column_start":10,"column_end":16},"name":"Header","qualname":"::read::lookup::LookupParser::Header","value":"type Header;","parent":{"krate":0,"index":1432},"children":[],"decl_id":null,"docs":" The type of the produced header.\n","sig":null,"attributes":[{"value":"/ The type of the produced header.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/lookup.rs","byte_start":645352,"byte_end":645388,"line_start":16,"line_end":16,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":1435},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/lookup.rs","byte_start":645455,"byte_end":645460,"line_start":19,"line_end":19,"column_start":10,"column_end":15},"name":"Entry","qualname":"::read::lookup::LookupParser::Entry","value":"type Entry;","parent":{"krate":0,"index":1432},"children":[],"decl_id":null,"docs":" The type of the produced entry.\n","sig":null,"attributes":[{"value":"/ The type of the produced entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/lookup.rs","byte_start":645410,"byte_end":645445,"line_start":18,"line_end":18,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7053},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":651295,"byte_end":651302,"line_start":15,"line_end":15,"column_start":5,"column_end":12},"name":"UnitRef","qualname":"::read::op::DieReference::UnitRef","value":"DieReference::UnitRef(UnitOffset<T>)","parent":{"krate":0,"index":7051},"children":[],"decl_id":null,"docs":" A CU-relative reference.\n","sig":null,"attributes":[{"value":"/ A CU-relative reference.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":651262,"byte_end":651290,"line_start":14,"line_end":14,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7056},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":651361,"byte_end":651373,"line_start":17,"line_end":17,"column_start":5,"column_end":17},"name":"DebugInfoRef","qualname":"::read::op::DieReference::DebugInfoRef","value":"DieReference::DebugInfoRef(DebugInfoOffset<T>)","parent":{"krate":0,"index":7051},"children":[],"decl_id":null,"docs":" A section-relative reference.\n","sig":null,"attributes":[{"value":"/ A section-relative reference.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":651323,"byte_end":651356,"line_start":16,"line_end":16,"column_start":5,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":7051},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":651232,"byte_end":651244,"line_start":13,"line_end":13,"column_start":10,"column_end":22},"name":"DieReference","qualname":"::read::op::DieReference","value":"pub enum DieReference<T = usize> {\n\n    /// A CU-relative reference.\n    UnitRef(UnitOffset<T>),\n\n    /// A section-relative reference.\n    DebugInfoRef(DebugInfoOffset<T>),\n}","parent":null,"children":[{"krate":0,"index":7053},{"krate":0,"index":7056}],"decl_id":null,"docs":" A reference to a DIE, either relative to the current CU or\n relative to the section.\n","sig":null,"attributes":[{"value":"/ A reference to a DIE, either relative to the current CU or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":651086,"byte_end":651148,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"/ relative to the section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":651149,"byte_end":651177,"line_start":11,"line_end":11,"column_start":1,"column_end":29}}]},{"kind":"StructVariant","id":{"krate":0,"index":7081},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":652138,"byte_end":652143,"line_start":38,"line_end":38,"column_start":5,"column_end":10},"name":"Deref","qualname":"::read::op::Operation::Deref","value":"Operation::Deref { base_type, size, space }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Dereference the topmost value of the stack.\n","sig":null,"attributes":[{"value":"/ Dereference the topmost value of the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":652086,"byte_end":652133,"line_start":37,"line_end":37,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7085},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":652515,"byte_end":652519,"line_start":48,"line_end":48,"column_start":5,"column_end":9},"name":"Drop","qualname":"::read::op::Operation::Drop","value":"Operation::Drop","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Drop an item from the stack.\n","sig":null,"attributes":[{"value":"/ Drop an item from the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":652478,"byte_end":652510,"line_start":47,"line_end":47,"column_start":5,"column_end":37}}]},{"kind":"StructVariant","id":{"krate":0,"index":7087},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":652678,"byte_end":652682,"line_start":52,"line_end":52,"column_start":5,"column_end":9},"name":"Pick","qualname":"::read::op::Operation::Pick","value":"Operation::Pick { index }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Pick an item from the stack and push it on top of the stack.\n This operation handles `DW_OP_pick`, `DW_OP_dup`, and\n `DW_OP_over`.\n","sig":null,"attributes":[{"value":"/ Pick an item from the stack and push it on top of the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":652525,"byte_end":652589,"line_start":49,"line_end":49,"column_start":5,"column_end":69}},{"value":"/ This operation handles `DW_OP_pick`, `DW_OP_dup`, and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":652594,"byte_end":652651,"line_start":50,"line_end":50,"column_start":5,"column_end":62}},{"value":"/ `DW_OP_over`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":652656,"byte_end":652673,"line_start":51,"line_end":51,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7089},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":652824,"byte_end":652828,"line_start":57,"line_end":57,"column_start":5,"column_end":9},"name":"Swap","qualname":"::read::op::Operation::Swap","value":"Operation::Swap","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Swap the top two stack items.\n","sig":null,"attributes":[{"value":"/ Swap the top two stack items.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":652786,"byte_end":652819,"line_start":56,"line_end":56,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7091},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":652876,"byte_end":652879,"line_start":59,"line_end":59,"column_start":5,"column_end":8},"name":"Rot","qualname":"::read::op::Operation::Rot","value":"Operation::Rot","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Rotate the top three stack items.\n","sig":null,"attributes":[{"value":"/ Rotate the top three stack items.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":652834,"byte_end":652871,"line_start":58,"line_end":58,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7093},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":652942,"byte_end":652945,"line_start":61,"line_end":61,"column_start":5,"column_end":8},"name":"Abs","qualname":"::read::op::Operation::Abs","value":"Operation::Abs","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Take the absolute value of the top of the stack.\n","sig":null,"attributes":[{"value":"/ Take the absolute value of the top of the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":652885,"byte_end":652937,"line_start":60,"line_end":60,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7095},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653009,"byte_end":653012,"line_start":63,"line_end":63,"column_start":5,"column_end":8},"name":"And","qualname":"::read::op::Operation::And","value":"Operation::And","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Bitwise `and` of the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Bitwise `and` of the top two values on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":652951,"byte_end":653004,"line_start":62,"line_end":62,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7097},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653066,"byte_end":653069,"line_start":65,"line_end":65,"column_start":5,"column_end":8},"name":"Div","qualname":"::read::op::Operation::Div","value":"Operation::Div","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Divide the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Divide the top two values on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653018,"byte_end":653061,"line_start":64,"line_end":64,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7099},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653125,"byte_end":653130,"line_start":67,"line_end":67,"column_start":5,"column_end":10},"name":"Minus","qualname":"::read::op::Operation::Minus","value":"Operation::Minus","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Subtract the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Subtract the top two values on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653075,"byte_end":653120,"line_start":66,"line_end":66,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7101},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653188,"byte_end":653191,"line_start":69,"line_end":69,"column_start":5,"column_end":8},"name":"Mod","qualname":"::read::op::Operation::Mod","value":"Operation::Mod","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Modulus of the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Modulus of the top two values on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653136,"byte_end":653183,"line_start":68,"line_end":68,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7103},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653247,"byte_end":653250,"line_start":71,"line_end":71,"column_start":5,"column_end":8},"name":"Mul","qualname":"::read::op::Operation::Mul","value":"Operation::Mul","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Multiply the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Multiply the top two values on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653197,"byte_end":653242,"line_start":70,"line_end":70,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7105},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653293,"byte_end":653296,"line_start":73,"line_end":73,"column_start":5,"column_end":8},"name":"Neg","qualname":"::read::op::Operation::Neg","value":"Operation::Neg","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Negate the top of the stack.\n","sig":null,"attributes":[{"value":"/ Negate the top of the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653256,"byte_end":653288,"line_start":72,"line_end":72,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7107},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653349,"byte_end":653352,"line_start":75,"line_end":75,"column_start":5,"column_end":8},"name":"Not","qualname":"::read::op::Operation::Not","value":"Operation::Not","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Bitwise `not` of the top of the stack.\n","sig":null,"attributes":[{"value":"/ Bitwise `not` of the top of the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653302,"byte_end":653344,"line_start":74,"line_end":74,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7109},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653415,"byte_end":653417,"line_start":77,"line_end":77,"column_start":5,"column_end":7},"name":"Or","qualname":"::read::op::Operation::Or","value":"Operation::Or","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Bitwise `or` of the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Bitwise `or` of the top two values on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653358,"byte_end":653410,"line_start":76,"line_end":76,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7111},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653468,"byte_end":653472,"line_start":79,"line_end":79,"column_start":5,"column_end":9},"name":"Plus","qualname":"::read::op::Operation::Plus","value":"Operation::Plus","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Add the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Add the top two values on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653423,"byte_end":653463,"line_start":78,"line_end":78,"column_start":5,"column_end":45}}]},{"kind":"StructVariant","id":{"krate":0,"index":7113},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653536,"byte_end":653548,"line_start":81,"line_end":81,"column_start":5,"column_end":17},"name":"PlusConstant","qualname":"::read::op::Operation::PlusConstant","value":"Operation::PlusConstant { value }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Add a constant to the topmost value on the stack.\n","sig":null,"attributes":[{"value":"/ Add a constant to the topmost value on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653478,"byte_end":653531,"line_start":80,"line_end":80,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7115},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653740,"byte_end":653743,"line_start":87,"line_end":87,"column_start":5,"column_end":8},"name":"Shl","qualname":"::read::op::Operation::Shl","value":"Operation::Shl","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Logical left shift of the 2nd value on the stack by the number\n of bits given by the topmost value on the stack.\n","sig":null,"attributes":[{"value":"/ Logical left shift of the 2nd value on the stack by the number","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653612,"byte_end":653678,"line_start":85,"line_end":85,"column_start":5,"column_end":71}},{"value":"/ of bits given by the topmost value on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653683,"byte_end":653735,"line_start":86,"line_end":86,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7117},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653870,"byte_end":653873,"line_start":90,"line_end":90,"column_start":5,"column_end":8},"name":"Shr","qualname":"::read::op::Operation::Shr","value":"Operation::Shr","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Right shift of the 2nd value on the stack by the number of\n bits given by the topmost value on the stack.\n","sig":null,"attributes":[{"value":"/ Right shift of the 2nd value on the stack by the number of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653749,"byte_end":653811,"line_start":88,"line_end":88,"column_start":5,"column_end":67}},{"value":"/ bits given by the topmost value on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653816,"byte_end":653865,"line_start":89,"line_end":89,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7119},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654010,"byte_end":654014,"line_start":93,"line_end":93,"column_start":5,"column_end":9},"name":"Shra","qualname":"::read::op::Operation::Shra","value":"Operation::Shra","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Arithmetic left shift of the 2nd value on the stack by the\n number of bits given by the topmost value on the stack.\n","sig":null,"attributes":[{"value":"/ Arithmetic left shift of the 2nd value on the stack by the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653879,"byte_end":653941,"line_start":91,"line_end":91,"column_start":5,"column_end":67}},{"value":"/ number of bits given by the topmost value on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":653946,"byte_end":654005,"line_start":92,"line_end":92,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7121},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654078,"byte_end":654081,"line_start":95,"line_end":95,"column_start":5,"column_end":8},"name":"Xor","qualname":"::read::op::Operation::Xor","value":"Operation::Xor","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Bitwise `xor` of the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Bitwise `xor` of the top two values on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654020,"byte_end":654073,"line_start":94,"line_end":94,"column_start":5,"column_end":58}}]},{"kind":"StructVariant","id":{"krate":0,"index":7123},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654157,"byte_end":654160,"line_start":97,"line_end":97,"column_start":5,"column_end":8},"name":"Bra","qualname":"::read::op::Operation::Bra","value":"Operation::Bra { target }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Branch to the target location if the top of stack is nonzero.\n","sig":null,"attributes":[{"value":"/ Branch to the target location if the top of stack is nonzero.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654087,"byte_end":654152,"line_start":96,"line_end":96,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7125},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654306,"byte_end":654308,"line_start":102,"line_end":102,"column_start":5,"column_end":7},"name":"Eq","qualname":"::read::op::Operation::Eq","value":"Operation::Eq","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Compare the top two stack values for equality.\n","sig":null,"attributes":[{"value":"/ Compare the top two stack values for equality.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654251,"byte_end":654301,"line_start":101,"line_end":101,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7127},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654367,"byte_end":654369,"line_start":104,"line_end":104,"column_start":5,"column_end":7},"name":"Ge","qualname":"::read::op::Operation::Ge","value":"Operation::Ge","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Compare the top two stack values using `>=`.\n","sig":null,"attributes":[{"value":"/ Compare the top two stack values using `>=`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654314,"byte_end":654362,"line_start":103,"line_end":103,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7129},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654427,"byte_end":654429,"line_start":106,"line_end":106,"column_start":5,"column_end":7},"name":"Gt","qualname":"::read::op::Operation::Gt","value":"Operation::Gt","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Compare the top two stack values using `>`.\n","sig":null,"attributes":[{"value":"/ Compare the top two stack values using `>`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654375,"byte_end":654422,"line_start":105,"line_end":105,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7131},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654488,"byte_end":654490,"line_start":108,"line_end":108,"column_start":5,"column_end":7},"name":"Le","qualname":"::read::op::Operation::Le","value":"Operation::Le","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Compare the top two stack values using `<=`.\n","sig":null,"attributes":[{"value":"/ Compare the top two stack values using `<=`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654435,"byte_end":654483,"line_start":107,"line_end":107,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7133},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654548,"byte_end":654550,"line_start":110,"line_end":110,"column_start":5,"column_end":7},"name":"Lt","qualname":"::read::op::Operation::Lt","value":"Operation::Lt","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Compare the top two stack values using `<`.\n","sig":null,"attributes":[{"value":"/ Compare the top two stack values using `<`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654496,"byte_end":654543,"line_start":109,"line_end":109,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7135},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654609,"byte_end":654611,"line_start":112,"line_end":112,"column_start":5,"column_end":7},"name":"Ne","qualname":"::read::op::Operation::Ne","value":"Operation::Ne","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Compare the top two stack values using `!=`.\n","sig":null,"attributes":[{"value":"/ Compare the top two stack values using `!=`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654556,"byte_end":654604,"line_start":111,"line_end":111,"column_start":5,"column_end":53}}]},{"kind":"StructVariant","id":{"krate":0,"index":7137},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654670,"byte_end":654674,"line_start":114,"line_end":114,"column_start":5,"column_end":9},"name":"Skip","qualname":"::read::op::Operation::Skip","value":"Operation::Skip { target }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Unconditional branch to the target location.\n","sig":null,"attributes":[{"value":"/ Unconditional branch to the target location.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654617,"byte_end":654665,"line_start":113,"line_end":113,"column_start":5,"column_end":53}}]},{"kind":"StructVariant","id":{"krate":0,"index":7139},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654865,"byte_end":654881,"line_start":120,"line_end":120,"column_start":5,"column_end":21},"name":"UnsignedConstant","qualname":"::read::op::Operation::UnsignedConstant","value":"Operation::UnsignedConstant { value }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Push an unsigned constant value on the stack.  This handles multiple\n DWARF opcodes.\n","sig":null,"attributes":[{"value":"/ Push an unsigned constant value on the stack.  This handles multiple","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654765,"byte_end":654837,"line_start":118,"line_end":118,"column_start":5,"column_end":77}},{"value":"/ DWARF opcodes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654842,"byte_end":654860,"line_start":119,"line_end":119,"column_start":5,"column_end":23}}]},{"kind":"StructVariant","id":{"krate":0,"index":7141},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":655043,"byte_end":655057,"line_start":126,"line_end":126,"column_start":5,"column_end":19},"name":"SignedConstant","qualname":"::read::op::Operation::SignedConstant","value":"Operation::SignedConstant { value }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Push a signed constant value on the stack.  This handles multiple\n DWARF opcodes.\n","sig":null,"attributes":[{"value":"/ Push a signed constant value on the stack.  This handles multiple","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":654946,"byte_end":655015,"line_start":124,"line_end":124,"column_start":5,"column_end":74}},{"value":"/ DWARF opcodes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":655020,"byte_end":655038,"line_start":125,"line_end":125,"column_start":5,"column_end":23}}]},{"kind":"StructVariant","id":{"krate":0,"index":7143},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":655235,"byte_end":655243,"line_start":132,"line_end":132,"column_start":5,"column_end":13},"name":"Register","qualname":"::read::op::Operation::Register","value":"Operation::Register { register }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Indicate that this piece's location is in the given register.\n Completes the piece or expression.\n","sig":null,"attributes":[{"value":"/ Indicate that this piece's location is in the given register.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":655122,"byte_end":655187,"line_start":130,"line_end":130,"column_start":5,"column_end":70}},{"value":"/ Completes the piece or expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":655192,"byte_end":655230,"line_start":131,"line_end":131,"column_start":5,"column_end":43}}]},{"kind":"StructVariant","id":{"krate":0,"index":7145},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":655434,"byte_end":655448,"line_start":138,"line_end":138,"column_start":5,"column_end":19},"name":"RegisterOffset","qualname":"::read::op::Operation::RegisterOffset","value":"Operation::RegisterOffset { register, offset, base_type }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Find the value of the given register, add the offset, and then\n push the resulting sum on the stack.\n","sig":null,"attributes":[{"value":"/ Find the value of the given register, add the offset, and then","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":655318,"byte_end":655384,"line_start":136,"line_end":136,"column_start":5,"column_end":71}},{"value":"/ push the resulting sum on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":655389,"byte_end":655429,"line_start":137,"line_end":137,"column_start":5,"column_end":45}}]},{"kind":"StructVariant","id":{"krate":0,"index":7149},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":655820,"byte_end":655831,"line_start":148,"line_end":148,"column_start":5,"column_end":16},"name":"FrameOffset","qualname":"::read::op::Operation::FrameOffset","value":"Operation::FrameOffset { offset }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Compute the frame base (using `DW_AT_frame_base`), add the\n given offset, and then push the resulting sum on the stack.\n","sig":null,"attributes":[{"value":"/ Compute the frame base (using `DW_AT_frame_base`), add the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":655685,"byte_end":655747,"line_start":146,"line_end":146,"column_start":5,"column_end":67}},{"value":"/ given offset, and then push the resulting sum on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":655752,"byte_end":655815,"line_start":147,"line_end":147,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7151},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":655919,"byte_end":655922,"line_start":153,"line_end":153,"column_start":5,"column_end":8},"name":"Nop","qualname":"::read::op::Operation::Nop","value":"Operation::Nop","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" No operation.\n","sig":null,"attributes":[{"value":"/ No operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":655897,"byte_end":655914,"line_start":152,"line_end":152,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7153},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":655974,"byte_end":655991,"line_start":155,"line_end":155,"column_start":5,"column_end":22},"name":"PushObjectAddress","qualname":"::read::op::Operation::PushObjectAddress","value":"Operation::PushObjectAddress","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Push the object address on the stack.\n","sig":null,"attributes":[{"value":"/ Push the object address on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":655928,"byte_end":655969,"line_start":154,"line_end":154,"column_start":5,"column_end":46}}]},{"kind":"StructVariant","id":{"krate":0,"index":7155},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":656146,"byte_end":656150,"line_start":159,"line_end":159,"column_start":5,"column_end":9},"name":"Call","qualname":"::read::op::Operation::Call","value":"Operation::Call { offset }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Evaluate a DWARF expression as a subroutine.  The expression\n comes from the `DW_AT_location` attribute of the indicated\n DIE.\n","sig":null,"attributes":[{"value":"/ Evaluate a DWARF expression as a subroutine.  The expression","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":655997,"byte_end":656061,"line_start":156,"line_end":156,"column_start":5,"column_end":69}},{"value":"/ comes from the `DW_AT_location` attribute of the indicated","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":656066,"byte_end":656128,"line_start":157,"line_end":157,"column_start":5,"column_end":67}},{"value":"/ DIE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":656133,"byte_end":656141,"line_start":158,"line_end":158,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7157},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":656319,"byte_end":656322,"line_start":165,"line_end":165,"column_start":5,"column_end":8},"name":"TLS","qualname":"::read::op::Operation::TLS","value":"Operation::TLS","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Compute the address of a thread-local variable and push it on\n the stack.\n","sig":null,"attributes":[{"value":"/ Compute the address of a thread-local variable and push it on","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":656230,"byte_end":656295,"line_start":163,"line_end":163,"column_start":5,"column_end":70}},{"value":"/ the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":656300,"byte_end":656314,"line_start":164,"line_end":164,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7159},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":656389,"byte_end":656401,"line_start":167,"line_end":167,"column_start":5,"column_end":17},"name":"CallFrameCFA","qualname":"::read::op::Operation::CallFrameCFA","value":"Operation::CallFrameCFA","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Compute the call frame CFA and push it on the stack.\n","sig":null,"attributes":[{"value":"/ Compute the call frame CFA and push it on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":656328,"byte_end":656384,"line_start":166,"line_end":166,"column_start":5,"column_end":61}}]},{"kind":"StructVariant","id":{"krate":0,"index":7161},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":656434,"byte_end":656439,"line_start":169,"line_end":169,"column_start":5,"column_end":10},"name":"Piece","qualname":"::read::op::Operation::Piece","value":"Operation::Piece { size_in_bits, bit_offset }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Terminate a piece.\n","sig":null,"attributes":[{"value":"/ Terminate a piece.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":656407,"byte_end":656429,"line_start":168,"line_end":168,"column_start":5,"column_end":27}}]},{"kind":"StructVariant","id":{"krate":0,"index":7164},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":656883,"byte_end":656896,"line_start":180,"line_end":180,"column_start":5,"column_end":18},"name":"ImplicitValue","qualname":"::read::op::Operation::ImplicitValue","value":"Operation::ImplicitValue { data }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Represents `DW_OP_implicit_value`.\n The object has no location, but has a known constant value.\n Completes the piece or expression.\n","sig":null,"attributes":[{"value":"/ Represents `DW_OP_implicit_value`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":656729,"byte_end":656767,"line_start":177,"line_end":177,"column_start":5,"column_end":43}},{"value":"/ The object has no location, but has a known constant value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":656772,"byte_end":656835,"line_start":178,"line_end":178,"column_start":5,"column_end":68}},{"value":"/ Completes the piece or expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":656840,"byte_end":656878,"line_start":179,"line_end":179,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7166},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":657127,"byte_end":657137,"line_start":187,"line_end":187,"column_start":5,"column_end":15},"name":"StackValue","qualname":"::read::op::Operation::StackValue","value":"Operation::StackValue","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Represents `DW_OP_stack_value`.\n The object has no location, but its value is at the top of the stack.\n Completes the piece or expression.\n","sig":null,"attributes":[{"value":"/ Represents `DW_OP_stack_value`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":656966,"byte_end":657001,"line_start":184,"line_end":184,"column_start":5,"column_end":40}},{"value":"/ The object has no location, but its value is at the top of the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":657006,"byte_end":657079,"line_start":185,"line_end":185,"column_start":5,"column_end":78}},{"value":"/ Completes the piece or expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":657084,"byte_end":657122,"line_start":186,"line_end":186,"column_start":5,"column_end":43}}]},{"kind":"StructVariant","id":{"krate":0,"index":7168},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":657356,"byte_end":657371,"line_start":192,"line_end":192,"column_start":5,"column_end":20},"name":"ImplicitPointer","qualname":"::read::op::Operation::ImplicitPointer","value":"Operation::ImplicitPointer { value, byte_offset }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Represents `DW_OP_implicit_pointer`. The object is a pointer to\n a value which has no actual location, such as an implicit value or\n a stack value.\n Completes the piece or expression.\n","sig":null,"attributes":[{"value":"/ Represents `DW_OP_implicit_pointer`. The object is a pointer to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":657143,"byte_end":657210,"line_start":188,"line_end":188,"column_start":5,"column_end":72}},{"value":"/ a value which has no actual location, such as an implicit value or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":657215,"byte_end":657285,"line_start":189,"line_end":189,"column_start":5,"column_end":75}},{"value":"/ a stack value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":657290,"byte_end":657308,"line_start":190,"line_end":190,"column_start":5,"column_end":23}},{"value":"/ Completes the piece or expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":657313,"byte_end":657351,"line_start":191,"line_end":191,"column_start":5,"column_end":43}}]},{"kind":"StructVariant","id":{"krate":0,"index":7171},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":657757,"byte_end":657767,"line_start":200,"line_end":200,"column_start":5,"column_end":15},"name":"EntryValue","qualname":"::read::op::Operation::EntryValue","value":"Operation::EntryValue { expression }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Represents `DW_OP_entry_value`. Evaluate an expression at the entry to\n the current subprogram, and push it on the stack.\n","sig":null,"attributes":[{"value":"/ Represents `DW_OP_entry_value`. Evaluate an expression at the entry to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":657620,"byte_end":657694,"line_start":198,"line_end":198,"column_start":5,"column_end":79}},{"value":"/ the current subprogram, and push it on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":657699,"byte_end":657752,"line_start":199,"line_end":199,"column_start":5,"column_end":58}}]},{"kind":"StructVariant","id":{"krate":0,"index":7173},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":658151,"byte_end":658163,"line_start":208,"line_end":208,"column_start":5,"column_end":17},"name":"ParameterRef","qualname":"::read::op::Operation::ParameterRef","value":"Operation::ParameterRef { offset }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Represents `DW_OP_GNU_parameter_ref`. This represents a parameter that was\n optimized out. The offset points to the definition of the parameter, and is\n matched to the `DW_TAG_GNU_call_site_parameter` in the caller that also\n points to the same definition of the parameter.\n","sig":null,"attributes":[{"value":"/ Represents `DW_OP_GNU_parameter_ref`. This represents a parameter that was","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":657848,"byte_end":657926,"line_start":204,"line_end":204,"column_start":5,"column_end":83}},{"value":"/ optimized out. The offset points to the definition of the parameter, and is","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":657931,"byte_end":658010,"line_start":205,"line_end":205,"column_start":5,"column_end":84}},{"value":"/ matched to the `DW_TAG_GNU_call_site_parameter` in the caller that also","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":658015,"byte_end":658090,"line_start":206,"line_end":206,"column_start":5,"column_end":80}},{"value":"/ points to the same definition of the parameter.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":658095,"byte_end":658146,"line_start":207,"line_end":207,"column_start":5,"column_end":56}}]},{"kind":"StructVariant","id":{"krate":0,"index":7175},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":658340,"byte_end":658347,"line_start":214,"line_end":214,"column_start":5,"column_end":12},"name":"Address","qualname":"::read::op::Operation::Address","value":"Operation::Address { address }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Represents `DW_OP_addr`.\n Relocate the address if needed, and push it on the stack.\n","sig":null,"attributes":[{"value":"/ Represents `DW_OP_addr`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":658241,"byte_end":658269,"line_start":212,"line_end":212,"column_start":5,"column_end":33}},{"value":"/ Relocate the address if needed, and push it on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":658274,"byte_end":658335,"line_start":213,"line_end":213,"column_start":5,"column_end":66}}]},{"kind":"StructVariant","id":{"krate":0,"index":7177},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":658575,"byte_end":658587,"line_start":221,"line_end":221,"column_start":5,"column_end":17},"name":"AddressIndex","qualname":"::read::op::Operation::AddressIndex","value":"Operation::AddressIndex { index }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Represents `DW_OP_addrx`.\n Read the address at the given index in `.debug_addr, relocate the address if needed,\n and push it on the stack.\n","sig":null,"attributes":[{"value":"/ Represents `DW_OP_addrx`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":658414,"byte_end":658443,"line_start":218,"line_end":218,"column_start":5,"column_end":34}},{"value":"/ Read the address at the given index in `.debug_addr, relocate the address if needed,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":658448,"byte_end":658536,"line_start":219,"line_end":219,"column_start":5,"column_end":93}},{"value":"/ and push it on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":658541,"byte_end":658570,"line_start":220,"line_end":220,"column_start":5,"column_end":34}}]},{"kind":"StructVariant","id":{"krate":0,"index":7179},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":658854,"byte_end":658867,"line_start":228,"line_end":228,"column_start":5,"column_end":18},"name":"ConstantIndex","qualname":"::read::op::Operation::ConstantIndex","value":"Operation::ConstantIndex { index }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Represents `DW_OP_constx`.\n Read the address at the given index in `.debug_addr, and push it on the stack.\n Do not relocate the address.\n","sig":null,"attributes":[{"value":"/ Represents `DW_OP_constx`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":658695,"byte_end":658725,"line_start":225,"line_end":225,"column_start":5,"column_end":35}},{"value":"/ Read the address at the given index in `.debug_addr, and push it on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":658730,"byte_end":658812,"line_start":226,"line_end":226,"column_start":5,"column_end":87}},{"value":"/ Do not relocate the address.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":658817,"byte_end":658849,"line_start":227,"line_end":227,"column_start":5,"column_end":37}}]},{"kind":"StructVariant","id":{"krate":0,"index":7181},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":659105,"byte_end":659117,"line_start":234,"line_end":234,"column_start":5,"column_end":17},"name":"TypedLiteral","qualname":"::read::op::Operation::TypedLiteral","value":"Operation::TypedLiteral { base_type, value }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Represents `DW_OP_const_type`.\n Interpret the value bytes as a constant of a given type, and push it on the stack.\n","sig":null,"attributes":[{"value":"/ Represents `DW_OP_const_type`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":658975,"byte_end":659009,"line_start":232,"line_end":232,"column_start":5,"column_end":39}},{"value":"/ Interpret the value bytes as a constant of a given type, and push it on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":659014,"byte_end":659100,"line_start":233,"line_end":233,"column_start":5,"column_end":91}}]},{"kind":"StructVariant","id":{"krate":0,"index":7184},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":659382,"byte_end":659389,"line_start":242,"line_end":242,"column_start":5,"column_end":12},"name":"Convert","qualname":"::read::op::Operation::Convert","value":"Operation::Convert { base_type }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Represents `DW_OP_convert`.\n Pop the top stack entry, convert it to a different type, and push it on the stack.\n","sig":null,"attributes":[{"value":"/ Represents `DW_OP_convert`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":659255,"byte_end":659286,"line_start":240,"line_end":240,"column_start":5,"column_end":36}},{"value":"/ Pop the top stack entry, convert it to a different type, and push it on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":659291,"byte_end":659377,"line_start":241,"line_end":241,"column_start":5,"column_end":91}}]},{"kind":"StructVariant","id":{"krate":0,"index":7186},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":659642,"byte_end":659653,"line_start":249,"line_end":249,"column_start":5,"column_end":16},"name":"Reinterpret","qualname":"::read::op::Operation::Reinterpret","value":"Operation::Reinterpret { base_type }","parent":{"krate":0,"index":7078},"children":[],"decl_id":null,"docs":" Represents `DW_OP_reinterpret`.\n Pop the top stack entry, reinterpret the bits in its value as a different type,\n and push it on the stack.\n","sig":null,"attributes":[{"value":"/ Represents `DW_OP_reinterpret`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":659480,"byte_end":659515,"line_start":246,"line_end":246,"column_start":5,"column_end":40}},{"value":"/ Pop the top stack entry, reinterpret the bits in its value as a different type,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":659520,"byte_end":659603,"line_start":247,"line_end":247,"column_start":5,"column_end":88}},{"value":"/ and push it on the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":659608,"byte_end":659637,"line_start":248,"line_end":248,"column_start":5,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":7078},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":651971,"byte_end":651980,"line_start":32,"line_end":32,"column_start":10,"column_end":19},"name":"Operation","qualname":"::read::op::Operation","value":"pub enum Operation<R, Offset = <R as Reader>::Offset> where R: Reader<Offset =\n         Offset>, Offset: ReaderOffset {\n\n    /// Dereference the topmost value of the stack.\n    Deref {\n        /// The DIE of the base type or 0 to indicate the generic type\n        base_type: UnitOffset<Offset>,\n        /// The size of the data to dereference.\n        size: u8,\n        /// True if the dereference operation takes an address space\n        /// argument from the stack; false otherwise.\n        space: bool,\n    },\n\n    /// Drop an item from the stack.\n    Drop,\n\n    /// Pick an item from the stack and push it on top of the stack.\n    /// This operation handles `DW_OP_pick`, `DW_OP_dup`, and\n    /// `DW_OP_over`.\n    Pick {\n        /// The index, from the top of the stack, of the item to copy.\n        index: u8,\n    },\n\n    /// Swap the top two stack items.\n    Swap,\n\n    /// Rotate the top three stack items.\n    Rot,\n\n    /// Take the absolute value of the top of the stack.\n    Abs,\n\n    /// Bitwise `and` of the top two values on the stack.\n    And,\n\n    /// Divide the top two values on the stack.\n    Div,\n\n    /// Subtract the top two values on the stack.\n    Minus,\n\n    /// Modulus of the top two values on the stack.\n    Mod,\n\n    /// Multiply the top two values on the stack.\n    Mul,\n\n    /// Negate the top of the stack.\n    Neg,\n\n    /// Bitwise `not` of the top of the stack.\n    Not,\n\n    /// Bitwise `or` of the top two values on the stack.\n    Or,\n\n    /// Add the top two values on the stack.\n    Plus,\n\n    /// Add a constant to the topmost value on the stack.\n    PlusConstant {\n        /// The value to add.\n        value: u64,\n    },\n\n    /// Logical left shift of the 2nd value on the stack by the number\n    /// of bits given by the topmost value on the stack.\n    Shl,\n\n    /// Right shift of the 2nd value on the stack by the number of\n    /// bits given by the topmost value on the stack.\n    Shr,\n\n    /// Arithmetic left shift of the 2nd value on the stack by the\n    /// number of bits given by the topmost value on the stack.\n    Shra,\n\n    /// Bitwise `xor` of the top two values on the stack.\n    Xor,\n\n    /// Branch to the target location if the top of stack is nonzero.\n    Bra {\n        /// The relative offset to the target bytecode.\n        target: i16,\n    },\n\n    /// Compare the top two stack values for equality.\n    Eq,\n\n    /// Compare the top two stack values using `>=`.\n    Ge,\n\n    /// Compare the top two stack values using `>`.\n    Gt,\n\n    /// Compare the top two stack values using `<=`.\n    Le,\n\n    /// Compare the top two stack values using `<`.\n    Lt,\n\n    /// Compare the top two stack values using `!=`.\n    Ne,\n\n    /// Unconditional branch to the target location.\n    Skip {\n        /// The relative offset to the target bytecode.\n        target: i16,\n    },\n\n    /// Push an unsigned constant value on the stack.  This handles multiple\n    /// DWARF opcodes.\n    UnsignedConstant {\n        /// The value to push.\n        value: u64,\n    },\n\n    /// Push a signed constant value on the stack.  This handles multiple\n    /// DWARF opcodes.\n    SignedConstant {\n        /// The value to push.\n        value: i64,\n    },\n\n    /// Indicate that this piece's location is in the given register.\n    /// Completes the piece or expression.\n    Register {\n        /// The register number.\n        register: Register,\n    },\n\n    /// Find the value of the given register, add the offset, and then\n    /// push the resulting sum on the stack.\n    RegisterOffset {\n        /// The register number.\n        register: Register,\n        /// The offset to add.\n        offset: i64,\n        /// The DIE of the base type or 0 to indicate the generic type\n        base_type: UnitOffset<Offset>,\n    },\n\n    /// Compute the frame base (using `DW_AT_frame_base`), add the\n    /// given offset, and then push the resulting sum on the stack.\n    FrameOffset {\n        /// The offset to add.\n        offset: i64,\n    },\n\n    /// No operation.\n    Nop,\n\n    /// Push the object address on the stack.\n    PushObjectAddress,\n\n    /// Evaluate a DWARF expression as a subroutine.  The expression\n    /// comes from the `DW_AT_location` attribute of the indicated\n    /// DIE.\n    Call {\n        /// The DIE to use.\n        offset: DieReference<Offset>,\n    },\n\n    /// Compute the address of a thread-local variable and push it on\n    /// the stack.\n    TLS,\n\n    /// Compute the call frame CFA and push it on the stack.\n    CallFrameCFA,\n\n    /// Terminate a piece.\n    Piece {\n        /// The size of this piece in bits.\n        size_in_bits: u64,\n        /// The bit offset of this piece.  If `None`, then this piece\n        /// was specified using `DW_OP_piece` and should start at the\n        /// next byte boundary.\n        bit_offset: Option<u64>,\n    },\n\n    /// Represents `DW_OP_implicit_value`.\n    /// The object has no location, but has a known constant value.\n    /// Completes the piece or expression.\n    ImplicitValue {\n        /// The implicit value to use.\n        data: R,\n    },\n\n    /// Represents `DW_OP_stack_value`.\n    /// The object has no location, but its value is at the top of the stack.\n    /// Completes the piece or expression.\n    StackValue,\n\n    /// Represents `DW_OP_implicit_pointer`. The object is a pointer to\n    /// a value which has no actual location, such as an implicit value or\n    /// a stack value.\n    /// Completes the piece or expression.\n    ImplicitPointer {\n        /// The `.debug_info` offset of the value that this is an implicit pointer into.\n        value: DebugInfoOffset<Offset>,\n        /// The byte offset into the value that the implicit pointer points to.\n        byte_offset: i64,\n    },\n\n    /// Represents `DW_OP_entry_value`. Evaluate an expression at the entry to\n    /// the current subprogram, and push it on the stack.\n    EntryValue {\n        /// The expression to be evaluated.\n        expression: R,\n    },\n\n    /// Represents `DW_OP_GNU_parameter_ref`. This represents a parameter that was\n    /// optimized out. The offset points to the definition of the parameter, and is\n    /// matched to the `DW_TAG_GNU_call_site_parameter` in the caller that also\n    /// points to the same definition of the parameter.\n    ParameterRef {\n        /// The DIE to use.\n        offset: UnitOffset<Offset>,\n    },\n\n    /// Represents `DW_OP_addr`.\n    /// Relocate the address if needed, and push it on the stack.\n    Address {\n        /// The offset to add.\n        address: u64,\n    },\n\n    /// Represents `DW_OP_addrx`.\n    /// Read the address at the given index in `.debug_addr, relocate the address if needed,\n    /// and push it on the stack.\n    AddressIndex {\n        /// The index of the address in `.debug_addr`.\n        index: DebugAddrIndex<Offset>,\n    },\n\n    /// Represents `DW_OP_constx`.\n    /// Read the address at the given index in `.debug_addr, and push it on the stack.\n    /// Do not relocate the address.\n    ConstantIndex {\n        /// The index of the address in `.debug_addr`.\n        index: DebugAddrIndex<Offset>,\n    },\n\n    /// Represents `DW_OP_const_type`.\n    /// Interpret the value bytes as a constant of a given type, and push it on the stack.\n    TypedLiteral {\n        /// The DIE of the base type.\n        base_type: UnitOffset<Offset>,\n        /// The value bytes.\n        value: R,\n    },\n\n    /// Represents `DW_OP_convert`.\n    /// Pop the top stack entry, convert it to a different type, and push it on the stack.\n    Convert {\n        /// The DIE of the base type.\n        base_type: UnitOffset<Offset>,\n    },\n\n    /// Represents `DW_OP_reinterpret`.\n    /// Pop the top stack entry, reinterpret the bits in its value as a different type,\n    /// and push it on the stack.\n    Reinterpret {\n        /// The DIE of the base type.\n        base_type: UnitOffset<Offset>,\n    },\n}","parent":null,"children":[{"krate":0,"index":7081},{"krate":0,"index":7085},{"krate":0,"index":7087},{"krate":0,"index":7089},{"krate":0,"index":7091},{"krate":0,"index":7093},{"krate":0,"index":7095},{"krate":0,"index":7097},{"krate":0,"index":7099},{"krate":0,"index":7101},{"krate":0,"index":7103},{"krate":0,"index":7105},{"krate":0,"index":7107},{"krate":0,"index":7109},{"krate":0,"index":7111},{"krate":0,"index":7113},{"krate":0,"index":7115},{"krate":0,"index":7117},{"krate":0,"index":7119},{"krate":0,"index":7121},{"krate":0,"index":7123},{"krate":0,"index":7125},{"krate":0,"index":7127},{"krate":0,"index":7129},{"krate":0,"index":7131},{"krate":0,"index":7133},{"krate":0,"index":7135},{"krate":0,"index":7137},{"krate":0,"index":7139},{"krate":0,"index":7141},{"krate":0,"index":7143},{"krate":0,"index":7145},{"krate":0,"index":7149},{"krate":0,"index":7151},{"krate":0,"index":7153},{"krate":0,"index":7155},{"krate":0,"index":7157},{"krate":0,"index":7159},{"krate":0,"index":7161},{"krate":0,"index":7164},{"krate":0,"index":7166},{"krate":0,"index":7168},{"krate":0,"index":7171},{"krate":0,"index":7173},{"krate":0,"index":7175},{"krate":0,"index":7177},{"krate":0,"index":7179},{"krate":0,"index":7181},{"krate":0,"index":7184},{"krate":0,"index":7186}],"decl_id":null,"docs":" A single decoded DWARF expression operation.","sig":null,"attributes":[{"value":"/ A single decoded DWARF expression operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":651398,"byte_end":651446,"line_start":20,"line_end":20,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":651447,"byte_end":651450,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ DWARF expression evaluation is done in two parts: first the raw","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":651451,"byte_end":651518,"line_start":22,"line_end":22,"column_start":1,"column_end":68}},{"value":"/ bytes of the next part of the expression are decoded; and then the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":651519,"byte_end":651589,"line_start":23,"line_end":23,"column_start":1,"column_end":71}},{"value":"/ decoded operation is evaluated.  This approach lets other","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":651590,"byte_end":651651,"line_start":24,"line_end":24,"column_start":1,"column_end":62}},{"value":"/ consumers inspect the DWARF expression without reimplementing the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":651652,"byte_end":651721,"line_start":25,"line_end":25,"column_start":1,"column_end":70}},{"value":"/ decoding operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":651722,"byte_end":651745,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":651746,"byte_end":651749,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Multiple DWARF opcodes may decode into a single `Operation`.  For","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":651750,"byte_end":651819,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/ example, both `DW_OP_deref` and `DW_OP_xderef` are represented","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":651820,"byte_end":651886,"line_start":29,"line_end":29,"column_start":1,"column_end":67}},{"value":"/ using `Operation::Deref`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":651887,"byte_end":651916,"line_start":30,"line_end":30,"column_start":1,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7232},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":660258,"byte_end":660263,"line_start":272,"line_end":272,"column_start":5,"column_end":10},"name":"Empty","qualname":"::read::op::Location::Empty","value":"Location::Empty","parent":{"krate":0,"index":7229},"children":[],"decl_id":null,"docs":" The piece is empty.  Ordinarily this means the piece has been\n optimized away.\n","sig":null,"attributes":[{"value":"/ The piece is empty.  Ordinarily this means the piece has been","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":660164,"byte_end":660229,"line_start":270,"line_end":270,"column_start":5,"column_end":70}},{"value":"/ optimized away.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":660234,"byte_end":660253,"line_start":271,"line_end":271,"column_start":5,"column_end":24}}]},{"kind":"StructVariant","id":{"krate":0,"index":7234},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":660311,"byte_end":660319,"line_start":274,"line_end":274,"column_start":5,"column_end":13},"name":"Register","qualname":"::read::op::Location::Register","value":"Location::Register { register }","parent":{"krate":0,"index":7229},"children":[],"decl_id":null,"docs":" The piece is found in a register.\n","sig":null,"attributes":[{"value":"/ The piece is found in a register.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":660269,"byte_end":660306,"line_start":273,"line_end":273,"column_start":5,"column_end":42}}]},{"kind":"StructVariant","id":{"krate":0,"index":7236},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":660432,"byte_end":660439,"line_start":279,"line_end":279,"column_start":5,"column_end":12},"name":"Address","qualname":"::read::op::Location::Address","value":"Location::Address { address }","parent":{"krate":0,"index":7229},"children":[],"decl_id":null,"docs":" The piece is found in memory.\n","sig":null,"attributes":[{"value":"/ The piece is found in memory.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":660394,"byte_end":660427,"line_start":278,"line_end":278,"column_start":5,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":7238},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":660558,"byte_end":660563,"line_start":284,"line_end":284,"column_start":5,"column_end":10},"name":"Value","qualname":"::read::op::Location::Value","value":"Location::Value { value }","parent":{"krate":0,"index":7229},"children":[],"decl_id":null,"docs":" The piece has no location but its value is known.\n","sig":null,"attributes":[{"value":"/ The piece has no location but its value is known.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":660500,"byte_end":660553,"line_start":283,"line_end":283,"column_start":5,"column_end":58}}]},{"kind":"StructVariant","id":{"krate":0,"index":7240},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":660679,"byte_end":660684,"line_start":289,"line_end":289,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::read::op::Location::Bytes","value":"Location::Bytes { value }","parent":{"krate":0,"index":7229},"children":[],"decl_id":null,"docs":" The piece is represented by some constant bytes.\n","sig":null,"attributes":[{"value":"/ The piece is represented by some constant bytes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":660622,"byte_end":660674,"line_start":288,"line_end":288,"column_start":5,"column_end":57}}]},{"kind":"StructVariant","id":{"krate":0,"index":7242},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":660811,"byte_end":660826,"line_start":294,"line_end":294,"column_start":5,"column_end":20},"name":"ImplicitPointer","qualname":"::read::op::Location::ImplicitPointer","value":"Location::ImplicitPointer { value, byte_offset }","parent":{"krate":0,"index":7229},"children":[],"decl_id":null,"docs":" The piece is a pointer to a value which has no actual location.\n","sig":null,"attributes":[{"value":"/ The piece is a pointer to a value which has no actual location.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":660739,"byte_end":660806,"line_start":293,"line_end":293,"column_start":5,"column_end":72}}]},{"kind":"Enum","id":{"krate":0,"index":7229},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":660050,"byte_end":660058,"line_start":265,"line_end":265,"column_start":10,"column_end":18},"name":"Location","qualname":"::read::op::Location","value":"pub enum Location<R, Offset = <R as Reader>::Offset> where R: Reader<Offset =\n         Offset>, Offset: ReaderOffset {\n\n    /// The piece is empty.  Ordinarily this means the piece has been\n    /// optimized away.\n    Empty,\n\n    /// The piece is found in a register.\n    Register {\n        /// The register number.\n        register: Register,\n    },\n\n    /// The piece is found in memory.\n    Address {\n        /// The address.\n        address: u64,\n    },\n\n    /// The piece has no location but its value is known.\n    Value {\n        /// The value.\n        value: Value,\n    },\n\n    /// The piece is represented by some constant bytes.\n    Bytes {\n        /// The value.\n        value: R,\n    },\n\n    /// The piece is a pointer to a value which has no actual location.\n    ImplicitPointer {\n        /// The `.debug_info` offset of the value that this is an implicit pointer into.\n        value: DebugInfoOffset<Offset>,\n        /// The byte offset into the value that the implicit pointer points to.\n        byte_offset: i64,\n    },\n}","parent":null,"children":[{"krate":0,"index":7232},{"krate":0,"index":7234},{"krate":0,"index":7236},{"krate":0,"index":7238},{"krate":0,"index":7240},{"krate":0,"index":7242}],"decl_id":null,"docs":" A single location of a piece of the result of a DWARF expression.\n","sig":null,"attributes":[{"value":"/ A single location of a piece of the result of a DWARF expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":659930,"byte_end":659999,"line_start":263,"line_end":263,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1481},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":661230,"byte_end":661238,"line_start":308,"line_end":308,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Location<R, Offset>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the piece is empty.\n","sig":null,"attributes":[{"value":"/ Return true if the piece is empty.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":661180,"byte_end":661218,"line_start":307,"line_end":307,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":7264},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":661489,"byte_end":661494,"line_start":319,"line_end":319,"column_start":12,"column_end":17},"name":"Piece","qualname":"::read::op::Piece","value":"Piece { size_in_bits, bit_offset, location }","parent":null,"children":[{"krate":0,"index":7267},{"krate":0,"index":7268},{"krate":0,"index":7269}],"decl_id":null,"docs":" The description of a single piece of the result of a DWARF\n expression.\n","sig":null,"attributes":[{"value":"/ The description of a single piece of the result of a DWARF","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":661358,"byte_end":661420,"line_start":316,"line_end":316,"column_start":1,"column_end":63}},{"value":"/ expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":661421,"byte_end":661436,"line_start":317,"line_end":317,"column_start":1,"column_end":16}}]},{"kind":"Field","id":{"krate":0,"index":7267},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":661735,"byte_end":661747,"line_start":326,"line_end":326,"column_start":9,"column_end":21},"name":"size_in_bits","qualname":"::read::op::Piece::size_in_bits","value":"core::option::Option<u64>","parent":{"krate":0,"index":7264},"children":[],"decl_id":null,"docs":" If given, the size of the piece in bits.  If `None`, there\n must be only one piece whose size is all of the object.\n","sig":null,"attributes":[{"value":"/ If given, the size of the piece in bits.  If `None`, there","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":661600,"byte_end":661662,"line_start":324,"line_end":324,"column_start":5,"column_end":67}},{"value":"/ must be only one piece whose size is all of the object.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":661667,"byte_end":661726,"line_start":325,"line_end":325,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":7268},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":662373,"byte_end":662383,"line_start":338,"line_end":338,"column_start":9,"column_end":19},"name":"bit_offset","qualname":"::read::op::Piece::bit_offset","value":"core::option::Option<u64>","parent":{"krate":0,"index":7264},"children":[],"decl_id":null,"docs":" If given, the bit offset of the piece within the location.\n If the location is a `Location::Register` or `Location::Value`,\n then this offset is from the least significant bit end of\n the register or value.\n If the location is a `Location::Address` then the offset uses\n the bit numbering and direction conventions of the language\n and target system.","sig":null,"attributes":[{"value":"/ If given, the bit offset of the piece within the location.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":661766,"byte_end":661828,"line_start":327,"line_end":327,"column_start":5,"column_end":67}},{"value":"/ If the location is a `Location::Register` or `Location::Value`,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":661833,"byte_end":661900,"line_start":328,"line_end":328,"column_start":5,"column_end":72}},{"value":"/ then this offset is from the least significant bit end of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":661905,"byte_end":661966,"line_start":329,"line_end":329,"column_start":5,"column_end":66}},{"value":"/ the register or value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":661971,"byte_end":661997,"line_start":330,"line_end":330,"column_start":5,"column_end":31}},{"value":"/ If the location is a `Location::Address` then the offset uses","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":662002,"byte_end":662067,"line_start":331,"line_end":331,"column_start":5,"column_end":70}},{"value":"/ the bit numbering and direction conventions of the language","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":662072,"byte_end":662135,"line_start":332,"line_end":332,"column_start":5,"column_end":68}},{"value":"/ and target system.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":662140,"byte_end":662162,"line_start":333,"line_end":333,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":662167,"byte_end":662170,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ If `None`, the piece starts at the location. If the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":662175,"byte_end":662230,"line_start":335,"line_end":335,"column_start":5,"column_end":60}},{"value":"/ location is a register whose size is larger than the piece,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":662235,"byte_end":662298,"line_start":336,"line_end":336,"column_start":5,"column_end":68}},{"value":"/ then placement within the register is defined by the ABI.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":662303,"byte_end":662364,"line_start":337,"line_end":337,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":7269},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":662447,"byte_end":662455,"line_start":340,"line_end":340,"column_start":9,"column_end":17},"name":"location","qualname":"::read::op::Piece::location","value":"read::op::Location<R, Offset>","parent":{"krate":0,"index":7264},"children":[],"decl_id":null,"docs":" Where this piece is to be found.\n","sig":null,"attributes":[{"value":"/ Where this piece is to be found.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":662402,"byte_end":662438,"line_start":339,"line_end":339,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1489},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":663494,"byte_end":663499,"line_start":373,"line_end":373,"column_start":12,"column_end":17},"name":"parse","qualname":"<Operation<R, Offset>>::parse","value":"pub fn parse(&mut R, Encoding) -> Result<Operation<R, Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a single DWARF expression operation.","sig":null,"attributes":[{"value":"/ Parse a single DWARF expression operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":663153,"byte_end":663199,"line_start":365,"line_end":365,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":663204,"byte_end":663207,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ This is useful when examining a DWARF expression for reasons other","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":663212,"byte_end":663282,"line_start":367,"line_end":367,"column_start":5,"column_end":75}},{"value":"/ than direct evaluation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":663287,"byte_end":663314,"line_start":368,"line_end":368,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":663319,"byte_end":663322,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ `bytes` points to a the operation to decode.  It should point into","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":663327,"byte_end":663397,"line_start":370,"line_end":370,"column_start":5,"column_end":75}},{"value":"/ the same array as `bytecode`, which should be the entire","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":663402,"byte_end":663462,"line_start":371,"line_end":371,"column_start":5,"column_end":65}},{"value":"/ expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":663467,"byte_end":663482,"line_start":372,"line_end":372,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7340},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":680088,"byte_end":680096,"line_start":786,"line_end":786,"column_start":5,"column_end":13},"name":"Complete","qualname":"::read::op::EvaluationResult::Complete","value":"EvaluationResult::Complete","parent":{"krate":0,"index":7338},"children":[],"decl_id":null,"docs":" The `Evaluation` is complete, and `Evaluation::result()` can be called.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` is complete, and `Evaluation::result()` can be called.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":680008,"byte_end":680083,"line_start":785,"line_end":785,"column_start":5,"column_end":80}}]},{"kind":"StructVariant","id":{"krate":0,"index":7342},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":680318,"byte_end":680332,"line_start":790,"line_end":790,"column_start":5,"column_end":19},"name":"RequiresMemory","qualname":"::read::op::EvaluationResult::RequiresMemory","value":"EvaluationResult::RequiresMemory { address, size, space, base_type }","parent":{"krate":0,"index":7338},"children":[],"decl_id":null,"docs":" The `Evaluation` needs a value from memory to proceed further.  Once the\n caller determines what value to provide it should resume the `Evaluation`\n by calling `Evaluation::resume_with_memory`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs a value from memory to proceed further.  Once the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":680102,"byte_end":680178,"line_start":787,"line_end":787,"column_start":5,"column_end":81}},{"value":"/ caller determines what value to provide it should resume the `Evaluation`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":680183,"byte_end":680260,"line_start":788,"line_end":788,"column_start":5,"column_end":82}},{"value":"/ by calling `Evaluation::resume_with_memory`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":680265,"byte_end":680313,"line_start":789,"line_end":789,"column_start":5,"column_end":53}}]},{"kind":"StructVariant","id":{"krate":0,"index":7347},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":680993,"byte_end":681009,"line_start":804,"line_end":804,"column_start":5,"column_end":21},"name":"RequiresRegister","qualname":"::read::op::EvaluationResult::RequiresRegister","value":"EvaluationResult::RequiresRegister { register, base_type }","parent":{"krate":0,"index":7338},"children":[],"decl_id":null,"docs":" The `Evaluation` needs a value from a register to proceed further.  Once\n the caller determines what value to provide it should resume the\n `Evaluation` by calling `Evaluation::resume_with_register`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs a value from a register to proceed further.  Once","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":680771,"byte_end":680847,"line_start":801,"line_end":801,"column_start":5,"column_end":81}},{"value":"/ the caller determines what value to provide it should resume the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":680852,"byte_end":680920,"line_start":802,"line_end":802,"column_start":5,"column_end":73}},{"value":"/ `Evaluation` by calling `Evaluation::resume_with_register`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":680925,"byte_end":680988,"line_start":803,"line_end":803,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7350},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":681573,"byte_end":681590,"line_start":815,"line_end":815,"column_start":5,"column_end":22},"name":"RequiresFrameBase","qualname":"::read::op::EvaluationResult::RequiresFrameBase","value":"EvaluationResult::RequiresFrameBase","parent":{"krate":0,"index":7338},"children":[],"decl_id":null,"docs":" The `Evaluation` needs the frame base address to proceed further.  Once\n the caller determines what value to provide it should resume the\n `Evaluation` by calling `Evaluation::resume_with_frame_base`.  The frame\n base address is the address produced by the location description in the\n `DW_AT_frame_base` attribute of the current function.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs the frame base address to proceed further.  Once","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":681197,"byte_end":681272,"line_start":810,"line_end":810,"column_start":5,"column_end":80}},{"value":"/ the caller determines what value to provide it should resume the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":681277,"byte_end":681345,"line_start":811,"line_end":811,"column_start":5,"column_end":73}},{"value":"/ `Evaluation` by calling `Evaluation::resume_with_frame_base`.  The frame","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":681350,"byte_end":681426,"line_start":812,"line_end":812,"column_start":5,"column_end":81}},{"value":"/ base address is the address produced by the location description in the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":681431,"byte_end":681506,"line_start":813,"line_end":813,"column_start":5,"column_end":80}},{"value":"/ `DW_AT_frame_base` attribute of the current function.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":681511,"byte_end":681568,"line_start":814,"line_end":814,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7352},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":681806,"byte_end":681817,"line_start":819,"line_end":819,"column_start":5,"column_end":16},"name":"RequiresTls","qualname":"::read::op::EvaluationResult::RequiresTls","value":"EvaluationResult::RequiresTls(u64)","parent":{"krate":0,"index":7338},"children":[],"decl_id":null,"docs":" The `Evaluation` needs a value from TLS to proceed further.  Once the\n caller determines what value to provide it should resume the\n `Evaluation` by calling `Evaluation::resume_with_tls`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs a value from TLS to proceed further.  Once the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":681596,"byte_end":681669,"line_start":816,"line_end":816,"column_start":5,"column_end":78}},{"value":"/ caller determines what value to provide it should resume the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":681674,"byte_end":681738,"line_start":817,"line_end":817,"column_start":5,"column_end":69}},{"value":"/ `Evaluation` by calling `Evaluation::resume_with_tls`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":681743,"byte_end":681801,"line_start":818,"line_end":818,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7355},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":682040,"byte_end":682060,"line_start":823,"line_end":823,"column_start":5,"column_end":25},"name":"RequiresCallFrameCfa","qualname":"::read::op::EvaluationResult::RequiresCallFrameCfa","value":"EvaluationResult::RequiresCallFrameCfa","parent":{"krate":0,"index":7338},"children":[],"decl_id":null,"docs":" The `Evaluation` needs the CFA to proceed further.  Once the caller\n determines what value to provide it should resume the `Evaluation` by\n calling `Evaluation::resume_with_call_frame_cfa`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs the CFA to proceed further.  Once the caller","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":681828,"byte_end":681899,"line_start":820,"line_end":820,"column_start":5,"column_end":76}},{"value":"/ determines what value to provide it should resume the `Evaluation` by","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":681904,"byte_end":681977,"line_start":821,"line_end":821,"column_start":5,"column_end":78}},{"value":"/ calling `Evaluation::resume_with_call_frame_cfa`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":681982,"byte_end":682035,"line_start":822,"line_end":822,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7357},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":682318,"byte_end":682336,"line_start":828,"line_end":828,"column_start":5,"column_end":23},"name":"RequiresAtLocation","qualname":"::read::op::EvaluationResult::RequiresAtLocation","value":"EvaluationResult::RequiresAtLocation(DieReference<R::Offset>)","parent":{"krate":0,"index":7338},"children":[],"decl_id":null,"docs":" The `Evaluation` needs the DWARF expression at the given location to\n proceed further.  Once the caller determines what value to provide it\n should resume the `Evaluation` by calling\n `Evaluation::resume_with_at_location`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs the DWARF expression at the given location to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":682066,"byte_end":682138,"line_start":824,"line_end":824,"column_start":5,"column_end":77}},{"value":"/ proceed further.  Once the caller determines what value to provide it","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":682143,"byte_end":682216,"line_start":825,"line_end":825,"column_start":5,"column_end":78}},{"value":"/ should resume the `Evaluation` by calling","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":682221,"byte_end":682266,"line_start":826,"line_end":826,"column_start":5,"column_end":50}},{"value":"/ `Evaluation::resume_with_at_location`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":682271,"byte_end":682313,"line_start":827,"line_end":827,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7360},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":682654,"byte_end":682672,"line_start":833,"line_end":833,"column_start":5,"column_end":23},"name":"RequiresEntryValue","qualname":"::read::op::EvaluationResult::RequiresEntryValue","value":"EvaluationResult::RequiresEntryValue(Expression<R>)","parent":{"krate":0,"index":7338},"children":[],"decl_id":null,"docs":" The `Evaluation` needs the value produced by evaluating a DWARF\n expression at the entry point of the current subprogram.  Once the\n caller determines what value to provide it should resume the\n `Evaluation` by calling `Evaluation::resume_with_entry_value`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs the value produced by evaluating a DWARF","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":682367,"byte_end":682434,"line_start":829,"line_end":829,"column_start":5,"column_end":72}},{"value":"/ expression at the entry point of the current subprogram.  Once the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":682439,"byte_end":682509,"line_start":830,"line_end":830,"column_start":5,"column_end":75}},{"value":"/ caller determines what value to provide it should resume the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":682514,"byte_end":682578,"line_start":831,"line_end":831,"column_start":5,"column_end":69}},{"value":"/ `Evaluation` by calling `Evaluation::resume_with_entry_value`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":682583,"byte_end":682649,"line_start":832,"line_end":832,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7363},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":682967,"byte_end":682987,"line_start":838,"line_end":838,"column_start":5,"column_end":25},"name":"RequiresParameterRef","qualname":"::read::op::EvaluationResult::RequiresParameterRef","value":"EvaluationResult::RequiresParameterRef(UnitOffset<R::Offset>)","parent":{"krate":0,"index":7338},"children":[],"decl_id":null,"docs":" The `Evaluation` needs the value of the parameter at the given location\n in the current function's caller.  Once the caller determines what value\n to provide it should resume the `Evaluation` by calling\n `Evaluation::resume_with_parameter_ref`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs the value of the parameter at the given location","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":682693,"byte_end":682768,"line_start":834,"line_end":834,"column_start":5,"column_end":80}},{"value":"/ in the current function's caller.  Once the caller determines what value","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":682773,"byte_end":682849,"line_start":835,"line_end":835,"column_start":5,"column_end":81}},{"value":"/ to provide it should resume the `Evaluation` by calling","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":682854,"byte_end":682913,"line_start":836,"line_end":836,"column_start":5,"column_end":64}},{"value":"/ `Evaluation::resume_with_parameter_ref`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":682918,"byte_end":682962,"line_start":837,"line_end":837,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7366},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":683249,"byte_end":683273,"line_start":842,"line_end":842,"column_start":5,"column_end":29},"name":"RequiresRelocatedAddress","qualname":"::read::op::EvaluationResult::RequiresRelocatedAddress","value":"EvaluationResult::RequiresRelocatedAddress(u64)","parent":{"krate":0,"index":7338},"children":[],"decl_id":null,"docs":" The `Evaluation` needs an address to be relocated to proceed further.\n Once the caller determines what value to provide it should resume the\n `Evaluation` by calling `Evaluation::resume_with_relocated_address`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs an address to be relocated to proceed further.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":683016,"byte_end":683089,"line_start":839,"line_end":839,"column_start":5,"column_end":78}},{"value":"/ Once the caller determines what value to provide it should resume the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":683094,"byte_end":683167,"line_start":840,"line_end":840,"column_start":5,"column_end":78}},{"value":"/ `Evaluation` by calling `Evaluation::resume_with_relocated_address`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":683172,"byte_end":683244,"line_start":841,"line_end":841,"column_start":5,"column_end":77}}]},{"kind":"StructVariant","id":{"krate":0,"index":7369},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":683563,"byte_end":683585,"line_start":847,"line_end":847,"column_start":5,"column_end":27},"name":"RequiresIndexedAddress","qualname":"::read::op::EvaluationResult::RequiresIndexedAddress","value":"EvaluationResult::RequiresIndexedAddress { index, relocate }","parent":{"krate":0,"index":7338},"children":[],"decl_id":null,"docs":" The `Evaluation` needs an address from the `.debug_addr` section.\n This address may also need to be relocated.\n Once the caller determines what value to provide it should resume the\n `Evaluation` by calling `Evaluation::resume_with_indexed_address`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs an address from the `.debug_addr` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":683284,"byte_end":683353,"line_start":843,"line_end":843,"column_start":5,"column_end":74}},{"value":"/ This address may also need to be relocated.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":683358,"byte_end":683405,"line_start":844,"line_end":844,"column_start":5,"column_end":52}},{"value":"/ Once the caller determines what value to provide it should resume the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":683410,"byte_end":683483,"line_start":845,"line_end":845,"column_start":5,"column_end":78}},{"value":"/ `Evaluation` by calling `Evaluation::resume_with_indexed_address`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":683488,"byte_end":683558,"line_start":846,"line_end":846,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7372},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684113,"byte_end":684129,"line_start":858,"line_end":858,"column_start":5,"column_end":21},"name":"RequiresBaseType","qualname":"::read::op::EvaluationResult::RequiresBaseType","value":"EvaluationResult::RequiresBaseType(UnitOffset<R::Offset>)","parent":{"krate":0,"index":7338},"children":[],"decl_id":null,"docs":" The `Evaluation` needs the `ValueType` for the base type DIE at\n the give unit offset.  Once the caller determines what value to provide it\n should resume the `Evaluation` by calling\n `Evaluation::resume_with_base_type`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs the `ValueType` for the base type DIE at","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":683863,"byte_end":683930,"line_start":854,"line_end":854,"column_start":5,"column_end":72}},{"value":"/ the give unit offset.  Once the caller determines what value to provide it","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":683935,"byte_end":684013,"line_start":855,"line_end":855,"column_start":5,"column_end":83}},{"value":"/ should resume the `Evaluation` by calling","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684018,"byte_end":684063,"line_start":856,"line_end":856,"column_start":5,"column_end":50}},{"value":"/ `Evaluation::resume_with_base_type`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684068,"byte_end":684108,"line_start":857,"line_end":857,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":7338},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":679974,"byte_end":679990,"line_start":784,"line_end":784,"column_start":10,"column_end":26},"name":"EvaluationResult","qualname":"::read::op::EvaluationResult","value":"pub enum EvaluationResult<R: Reader> {\n\n    /// The `Evaluation` is complete, and `Evaluation::result()` can be called.\n    Complete,\n\n    /// The `Evaluation` needs a value from memory to proceed further.  Once the\n    /// caller determines what value to provide it should resume the `Evaluation`\n    /// by calling `Evaluation::resume_with_memory`.\n    RequiresMemory {\n        /// The address of the value required.\n        address: u64,\n        /// The size of the value required. This is guaranteed to be at most the\n        /// word size of the target architecture.\n        size: u8,\n        /// If not `None`, a target-specific address space value.\n        space: Option<u64>,\n        /// The DIE of the base type or 0 to indicate the generic type\n        base_type: UnitOffset<R::Offset>,\n    },\n\n    /// The `Evaluation` needs a value from a register to proceed further.  Once\n    /// the caller determines what value to provide it should resume the\n    /// `Evaluation` by calling `Evaluation::resume_with_register`.\n    RequiresRegister {\n        /// The register number.\n        register: Register,\n        /// The DIE of the base type or 0 to indicate the generic type\n        base_type: UnitOffset<R::Offset>,\n    },\n\n    /// The `Evaluation` needs the frame base address to proceed further.  Once\n    /// the caller determines what value to provide it should resume the\n    /// `Evaluation` by calling `Evaluation::resume_with_frame_base`.  The frame\n    /// base address is the address produced by the location description in the\n    /// `DW_AT_frame_base` attribute of the current function.\n    RequiresFrameBase,\n\n    /// The `Evaluation` needs a value from TLS to proceed further.  Once the\n    /// caller determines what value to provide it should resume the\n    /// `Evaluation` by calling `Evaluation::resume_with_tls`.\n    RequiresTls(u64),\n\n    /// The `Evaluation` needs the CFA to proceed further.  Once the caller\n    /// determines what value to provide it should resume the `Evaluation` by\n    /// calling `Evaluation::resume_with_call_frame_cfa`.\n    RequiresCallFrameCfa,\n\n    /// The `Evaluation` needs the DWARF expression at the given location to\n    /// proceed further.  Once the caller determines what value to provide it\n    /// should resume the `Evaluation` by calling\n    /// `Evaluation::resume_with_at_location`.\n    RequiresAtLocation(DieReference<R::Offset>),\n\n    /// The `Evaluation` needs the value produced by evaluating a DWARF\n    /// expression at the entry point of the current subprogram.  Once the\n    /// caller determines what value to provide it should resume the\n    /// `Evaluation` by calling `Evaluation::resume_with_entry_value`.\n    RequiresEntryValue(Expression<R>),\n\n    /// The `Evaluation` needs the value of the parameter at the given location\n    /// in the current function's caller.  Once the caller determines what value\n    /// to provide it should resume the `Evaluation` by calling\n    /// `Evaluation::resume_with_parameter_ref`.\n    RequiresParameterRef(UnitOffset<R::Offset>),\n\n    /// The `Evaluation` needs an address to be relocated to proceed further.\n    /// Once the caller determines what value to provide it should resume the\n    /// `Evaluation` by calling `Evaluation::resume_with_relocated_address`.\n    RequiresRelocatedAddress(u64),\n\n    /// The `Evaluation` needs an address from the `.debug_addr` section.\n    /// This address may also need to be relocated.\n    /// Once the caller determines what value to provide it should resume the\n    /// `Evaluation` by calling `Evaluation::resume_with_indexed_address`.\n    RequiresIndexedAddress {\n        /// The index of the address in the `.debug_addr` section,\n        /// relative to the `DW_AT_addr_base` of the compilation unit.\n        index: DebugAddrIndex<R::Offset>,\n        /// Whether the address also needs to be relocated.\n        relocate: bool,\n    },\n\n    /// The `Evaluation` needs the `ValueType` for the base type DIE at\n    /// the give unit offset.  Once the caller determines what value to provide it\n    /// should resume the `Evaluation` by calling\n    /// `Evaluation::resume_with_base_type`.\n    RequiresBaseType(UnitOffset<R::Offset>),\n}","parent":null,"children":[{"krate":0,"index":7340},{"krate":0,"index":7342},{"krate":0,"index":7347},{"krate":0,"index":7350},{"krate":0,"index":7352},{"krate":0,"index":7355},{"krate":0,"index":7357},{"krate":0,"index":7360},{"krate":0,"index":7363},{"krate":0,"index":7366},{"krate":0,"index":7369},{"krate":0,"index":7372}],"decl_id":null,"docs":" The state of an `Evaluation` after evaluating a DWARF expression.\n The evaluation is either `Complete`, or it requires more data\n to continue, as described by the variant.\n","sig":null,"attributes":[{"value":"/ The state of an `Evaluation` after evaluating a DWARF expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":679755,"byte_end":679824,"line_start":780,"line_end":780,"column_start":1,"column_end":70}},{"value":"/ The evaluation is either `Complete`, or it requires more data","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":679825,"byte_end":679890,"line_start":781,"line_end":781,"column_start":1,"column_end":66}},{"value":"/ to continue, as described by the variant.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":679891,"byte_end":679936,"line_start":782,"line_end":782,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":7384},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684284,"byte_end":684294,"line_start":863,"line_end":863,"column_start":12,"column_end":22},"name":"Expression","qualname":"::read::op::Expression","value":"","parent":null,"children":[],"decl_id":null,"docs":" The bytecode for a DWARF expression or location description.\n","sig":null,"attributes":[{"value":"/ The bytecode for a DWARF expression or location description.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684157,"byte_end":684221,"line_start":861,"line_end":861,"column_start":1,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":7387},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684306,"byte_end":684311,"line_start":863,"line_end":863,"column_start":34,"column_end":39},"name":"0","qualname":"::read::op::Expression::0","value":"R","parent":{"krate":0,"index":7384},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1492},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":685165,"byte_end":685175,"line_start":885,"line_end":885,"column_start":12,"column_end":22},"name":"evaluation","qualname":"<Expression<R>>::evaluation","value":"pub fn evaluation(Self, Encoding) -> Evaluation<R>","parent":null,"children":[],"decl_id":null,"docs":" Create an evaluation for this expression.","sig":null,"attributes":[{"value":"/ Create an evaluation for this expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684351,"byte_end":684396,"line_start":866,"line_end":866,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684401,"byte_end":684404,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ The `encoding` is determined by the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684409,"byte_end":684448,"line_start":868,"line_end":868,"column_start":5,"column_end":44}},{"value":"/ [`CompilationUnitHeader`](struct.CompilationUnitHeader.html) or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684453,"byte_end":684520,"line_start":869,"line_end":869,"column_start":5,"column_end":72}},{"value":"/ [`TypeUnitHeader`](struct.TypeUnitHeader.html) that this expression","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684525,"byte_end":684596,"line_start":870,"line_end":870,"column_start":5,"column_end":76}},{"value":"/ relates to.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684601,"byte_end":684616,"line_start":871,"line_end":871,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684621,"byte_end":684624,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684629,"byte_end":684643,"line_start":873,"line_end":873,"column_start":5,"column_end":19}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684648,"byte_end":684666,"line_start":874,"line_end":874,"column_start":5,"column_end":23}},{"value":"/ use gimli::Expression;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684671,"byte_end":684697,"line_start":875,"line_end":875,"column_start":5,"column_end":31}},{"value":"/ # let endian = gimli::LittleEndian;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684702,"byte_end":684741,"line_start":876,"line_end":876,"column_start":5,"column_end":44}},{"value":"/ # let debug_info = gimli::DebugInfo::from(gimli::EndianSlice::new(&[], endian));","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684746,"byte_end":684830,"line_start":877,"line_end":877,"column_start":5,"column_end":89}},{"value":"/ # let unit = debug_info.units().next().unwrap().unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684835,"byte_end":684896,"line_start":878,"line_end":878,"column_start":5,"column_end":66}},{"value":"/ # let bytecode = gimli::EndianSlice::new(&[], endian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684901,"byte_end":684959,"line_start":879,"line_end":879,"column_start":5,"column_end":63}},{"value":"/ let expression = gimli::Expression(bytecode);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684964,"byte_end":685013,"line_start":880,"line_end":880,"column_start":5,"column_end":54}},{"value":"/ let mut eval = expression.evaluation(unit.encoding());","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":685018,"byte_end":685076,"line_start":881,"line_end":881,"column_start":5,"column_end":63}},{"value":"/ let mut result = eval.evaluate().unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":685081,"byte_end":685127,"line_start":882,"line_end":882,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":685132,"byte_end":685139,"line_start":883,"line_end":883,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":685144,"byte_end":685153,"line_start":884,"line_end":884,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1493},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":685346,"byte_end":685356,"line_start":890,"line_end":890,"column_start":12,"column_end":22},"name":"operations","qualname":"<Expression<R>>::operations","value":"pub fn operations(Self, Encoding) -> OperationIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator for the operations in the expression.\n","sig":null,"attributes":[{"value":"/ Return an iterator for the operations in the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":685274,"byte_end":685334,"line_start":889,"line_end":889,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":7411},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":685591,"byte_end":685604,"line_start":900,"line_end":900,"column_start":12,"column_end":25},"name":"OperationIter","qualname":"::read::op::OperationIter","value":"OperationIter {  }","parent":null,"children":[{"krate":0,"index":7413},{"krate":0,"index":7414}],"decl_id":null,"docs":" An iterator for the operations in an expression.\n","sig":null,"attributes":[{"value":"/ An iterator for the operations in an expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":685497,"byte_end":685549,"line_start":898,"line_end":898,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":685755,"byte_end":685759,"line_start":907,"line_end":907,"column_start":12,"column_end":16},"name":"next","qualname":"<OperationIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<Operation<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Read the next operation in an expression.\n","sig":null,"attributes":[{"value":"/ Read the next operation in an expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":685698,"byte_end":685743,"line_start":906,"line_end":906,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1497},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":686161,"byte_end":686172,"line_start":921,"line_end":921,"column_start":12,"column_end":23},"name":"offset_from","qualname":"<OperationIter<R>>::offset_from","value":"pub fn offset_from(&Self, &Expression<R>) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Return the current byte offset of the iterator.\n","sig":null,"attributes":[{"value":"/ Return the current byte offset of the iterator.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":686098,"byte_end":686149,"line_start":920,"line_end":920,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":7423},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":688300,"byte_end":688310,"line_start":972,"line_end":972,"column_start":12,"column_end":22},"name":"Evaluation","qualname":"::read::op::Evaluation","value":"Evaluation {  }","parent":null,"children":[{"krate":0,"index":7425},{"krate":0,"index":7426},{"krate":0,"index":7427},{"krate":0,"index":7428},{"krate":0,"index":7429},{"krate":0,"index":7430},{"krate":0,"index":7431},{"krate":0,"index":7432},{"krate":0,"index":7433},{"krate":0,"index":7434},{"krate":0,"index":7435}],"decl_id":null,"docs":" A DWARF expression evaluator.","sig":null,"attributes":[{"value":"/ A DWARF expression evaluator.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":686278,"byte_end":686311,"line_start":926,"line_end":926,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":686312,"byte_end":686315,"line_start":927,"line_end":927,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":686316,"byte_end":686327,"line_start":928,"line_end":928,"column_start":1,"column_end":12}},{"value":"/ A DWARF expression may require additional data to produce a final result,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":686328,"byte_end":686405,"line_start":929,"line_end":929,"column_start":1,"column_end":78}},{"value":"/ such as the value of a register or a memory location.  Once initial setup","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":686406,"byte_end":686483,"line_start":930,"line_end":930,"column_start":1,"column_end":78}},{"value":"/ is complete (i.e. `set_initial_value()`, `set_object_address()`) the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":686484,"byte_end":686556,"line_start":931,"line_end":931,"column_start":1,"column_end":73}},{"value":"/ consumer calls the `evaluate()` method.  That returns an `EvaluationResult`,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":686557,"byte_end":686637,"line_start":932,"line_end":932,"column_start":1,"column_end":81}},{"value":"/ which is either `EvaluationResult::Complete` or a value indicating what","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":686638,"byte_end":686713,"line_start":933,"line_end":933,"column_start":1,"column_end":76}},{"value":"/ data is needed to resume the `Evaluation`.  The consumer is responsible for","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":686714,"byte_end":686793,"line_start":934,"line_end":934,"column_start":1,"column_end":80}},{"value":"/ producing that data and resuming the computation with the correct method,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":686794,"byte_end":686871,"line_start":935,"line_end":935,"column_start":1,"column_end":78}},{"value":"/ as documented for `EvaluationResult`.  Only once an `EvaluationResult::Complete`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":686872,"byte_end":686956,"line_start":936,"line_end":936,"column_start":1,"column_end":85}},{"value":"/ is returned can the consumer call `result()`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":686957,"byte_end":687006,"line_start":937,"line_end":937,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687007,"byte_end":687010,"line_start":938,"line_end":938,"column_start":1,"column_end":4}},{"value":"/ This design allows the consumer of `Evaluation` to decide how and when to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687011,"byte_end":687088,"line_start":939,"line_end":939,"column_start":1,"column_end":78}},{"value":"/ produce the required data and resume the computation.  The `Evaluation` can","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687089,"byte_end":687168,"line_start":940,"line_end":940,"column_start":1,"column_end":80}},{"value":"/ be driven synchronously (as shown below) or by some asynchronous mechanism","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687169,"byte_end":687247,"line_start":941,"line_end":941,"column_start":1,"column_end":79}},{"value":"/ such as futures.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687248,"byte_end":687268,"line_start":942,"line_end":942,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687269,"byte_end":687272,"line_start":943,"line_end":943,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687273,"byte_end":687287,"line_start":944,"line_end":944,"column_start":1,"column_end":15}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687288,"byte_end":687306,"line_start":945,"line_end":945,"column_start":1,"column_end":19}},{"value":"/ use gimli::{EndianSlice, Evaluation, EvaluationResult, Format, LittleEndian, Value};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687307,"byte_end":687395,"line_start":946,"line_end":946,"column_start":1,"column_end":89}},{"value":"/ # let bytecode = EndianSlice::new(&[], LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687396,"byte_end":687453,"line_start":947,"line_end":947,"column_start":1,"column_end":58}},{"value":"/ # let encoding = unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687454,"byte_end":687492,"line_start":948,"line_end":948,"column_start":1,"column_end":39}},{"value":"/ # let get_register_value = |_, _| Value::Generic(42);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687493,"byte_end":687550,"line_start":949,"line_end":949,"column_start":1,"column_end":58}},{"value":"/ # let get_frame_base = || 0xdeadbeef;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687551,"byte_end":687592,"line_start":950,"line_end":950,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687593,"byte_end":687596,"line_start":951,"line_end":951,"column_start":1,"column_end":4}},{"value":"/ let mut eval = Evaluation::new(bytecode, encoding);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687597,"byte_end":687652,"line_start":952,"line_end":952,"column_start":1,"column_end":56}},{"value":"/ let mut result = eval.evaluate().unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687653,"byte_end":687699,"line_start":953,"line_end":953,"column_start":1,"column_end":47}},{"value":"/ while result != EvaluationResult::Complete {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687700,"byte_end":687748,"line_start":954,"line_end":954,"column_start":1,"column_end":49}},{"value":"/   match result {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687749,"byte_end":687769,"line_start":955,"line_end":955,"column_start":1,"column_end":21}},{"value":"/     EvaluationResult::RequiresRegister { register, base_type } => {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687770,"byte_end":687841,"line_start":956,"line_end":956,"column_start":1,"column_end":72}},{"value":"/       let value = get_register_value(register, base_type);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687842,"byte_end":687904,"line_start":957,"line_end":957,"column_start":1,"column_end":63}},{"value":"/       result = eval.resume_with_register(value).unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687905,"byte_end":687966,"line_start":958,"line_end":958,"column_start":1,"column_end":62}},{"value":"/     },","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687967,"byte_end":687977,"line_start":959,"line_end":959,"column_start":1,"column_end":11}},{"value":"/     EvaluationResult::RequiresFrameBase => {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":687978,"byte_end":688026,"line_start":960,"line_end":960,"column_start":1,"column_end":49}},{"value":"/       let frame_base = get_frame_base();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":688027,"byte_end":688071,"line_start":961,"line_end":961,"column_start":1,"column_end":45}},{"value":"/       result = eval.resume_with_frame_base(frame_base).unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":688072,"byte_end":688140,"line_start":962,"line_end":962,"column_start":1,"column_end":69}},{"value":"/     },","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":688141,"byte_end":688151,"line_start":963,"line_end":963,"column_start":1,"column_end":11}},{"value":"/     _ => unimplemented!(),","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":688152,"byte_end":688182,"line_start":964,"line_end":964,"column_start":1,"column_end":31}},{"value":"/   };","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":688183,"byte_end":688191,"line_start":965,"line_end":965,"column_start":1,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":688192,"byte_end":688197,"line_start":966,"line_end":966,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":688198,"byte_end":688201,"line_start":967,"line_end":967,"column_start":1,"column_end":4}},{"value":"/ let result = eval.result();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":688202,"byte_end":688233,"line_start":968,"line_end":968,"column_start":1,"column_end":32}},{"value":"/ println!(\"{:?}\", result);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":688234,"byte_end":688263,"line_start":969,"line_end":969,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":688264,"byte_end":688271,"line_start":970,"line_end":970,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1500},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":689205,"byte_end":689208,"line_start":1003,"line_end":1003,"column_start":12,"column_end":15},"name":"new","qualname":"<Evaluation<R>>::new","value":"pub fn new(R, Encoding) -> Evaluation<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new DWARF expression evaluator.","sig":null,"attributes":[{"value":"/ Create a new DWARF expression evaluator.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":688999,"byte_end":689043,"line_start":999,"line_end":999,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":689048,"byte_end":689051,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ The new evaluator is created without an initial value, without","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":689056,"byte_end":689122,"line_start":1001,"line_end":1001,"column_start":5,"column_end":71}},{"value":"/ an object address, and without a maximum number of iterations.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":689127,"byte_end":689193,"line_start":1002,"line_end":1002,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1501},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":690358,"byte_end":690375,"line_start":1034,"line_end":1034,"column_start":12,"column_end":29},"name":"set_initial_value","qualname":"<Evaluation<R>>::set_initial_value","value":"pub fn set_initial_value(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Set an initial value to be pushed on the DWARF expression\n evaluator's stack.  This can be used in cases like\n `DW_AT_vtable_elem_location`, which require a value on the\n stack before evaluation commences.  If no initial value is\n set, and the expression uses an opcode requiring the initial\n value, then evaluation will fail with an error.","sig":null,"attributes":[{"value":"/ Set an initial value to be pushed on the DWARF expression","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":689825,"byte_end":689886,"line_start":1024,"line_end":1024,"column_start":5,"column_end":66}},{"value":"/ evaluator's stack.  This can be used in cases like","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":689891,"byte_end":689945,"line_start":1025,"line_end":1025,"column_start":5,"column_end":59}},{"value":"/ `DW_AT_vtable_elem_location`, which require a value on the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":689950,"byte_end":690012,"line_start":1026,"line_end":1026,"column_start":5,"column_end":67}},{"value":"/ stack before evaluation commences.  If no initial value is","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":690017,"byte_end":690079,"line_start":1027,"line_end":1027,"column_start":5,"column_end":67}},{"value":"/ set, and the expression uses an opcode requiring the initial","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":690084,"byte_end":690148,"line_start":1028,"line_end":1028,"column_start":5,"column_end":69}},{"value":"/ value, then evaluation will fail with an error.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":690153,"byte_end":690204,"line_start":1029,"line_end":1029,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":690209,"byte_end":690212,"line_start":1030,"line_end":1030,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":690217,"byte_end":690229,"line_start":1031,"line_end":1031,"column_start":5,"column_end":17}},{"value":"/ Panics if `set_initial_value()` has already been called, or if","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":690234,"byte_end":690300,"line_start":1032,"line_end":1032,"column_start":5,"column_end":71}},{"value":"/ `evaluate()` has already been called.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":690305,"byte_end":690346,"line_start":1033,"line_end":1033,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":690961,"byte_end":690979,"line_start":1049,"line_end":1049,"column_start":12,"column_end":30},"name":"set_object_address","qualname":"<Evaluation<R>>::set_object_address","value":"pub fn set_object_address(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Set the enclosing object's address, as used by\n `DW_OP_push_object_address`.  If no object address is set, and\n the expression uses an opcode requiring the object address,\n then evaluation will fail with an error.\n","sig":null,"attributes":[{"value":"/ Set the enclosing object's address, as used by","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":690711,"byte_end":690761,"line_start":1045,"line_end":1045,"column_start":5,"column_end":55}},{"value":"/ `DW_OP_push_object_address`.  If no object address is set, and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":690766,"byte_end":690832,"line_start":1046,"line_end":1046,"column_start":5,"column_end":71}},{"value":"/ the expression uses an opcode requiring the object address,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":690837,"byte_end":690900,"line_start":1047,"line_end":1047,"column_start":5,"column_end":68}},{"value":"/ then evaluation will fail with an error.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":690905,"byte_end":690949,"line_start":1048,"line_end":1048,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1503},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":691585,"byte_end":691603,"line_start":1062,"line_end":1062,"column_start":12,"column_end":30},"name":"set_max_iterations","qualname":"<Evaluation<R>>::set_max_iterations","value":"pub fn set_max_iterations(&mut Self, u32)","parent":null,"children":[],"decl_id":null,"docs":" Set the maximum number of iterations to be allowed by the\n expression evaluator.","sig":null,"attributes":[{"value":"/ Set the maximum number of iterations to be allowed by the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":691059,"byte_end":691120,"line_start":1053,"line_end":1053,"column_start":5,"column_end":66}},{"value":"/ expression evaluator.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":691125,"byte_end":691150,"line_start":1054,"line_end":1054,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":691155,"byte_end":691158,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ An iteration corresponds approximately to the evaluation of a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":691163,"byte_end":691228,"line_start":1056,"line_end":1056,"column_start":5,"column_end":70}},{"value":"/ single operation in an expression (\"approximately\" because the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":691233,"byte_end":691299,"line_start":1057,"line_end":1057,"column_start":5,"column_end":71}},{"value":"/ implementation may allow two such operations in some cases).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":691304,"byte_end":691368,"line_start":1058,"line_end":1058,"column_start":5,"column_end":69}},{"value":"/ The default is not to have a maximum; once set, it's not","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":691373,"byte_end":691433,"line_start":1059,"line_end":1059,"column_start":5,"column_end":65}},{"value":"/ possible to go back to this default state.  This value can be","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":691438,"byte_end":691503,"line_start":1060,"line_end":1060,"column_start":5,"column_end":70}},{"value":"/ set to avoid denial of service attacks by bad DWARF bytecode.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":691508,"byte_end":691573,"line_start":1061,"line_end":1061,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1507},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":705101,"byte_end":705107,"line_start":1443,"line_end":1443,"column_start":12,"column_end":18},"name":"result","qualname":"<Evaluation<R>>::result","value":"pub fn result(Self) -> Vec<Piece<R>>","parent":null,"children":[],"decl_id":null,"docs":" Get the result of this `Evaluation`.","sig":null,"attributes":[{"value":"/ Get the result of this `Evaluation`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":704953,"byte_end":704993,"line_start":1439,"line_end":1439,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":704998,"byte_end":705001,"line_start":1440,"line_end":1440,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":705006,"byte_end":705018,"line_start":1441,"line_end":1441,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` has not been driven to completion.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":705023,"byte_end":705089,"line_start":1442,"line_end":1442,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":705698,"byte_end":705706,"line_start":1457,"line_end":1457,"column_start":12,"column_end":20},"name":"evaluate","qualname":"<Evaluation<R>>::evaluate","value":"pub fn evaluate(&mut Self) -> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate a DWARF expression.  This method should only ever be called\n once.  If the returned `EvaluationResult` is not\n `EvaluationResult::Complete`, the caller should provide the required\n value and resume the evaluation by calling the appropriate resume_with\n method on `Evaluation`.\n","sig":null,"attributes":[{"value":"/ Evaluate a DWARF expression.  This method should only ever be called","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":705369,"byte_end":705441,"line_start":1452,"line_end":1452,"column_start":5,"column_end":77}},{"value":"/ once.  If the returned `EvaluationResult` is not","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":705446,"byte_end":705498,"line_start":1453,"line_end":1453,"column_start":5,"column_end":57}},{"value":"/ `EvaluationResult::Complete`, the caller should provide the required","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":705503,"byte_end":705575,"line_start":1454,"line_end":1454,"column_start":5,"column_end":77}},{"value":"/ value and resume the evaluation by calling the appropriate resume_with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":705580,"byte_end":705654,"line_start":1455,"line_end":1455,"column_start":5,"column_end":79}},{"value":"/ method on `Evaluation`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":705659,"byte_end":705686,"line_start":1456,"line_end":1456,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1509},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":706880,"byte_end":706898,"line_start":1487,"line_end":1487,"column_start":12,"column_end":30},"name":"resume_with_memory","qualname":"<Evaluation<R>>::resume_with_memory","value":"pub fn resume_with_memory(&mut Self, Value) -> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided memory `value`.  This will apply\n the provided memory value to the evaluation and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided memory `value`.  This will apply","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":706478,"byte_end":706556,"line_start":1480,"line_end":1480,"column_start":5,"column_end":83}},{"value":"/ the provided memory value to the evaluation and continue evaluating","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":706561,"byte_end":706632,"line_start":1481,"line_end":1481,"column_start":5,"column_end":76}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":706637,"byte_end":706710,"line_start":1482,"line_end":1482,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":706715,"byte_end":706742,"line_start":1483,"line_end":1483,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":706747,"byte_end":706750,"line_start":1484,"line_end":1484,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":706755,"byte_end":706767,"line_start":1485,"line_end":1485,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresMemory`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":706772,"byte_end":706868,"line_start":1486,"line_end":1486,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":1510},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":707778,"byte_end":707798,"line_start":1508,"line_end":1508,"column_start":12,"column_end":32},"name":"resume_with_register","qualname":"<Evaluation<R>>::resume_with_register","value":"pub fn resume_with_register(&mut Self, Value) -> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `register` value.  This will apply\n the provided register value to the evaluation and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `register` value.  This will apply","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":707370,"byte_end":707450,"line_start":1501,"line_end":1501,"column_start":5,"column_end":85}},{"value":"/ the provided register value to the evaluation and continue evaluating","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":707455,"byte_end":707528,"line_start":1502,"line_end":1502,"column_start":5,"column_end":78}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":707533,"byte_end":707606,"line_start":1503,"line_end":1503,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":707611,"byte_end":707638,"line_start":1504,"line_end":1504,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":707643,"byte_end":707646,"line_start":1505,"line_end":1505,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":707651,"byte_end":707663,"line_start":1506,"line_end":1506,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresRegister`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":707668,"byte_end":707766,"line_start":1507,"line_end":1507,"column_start":5,"column_end":103}}]},{"kind":"Method","id":{"krate":0,"index":1511},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":708840,"byte_end":708862,"line_start":1531,"line_end":1531,"column_start":12,"column_end":34},"name":"resume_with_frame_base","qualname":"<Evaluation<R>>::resume_with_frame_base","value":"pub fn resume_with_frame_base(&mut Self, u64) -> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `frame_base`.  This will\n apply the provided frame base value to the evaluation and continue\n evaluating opcodes until the evaluation is completed, reaches an error,\n or needs more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `frame_base`.  This will","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":708433,"byte_end":708503,"line_start":1524,"line_end":1524,"column_start":5,"column_end":75}},{"value":"/ apply the provided frame base value to the evaluation and continue","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":708508,"byte_end":708578,"line_start":1525,"line_end":1525,"column_start":5,"column_end":75}},{"value":"/ evaluating opcodes until the evaluation is completed, reaches an error,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":708583,"byte_end":708658,"line_start":1526,"line_end":1526,"column_start":5,"column_end":80}},{"value":"/ or needs more information again.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":708663,"byte_end":708699,"line_start":1527,"line_end":1527,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":708704,"byte_end":708707,"line_start":1528,"line_end":1528,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":708712,"byte_end":708724,"line_start":1529,"line_end":1529,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresFrameBase`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":708729,"byte_end":708828,"line_start":1530,"line_end":1530,"column_start":5,"column_end":104}}]},{"kind":"Method","id":{"krate":0,"index":1512},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":709796,"byte_end":709811,"line_start":1552,"line_end":1552,"column_start":12,"column_end":27},"name":"resume_with_tls","qualname":"<Evaluation<R>>::resume_with_tls","value":"pub fn resume_with_tls(&mut Self, u64) -> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `value`.  This will apply\n the provided TLS value to the evaluation and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `value`.  This will apply","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":709407,"byte_end":709478,"line_start":1545,"line_end":1545,"column_start":5,"column_end":76}},{"value":"/ the provided TLS value to the evaluation and continue evaluating","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":709483,"byte_end":709551,"line_start":1546,"line_end":1546,"column_start":5,"column_end":73}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":709556,"byte_end":709629,"line_start":1547,"line_end":1547,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":709634,"byte_end":709661,"line_start":1548,"line_end":1548,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":709666,"byte_end":709669,"line_start":1549,"line_end":1549,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":709674,"byte_end":709686,"line_start":1550,"line_end":1550,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresTls`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":709691,"byte_end":709784,"line_start":1551,"line_end":1551,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1513},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":710684,"byte_end":710710,"line_start":1573,"line_end":1573,"column_start":12,"column_end":38},"name":"resume_with_call_frame_cfa","qualname":"<Evaluation<R>>::resume_with_call_frame_cfa","value":"pub fn resume_with_call_frame_cfa(&mut Self, u64)\n-> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `cfa`.  This will\n apply the provided CFA value to the evaluation and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `cfa`.  This will","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":710288,"byte_end":710351,"line_start":1566,"line_end":1566,"column_start":5,"column_end":68}},{"value":"/ apply the provided CFA value to the evaluation and continue evaluating","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":710356,"byte_end":710430,"line_start":1567,"line_end":1567,"column_start":5,"column_end":79}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":710435,"byte_end":710508,"line_start":1568,"line_end":1568,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":710513,"byte_end":710540,"line_start":1569,"line_end":1569,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":710545,"byte_end":710548,"line_start":1570,"line_end":1570,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":710553,"byte_end":710565,"line_start":1571,"line_end":1571,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresCallFrameCfa`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":710570,"byte_end":710672,"line_start":1572,"line_end":1572,"column_start":5,"column_end":107}}]},{"kind":"Method","id":{"krate":0,"index":1514},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":711588,"byte_end":711611,"line_start":1594,"line_end":1594,"column_start":12,"column_end":35},"name":"resume_with_at_location","qualname":"<Evaluation<R>>::resume_with_at_location","value":"pub fn resume_with_at_location(&mut Self, R) -> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `bytes`.  This will\n continue processing the evaluation with the new expression provided\n until the evaluation is completed, reaches an error, or needs more\n information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `bytes`.  This will","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":711203,"byte_end":711268,"line_start":1587,"line_end":1587,"column_start":5,"column_end":70}},{"value":"/ continue processing the evaluation with the new expression provided","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":711273,"byte_end":711344,"line_start":1588,"line_end":1588,"column_start":5,"column_end":76}},{"value":"/ until the evaluation is completed, reaches an error, or needs more","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":711349,"byte_end":711419,"line_start":1589,"line_end":1589,"column_start":5,"column_end":75}},{"value":"/ information again.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":711424,"byte_end":711446,"line_start":1590,"line_end":1590,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":711451,"byte_end":711454,"line_start":1591,"line_end":1591,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":711459,"byte_end":711471,"line_start":1592,"line_end":1592,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresAtLocation`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":711476,"byte_end":711576,"line_start":1593,"line_end":1593,"column_start":5,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":1515},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":712750,"byte_end":712773,"line_start":1620,"line_end":1620,"column_start":12,"column_end":35},"name":"resume_with_entry_value","qualname":"<Evaluation<R>>::resume_with_entry_value","value":"pub fn resume_with_entry_value(&mut Self, Value)\n-> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `entry_value`.  This will\n apply the provided entry value to the evaluation and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `entry_value`.  This will","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":712346,"byte_end":712417,"line_start":1613,"line_end":1613,"column_start":5,"column_end":76}},{"value":"/ apply the provided entry value to the evaluation and continue evaluating","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":712422,"byte_end":712498,"line_start":1614,"line_end":1614,"column_start":5,"column_end":81}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":712503,"byte_end":712576,"line_start":1615,"line_end":1615,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":712581,"byte_end":712608,"line_start":1616,"line_end":1616,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":712613,"byte_end":712616,"line_start":1617,"line_end":1617,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":712621,"byte_end":712633,"line_start":1618,"line_end":1618,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresEntryValue`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":712638,"byte_end":712738,"line_start":1619,"line_end":1619,"column_start":5,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":1516},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":713684,"byte_end":713709,"line_start":1641,"line_end":1641,"column_start":12,"column_end":37},"name":"resume_with_parameter_ref","qualname":"<Evaluation<R>>::resume_with_parameter_ref","value":"pub fn resume_with_parameter_ref(&mut Self, u64)\n-> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `parameter_value`.  This will\n apply the provided parameter value to the evaluation and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `parameter_value`.  This will","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":713270,"byte_end":713345,"line_start":1634,"line_end":1634,"column_start":5,"column_end":80}},{"value":"/ apply the provided parameter value to the evaluation and continue evaluating","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":713350,"byte_end":713430,"line_start":1635,"line_end":1635,"column_start":5,"column_end":85}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":713435,"byte_end":713508,"line_start":1636,"line_end":1636,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":713513,"byte_end":713540,"line_start":1637,"line_end":1637,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":713545,"byte_end":713548,"line_start":1638,"line_end":1638,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":713553,"byte_end":713565,"line_start":1639,"line_end":1639,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresParameterRef`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":713570,"byte_end":713672,"line_start":1640,"line_end":1640,"column_start":5,"column_end":107}}]},{"kind":"Method","id":{"krate":0,"index":1517},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":714703,"byte_end":714732,"line_start":1666,"line_end":1666,"column_start":12,"column_end":41},"name":"resume_with_relocated_address","qualname":"<Evaluation<R>>::resume_with_relocated_address","value":"pub fn resume_with_relocated_address(&mut Self, u64)\n-> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided relocated `address`.  This will use the\n provided relocated address for the operation that required it, and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided relocated `address`.  This will use the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":714257,"byte_end":714342,"line_start":1658,"line_end":1658,"column_start":5,"column_end":90}},{"value":"/ provided relocated address for the operation that required it, and continue evaluating","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":714347,"byte_end":714437,"line_start":1659,"line_end":1659,"column_start":5,"column_end":95}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":714442,"byte_end":714515,"line_start":1660,"line_end":1660,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":714520,"byte_end":714547,"line_start":1661,"line_end":1661,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":714552,"byte_end":714555,"line_start":1662,"line_end":1662,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":714560,"byte_end":714572,"line_start":1663,"line_end":1663,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":714577,"byte_end":714637,"line_start":1664,"line_end":1664,"column_start":5,"column_end":65}},{"value":"/ `EvaluationResult::RequiresRelocatedAddress`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":714642,"byte_end":714691,"line_start":1665,"line_end":1665,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1518},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":715693,"byte_end":715720,"line_start":1688,"line_end":1688,"column_start":12,"column_end":39},"name":"resume_with_indexed_address","qualname":"<Evaluation<R>>::resume_with_indexed_address","value":"pub fn resume_with_indexed_address(&mut Self, u64)\n-> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided indexed `address`.  This will use the\n provided indexed address for the operation that required it, and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided indexed `address`.  This will use the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":715253,"byte_end":715336,"line_start":1680,"line_end":1680,"column_start":5,"column_end":88}},{"value":"/ provided indexed address for the operation that required it, and continue evaluating","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":715341,"byte_end":715429,"line_start":1681,"line_end":1681,"column_start":5,"column_end":93}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":715434,"byte_end":715507,"line_start":1682,"line_end":1682,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":715512,"byte_end":715539,"line_start":1683,"line_end":1683,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":715544,"byte_end":715547,"line_start":1684,"line_end":1684,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":715552,"byte_end":715564,"line_start":1685,"line_end":1685,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":715569,"byte_end":715629,"line_start":1686,"line_end":1686,"column_start":5,"column_end":65}},{"value":"/ `EvaluationResult::RequiresIndexedAddress`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":715634,"byte_end":715681,"line_start":1687,"line_end":1687,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1519},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":716649,"byte_end":716670,"line_start":1709,"line_end":1709,"column_start":12,"column_end":33},"name":"resume_with_base_type","qualname":"<Evaluation<R>>::resume_with_base_type","value":"pub fn resume_with_base_type(&mut Self, ValueType)\n-> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `base_type`.  This will use the\n provided base type for the operation that required it, and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `base_type`.  This will use the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":716235,"byte_end":716312,"line_start":1702,"line_end":1702,"column_start":5,"column_end":82}},{"value":"/ provided base type for the operation that required it, and continue evaluating","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":716317,"byte_end":716399,"line_start":1703,"line_end":1703,"column_start":5,"column_end":87}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":716404,"byte_end":716477,"line_start":1704,"line_end":1704,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":716482,"byte_end":716509,"line_start":1705,"line_end":1705,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":716514,"byte_end":716517,"line_start":1706,"line_end":1706,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":716522,"byte_end":716534,"line_start":1707,"line_end":1707,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresBaseType`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":716539,"byte_end":716637,"line_start":1708,"line_end":1708,"column_start":5,"column_end":103}}]},{"kind":"Struct","id":{"krate":0,"index":7439},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":787593,"byte_end":787606,"line_start":8,"line_end":8,"column_start":12,"column_end":25},"name":"PubNamesEntry","qualname":"::read::pubnames::PubNamesEntry","value":"PubNamesEntry {  }","parent":null,"children":[{"krate":0,"index":7441},{"krate":0,"index":7442},{"krate":0,"index":7443}],"decl_id":null,"docs":" A single parsed pubname.\n","sig":null,"attributes":[{"value":"/ A single parsed pubname.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":787529,"byte_end":787557,"line_start":6,"line_end":6,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1541},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":787820,"byte_end":787824,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"name","qualname":"<PubNamesEntry<R>>::name","value":"pub fn name(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the name this entry refers to.\n","sig":null,"attributes":[{"value":"/ Returns the name this entry refers to.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":787766,"byte_end":787808,"line_start":15,"line_end":15,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1542},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":788006,"byte_end":788024,"line_start":22,"line_end":22,"column_start":12,"column_end":30},"name":"unit_header_offset","qualname":"<PubNamesEntry<R>>::unit_header_offset","value":"pub fn unit_header_offset(&Self) -> DebugInfoOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset into the .debug_info section for the header of the compilation unit\n which contains this name.\n","sig":null,"attributes":[{"value":"/ Returns the offset into the .debug_info section for the header of the compilation unit","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":787870,"byte_end":787960,"line_start":20,"line_end":20,"column_start":5,"column_end":95}},{"value":"/ which contains this name.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":787965,"byte_end":787994,"line_start":21,"line_end":21,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1543},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":788232,"byte_end":788242,"line_start":28,"line_end":28,"column_start":12,"column_end":22},"name":"die_offset","qualname":"<PubNamesEntry<R>>::die_offset","value":"pub fn die_offset(&Self) -> UnitOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset into the compilation unit for the debugging information entry which\n has this name.\n","sig":null,"attributes":[{"value":"/ Returns the offset into the compilation unit for the debugging information entry which","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":788107,"byte_end":788197,"line_start":26,"line_end":26,"column_start":5,"column_end":95}},{"value":"/ has this name.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":788202,"byte_end":788220,"line_start":27,"line_end":27,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":7450},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":788783,"byte_end":788796,"line_start":50,"line_end":50,"column_start":12,"column_end":25},"name":"DebugPubNames","qualname":"::read::pubnames::DebugPubNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `DebugPubNames` struct represents the DWARF public names information\n found in the `.debug_pubnames` section.\n","sig":null,"attributes":[{"value":"/ The `DebugPubNames` struct represents the DWARF public names information","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":788627,"byte_end":788703,"line_start":47,"line_end":47,"column_start":1,"column_end":77}},{"value":"/ found in the `.debug_pubnames` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":788704,"byte_end":788747,"line_start":48,"line_end":48,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1550},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789574,"byte_end":789577,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugPubNames<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugPubNames` instance from the data in the `.debug_pubnames`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugPubNames` instance from the data in the `.debug_pubnames`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":788962,"byte_end":789045,"line_start":56,"line_end":56,"column_start":5,"column_end":88}},{"value":"/ section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789050,"byte_end":789062,"line_start":57,"line_end":57,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789067,"byte_end":789070,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_pubnames` section and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789075,"byte_end":789154,"line_start":59,"line_end":59,"column_start":5,"column_end":84}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789159,"byte_end":789229,"line_start":60,"line_end":60,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789234,"byte_end":789273,"line_start":61,"line_end":61,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789278,"byte_end":789281,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789286,"byte_end":789293,"line_start":63,"line_end":63,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugPubNames, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789298,"byte_end":789343,"line_start":64,"line_end":64,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789348,"byte_end":789351,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789356,"byte_end":789375,"line_start":66,"line_end":66,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_pubnames_section_somehow = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789380,"byte_end":789436,"line_start":67,"line_end":67,"column_start":5,"column_end":61}},{"value":"/ let debug_pubnames =","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789441,"byte_end":789465,"line_start":68,"line_end":68,"column_start":5,"column_end":29}},{"value":"/     DebugPubNames::new(read_debug_pubnames_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789470,"byte_end":789550,"line_start":69,"line_end":69,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789555,"byte_end":789562,"line_start":70,"line_end":70,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1553},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":790328,"byte_end":790333,"line_start":92,"line_end":92,"column_start":12,"column_end":17},"name":"items","qualname":"<DebugPubNames<R>>::items","value":"pub fn items(&Self) -> PubNamesEntryIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the pubnames in the `.debug_pubnames` section.","sig":null,"attributes":[{"value":"/ Iterate the pubnames in the `.debug_pubnames` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789759,"byte_end":789817,"line_start":77,"line_end":77,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789822,"byte_end":789825,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789830,"byte_end":789837,"line_start":79,"line_end":79,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugPubNames, EndianSlice, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789842,"byte_end":789900,"line_start":80,"line_end":80,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789905,"byte_end":789908,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789913,"byte_end":789932,"line_start":82,"line_end":82,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_pubnames_section_somehow = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789937,"byte_end":789993,"line_start":83,"line_end":83,"column_start":5,"column_end":61}},{"value":"/ let debug_pubnames =","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789998,"byte_end":790022,"line_start":84,"line_end":84,"column_start":5,"column_end":29}},{"value":"/     DebugPubNames::new(read_debug_pubnames_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":790027,"byte_end":790107,"line_start":85,"line_end":85,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":790112,"byte_end":790115,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ let mut iter = debug_pubnames.items();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":790120,"byte_end":790162,"line_start":87,"line_end":87,"column_start":5,"column_end":47}},{"value":"/ while let Some(pubname) = iter.next().unwrap() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":790167,"byte_end":790219,"line_start":88,"line_end":88,"column_start":5,"column_end":57}},{"value":"/   println!(\"pubname {} found!\", pubname.name().to_string_lossy());","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":790224,"byte_end":790294,"line_start":89,"line_end":89,"column_start":5,"column_end":75}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":790299,"byte_end":790304,"line_start":90,"line_end":90,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":790309,"byte_end":790316,"line_start":91,"line_end":91,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":7460},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":790963,"byte_end":790980,"line_start":118,"line_end":118,"column_start":12,"column_end":29},"name":"PubNamesEntryIter","qualname":"::read::pubnames::PubNamesEntryIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the pubnames from a `.debug_pubnames` section.","sig":null,"attributes":[{"value":"/ An iterator over the pubnames from a `.debug_pubnames` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":790767,"byte_end":790834,"line_start":113,"line_end":113,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":790835,"byte_end":790838,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ Can be [used with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":790839,"byte_end":790860,"line_start":115,"line_end":115,"column_start":1,"column_end":22}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":790861,"byte_end":790927,"line_start":116,"line_end":116,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1563},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":791501,"byte_end":791505,"line_start":128,"line_end":128,"column_start":12,"column_end":16},"name":"next","qualname":"<PubNamesEntryIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<PubNamesEntry<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator and return the next pubname.","sig":null,"attributes":[{"value":"/ Advance the iterator and return the next pubname.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":791094,"byte_end":791147,"line_start":121,"line_end":121,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":791152,"byte_end":791155,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ Returns the newly parsed pubname as `Ok(Some(pubname))`. Returns","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":791160,"byte_end":791228,"line_start":123,"line_end":123,"column_start":5,"column_end":73}},{"value":"/ `Ok(None)` when iteration is complete and all pubnames have already been","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":791233,"byte_end":791309,"line_start":124,"line_end":124,"column_start":5,"column_end":81}},{"value":"/ parsed and yielded. If an error occurs while parsing the next pubname,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":791314,"byte_end":791388,"line_start":125,"line_end":125,"column_start":5,"column_end":79}},{"value":"/ then this error is returned as `Err(e)`, and all subsequent calls return","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":791393,"byte_end":791469,"line_start":126,"line_end":126,"column_start":5,"column_end":81}},{"value":"/ `Ok(None)`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":791474,"byte_end":791489,"line_start":127,"line_end":127,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7470},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":792194,"byte_end":792207,"line_start":8,"line_end":8,"column_start":12,"column_end":25},"name":"PubTypesEntry","qualname":"::read::pubtypes::PubTypesEntry","value":"PubTypesEntry {  }","parent":null,"children":[{"krate":0,"index":7472},{"krate":0,"index":7473},{"krate":0,"index":7474}],"decl_id":null,"docs":" A single parsed pubtype.\n","sig":null,"attributes":[{"value":"/ A single parsed pubtype.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":792130,"byte_end":792158,"line_start":6,"line_end":6,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1588},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":792433,"byte_end":792437,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"name","qualname":"<PubTypesEntry<R>>::name","value":"pub fn name(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the name of the type this entry refers to.\n","sig":null,"attributes":[{"value":"/ Returns the name of the type this entry refers to.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":792367,"byte_end":792421,"line_start":15,"line_end":15,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1589},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":792633,"byte_end":792651,"line_start":22,"line_end":22,"column_start":12,"column_end":30},"name":"unit_header_offset","qualname":"<PubTypesEntry<R>>::unit_header_offset","value":"pub fn unit_header_offset(&Self) -> DebugInfoOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset into the .debug_info section for the header of the compilation unit\n which contains the type with this name.\n","sig":null,"attributes":[{"value":"/ Returns the offset into the .debug_info section for the header of the compilation unit","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":792483,"byte_end":792573,"line_start":20,"line_end":20,"column_start":5,"column_end":95}},{"value":"/ which contains the type with this name.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":792578,"byte_end":792621,"line_start":21,"line_end":21,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1590},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":792869,"byte_end":792879,"line_start":28,"line_end":28,"column_start":12,"column_end":22},"name":"die_offset","qualname":"<PubTypesEntry<R>>::die_offset","value":"pub fn die_offset(&Self) -> UnitOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset into the compilation unit for the debugging information entry which\n the type with this name.\n","sig":null,"attributes":[{"value":"/ Returns the offset into the compilation unit for the debugging information entry which","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":792734,"byte_end":792824,"line_start":26,"line_end":26,"column_start":5,"column_end":95}},{"value":"/ the type with this name.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":792829,"byte_end":792857,"line_start":27,"line_end":27,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":7481},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":793416,"byte_end":793429,"line_start":50,"line_end":50,"column_start":12,"column_end":25},"name":"DebugPubTypes","qualname":"::read::pubtypes::DebugPubTypes","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `DebugPubTypes` struct represents the DWARF public types information\n found in the `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ The `DebugPubTypes` struct represents the DWARF public types information","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":793264,"byte_end":793340,"line_start":47,"line_end":47,"column_start":1,"column_end":77}},{"value":"/ found in the `.debug_info` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":793341,"byte_end":793380,"line_start":48,"line_end":48,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1597},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794191,"byte_end":794194,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugPubTypes<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugPubTypes` instance from the data in the `.debug_pubtypes`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugPubTypes` instance from the data in the `.debug_pubtypes`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":793595,"byte_end":793678,"line_start":56,"line_end":56,"column_start":5,"column_end":88}},{"value":"/ section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":793683,"byte_end":793695,"line_start":57,"line_end":57,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":793700,"byte_end":793703,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_pubtypes` section and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":793708,"byte_end":793787,"line_start":59,"line_end":59,"column_start":5,"column_end":84}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":793792,"byte_end":793862,"line_start":60,"line_end":60,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":793867,"byte_end":793906,"line_start":61,"line_end":61,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":793911,"byte_end":793914,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":793919,"byte_end":793926,"line_start":63,"line_end":63,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugPubTypes, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":793931,"byte_end":793976,"line_start":64,"line_end":64,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":793981,"byte_end":793984,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":793989,"byte_end":794008,"line_start":66,"line_end":66,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_pubtypes_somehow = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794013,"byte_end":794061,"line_start":67,"line_end":67,"column_start":5,"column_end":53}},{"value":"/ let debug_pubtypes =","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794066,"byte_end":794090,"line_start":68,"line_end":68,"column_start":5,"column_end":29}},{"value":"/     DebugPubTypes::new(read_debug_pubtypes_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794095,"byte_end":794167,"line_start":69,"line_end":69,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794172,"byte_end":794179,"line_start":70,"line_end":70,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1600},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794945,"byte_end":794950,"line_start":92,"line_end":92,"column_start":12,"column_end":17},"name":"items","qualname":"<DebugPubTypes<R>>::items","value":"pub fn items(&Self) -> PubTypesEntryIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the pubtypes in the `.debug_pubtypes` section.","sig":null,"attributes":[{"value":"/ Iterate the pubtypes in the `.debug_pubtypes` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794376,"byte_end":794434,"line_start":77,"line_end":77,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794439,"byte_end":794442,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794447,"byte_end":794454,"line_start":79,"line_end":79,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugPubTypes, EndianSlice, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794459,"byte_end":794517,"line_start":80,"line_end":80,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794522,"byte_end":794525,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794530,"byte_end":794549,"line_start":82,"line_end":82,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_pubtypes_section_somehow = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794554,"byte_end":794610,"line_start":83,"line_end":83,"column_start":5,"column_end":61}},{"value":"/ let debug_pubtypes =","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794615,"byte_end":794639,"line_start":84,"line_end":84,"column_start":5,"column_end":29}},{"value":"/     DebugPubTypes::new(read_debug_pubtypes_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794644,"byte_end":794724,"line_start":85,"line_end":85,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794729,"byte_end":794732,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ let mut iter = debug_pubtypes.items();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794737,"byte_end":794779,"line_start":87,"line_end":87,"column_start":5,"column_end":47}},{"value":"/ while let Some(pubtype) = iter.next().unwrap() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794784,"byte_end":794836,"line_start":88,"line_end":88,"column_start":5,"column_end":57}},{"value":"/   println!(\"pubtype {} found!\", pubtype.name().to_string_lossy());","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794841,"byte_end":794911,"line_start":89,"line_end":89,"column_start":5,"column_end":75}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794916,"byte_end":794921,"line_start":90,"line_end":90,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794926,"byte_end":794933,"line_start":91,"line_end":91,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":7491},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":795580,"byte_end":795597,"line_start":118,"line_end":118,"column_start":12,"column_end":29},"name":"PubTypesEntryIter","qualname":"::read::pubtypes::PubTypesEntryIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the pubtypes from a `.debug_pubtypes` section.","sig":null,"attributes":[{"value":"/ An iterator over the pubtypes from a `.debug_pubtypes` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":795384,"byte_end":795451,"line_start":113,"line_end":113,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":795452,"byte_end":795455,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ Can be [used with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":795456,"byte_end":795477,"line_start":115,"line_end":115,"column_start":1,"column_end":22}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":795478,"byte_end":795544,"line_start":116,"line_end":116,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1610},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":796118,"byte_end":796122,"line_start":128,"line_end":128,"column_start":12,"column_end":16},"name":"next","qualname":"<PubTypesEntryIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<PubTypesEntry<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator and return the next pubtype.","sig":null,"attributes":[{"value":"/ Advance the iterator and return the next pubtype.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":795711,"byte_end":795764,"line_start":121,"line_end":121,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":795769,"byte_end":795772,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ Returns the newly parsed pubtype as `Ok(Some(pubtype))`. Returns","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":795777,"byte_end":795845,"line_start":123,"line_end":123,"column_start":5,"column_end":73}},{"value":"/ `Ok(None)` when iteration is complete and all pubtypes have already been","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":795850,"byte_end":795926,"line_start":124,"line_end":124,"column_start":5,"column_end":81}},{"value":"/ parsed and yielded. If an error occurs while parsing the next pubtype,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":795931,"byte_end":796005,"line_start":125,"line_end":125,"column_start":5,"column_end":79}},{"value":"/ then this error is returned as `Err(e)`, and all subsequent calls return","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":796010,"byte_end":796086,"line_start":126,"line_end":126,"column_start":5,"column_end":81}},{"value":"/ `Ok(None)`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":796091,"byte_end":796106,"line_start":127,"line_end":127,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":7501},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":796927,"byte_end":796938,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"DebugRanges","qualname":"::read::rnglists::DebugRanges","value":"DebugRanges {  }","parent":null,"children":[{"krate":0,"index":7503}],"decl_id":null,"docs":" The raw contents of the `.debug_ranges` section.\n","sig":null,"attributes":[{"value":"/ The raw contents of the `.debug_ranges` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":796824,"byte_end":796876,"line_start":11,"line_end":11,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1641},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":797677,"byte_end":797680,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugRanges<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugRanges` instance from the data in the `.debug_ranges`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugRanges` instance from the data in the `.debug_ranges`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":797071,"byte_end":797150,"line_start":21,"line_end":21,"column_start":5,"column_end":84}},{"value":"/ section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":797155,"byte_end":797167,"line_start":22,"line_end":22,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":797172,"byte_end":797175,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_ranges` section and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":797180,"byte_end":797257,"line_start":24,"line_end":24,"column_start":5,"column_end":82}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":797262,"byte_end":797332,"line_start":25,"line_end":25,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":797337,"byte_end":797376,"line_start":26,"line_end":26,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":797381,"byte_end":797384,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":797389,"byte_end":797396,"line_start":28,"line_end":28,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugRanges, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":797401,"byte_end":797444,"line_start":29,"line_end":29,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":797449,"byte_end":797452,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":797457,"byte_end":797498,"line_start":31,"line_end":31,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_ranges_section_somehow = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":797503,"byte_end":797557,"line_start":32,"line_end":32,"column_start":5,"column_end":59}},{"value":"/ let debug_ranges = DebugRanges::new(read_debug_ranges_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":797562,"byte_end":797653,"line_start":33,"line_end":33,"column_start":5,"column_end":96}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":797658,"byte_end":797665,"line_start":34,"line_end":34,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":7515},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798213,"byte_end":798226,"line_start":59,"line_end":59,"column_start":12,"column_end":25},"name":"DebugRngLists","qualname":"::read::rnglists::DebugRngLists","value":"DebugRngLists {  }","parent":null,"children":[{"krate":0,"index":7517}],"decl_id":null,"docs":" The `DebugRngLists` struct represents the contents of the\n `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ The `DebugRngLists` struct represents the contents of the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798070,"byte_end":798131,"line_start":56,"line_end":56,"column_start":1,"column_end":62}},{"value":"/ `.debug_rnglists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798132,"byte_end":798162,"line_start":57,"line_end":57,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1652},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798984,"byte_end":798987,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugRngLists<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugRngLists` instance from the data in the\n `.debug_rnglists` section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugRngLists` instance from the data in the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798350,"byte_end":798415,"line_start":67,"line_end":67,"column_start":5,"column_end":70}},{"value":"/ `.debug_rnglists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798420,"byte_end":798450,"line_start":68,"line_end":68,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798455,"byte_end":798458,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_rnglists`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798463,"byte_end":798530,"line_start":70,"line_end":70,"column_start":5,"column_end":72}},{"value":"/ section and present it as a `&[u8]` slice. That means using some ELF","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798535,"byte_end":798607,"line_start":71,"line_end":71,"column_start":5,"column_end":77}},{"value":"/ loader on Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798612,"byte_end":798661,"line_start":72,"line_end":72,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798666,"byte_end":798669,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798674,"byte_end":798681,"line_start":74,"line_end":74,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugRngLists, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798686,"byte_end":798731,"line_start":75,"line_end":75,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798736,"byte_end":798739,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798744,"byte_end":798785,"line_start":77,"line_end":77,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_rnglists_section_somehow = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798790,"byte_end":798846,"line_start":78,"line_end":78,"column_start":5,"column_end":61}},{"value":"/ let debug_rnglists =","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798851,"byte_end":798875,"line_start":79,"line_end":79,"column_start":5,"column_end":29}},{"value":"/     DebugRngLists::new(read_debug_rnglists_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798880,"byte_end":798960,"line_start":80,"line_end":80,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798965,"byte_end":798972,"line_start":81,"line_end":81,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":7537},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801005,"byte_end":801015,"line_start":163,"line_end":163,"column_start":12,"column_end":22},"name":"RangeLists","qualname":"::read::rnglists::RangeLists","value":"RangeLists {  }","parent":null,"children":[{"krate":0,"index":7539},{"krate":0,"index":7540}],"decl_id":null,"docs":" The DWARF data found in `.debug_ranges` and `.debug_rnglists` sections.\n","sig":null,"attributes":[{"value":"/ The DWARF data found in `.debug_ranges` and `.debug_rnglists` sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":800879,"byte_end":800954,"line_start":161,"line_end":161,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1668},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801254,"byte_end":801257,"line_start":171,"line_end":171,"column_start":12,"column_end":15},"name":"new","qualname":"<RangeLists<R>>::new","value":"pub fn new(DebugRanges<R>, DebugRngLists<R>) -> RangeLists<R>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `RangeLists` instance from the data in the `.debug_ranges` and\n `.debug_rnglists` sections.\n","sig":null,"attributes":[{"value":"/ Construct a new `RangeLists` instance from the data in the `.debug_ranges` and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801124,"byte_end":801206,"line_start":169,"line_end":169,"column_start":5,"column_end":87}},{"value":"/ `.debug_rnglists` sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801211,"byte_end":801242,"line_start":170,"line_end":170,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1671},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":802087,"byte_end":802093,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"name":"borrow","qualname":"<RangeLists<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> RangeLists<R> where F: FnMut(&'a T) ->\nR","parent":null,"children":[],"decl_id":null,"docs":" Create a `RangeLists` that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `RangeLists` that references the data in `self`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801463,"byte_end":801524,"line_start":180,"line_end":180,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801529,"byte_end":801532,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801537,"byte_end":801602,"line_start":182,"line_end":182,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801607,"byte_end":801610,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801615,"byte_end":801635,"line_start":184,"line_end":184,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801640,"byte_end":801643,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801648,"byte_end":801666,"line_start":186,"line_end":186,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801671,"byte_end":801716,"line_start":187,"line_end":187,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801721,"byte_end":801805,"line_start":188,"line_end":188,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::RangeLists<Vec<u8>> = load_section();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801810,"byte_end":801877,"line_start":189,"line_end":189,"column_start":5,"column_end":72}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801882,"byte_end":801929,"line_start":190,"line_end":190,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801934,"byte_end":801984,"line_start":191,"line_end":191,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801989,"byte_end":802051,"line_start":192,"line_end":192,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":802056,"byte_end":802063,"line_start":193,"line_end":193,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":802068,"byte_end":802075,"line_start":194,"line_end":194,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1677},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":802913,"byte_end":802919,"line_start":217,"line_end":217,"column_start":12,"column_end":18},"name":"ranges","qualname":"<RangeLists<R>>::ranges","value":"pub fn ranges(&Self, RangeListsOffset<R::Offset>, Encoding, u64,\n              &DebugAddr<R>, DebugAddrBase<R::Offset>)\n-> Result<RngListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the `Range` list entries starting at the given offset.","sig":null,"attributes":[{"value":"/ Iterate over the `Range` list entries starting at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":802410,"byte_end":802481,"line_start":207,"line_end":207,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":802486,"byte_end":802489,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ The `unit_version` and `address_size` must match the compilation unit that the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":802494,"byte_end":802576,"line_start":209,"line_end":209,"column_start":5,"column_end":87}},{"value":"/ offset was contained in.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":802581,"byte_end":802609,"line_start":210,"line_end":210,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":802614,"byte_end":802617,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ The `base_address` should be obtained from the `DW_AT_low_pc` attribute in the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":802622,"byte_end":802704,"line_start":212,"line_end":212,"column_start":5,"column_end":87}},{"value":"/ `DW_TAG_compile_unit` entry for the compilation unit that contains this range list.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":802709,"byte_end":802796,"line_start":213,"line_end":213,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":802801,"byte_end":802804,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":802809,"byte_end":802830,"line_start":215,"line_end":215,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":802835,"byte_end":802901,"line_start":216,"line_end":216,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1678},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":803775,"byte_end":803785,"line_start":243,"line_end":243,"column_start":12,"column_end":22},"name":"raw_ranges","qualname":"<RangeLists<R>>::raw_ranges","value":"pub fn raw_ranges(&Self, RangeListsOffset<R::Offset>, Encoding)\n-> Result<RawRngListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the `RawRngListEntry`ies starting at the given offset.","sig":null,"attributes":[{"value":"/ Iterate over the `RawRngListEntry`ies starting at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":803352,"byte_end":803423,"line_start":233,"line_end":233,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":803428,"byte_end":803431,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ The `unit_encoding` must match the compilation unit that the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":803436,"byte_end":803500,"line_start":235,"line_end":235,"column_start":5,"column_end":69}},{"value":"/ offset was contained in.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":803505,"byte_end":803533,"line_start":236,"line_end":236,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":803538,"byte_end":803541,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ This iterator does not perform any processing of the range entries,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":803546,"byte_end":803617,"line_start":238,"line_end":238,"column_start":5,"column_end":76}},{"value":"/ such as handling base addresses.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":803622,"byte_end":803658,"line_start":239,"line_end":239,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":803663,"byte_end":803666,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":803671,"byte_end":803692,"line_start":241,"line_end":241,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":803697,"byte_end":803763,"line_start":242,"line_end":242,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1679},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":804638,"byte_end":804648,"line_start":266,"line_end":266,"column_start":12,"column_end":22},"name":"get_offset","qualname":"<RangeLists<R>>::get_offset","value":"pub fn get_offset(&Self, Encoding, DebugRngListsBase<R::Offset>,\n                  DebugRngListsIndex<R::Offset>)\n-> Result<RangeListsOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `.debug_rnglists` offset at the given `base` and `index`.","sig":null,"attributes":[{"value":"/ Returns the `.debug_rnglists` offset at the given `base` and `index`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":804191,"byte_end":804264,"line_start":257,"line_end":257,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":804269,"byte_end":804272,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ The `base` must be the `DW_AT_rnglists_base` value from the compilation unit DIE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":804277,"byte_end":804362,"line_start":259,"line_end":259,"column_start":5,"column_end":90}},{"value":"/ This is an offset that points to the first entry following the header.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":804367,"byte_end":804441,"line_start":260,"line_end":260,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":804446,"byte_end":804449,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The `index` is the value of a `DW_FORM_rnglistx` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":804454,"byte_end":804517,"line_start":262,"line_end":262,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":804522,"byte_end":804525,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ The `unit_encoding` must match the compilation unit that the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":804530,"byte_end":804594,"line_start":264,"line_end":264,"column_start":5,"column_end":69}},{"value":"/ index was contained in.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":804599,"byte_end":804626,"line_start":265,"line_end":265,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1681},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":805289,"byte_end":805305,"line_start":284,"line_end":284,"column_start":12,"column_end":28},"name":"lookup_offset_id","qualname":"<RangeLists<R>>::lookup_offset_id","value":"pub fn lookup_offset_id(&Self, ReaderOffsetId)\n-> Option<(SectionId, R::Offset)>","parent":null,"children":[],"decl_id":null,"docs":" Call `Reader::lookup_offset_id` for each section, and return the first match.\n","sig":null,"attributes":[{"value":"/ Call `Reader::lookup_offset_id` for each section, and return the first match.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":805196,"byte_end":805277,"line_start":283,"line_end":283,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":7552},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":805692,"byte_end":805706,"line_start":296,"line_end":296,"column_start":12,"column_end":26},"name":"RawRngListIter","qualname":"::read::rnglists::RawRngListIter","value":"RawRngListIter {  }","parent":null,"children":[{"krate":0,"index":7554},{"krate":0,"index":7555}],"decl_id":null,"docs":" A raw iterator over an address range list.","sig":null,"attributes":[{"value":"/ A raw iterator over an address range list.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":805504,"byte_end":805550,"line_start":291,"line_end":291,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":805551,"byte_end":805554,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ This iterator does not perform any processing of the range entries,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":805555,"byte_end":805626,"line_start":293,"line_end":293,"column_start":1,"column_end":72}},{"value":"/ such as handling base addresses.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":805627,"byte_end":805663,"line_start":294,"line_end":294,"column_start":1,"column_end":37}}]},{"kind":"StructVariant","id":{"krate":0,"index":7561},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":805895,"byte_end":805914,"line_start":305,"line_end":305,"column_start":5,"column_end":24},"name":"AddressOrOffsetPair","qualname":"::read::rnglists::RawRngListEntry::AddressOrOffsetPair","value":"RawRngListEntry::AddressOrOffsetPair { begin, end }","parent":{"krate":0,"index":7559},"children":[],"decl_id":null,"docs":" A range from DWARF version <= 4.\n","sig":null,"attributes":[{"value":"/ A range from DWARF version <= 4.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":805854,"byte_end":805890,"line_start":304,"line_end":304,"column_start":5,"column_end":41}}]},{"kind":"StructVariant","id":{"krate":0,"index":7564},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":806112,"byte_end":806123,"line_start":312,"line_end":312,"column_start":5,"column_end":16},"name":"BaseAddress","qualname":"::read::rnglists::RawRngListEntry::BaseAddress","value":"RawRngListEntry::BaseAddress { addr }","parent":{"krate":0,"index":7559},"children":[],"decl_id":null,"docs":" DW_RLE_base_address\n","sig":null,"attributes":[{"value":"/ DW_RLE_base_address","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":806084,"byte_end":806107,"line_start":311,"line_end":311,"column_start":5,"column_end":28}}]},{"kind":"StructVariant","id":{"krate":0,"index":7566},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":806210,"byte_end":806222,"line_start":317,"line_end":317,"column_start":5,"column_end":17},"name":"BaseAddressx","qualname":"::read::rnglists::RawRngListEntry::BaseAddressx","value":"RawRngListEntry::BaseAddressx { addr }","parent":{"krate":0,"index":7559},"children":[],"decl_id":null,"docs":" DW_RLE_base_addressx\n","sig":null,"attributes":[{"value":"/ DW_RLE_base_addressx","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":806181,"byte_end":806205,"line_start":316,"line_end":316,"column_start":5,"column_end":29}}]},{"kind":"StructVariant","id":{"krate":0,"index":7568},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":806321,"byte_end":806331,"line_start":322,"line_end":322,"column_start":5,"column_end":15},"name":"StartxEndx","qualname":"::read::rnglists::RawRngListEntry::StartxEndx","value":"RawRngListEntry::StartxEndx { begin, end }","parent":{"krate":0,"index":7559},"children":[],"decl_id":null,"docs":" DW_RLE_startx_endx\n","sig":null,"attributes":[{"value":"/ DW_RLE_startx_endx","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":806294,"byte_end":806316,"line_start":321,"line_end":321,"column_start":5,"column_end":27}}]},{"kind":"StructVariant","id":{"krate":0,"index":7571},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":806492,"byte_end":806504,"line_start":329,"line_end":329,"column_start":5,"column_end":17},"name":"StartxLength","qualname":"::read::rnglists::RawRngListEntry::StartxLength","value":"RawRngListEntry::StartxLength { begin, length }","parent":{"krate":0,"index":7559},"children":[],"decl_id":null,"docs":" DW_RLE_startx_length\n","sig":null,"attributes":[{"value":"/ DW_RLE_startx_length","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":806463,"byte_end":806487,"line_start":328,"line_end":328,"column_start":5,"column_end":29}}]},{"kind":"StructVariant","id":{"krate":0,"index":7574},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":806655,"byte_end":806665,"line_start":336,"line_end":336,"column_start":5,"column_end":15},"name":"OffsetPair","qualname":"::read::rnglists::RawRngListEntry::OffsetPair","value":"RawRngListEntry::OffsetPair { begin, end }","parent":{"krate":0,"index":7559},"children":[],"decl_id":null,"docs":" DW_RLE_offset_pair\n","sig":null,"attributes":[{"value":"/ DW_RLE_offset_pair","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":806628,"byte_end":806650,"line_start":335,"line_end":335,"column_start":5,"column_end":27}}]},{"kind":"StructVariant","id":{"krate":0,"index":7577},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":806794,"byte_end":806802,"line_start":343,"line_end":343,"column_start":5,"column_end":13},"name":"StartEnd","qualname":"::read::rnglists::RawRngListEntry::StartEnd","value":"RawRngListEntry::StartEnd { begin, end }","parent":{"krate":0,"index":7559},"children":[],"decl_id":null,"docs":" DW_RLE_start_end\n","sig":null,"attributes":[{"value":"/ DW_RLE_start_end","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":806769,"byte_end":806789,"line_start":342,"line_end":342,"column_start":5,"column_end":25}}]},{"kind":"StructVariant","id":{"krate":0,"index":7580},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":806934,"byte_end":806945,"line_start":350,"line_end":350,"column_start":5,"column_end":16},"name":"StartLength","qualname":"::read::rnglists::RawRngListEntry::StartLength","value":"RawRngListEntry::StartLength { begin, length }","parent":{"krate":0,"index":7559},"children":[],"decl_id":null,"docs":" DW_RLE_start_length\n","sig":null,"attributes":[{"value":"/ DW_RLE_start_length","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":806906,"byte_end":806929,"line_start":349,"line_end":349,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":7559},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":805829,"byte_end":805844,"line_start":303,"line_end":303,"column_start":10,"column_end":25},"name":"RawRngListEntry","qualname":"::read::rnglists::RawRngListEntry","value":"pub enum RawRngListEntry<T> {\n\n    /// A range from DWARF version <= 4.\n    AddressOrOffsetPair {\n        /// Start of range. May be an address or an offset.\n        begin: u64,\n        /// End of range. May be an address or an offset.\n        end: u64,\n    },\n\n    /// DW_RLE_base_address\n    BaseAddress {\n        /// base address\n        addr: u64,\n    },\n\n    /// DW_RLE_base_addressx\n    BaseAddressx {\n        /// base address\n        addr: DebugAddrIndex<T>,\n    },\n\n    /// DW_RLE_startx_endx\n    StartxEndx {\n        /// start of range\n        begin: DebugAddrIndex<T>,\n        /// end of range\n        end: DebugAddrIndex<T>,\n    },\n\n    /// DW_RLE_startx_length\n    StartxLength {\n        /// start of range\n        begin: DebugAddrIndex<T>,\n        /// length of range\n        length: u64,\n    },\n\n    /// DW_RLE_offset_pair\n    OffsetPair {\n        /// start of range\n        begin: u64,\n        /// end of range\n        end: u64,\n    },\n\n    /// DW_RLE_start_end\n    StartEnd {\n        /// start of range\n        begin: u64,\n        /// end of range\n        end: u64,\n    },\n\n    /// DW_RLE_start_length\n    StartLength {\n        /// start of range\n        begin: u64,\n        /// length of range\n        length: u64,\n    },\n}","parent":null,"children":[{"krate":0,"index":7561},{"krate":0,"index":7564},{"krate":0,"index":7566},{"krate":0,"index":7568},{"krate":0,"index":7571},{"krate":0,"index":7574},{"krate":0,"index":7577},{"krate":0,"index":7580}],"decl_id":null,"docs":" A raw entry in .debug_rnglists\n","sig":null,"attributes":[{"value":"/ A raw entry in .debug_rnglists","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":805761,"byte_end":805795,"line_start":301,"line_end":301,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1690},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":809711,"byte_end":809715,"line_start":416,"line_end":416,"column_start":12,"column_end":16},"name":"next","qualname":"<RawRngListIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<RawRngListEntry<R::Offset>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next range.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next range.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":809656,"byte_end":809699,"line_start":415,"line_end":415,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":7589},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":810782,"byte_end":810793,"line_start":452,"line_end":452,"column_start":12,"column_end":23},"name":"RngListIter","qualname":"::read::rnglists::RngListIter","value":"RngListIter {  }","parent":null,"children":[{"krate":0,"index":7591},{"krate":0,"index":7592},{"krate":0,"index":7593},{"krate":0,"index":7594}],"decl_id":null,"docs":" An iterator over an address range list.","sig":null,"attributes":[{"value":"/ An iterator over an address range list.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":810510,"byte_end":810553,"line_start":446,"line_end":446,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":810554,"byte_end":810557,"line_start":447,"line_end":447,"column_start":1,"column_end":4}},{"value":"/ This iterator internally handles processing of base addresses and different","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":810558,"byte_end":810637,"line_start":448,"line_end":448,"column_start":1,"column_end":80}},{"value":"/ entry types.  Thus, it only returns range entries that are valid","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":810638,"byte_end":810706,"line_start":449,"line_end":449,"column_start":1,"column_end":69}},{"value":"/ and already adjusted for the base address.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":810707,"byte_end":810753,"line_start":450,"line_end":450,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1700},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":811590,"byte_end":811594,"line_start":482,"line_end":482,"column_start":12,"column_end":16},"name":"next","qualname":"<RngListIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<Range>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next range.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next range.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":811535,"byte_end":811578,"line_start":481,"line_end":481,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":7616},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":815066,"byte_end":815071,"line_start":582,"line_end":582,"column_start":12,"column_end":17},"name":"Range","qualname":"::read::rnglists::Range","value":"Range { begin, end }","parent":null,"children":[{"krate":0,"index":7617},{"krate":0,"index":7618}],"decl_id":null,"docs":" An address range from the `.debug_ranges` or `.debug_rnglists` sections.\n","sig":null,"attributes":[{"value":"/ An address range from the `.debug_ranges` or `.debug_rnglists` sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":814927,"byte_end":815003,"line_start":580,"line_end":580,"column_start":1,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":7617},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":815126,"byte_end":815131,"line_start":584,"line_end":584,"column_start":9,"column_end":14},"name":"begin","qualname":"::read::rnglists::Range::begin","value":"u64","parent":{"krate":0,"index":7616},"children":[],"decl_id":null,"docs":" The beginning address of the range.\n","sig":null,"attributes":[{"value":"/ The beginning address of the range.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":815078,"byte_end":815117,"line_start":583,"line_end":583,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":7618},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":815200,"byte_end":815203,"line_start":587,"line_end":587,"column_start":9,"column_end":12},"name":"end","qualname":"::read::rnglists::Range::end","value":"u64","parent":{"krate":0,"index":7616},"children":[],"decl_id":null,"docs":" The first address past the end of the range.\n","sig":null,"attributes":[{"value":"/ The first address past the end of the range.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":815143,"byte_end":815191,"line_start":586,"line_end":586,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":7634},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":838459,"byte_end":838467,"line_start":11,"line_end":11,"column_start":12,"column_end":20},"name":"DebugStr","qualname":"::read::str::DebugStr","value":"DebugStr {  }","parent":null,"children":[{"krate":0,"index":7636}],"decl_id":null,"docs":" The `DebugStr` struct represents the DWARF strings\n found in the `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ The `DebugStr` struct represents the DWARF strings","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":838315,"byte_end":838369,"line_start":8,"line_end":8,"column_start":1,"column_end":55}},{"value":"/ found in the `.debug_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":838370,"byte_end":838408,"line_start":9,"line_end":9,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1732},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":839178,"byte_end":839181,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugStr<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugStr` instance from the data in the `.debug_str`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugStr` instance from the data in the `.debug_str`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":838596,"byte_end":838669,"line_start":19,"line_end":19,"column_start":5,"column_end":78}},{"value":"/ section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":838674,"byte_end":838686,"line_start":20,"line_end":20,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":838691,"byte_end":838694,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_str` section and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":838699,"byte_end":838773,"line_start":22,"line_end":22,"column_start":5,"column_end":79}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":838778,"byte_end":838848,"line_start":23,"line_end":23,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":838853,"byte_end":838892,"line_start":24,"line_end":24,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":838897,"byte_end":838900,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":838905,"byte_end":838912,"line_start":26,"line_end":26,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugStr, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":838917,"byte_end":838957,"line_start":27,"line_end":27,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":838962,"byte_end":838965,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":838970,"byte_end":839011,"line_start":29,"line_end":29,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_str_section_somehow = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":839016,"byte_end":839067,"line_start":30,"line_end":30,"column_start":5,"column_end":56}},{"value":"/ let debug_str = DebugStr::new(read_debug_str_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":839072,"byte_end":839154,"line_start":31,"line_end":31,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":839159,"byte_end":839166,"line_start":32,"line_end":32,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1735},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":839892,"byte_end":839899,"line_start":51,"line_end":51,"column_start":12,"column_end":19},"name":"get_str","qualname":"<DebugStr<R>>::get_str","value":"pub fn get_str(&Self, DebugStrOffset<R::Offset>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Lookup a string from the `.debug_str` section by DebugStrOffset.","sig":null,"attributes":[{"value":"/ Lookup a string from the `.debug_str` section by DebugStrOffset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":839348,"byte_end":839416,"line_start":39,"line_end":39,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":839421,"byte_end":839424,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":839429,"byte_end":839436,"line_start":41,"line_end":41,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugStr, DebugStrOffset, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":839441,"byte_end":839497,"line_start":42,"line_end":42,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":839502,"byte_end":839505,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x01, 0x02, 0x00];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":839510,"byte_end":839545,"line_start":44,"line_end":44,"column_start":5,"column_end":40}},{"value":"/ # let offset = DebugStrOffset(0);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":839550,"byte_end":839587,"line_start":45,"line_end":45,"column_start":5,"column_end":42}},{"value":"/ # let read_debug_str_section_somehow = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":839592,"byte_end":839643,"line_start":46,"line_end":46,"column_start":5,"column_end":56}},{"value":"/ # let debug_str_offset_somehow = || offset;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":839648,"byte_end":839695,"line_start":47,"line_end":47,"column_start":5,"column_end":52}},{"value":"/ let debug_str = DebugStr::new(read_debug_str_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":839700,"byte_end":839782,"line_start":48,"line_end":48,"column_start":5,"column_end":87}},{"value":"/ println!(\"Found string {:?}\", debug_str.get_str(debug_str_offset_somehow()));","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":839787,"byte_end":839868,"line_start":49,"line_end":49,"column_start":5,"column_end":86}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":839873,"byte_end":839880,"line_start":50,"line_end":50,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1738},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840751,"byte_end":840757,"line_start":74,"line_end":74,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugStr<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugStr<R> where F: FnMut(&'a T) -> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugStr` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugStr` section that references the data in `self`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840123,"byte_end":840190,"line_start":59,"line_end":59,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840195,"byte_end":840198,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840203,"byte_end":840268,"line_start":61,"line_end":61,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840273,"byte_end":840276,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840281,"byte_end":840301,"line_start":63,"line_end":63,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840306,"byte_end":840309,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840314,"byte_end":840332,"line_start":65,"line_end":65,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840337,"byte_end":840382,"line_start":66,"line_end":66,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840387,"byte_end":840471,"line_start":67,"line_end":67,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugStr<Vec<u8>> = load_section();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840476,"byte_end":840541,"line_start":68,"line_end":68,"column_start":5,"column_end":70}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840546,"byte_end":840593,"line_start":69,"line_end":69,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840598,"byte_end":840648,"line_start":70,"line_end":70,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840653,"byte_end":840715,"line_start":71,"line_end":71,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840720,"byte_end":840727,"line_start":72,"line_end":72,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840732,"byte_end":840739,"line_start":73,"line_end":73,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":7648},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":841313,"byte_end":841328,"line_start":100,"line_end":100,"column_start":12,"column_end":27},"name":"DebugStrOffsets","qualname":"::read::str::DebugStrOffsets","value":"DebugStrOffsets {  }","parent":null,"children":[{"krate":0,"index":7650}],"decl_id":null,"docs":" The raw contents of the `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ The raw contents of the `.debug_str_offsets` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":841205,"byte_end":841262,"line_start":98,"line_end":98,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1751},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":842281,"byte_end":842295,"line_start":121,"line_end":121,"column_start":12,"column_end":26},"name":"get_str_offset","qualname":"<DebugStrOffsets<R>>::get_str_offset","value":"pub fn get_str_offset(&Self, Format, DebugStrOffsetsBase<R::Offset>,\n                      DebugStrOffsetsIndex<R::Offset>)\n-> Result<DebugStrOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `.debug_str` offset at the given `base` and `index`.","sig":null,"attributes":[{"value":"/ Returns the `.debug_str` offset at the given `base` and `index`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":841531,"byte_end":841599,"line_start":108,"line_end":108,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":841604,"byte_end":841607,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ A set of entries in the `.debug_str_offsets` section consists of a header","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":841612,"byte_end":841689,"line_start":110,"line_end":110,"column_start":5,"column_end":82}},{"value":"/ followed by a series of string table offsets.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":841694,"byte_end":841743,"line_start":111,"line_end":111,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":841748,"byte_end":841751,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ The `base` must be the `DW_AT_str_offsets_base` value from the compilation unit DIE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":841756,"byte_end":841844,"line_start":113,"line_end":113,"column_start":5,"column_end":93}},{"value":"/ This is an offset that points to the first entry following the header.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":841849,"byte_end":841923,"line_start":114,"line_end":114,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":841928,"byte_end":841931,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ The `index` is the value of a `DW_FORM_strx` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":841936,"byte_end":841995,"line_start":116,"line_end":116,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":842000,"byte_end":842003,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ The `format` must be the DWARF format of the compilation unit. This format must","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":842008,"byte_end":842091,"line_start":118,"line_end":118,"column_start":5,"column_end":88}},{"value":"/ match the header. However, note that we do not parse the header to validate this,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":842096,"byte_end":842181,"line_start":119,"line_end":119,"column_start":5,"column_end":90}},{"value":"/ since locating the header is unreliable, and the GNU extensions do not emit it.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":842186,"byte_end":842269,"line_start":120,"line_end":120,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1754},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":843407,"byte_end":843413,"line_start":152,"line_end":152,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugStrOffsets<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugStrOffsets<R> where\nF: FnMut(&'a T) -> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugStrOffsets` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugStrOffsets` section that references the data in `self`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":842765,"byte_end":842839,"line_start":137,"line_end":137,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":842844,"byte_end":842847,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":842852,"byte_end":842917,"line_start":139,"line_end":139,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":842922,"byte_end":842925,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":842930,"byte_end":842950,"line_start":141,"line_end":141,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":842955,"byte_end":842958,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":842963,"byte_end":842981,"line_start":143,"line_end":143,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":842986,"byte_end":843031,"line_start":144,"line_end":144,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":843036,"byte_end":843120,"line_start":145,"line_end":145,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugStrOffsets<Vec<u8>> = load_section();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":843125,"byte_end":843197,"line_start":146,"line_end":146,"column_start":5,"column_end":77}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":843202,"byte_end":843249,"line_start":147,"line_end":147,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":843254,"byte_end":843304,"line_start":148,"line_end":148,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":843309,"byte_end":843371,"line_start":149,"line_end":149,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":843376,"byte_end":843383,"line_start":150,"line_end":150,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":843388,"byte_end":843395,"line_start":151,"line_end":151,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":7662},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844009,"byte_end":844021,"line_start":179,"line_end":179,"column_start":12,"column_end":24},"name":"DebugLineStr","qualname":"::read::str::DebugLineStr","value":"DebugLineStr {  }","parent":null,"children":[{"krate":0,"index":7664}],"decl_id":null,"docs":" The `DebugLineStr` struct represents the DWARF strings\n found in the `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ The `DebugLineStr` struct represents the DWARF strings","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":843856,"byte_end":843914,"line_start":176,"line_end":176,"column_start":1,"column_end":59}},{"value":"/ found in the `.debug_line_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":843915,"byte_end":843958,"line_start":177,"line_end":177,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1767},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844173,"byte_end":844180,"line_start":185,"line_end":185,"column_start":12,"column_end":19},"name":"get_str","qualname":"<DebugLineStr<R>>::get_str","value":"pub fn get_str(&Self, DebugLineStrOffset<R::Offset>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Lookup a string from the `.debug_line_str` section by DebugLineStrOffset.\n","sig":null,"attributes":[{"value":"/ Lookup a string from the `.debug_line_str` section by DebugLineStrOffset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844084,"byte_end":844161,"line_start":184,"line_end":184,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1770},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":845038,"byte_end":845044,"line_start":208,"line_end":208,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugLineStr<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugLineStr<R> where F: FnMut(&'a T)\n-> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugLineStr` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugLineStr` section that references the data in `self`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844402,"byte_end":844473,"line_start":193,"line_end":193,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844478,"byte_end":844481,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844486,"byte_end":844551,"line_start":195,"line_end":195,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844556,"byte_end":844559,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844564,"byte_end":844584,"line_start":197,"line_end":197,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844589,"byte_end":844592,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844597,"byte_end":844615,"line_start":199,"line_end":199,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844620,"byte_end":844665,"line_start":200,"line_end":200,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844670,"byte_end":844754,"line_start":201,"line_end":201,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugLineStr<Vec<u8>> = load_section();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844759,"byte_end":844828,"line_start":202,"line_end":202,"column_start":5,"column_end":74}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844833,"byte_end":844880,"line_start":203,"line_end":203,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844885,"byte_end":844935,"line_start":204,"line_end":204,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844940,"byte_end":845002,"line_start":205,"line_end":205,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":845007,"byte_end":845014,"line_start":206,"line_end":206,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":845019,"byte_end":845026,"line_start":207,"line_end":207,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1831},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":848073,"byte_end":848087,"line_start":25,"line_end":25,"column_start":12,"column_end":26},"name":"to_unit_offset","qualname":"<DebugTypesOffset<T>>::to_unit_offset","value":"pub fn to_unit_offset<R>(&Self, &TypeUnitHeader<R>) -> Option<UnitOffset<T>>\nwhere R: Reader<Offset = T>","parent":null,"children":[],"decl_id":null,"docs":" Convert an offset to be relative to the start of the given unit,\n instead of relative to the start of the .debug_types section.\n Returns `None` if the offset is not within the unit entries.\n","sig":null,"attributes":[{"value":"/ Convert an offset to be relative to the start of the given unit,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":847854,"byte_end":847922,"line_start":22,"line_end":22,"column_start":5,"column_end":73}},{"value":"/ instead of relative to the start of the .debug_types section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":847927,"byte_end":847992,"line_start":23,"line_end":23,"column_start":5,"column_end":70}},{"value":"/ Returns `None` if the offset is not within the unit entries.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":847997,"byte_end":848061,"line_start":24,"line_end":24,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1835},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":848732,"byte_end":848746,"line_start":44,"line_end":44,"column_start":12,"column_end":26},"name":"to_unit_offset","qualname":"<DebugInfoOffset<T>>::to_unit_offset","value":"pub fn to_unit_offset<R>(&Self, &CompilationUnitHeader<R>)\n-> Option<UnitOffset<T>> where R: Reader<Offset = T>","parent":null,"children":[],"decl_id":null,"docs":" Convert an offset to be relative to the start of the given unit,\n instead of relative to the start of the .debug_info section.\n Returns `None` if the offset is not within this unit entries.\n","sig":null,"attributes":[{"value":"/ Convert an offset to be relative to the start of the given unit,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":848513,"byte_end":848581,"line_start":41,"line_end":41,"column_start":5,"column_end":73}},{"value":"/ instead of relative to the start of the .debug_info section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":848586,"byte_end":848650,"line_start":42,"line_end":42,"column_start":5,"column_end":69}},{"value":"/ Returns `None` if the offset is not within this unit entries.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":848655,"byte_end":848720,"line_start":43,"line_end":43,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":7676},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":849268,"byte_end":849278,"line_start":61,"line_end":61,"column_start":12,"column_end":22},"name":"UnitOffset","qualname":"::read::unit::UnitOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the current compilation or type unit.\n","sig":null,"attributes":[{"value":"/ An offset into the current compilation or type unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":849132,"byte_end":849188,"line_start":59,"line_end":59,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":7679},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":849290,"byte_end":849295,"line_start":61,"line_end":61,"column_start":34,"column_end":39},"name":"0","qualname":"::read::unit::UnitOffset::0","value":"T","parent":{"krate":0,"index":7676},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1839},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":849502,"byte_end":849522,"line_start":66,"line_end":66,"column_start":12,"column_end":32},"name":"to_debug_info_offset","qualname":"<UnitOffset<T>>::to_debug_info_offset","value":"pub fn to_debug_info_offset<R>(&Self, &CompilationUnitHeader<R>)\n-> DebugInfoOffset<T> where R: Reader<Offset = T>","parent":null,"children":[],"decl_id":null,"docs":" Convert an offset to be relative to the start of the .debug_info section,\n instead of relative to the start of the given compilation unit.\n","sig":null,"attributes":[{"value":"/ Convert an offset to be relative to the start of the .debug_info section,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":849341,"byte_end":849418,"line_start":64,"line_end":64,"column_start":5,"column_end":82}},{"value":"/ instead of relative to the start of the given compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":849423,"byte_end":849490,"line_start":65,"line_end":65,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1841},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":849849,"byte_end":849870,"line_start":75,"line_end":75,"column_start":12,"column_end":33},"name":"to_debug_types_offset","qualname":"<UnitOffset<T>>::to_debug_types_offset","value":"pub fn to_debug_types_offset<R>(&Self, &TypeUnitHeader<R>)\n-> DebugTypesOffset<T> where R: Reader<Offset = T>","parent":null,"children":[],"decl_id":null,"docs":" Convert an offset to be relative to the start of the .debug_types section,\n instead of relative to the start of the given type unit.\n","sig":null,"attributes":[{"value":"/ Convert an offset to be relative to the start of the .debug_types section,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":849694,"byte_end":849772,"line_start":73,"line_end":73,"column_start":5,"column_end":83}},{"value":"/ instead of relative to the start of the given type unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":849777,"byte_end":849837,"line_start":74,"line_end":74,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":7713},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850195,"byte_end":850204,"line_start":86,"line_end":86,"column_start":12,"column_end":21},"name":"DebugInfo","qualname":"::read::unit::DebugInfo","value":"DebugInfo {  }","parent":null,"children":[{"krate":0,"index":7715}],"decl_id":null,"docs":" The `DebugInfo` struct represents the DWARF debugging information found in\n the `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ The `DebugInfo` struct represents the DWARF debugging information found in","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850035,"byte_end":850113,"line_start":83,"line_end":83,"column_start":1,"column_end":79}},{"value":"/ the `.debug_info` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850114,"byte_end":850144,"line_start":84,"line_end":84,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1846},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850925,"byte_end":850928,"line_start":108,"line_end":108,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugInfo<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugInfo` instance from the data in the `.debug_info`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugInfo` instance from the data in the `.debug_info`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850335,"byte_end":850410,"line_start":94,"line_end":94,"column_start":5,"column_end":80}},{"value":"/ section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850415,"byte_end":850427,"line_start":95,"line_end":95,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850432,"byte_end":850435,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_info` section and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850440,"byte_end":850515,"line_start":97,"line_end":97,"column_start":5,"column_end":80}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850520,"byte_end":850590,"line_start":98,"line_end":98,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850595,"byte_end":850634,"line_start":99,"line_end":99,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850639,"byte_end":850642,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850647,"byte_end":850654,"line_start":101,"line_end":101,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugInfo, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850659,"byte_end":850700,"line_start":102,"line_end":102,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850705,"byte_end":850708,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850713,"byte_end":850754,"line_start":104,"line_end":104,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_info_section_somehow = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850759,"byte_end":850811,"line_start":105,"line_end":105,"column_start":5,"column_end":57}},{"value":"/ let debug_info = DebugInfo::new(read_debug_info_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850816,"byte_end":850901,"line_start":106,"line_end":106,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850906,"byte_end":850913,"line_start":107,"line_end":107,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1849},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851737,"byte_end":851742,"line_start":132,"line_end":132,"column_start":12,"column_end":17},"name":"units","qualname":"<DebugInfo<R>>::units","value":"pub fn units(&Self) -> CompilationUnitHeadersIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the compilation- and partial-units in this\n `.debug_info` section.","sig":null,"attributes":[{"value":"/ Iterate the compilation- and partial-units in this","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851098,"byte_end":851152,"line_start":114,"line_end":114,"column_start":5,"column_end":59}},{"value":"/ `.debug_info` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851157,"byte_end":851183,"line_start":115,"line_end":115,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851188,"byte_end":851191,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851196,"byte_end":851203,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugInfo, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851208,"byte_end":851249,"line_start":118,"line_end":118,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851254,"byte_end":851257,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851262,"byte_end":851281,"line_start":120,"line_end":120,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_info_section_somehow = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851286,"byte_end":851338,"line_start":121,"line_end":121,"column_start":5,"column_end":57}},{"value":"/ let debug_info = DebugInfo::new(read_debug_info_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851343,"byte_end":851428,"line_start":122,"line_end":122,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851433,"byte_end":851436,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ let mut iter = debug_info.units();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851441,"byte_end":851479,"line_start":124,"line_end":124,"column_start":5,"column_end":43}},{"value":"/ while let Some(unit) = iter.next().unwrap() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851484,"byte_end":851533,"line_start":125,"line_end":125,"column_start":5,"column_end":54}},{"value":"/     println!(\"unit's length is {}\", unit.unit_length());","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851538,"byte_end":851598,"line_start":126,"line_end":126,"column_start":5,"column_end":65}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851603,"byte_end":851608,"line_start":127,"line_end":127,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851613,"byte_end":851620,"line_start":128,"line_end":128,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851625,"byte_end":851628,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851633,"byte_end":851654,"line_start":130,"line_end":130,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851659,"byte_end":851725,"line_start":131,"line_end":131,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1850},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852065,"byte_end":852083,"line_start":142,"line_end":142,"column_start":12,"column_end":30},"name":"header_from_offset","qualname":"<DebugInfo<R>>::header_from_offset","value":"pub fn header_from_offset(&Self, DebugInfoOffset<R::Offset>)\n-> Result<CompilationUnitHeader<R>>","parent":null,"children":[],"decl_id":null,"docs":" Get the CompilationUnitHeader located at offset from this .debug_info section.","sig":null,"attributes":[{"value":"/ Get the CompilationUnitHeader located at offset from this .debug_info section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851955,"byte_end":852037,"line_start":139,"line_end":139,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852042,"byte_end":852045,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852050,"byte_end":852053,"line_start":141,"line_end":141,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1853},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852995,"byte_end":853001,"line_start":168,"line_end":168,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugInfo<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugInfo<R> where F: FnMut(&'a T) ->\nR","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugInfo` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugInfo` section that references the data in `self`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852365,"byte_end":852433,"line_start":153,"line_end":153,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852438,"byte_end":852441,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852446,"byte_end":852511,"line_start":155,"line_end":155,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852516,"byte_end":852519,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852524,"byte_end":852544,"line_start":157,"line_end":157,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852549,"byte_end":852552,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852557,"byte_end":852575,"line_start":159,"line_end":159,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852580,"byte_end":852625,"line_start":160,"line_end":160,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852630,"byte_end":852714,"line_start":161,"line_end":161,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugInfo<Vec<u8>> = load_section();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852719,"byte_end":852785,"line_start":162,"line_end":162,"column_start":5,"column_end":71}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852790,"byte_end":852837,"line_start":163,"line_end":163,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852842,"byte_end":852892,"line_start":164,"line_end":164,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852897,"byte_end":852959,"line_start":165,"line_end":165,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852964,"byte_end":852971,"line_start":166,"line_end":166,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852976,"byte_end":852983,"line_start":167,"line_end":167,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":7727},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":853676,"byte_end":853702,"line_start":197,"line_end":197,"column_start":12,"column_end":38},"name":"CompilationUnitHeadersIter","qualname":"::read::unit::CompilationUnitHeadersIter","value":"CompilationUnitHeadersIter {  }","parent":null,"children":[{"krate":0,"index":7729},{"krate":0,"index":7730}],"decl_id":null,"docs":" An iterator over the compilation- and partial-units of a section.","sig":null,"attributes":[{"value":"/ An iterator over the compilation- and partial-units of a section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":853458,"byte_end":853527,"line_start":192,"line_end":192,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":853528,"byte_end":853531,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ See the [documentation on","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":853532,"byte_end":853561,"line_start":194,"line_end":194,"column_start":1,"column_end":30}},{"value":"/ `DebugInfo::units`](./struct.DebugInfo.html#method.units) for more detail.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":853562,"byte_end":853640,"line_start":195,"line_end":195,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1866},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":853886,"byte_end":853890,"line_start":204,"line_end":204,"column_start":12,"column_end":16},"name":"next","qualname":"<CompilationUnitHeadersIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<CompilationUnitHeader<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next unit header.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next unit header.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":853825,"byte_end":853874,"line_start":203,"line_end":203,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":7737},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":854885,"byte_end":854906,"line_start":235,"line_end":235,"column_start":12,"column_end":33},"name":"CompilationUnitHeader","qualname":"::read::unit::CompilationUnitHeader","value":"CompilationUnitHeader {  }","parent":null,"children":[{"krate":0,"index":7740},{"krate":0,"index":7741}],"decl_id":null,"docs":" The header of a compilation unit's debugging information.\n","sig":null,"attributes":[{"value":"/ The header of a compilation unit's debugging information.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":854767,"byte_end":854828,"line_start":233,"line_end":233,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1875},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":855258,"byte_end":855261,"line_start":250,"line_end":250,"column_start":12,"column_end":15},"name":"new","qualname":"<CompilationUnitHeader<R, Offset>>::new","value":"pub fn new(UnitHeader<R, Offset>, DebugInfoOffset<Offset>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `CompilationUnitHeader`.\n","sig":null,"attributes":[{"value":"/ Construct a new `CompilationUnitHeader`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":855202,"byte_end":855246,"line_start":249,"line_end":249,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1876},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":855473,"byte_end":855479,"line_start":255,"line_end":255,"column_start":12,"column_end":18},"name":"header","qualname":"<CompilationUnitHeader<R, Offset>>::header","value":"pub fn header(Self) -> UnitHeader<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Return the `UnitHeader` containing common unit header fields.\n","sig":null,"attributes":[{"value":"/ Return the `UnitHeader` containing common unit header fields.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":855396,"byte_end":855461,"line_start":254,"line_end":254,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1877},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":855655,"byte_end":855669,"line_start":261,"line_end":261,"column_start":12,"column_end":26},"name":"size_of_header","qualname":"<CompilationUnitHeader<R, Offset>>::size_of_header","value":"pub fn size_of_header(Encoding) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the serialized size of the compilation unit header for the given\n DWARF encoding.\n","sig":null,"attributes":[{"value":"/ Return the serialized size of the compilation unit header for the given","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":855544,"byte_end":855619,"line_start":259,"line_end":259,"column_start":5,"column_end":80}},{"value":"/ DWARF encoding.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":855624,"byte_end":855643,"line_start":260,"line_end":260,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1878},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":855852,"byte_end":855858,"line_start":266,"line_end":266,"column_start":12,"column_end":18},"name":"offset","qualname":"<CompilationUnitHeader<R, Offset>>::offset","value":"pub fn offset(&Self) -> DebugInfoOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Get the offset of this compilation unit within the .debug_info section.\n","sig":null,"attributes":[{"value":"/ Get the offset of this compilation unit within the .debug_info section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":855765,"byte_end":855840,"line_start":265,"line_end":265,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1879},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":856076,"byte_end":856087,"line_start":272,"line_end":272,"column_start":12,"column_end":23},"name":"unit_length","qualname":"<CompilationUnitHeader<R, Offset>>::unit_length","value":"pub fn unit_length(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the debugging info for this compilation unit, not\n including the byte length of the encoded length itself.\n","sig":null,"attributes":[{"value":"/ Get the length of the debugging info for this compilation unit, not","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":855929,"byte_end":856000,"line_start":270,"line_end":270,"column_start":5,"column_end":76}},{"value":"/ including the byte length of the encoded length itself.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":856005,"byte_end":856064,"line_start":271,"line_end":271,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1880},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":856296,"byte_end":856317,"line_start":278,"line_end":278,"column_start":12,"column_end":33},"name":"length_including_self","qualname":"<CompilationUnitHeader<R, Offset>>::length_including_self","value":"pub fn length_including_self(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the debugging info for this compilation unit,\n including the byte length of the encoded length itself.\n","sig":null,"attributes":[{"value":"/ Get the length of the debugging info for this compilation unit,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":856153,"byte_end":856220,"line_start":276,"line_end":276,"column_start":5,"column_end":72}},{"value":"/ including the byte length of the encoded length itself.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":856225,"byte_end":856284,"line_start":277,"line_end":277,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1881},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":856456,"byte_end":856464,"line_start":283,"line_end":283,"column_start":12,"column_end":20},"name":"encoding","qualname":"<CompilationUnitHeader<R, Offset>>::encoding","value":"pub fn encoding(&Self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding parameters for this unit.\n","sig":null,"attributes":[{"value":"/ Return the encoding parameters for this unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":856395,"byte_end":856444,"line_start":282,"line_end":282,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1882},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":856612,"byte_end":856619,"line_start":288,"line_end":288,"column_start":12,"column_end":19},"name":"version","qualname":"<CompilationUnitHeader<R, Offset>>::version","value":"pub fn version(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Get the DWARF version of the debugging info for this compilation unit.\n","sig":null,"attributes":[{"value":"/ Get the DWARF version of the debugging info for this compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":856526,"byte_end":856600,"line_start":287,"line_end":287,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1883},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":856818,"byte_end":856837,"line_start":294,"line_end":294,"column_start":12,"column_end":31},"name":"debug_abbrev_offset","qualname":"<CompilationUnitHeader<R, Offset>>::debug_abbrev_offset","value":"pub fn debug_abbrev_offset(&Self) -> DebugAbbrevOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" The offset into the `.debug_abbrev` section for this compilation unit's\n debugging information entries' abbreviations.\n","sig":null,"attributes":[{"value":"/ The offset into the `.debug_abbrev` section for this compilation unit's","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":856677,"byte_end":856752,"line_start":292,"line_end":292,"column_start":5,"column_end":80}},{"value":"/ debugging information entries' abbreviations.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":856757,"byte_end":856806,"line_start":293,"line_end":293,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1884},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":856997,"byte_end":857009,"line_start":299,"line_end":299,"column_start":12,"column_end":24},"name":"address_size","qualname":"<CompilationUnitHeader<R, Offset>>::address_size","value":"pub fn address_size(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The size of addresses (in bytes) in this type-unit.\n","sig":null,"attributes":[{"value":"/ The size of addresses (in bytes) in this type-unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":856930,"byte_end":856985,"line_start":298,"line_end":298,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1885},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":857144,"byte_end":857150,"line_start":304,"line_end":304,"column_start":12,"column_end":18},"name":"format","qualname":"<CompilationUnitHeader<R, Offset>>::format","value":"pub fn format(&Self) -> Format","parent":null,"children":[],"decl_id":null,"docs":" Whether this type unit is encoded in 64- or 32-bit DWARF.\n","sig":null,"attributes":[{"value":"/ Whether this type unit is encoded in 64- or 32-bit DWARF.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":857071,"byte_end":857132,"line_start":303,"line_end":303,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1886},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":857286,"byte_end":857297,"line_start":309,"line_end":309,"column_start":12,"column_end":23},"name":"header_size","qualname":"<CompilationUnitHeader<R, Offset>>::header_size","value":"pub fn header_size(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" The serialized size of the header for this compilation unit.\n","sig":null,"attributes":[{"value":"/ The serialized size of the header for this compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":857210,"byte_end":857274,"line_start":308,"line_end":308,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1887},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":857438,"byte_end":857443,"line_start":314,"line_end":314,"column_start":12,"column_end":17},"name":"entry","qualname":"<CompilationUnitHeader<R, Offset>>::entry","value":"pub fn entry<'me,\n             'abbrev>(&'me Self, &'abbrev Abbreviations,\n                      UnitOffset<R::Offset>)\n-> Result<DebuggingInformationEntry>","parent":null,"children":[],"decl_id":null,"docs":" Read the `DebuggingInformationEntry` at the given offset.\n","sig":null,"attributes":[{"value":"/ Read the `DebuggingInformationEntry` at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":857365,"byte_end":857426,"line_start":313,"line_end":313,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1890},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":857764,"byte_end":857771,"line_start":323,"line_end":323,"column_start":12,"column_end":19},"name":"entries","qualname":"<CompilationUnitHeader<R, Offset>>::entries","value":"pub fn entries<'me, 'abbrev>(&'me Self, &'abbrev Abbreviations)\n-> EntriesCursor","parent":null,"children":[],"decl_id":null,"docs":" Navigate this compilation unit's `DebuggingInformationEntry`s.\n","sig":null,"attributes":[{"value":"/ Navigate this compilation unit's `DebuggingInformationEntry`s.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":857686,"byte_end":857752,"line_start":322,"line_end":322,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1893},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":858064,"byte_end":858081,"line_start":332,"line_end":332,"column_start":12,"column_end":29},"name":"entries_at_offset","qualname":"<CompilationUnitHeader<R, Offset>>::entries_at_offset","value":"pub fn entries_at_offset<'me,\n                         'abbrev>(&'me Self, &'abbrev Abbreviations,\n                                  UnitOffset<R::Offset>)\n-> Result<EntriesCursor>","parent":null,"children":[],"decl_id":null,"docs":" Navigate this compilation unit's `DebuggingInformationEntry`s\n starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Navigate this compilation unit's `DebuggingInformationEntry`s","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":857949,"byte_end":858014,"line_start":330,"line_end":330,"column_start":5,"column_end":70}},{"value":"/ starting at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":858019,"byte_end":858052,"line_start":331,"line_end":331,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1896},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":858449,"byte_end":858461,"line_start":342,"line_end":342,"column_start":12,"column_end":24},"name":"entries_tree","qualname":"<CompilationUnitHeader<R, Offset>>::entries_tree","value":"pub fn entries_tree<'me,\n                    'abbrev>(&'me Self, &'abbrev Abbreviations,\n                             Option<UnitOffset<R::Offset>>)\n-> Result<EntriesTree>","parent":null,"children":[],"decl_id":null,"docs":" Navigate this compilation unit's `DebuggingInformationEntry`s as a tree\n starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Navigate this compilation unit's `DebuggingInformationEntry`s as a tree","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":858324,"byte_end":858399,"line_start":340,"line_end":340,"column_start":5,"column_end":80}},{"value":"/ starting at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":858404,"byte_end":858437,"line_start":341,"line_end":341,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1899},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":858786,"byte_end":858797,"line_start":351,"line_end":351,"column_start":12,"column_end":23},"name":"entries_raw","qualname":"<CompilationUnitHeader<R, Offset>>::entries_raw","value":"pub fn entries_raw<'me,\n                   'abbrev>(&'me Self, &'abbrev Abbreviations,\n                            Option<UnitOffset<R::Offset>>)\n-> Result<EntriesRaw>","parent":null,"children":[],"decl_id":null,"docs":" Read the raw data that defines the Debugging Information Entries.\n","sig":null,"attributes":[{"value":"/ Read the raw data that defines the Debugging Information Entries.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":858705,"byte_end":858774,"line_start":350,"line_end":350,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1902},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":861383,"byte_end":861396,"line_start":437,"line_end":437,"column_start":12,"column_end":25},"name":"abbreviations","qualname":"<CompilationUnitHeader<R, Offset>>::abbreviations","value":"pub fn abbreviations(&Self, &DebugAbbrev<R>) -> Result<Abbreviations>","parent":null,"children":[],"decl_id":null,"docs":" Parse this compilation unit's abbreviations.","sig":null,"attributes":[{"value":"/ Parse this compilation unit's abbreviations.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859039,"byte_end":859087,"line_start":359,"line_end":359,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859092,"byte_end":859095,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859100,"byte_end":859107,"line_start":361,"line_end":361,"column_start":5,"column_end":12}},{"value":"/ use gimli::DebugAbbrev;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859112,"byte_end":859139,"line_start":362,"line_end":362,"column_start":5,"column_end":32}},{"value":"/ # use gimli::{DebugInfo, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859144,"byte_end":859187,"line_start":363,"line_end":363,"column_start":5,"column_end":48}},{"value":"/ # let info_buf = [","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859192,"byte_end":859214,"line_start":364,"line_end":364,"column_start":5,"column_end":27}},{"value":"/ #     // Comilation unit header","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859219,"byte_end":859254,"line_start":365,"line_end":365,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859259,"byte_end":859264,"line_start":366,"line_end":366,"column_start":5,"column_end":10}},{"value":"/ #     // 32-bit unit length = 25","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859269,"byte_end":859305,"line_start":367,"line_end":367,"column_start":5,"column_end":41}},{"value":"/ #     0x19, 0x00, 0x00, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859310,"byte_end":859343,"line_start":368,"line_end":368,"column_start":5,"column_end":38}},{"value":"/ #     // Version 4","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859348,"byte_end":859370,"line_start":369,"line_end":369,"column_start":5,"column_end":27}},{"value":"/ #     0x04, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859375,"byte_end":859396,"line_start":370,"line_end":370,"column_start":5,"column_end":26}},{"value":"/ #     // debug_abbrev_offset","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859401,"byte_end":859433,"line_start":371,"line_end":371,"column_start":5,"column_end":37}},{"value":"/ #     0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859438,"byte_end":859471,"line_start":372,"line_end":372,"column_start":5,"column_end":38}},{"value":"/ #     // Address size","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859476,"byte_end":859501,"line_start":373,"line_end":373,"column_start":5,"column_end":30}},{"value":"/ #     0x04,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859506,"byte_end":859521,"line_start":374,"line_end":374,"column_start":5,"column_end":20}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859526,"byte_end":859531,"line_start":375,"line_end":375,"column_start":5,"column_end":10}},{"value":"/ #     // DIEs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859536,"byte_end":859553,"line_start":376,"line_end":376,"column_start":5,"column_end":22}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859558,"byte_end":859563,"line_start":377,"line_end":377,"column_start":5,"column_end":10}},{"value":"/ #     // Abbreviation code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859568,"byte_end":859598,"line_start":378,"line_end":378,"column_start":5,"column_end":35}},{"value":"/ #     0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859603,"byte_end":859618,"line_start":379,"line_end":379,"column_start":5,"column_end":20}},{"value":"/ #     // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859623,"byte_end":859678,"line_start":380,"line_end":380,"column_start":5,"column_end":60}},{"value":"/ #     0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859683,"byte_end":859716,"line_start":381,"line_end":381,"column_start":5,"column_end":38}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859721,"byte_end":859726,"line_start":382,"line_end":382,"column_start":5,"column_end":10}},{"value":"/ #       // Children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859731,"byte_end":859754,"line_start":383,"line_end":383,"column_start":5,"column_end":28}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859759,"byte_end":859764,"line_start":384,"line_end":384,"column_start":5,"column_end":10}},{"value":"/ #       // Abbreviation code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859769,"byte_end":859801,"line_start":385,"line_end":385,"column_start":5,"column_end":37}},{"value":"/ #       0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859806,"byte_end":859823,"line_start":386,"line_end":386,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859828,"byte_end":859885,"line_start":387,"line_end":387,"column_start":5,"column_end":62}},{"value":"/ #       0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859890,"byte_end":859925,"line_start":388,"line_end":388,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859930,"byte_end":859935,"line_start":389,"line_end":389,"column_start":5,"column_end":10}},{"value":"/ #         // Children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859940,"byte_end":859965,"line_start":390,"line_end":390,"column_start":5,"column_end":30}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859970,"byte_end":859975,"line_start":391,"line_end":391,"column_start":5,"column_end":10}},{"value":"/ #         // Abbreviation code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":859980,"byte_end":860014,"line_start":392,"line_end":392,"column_start":5,"column_end":39}},{"value":"/ #         0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860019,"byte_end":860038,"line_start":393,"line_end":393,"column_start":5,"column_end":24}},{"value":"/ #         // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860043,"byte_end":860102,"line_start":394,"line_end":394,"column_start":5,"column_end":64}},{"value":"/ #         0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860107,"byte_end":860144,"line_start":395,"line_end":395,"column_start":5,"column_end":42}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860149,"byte_end":860154,"line_start":396,"line_end":396,"column_start":5,"column_end":10}},{"value":"/ #           // Children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860159,"byte_end":860186,"line_start":397,"line_end":397,"column_start":5,"column_end":32}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860191,"byte_end":860196,"line_start":398,"line_end":398,"column_start":5,"column_end":10}},{"value":"/ #           // End of children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860201,"byte_end":860235,"line_start":399,"line_end":399,"column_start":5,"column_end":39}},{"value":"/ #           0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860240,"byte_end":860261,"line_start":400,"line_end":400,"column_start":5,"column_end":26}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860266,"byte_end":860271,"line_start":401,"line_end":401,"column_start":5,"column_end":10}},{"value":"/ #         // End of children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860276,"byte_end":860308,"line_start":402,"line_end":402,"column_start":5,"column_end":37}},{"value":"/ #         0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860313,"byte_end":860332,"line_start":403,"line_end":403,"column_start":5,"column_end":24}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860337,"byte_end":860342,"line_start":404,"line_end":404,"column_start":5,"column_end":10}},{"value":"/ #       // End of children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860347,"byte_end":860377,"line_start":405,"line_end":405,"column_start":5,"column_end":35}},{"value":"/ #       0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860382,"byte_end":860399,"line_start":406,"line_end":406,"column_start":5,"column_end":22}},{"value":"/ # ];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860404,"byte_end":860412,"line_start":407,"line_end":407,"column_start":5,"column_end":13}},{"value":"/ # let debug_info = DebugInfo::new(&info_buf, LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860417,"byte_end":860480,"line_start":408,"line_end":408,"column_start":5,"column_end":68}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860485,"byte_end":860490,"line_start":409,"line_end":409,"column_start":5,"column_end":10}},{"value":"/ # let abbrev_buf = [","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860495,"byte_end":860519,"line_start":410,"line_end":410,"column_start":5,"column_end":29}},{"value":"/ #     // Code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860524,"byte_end":860541,"line_start":411,"line_end":411,"column_start":5,"column_end":22}},{"value":"/ #     0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860546,"byte_end":860561,"line_start":412,"line_end":412,"column_start":5,"column_end":20}},{"value":"/ #     // DW_TAG_subprogram","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860566,"byte_end":860596,"line_start":413,"line_end":413,"column_start":5,"column_end":35}},{"value":"/ #     0x2e,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860601,"byte_end":860616,"line_start":414,"line_end":414,"column_start":5,"column_end":20}},{"value":"/ #     // DW_CHILDREN_yes","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860621,"byte_end":860649,"line_start":415,"line_end":415,"column_start":5,"column_end":33}},{"value":"/ #     0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860654,"byte_end":860669,"line_start":416,"line_end":416,"column_start":5,"column_end":20}},{"value":"/ #     // Begin attributes","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860674,"byte_end":860703,"line_start":417,"line_end":417,"column_start":5,"column_end":34}},{"value":"/ #       // Attribute name = DW_AT_name","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860708,"byte_end":860750,"line_start":418,"line_end":418,"column_start":5,"column_end":47}},{"value":"/ #       0x03,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860755,"byte_end":860772,"line_start":419,"line_end":419,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute form = DW_FORM_string","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860777,"byte_end":860823,"line_start":420,"line_end":420,"column_start":5,"column_end":51}},{"value":"/ #       0x08,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860828,"byte_end":860845,"line_start":421,"line_end":421,"column_start":5,"column_end":22}},{"value":"/ #     // End attributes","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860850,"byte_end":860877,"line_start":422,"line_end":422,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860882,"byte_end":860897,"line_start":423,"line_end":423,"column_start":5,"column_end":20}},{"value":"/ #     0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860902,"byte_end":860917,"line_start":424,"line_end":424,"column_start":5,"column_end":20}},{"value":"/ #     // Null terminator","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860922,"byte_end":860950,"line_start":425,"line_end":425,"column_start":5,"column_end":33}},{"value":"/ #     0x00","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860955,"byte_end":860969,"line_start":426,"line_end":426,"column_start":5,"column_end":19}},{"value":"/ # ];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860974,"byte_end":860982,"line_start":427,"line_end":427,"column_start":5,"column_end":13}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860987,"byte_end":860992,"line_start":428,"line_end":428,"column_start":5,"column_end":10}},{"value":"/ # let get_some_unit = || debug_info.units().next().unwrap().unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":860997,"byte_end":861070,"line_start":429,"line_end":429,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":861075,"byte_end":861078,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ let unit = get_some_unit();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":861083,"byte_end":861114,"line_start":431,"line_end":431,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":861119,"byte_end":861122,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ # let read_debug_abbrev_section_somehow = || &abbrev_buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":861127,"byte_end":861188,"line_start":433,"line_end":433,"column_start":5,"column_end":66}},{"value":"/ let debug_abbrev = DebugAbbrev::new(read_debug_abbrev_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":861193,"byte_end":861284,"line_start":434,"line_end":434,"column_start":5,"column_end":96}},{"value":"/ let abbrevs_for_unit = unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":861289,"byte_end":861359,"line_start":435,"line_end":435,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":861364,"byte_end":861371,"line_start":436,"line_end":436,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":7768},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":862625,"byte_end":862635,"line_start":476,"line_end":476,"column_start":12,"column_end":22},"name":"UnitHeader","qualname":"::read::unit::UnitHeader","value":"UnitHeader {  }","parent":null,"children":[{"krate":0,"index":7771},{"krate":0,"index":7772},{"krate":0,"index":7773},{"krate":0,"index":7774}],"decl_id":null,"docs":" The common fields for the headers of compilation units and\n type units.\n","sig":null,"attributes":[{"value":"/ The common fields for the headers of compilation units and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":862490,"byte_end":862552,"line_start":473,"line_end":473,"column_start":1,"column_end":63}},{"value":"/ type units.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":862553,"byte_end":862568,"line_start":474,"line_end":474,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1913},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":863034,"byte_end":863037,"line_start":494,"line_end":494,"column_start":12,"column_end":15},"name":"new","qualname":"<UnitHeader<R, Offset>>::new","value":"pub fn new(Encoding, R::Offset, DebugAbbrevOffset<R::Offset>, R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `UnitHeader`.\n","sig":null,"attributes":[{"value":"/ Construct a new `UnitHeader`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":862989,"byte_end":863022,"line_start":493,"line_end":493,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1914},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":863449,"byte_end":863463,"line_start":510,"line_end":510,"column_start":12,"column_end":26},"name":"size_of_header","qualname":"<UnitHeader<R, Offset>>::size_of_header","value":"pub fn size_of_header(Encoding) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the serialized size of the common unit header for the given\n DWARF format.\n","sig":null,"attributes":[{"value":"/ Return the serialized size of the common unit header for the given","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":863345,"byte_end":863415,"line_start":508,"line_end":508,"column_start":5,"column_end":75}},{"value":"/ DWARF format.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":863420,"byte_end":863437,"line_start":509,"line_end":509,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1918},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":864227,"byte_end":864238,"line_start":533,"line_end":533,"column_start":12,"column_end":23},"name":"unit_length","qualname":"<UnitHeader<R, Offset>>::unit_length","value":"pub fn unit_length(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the debugging info for this compilation unit, not\n including the byte length of the encoded length itself.\n","sig":null,"attributes":[{"value":"/ Get the length of the debugging info for this compilation unit, not","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":864080,"byte_end":864151,"line_start":531,"line_end":531,"column_start":5,"column_end":76}},{"value":"/ including the byte length of the encoded length itself.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":864156,"byte_end":864215,"line_start":532,"line_end":532,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1919},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":864440,"byte_end":864461,"line_start":539,"line_end":539,"column_start":12,"column_end":33},"name":"length_including_self","qualname":"<UnitHeader<R, Offset>>::length_including_self","value":"pub fn length_including_self(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the debugging info for this compilation unit,\n including the byte length of the encoded length itself.\n","sig":null,"attributes":[{"value":"/ Get the length of the debugging info for this compilation unit,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":864297,"byte_end":864364,"line_start":537,"line_end":537,"column_start":5,"column_end":72}},{"value":"/ including the byte length of the encoded length itself.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":864369,"byte_end":864428,"line_start":538,"line_end":538,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1920},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":864639,"byte_end":864647,"line_start":544,"line_end":544,"column_start":12,"column_end":20},"name":"encoding","qualname":"<UnitHeader<R, Offset>>::encoding","value":"pub fn encoding(&Self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding parameters for this unit.\n","sig":null,"attributes":[{"value":"/ Return the encoding parameters for this unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":864578,"byte_end":864627,"line_start":543,"line_end":543,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1921},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":864788,"byte_end":864795,"line_start":549,"line_end":549,"column_start":12,"column_end":19},"name":"version","qualname":"<UnitHeader<R, Offset>>::version","value":"pub fn version(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Get the DWARF version of the debugging info for this compilation unit.\n","sig":null,"attributes":[{"value":"/ Get the DWARF version of the debugging info for this compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":864702,"byte_end":864776,"line_start":548,"line_end":548,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1922},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":864994,"byte_end":865013,"line_start":555,"line_end":555,"column_start":12,"column_end":31},"name":"debug_abbrev_offset","qualname":"<UnitHeader<R, Offset>>::debug_abbrev_offset","value":"pub fn debug_abbrev_offset(&Self) -> DebugAbbrevOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" The offset into the `.debug_abbrev` section for this compilation unit's\n debugging information entries' abbreviations.\n","sig":null,"attributes":[{"value":"/ The offset into the `.debug_abbrev` section for this compilation unit's","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":864853,"byte_end":864928,"line_start":553,"line_end":553,"column_start":5,"column_end":80}},{"value":"/ debugging information entries' abbreviations.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":864933,"byte_end":864982,"line_start":554,"line_end":554,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1923},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":865173,"byte_end":865185,"line_start":560,"line_end":560,"column_start":12,"column_end":24},"name":"address_size","qualname":"<UnitHeader<R, Offset>>::address_size","value":"pub fn address_size(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The size of addresses (in bytes) in this compilation unit.\n","sig":null,"attributes":[{"value":"/ The size of addresses (in bytes) in this compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":865099,"byte_end":865161,"line_start":559,"line_end":559,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1924},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":865327,"byte_end":865333,"line_start":565,"line_end":565,"column_start":12,"column_end":18},"name":"format","qualname":"<UnitHeader<R, Offset>>::format","value":"pub fn format(&Self) -> Format","parent":null,"children":[],"decl_id":null,"docs":" Whether this compilation unit is encoded in 64- or 32-bit DWARF.\n","sig":null,"attributes":[{"value":"/ Whether this compilation unit is encoded in 64- or 32-bit DWARF.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":865247,"byte_end":865315,"line_start":564,"line_end":564,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1925},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":865469,"byte_end":865480,"line_start":570,"line_end":570,"column_start":12,"column_end":23},"name":"header_size","qualname":"<UnitHeader<R, Offset>>::header_size","value":"pub fn header_size(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" The serialized size of the header for this compilation unit.\n","sig":null,"attributes":[{"value":"/ The serialized size of the header for this compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":865393,"byte_end":865457,"line_start":569,"line_end":569,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1927},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":865976,"byte_end":865981,"line_start":585,"line_end":585,"column_start":12,"column_end":17},"name":"range","qualname":"<UnitHeader<R, Offset>>::range","value":"pub fn range(&Self, Range<UnitOffset<R::Offset>>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying bytes for the supplied range.\n","sig":null,"attributes":[{"value":"/ Get the underlying bytes for the supplied range.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":865912,"byte_end":865964,"line_start":584,"line_end":584,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1928},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":866642,"byte_end":866652,"line_start":603,"line_end":603,"column_start":12,"column_end":22},"name":"range_from","qualname":"<UnitHeader<R, Offset>>::range_from","value":"pub fn range_from(&Self, RangeFrom<UnitOffset<R::Offset>>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying bytes for the supplied range.\n","sig":null,"attributes":[{"value":"/ Get the underlying bytes for the supplied range.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":866578,"byte_end":866630,"line_start":602,"line_end":602,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1929},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":867045,"byte_end":867053,"line_start":614,"line_end":614,"column_start":12,"column_end":20},"name":"range_to","qualname":"<UnitHeader<R, Offset>>::range_to","value":"pub fn range_to(&Self, RangeTo<UnitOffset<R::Offset>>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying bytes for the supplied range.\n","sig":null,"attributes":[{"value":"/ Get the underlying bytes for the supplied range.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":866981,"byte_end":867033,"line_start":613,"line_end":613,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1930},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":867449,"byte_end":867454,"line_start":625,"line_end":625,"column_start":12,"column_end":17},"name":"entry","qualname":"<UnitHeader<R, Offset>>::entry","value":"pub fn entry<'me,\n             'abbrev>(&'me Self, &'abbrev Abbreviations,\n                      UnitOffset<R::Offset>)\n-> Result<DebuggingInformationEntry>","parent":null,"children":[],"decl_id":null,"docs":" Read the `DebuggingInformationEntry` at the given offset.\n","sig":null,"attributes":[{"value":"/ Read the `DebuggingInformationEntry` at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":867376,"byte_end":867437,"line_start":624,"line_end":624,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1933},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":867903,"byte_end":867910,"line_start":636,"line_end":636,"column_start":12,"column_end":19},"name":"entries","qualname":"<UnitHeader<R, Offset>>::entries","value":"pub fn entries<'me, 'abbrev>(&'me Self, &'abbrev Abbreviations)\n-> EntriesCursor","parent":null,"children":[],"decl_id":null,"docs":" Navigate this unit's `DebuggingInformationEntry`s.\n","sig":null,"attributes":[{"value":"/ Navigate this unit's `DebuggingInformationEntry`s.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":867837,"byte_end":867891,"line_start":635,"line_end":635,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1936},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":868352,"byte_end":868369,"line_start":651,"line_end":651,"column_start":12,"column_end":29},"name":"entries_at_offset","qualname":"<UnitHeader<R, Offset>>::entries_at_offset","value":"pub fn entries_at_offset<'me,\n                         'abbrev>(&'me Self, &'abbrev Abbreviations,\n                                  UnitOffset<R::Offset>)\n-> Result<EntriesCursor>","parent":null,"children":[],"decl_id":null,"docs":" Navigate this compilation unit's `DebuggingInformationEntry`s\n starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Navigate this compilation unit's `DebuggingInformationEntry`s","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":868237,"byte_end":868302,"line_start":649,"line_end":649,"column_start":5,"column_end":70}},{"value":"/ starting at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":868307,"byte_end":868340,"line_start":650,"line_end":650,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1939},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":868882,"byte_end":868894,"line_start":668,"line_end":668,"column_start":12,"column_end":24},"name":"entries_tree","qualname":"<UnitHeader<R, Offset>>::entries_tree","value":"pub fn entries_tree<'me,\n                    'abbrev>(&'me Self, &'abbrev Abbreviations,\n                             Option<UnitOffset<R::Offset>>)\n-> Result<EntriesTree>","parent":null,"children":[],"decl_id":null,"docs":" Navigate this unit's `DebuggingInformationEntry`s as a tree\n starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Navigate this unit's `DebuggingInformationEntry`s as a tree","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":868769,"byte_end":868832,"line_start":666,"line_end":666,"column_start":5,"column_end":68}},{"value":"/ starting at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":868837,"byte_end":868870,"line_start":667,"line_end":667,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1942},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":869368,"byte_end":869379,"line_start":681,"line_end":681,"column_start":12,"column_end":23},"name":"entries_raw","qualname":"<UnitHeader<R, Offset>>::entries_raw","value":"pub fn entries_raw<'me,\n                   'abbrev>(&'me Self, &'abbrev Abbreviations,\n                            Option<UnitOffset<R::Offset>>)\n-> Result<EntriesRaw>","parent":null,"children":[],"decl_id":null,"docs":" Read the raw data that defines the Debugging Information Entries.\n","sig":null,"attributes":[{"value":"/ Read the raw data that defines the Debugging Information Entries.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":869287,"byte_end":869356,"line_start":680,"line_end":680,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1945},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":869889,"byte_end":869902,"line_start":699,"line_end":699,"column_start":12,"column_end":25},"name":"abbreviations","qualname":"<UnitHeader<R, Offset>>::abbreviations","value":"pub fn abbreviations(&Self, &DebugAbbrev<R>) -> Result<Abbreviations>","parent":null,"children":[],"decl_id":null,"docs":" Parse this unit's abbreviations.\n","sig":null,"attributes":[{"value":"/ Parse this unit's abbreviations.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":869841,"byte_end":869877,"line_start":698,"line_end":698,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":7801},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":871277,"byte_end":871302,"line_start":740,"line_end":740,"column_start":12,"column_end":37},"name":"DebuggingInformationEntry","qualname":"::read::unit::DebuggingInformationEntry","value":"DebuggingInformationEntry {  }","parent":null,"children":[{"krate":0,"index":7806},{"krate":0,"index":7807},{"krate":0,"index":7808},{"krate":0,"index":7809},{"krate":0,"index":7810}],"decl_id":null,"docs":" A Debugging Information Entry (DIE).","sig":null,"attributes":[{"value":"/ A Debugging Information Entry (DIE).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":871120,"byte_end":871160,"line_start":736,"line_end":736,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":871161,"byte_end":871164,"line_start":737,"line_end":737,"column_start":1,"column_end":4}},{"value":"/ DIEs have a set of attributes and optionally have children DIEs as well.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":871165,"byte_end":871241,"line_start":738,"line_end":738,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1953},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":871802,"byte_end":871805,"line_start":758,"line_end":758,"column_start":12,"column_end":15},"name":"new","qualname":"<DebuggingInformationEntry>::new","value":"pub fn new(UnitOffset<Offset>, R, &'abbrev Abbreviation,\n           &'unit UnitHeader<R, Offset>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebuggingInformationEntry`.\n","sig":null,"attributes":[{"value":"/ Construct a new `DebuggingInformationEntry`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":871742,"byte_end":871790,"line_start":757,"line_end":757,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1954},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872184,"byte_end":872188,"line_start":774,"line_end":774,"column_start":12,"column_end":16},"name":"code","qualname":"<DebuggingInformationEntry>::code","value":"pub fn code(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get this entry's code.\n","sig":null,"attributes":[{"value":"/ Get this entry's code.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872146,"byte_end":872172,"line_start":773,"line_end":773,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1955},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872283,"byte_end":872289,"line_start":779,"line_end":779,"column_start":12,"column_end":18},"name":"offset","qualname":"<DebuggingInformationEntry>::offset","value":"pub fn offset(&Self) -> UnitOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Get this entry's offset.\n","sig":null,"attributes":[{"value":"/ Get this entry's offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872243,"byte_end":872271,"line_start":778,"line_end":778,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1956},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":874685,"byte_end":874688,"line_start":846,"line_end":846,"column_start":12,"column_end":15},"name":"tag","qualname":"<DebuggingInformationEntry>::tag","value":"pub fn tag(&Self) -> constants::DwTag","parent":null,"children":[],"decl_id":null,"docs":" Get this entry's `DW_TAG_whatever` tag.","sig":null,"attributes":[{"value":"/ Get this entry's `DW_TAG_whatever` tag.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872355,"byte_end":872398,"line_start":783,"line_end":783,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872403,"byte_end":872406,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872411,"byte_end":872418,"line_start":785,"line_end":785,"column_start":5,"column_end":12}},{"value":"/ # use gimli::{DebugAbbrev, DebugInfo, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872423,"byte_end":872479,"line_start":786,"line_end":786,"column_start":5,"column_end":61}},{"value":"/ # let info_buf = [","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872484,"byte_end":872506,"line_start":787,"line_end":787,"column_start":5,"column_end":27}},{"value":"/ #     // Comilation unit header","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872511,"byte_end":872546,"line_start":788,"line_end":788,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872551,"byte_end":872556,"line_start":789,"line_end":789,"column_start":5,"column_end":10}},{"value":"/ #     // 32-bit unit length = 12","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872561,"byte_end":872597,"line_start":790,"line_end":790,"column_start":5,"column_end":41}},{"value":"/ #     0x0c, 0x00, 0x00, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872602,"byte_end":872635,"line_start":791,"line_end":791,"column_start":5,"column_end":38}},{"value":"/ #     // Version 4","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872640,"byte_end":872662,"line_start":792,"line_end":792,"column_start":5,"column_end":27}},{"value":"/ #     0x04, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872667,"byte_end":872688,"line_start":793,"line_end":793,"column_start":5,"column_end":26}},{"value":"/ #     // debug_abbrev_offset","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872693,"byte_end":872725,"line_start":794,"line_end":794,"column_start":5,"column_end":37}},{"value":"/ #     0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872730,"byte_end":872763,"line_start":795,"line_end":795,"column_start":5,"column_end":38}},{"value":"/ #     // Address size","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872768,"byte_end":872793,"line_start":796,"line_end":796,"column_start":5,"column_end":30}},{"value":"/ #     0x04,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872798,"byte_end":872813,"line_start":797,"line_end":797,"column_start":5,"column_end":20}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872818,"byte_end":872823,"line_start":798,"line_end":798,"column_start":5,"column_end":10}},{"value":"/ #     // DIEs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872828,"byte_end":872845,"line_start":799,"line_end":799,"column_start":5,"column_end":22}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872850,"byte_end":872855,"line_start":800,"line_end":800,"column_start":5,"column_end":10}},{"value":"/ #     // Abbreviation code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872860,"byte_end":872890,"line_start":801,"line_end":801,"column_start":5,"column_end":35}},{"value":"/ #     0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872895,"byte_end":872910,"line_start":802,"line_end":802,"column_start":5,"column_end":20}},{"value":"/ #     // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872915,"byte_end":872970,"line_start":803,"line_end":803,"column_start":5,"column_end":60}},{"value":"/ #     0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":872975,"byte_end":873008,"line_start":804,"line_end":804,"column_start":5,"column_end":38}},{"value":"/ # ];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873013,"byte_end":873021,"line_start":805,"line_end":805,"column_start":5,"column_end":13}},{"value":"/ # let debug_info = DebugInfo::new(&info_buf, LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873026,"byte_end":873089,"line_start":806,"line_end":806,"column_start":5,"column_end":68}},{"value":"/ # let abbrev_buf = [","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873094,"byte_end":873118,"line_start":807,"line_end":807,"column_start":5,"column_end":29}},{"value":"/ #     // Code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873123,"byte_end":873140,"line_start":808,"line_end":808,"column_start":5,"column_end":22}},{"value":"/ #     0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873145,"byte_end":873160,"line_start":809,"line_end":809,"column_start":5,"column_end":20}},{"value":"/ #     // DW_TAG_subprogram","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873165,"byte_end":873195,"line_start":810,"line_end":810,"column_start":5,"column_end":35}},{"value":"/ #     0x2e,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873200,"byte_end":873215,"line_start":811,"line_end":811,"column_start":5,"column_end":20}},{"value":"/ #     // DW_CHILDREN_no","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873220,"byte_end":873247,"line_start":812,"line_end":812,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873252,"byte_end":873267,"line_start":813,"line_end":813,"column_start":5,"column_end":20}},{"value":"/ #     // Begin attributes","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873272,"byte_end":873301,"line_start":814,"line_end":814,"column_start":5,"column_end":34}},{"value":"/ #       // Attribute name = DW_AT_name","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873306,"byte_end":873348,"line_start":815,"line_end":815,"column_start":5,"column_end":47}},{"value":"/ #       0x03,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873353,"byte_end":873370,"line_start":816,"line_end":816,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute form = DW_FORM_string","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873375,"byte_end":873421,"line_start":817,"line_end":817,"column_start":5,"column_end":51}},{"value":"/ #       0x08,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873426,"byte_end":873443,"line_start":818,"line_end":818,"column_start":5,"column_end":22}},{"value":"/ #     // End attributes","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873448,"byte_end":873475,"line_start":819,"line_end":819,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873480,"byte_end":873495,"line_start":820,"line_end":820,"column_start":5,"column_end":20}},{"value":"/ #     0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873500,"byte_end":873515,"line_start":821,"line_end":821,"column_start":5,"column_end":20}},{"value":"/ #     // Null terminator","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873520,"byte_end":873548,"line_start":822,"line_end":822,"column_start":5,"column_end":33}},{"value":"/ #     0x00","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873553,"byte_end":873567,"line_start":823,"line_end":823,"column_start":5,"column_end":19}},{"value":"/ # ];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873572,"byte_end":873580,"line_start":824,"line_end":824,"column_start":5,"column_end":13}},{"value":"/ # let debug_abbrev = DebugAbbrev::new(&abbrev_buf, LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873585,"byte_end":873654,"line_start":825,"line_end":825,"column_start":5,"column_end":74}},{"value":"/ # let unit = debug_info.units().next().unwrap().unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873659,"byte_end":873720,"line_start":826,"line_end":826,"column_start":5,"column_end":66}},{"value":"/ # let abbrevs = unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873725,"byte_end":873788,"line_start":827,"line_end":827,"column_start":5,"column_end":68}},{"value":"/ # let mut cursor = unit.entries(&abbrevs);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873793,"byte_end":873839,"line_start":828,"line_end":828,"column_start":5,"column_end":51}},{"value":"/ # let (_, entry) = cursor.next_dfs().unwrap().unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873844,"byte_end":873903,"line_start":829,"line_end":829,"column_start":5,"column_end":64}},{"value":"/ # let mut get_some_entry = || entry;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873908,"byte_end":873948,"line_start":830,"line_end":830,"column_start":5,"column_end":45}},{"value":"/ let entry = get_some_entry();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873953,"byte_end":873986,"line_start":831,"line_end":831,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873991,"byte_end":873994,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ match entry.tag() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":873999,"byte_end":874022,"line_start":833,"line_end":833,"column_start":5,"column_end":28}},{"value":"/     gimli::DW_TAG_subprogram =>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":874027,"byte_end":874062,"line_start":834,"line_end":834,"column_start":5,"column_end":40}},{"value":"/         println!(\"this entry contains debug info about a function\"),","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":874067,"byte_end":874139,"line_start":835,"line_end":835,"column_start":5,"column_end":77}},{"value":"/     gimli::DW_TAG_inlined_subroutine =>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":874144,"byte_end":874187,"line_start":836,"line_end":836,"column_start":5,"column_end":48}},{"value":"/         println!(\"this entry contains debug info about a particular instance of inlining\"),","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":874192,"byte_end":874287,"line_start":837,"line_end":837,"column_start":5,"column_end":100}},{"value":"/     gimli::DW_TAG_variable =>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":874292,"byte_end":874325,"line_start":838,"line_end":838,"column_start":5,"column_end":38}},{"value":"/         println!(\"this entry contains debug info about a local variable\"),","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":874330,"byte_end":874408,"line_start":839,"line_end":839,"column_start":5,"column_end":83}},{"value":"/     gimli::DW_TAG_formal_parameter =>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":874413,"byte_end":874454,"line_start":840,"line_end":840,"column_start":5,"column_end":46}},{"value":"/         println!(\"this entry contains debug info about a function parameter\"),","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":874459,"byte_end":874541,"line_start":841,"line_end":841,"column_start":5,"column_end":87}},{"value":"/     otherwise =>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":874546,"byte_end":874566,"line_start":842,"line_end":842,"column_start":5,"column_end":25}},{"value":"/         println!(\"this entry is some other kind of data: {:?}\", otherwise),","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":874571,"byte_end":874650,"line_start":843,"line_end":843,"column_start":5,"column_end":84}},{"value":"/ };","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":874655,"byte_end":874661,"line_start":844,"line_end":844,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":874666,"byte_end":874673,"line_start":845,"line_end":845,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1957},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":874839,"byte_end":874851,"line_start":851,"line_end":851,"column_start":12,"column_end":24},"name":"has_children","qualname":"<DebuggingInformationEntry>::has_children","value":"pub fn has_children(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if this entry's type can have children, false otherwise.\n","sig":null,"attributes":[{"value":"/ Return true if this entry's type can have children, false otherwise.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":874755,"byte_end":874827,"line_start":850,"line_end":850,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1958},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":877591,"byte_end":877596,"line_start":933,"line_end":933,"column_start":12,"column_end":17},"name":"attrs","qualname":"<DebuggingInformationEntry>::attrs","value":"pub fn attrs<'me>(&'me Self) -> AttrsIter","parent":null,"children":[],"decl_id":null,"docs":" Iterate over this entry's set of attributes.","sig":null,"attributes":[{"value":"/ Iterate over this entry's set of attributes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":874915,"byte_end":874963,"line_start":855,"line_end":855,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":874968,"byte_end":874971,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":874976,"byte_end":874983,"line_start":857,"line_end":857,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugAbbrev, DebugInfo, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":874988,"byte_end":875042,"line_start":858,"line_end":858,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875047,"byte_end":875050,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ // Read the `.debug_info` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875055,"byte_end":875093,"line_start":860,"line_end":860,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875098,"byte_end":875101,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ # let info_buf = [","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875106,"byte_end":875128,"line_start":862,"line_end":862,"column_start":5,"column_end":27}},{"value":"/ #     // Comilation unit header","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875133,"byte_end":875168,"line_start":863,"line_end":863,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875173,"byte_end":875178,"line_start":864,"line_end":864,"column_start":5,"column_end":10}},{"value":"/ #     // 32-bit unit length = 12","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875183,"byte_end":875219,"line_start":865,"line_end":865,"column_start":5,"column_end":41}},{"value":"/ #     0x0c, 0x00, 0x00, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875224,"byte_end":875257,"line_start":866,"line_end":866,"column_start":5,"column_end":38}},{"value":"/ #     // Version 4","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875262,"byte_end":875284,"line_start":867,"line_end":867,"column_start":5,"column_end":27}},{"value":"/ #     0x04, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875289,"byte_end":875310,"line_start":868,"line_end":868,"column_start":5,"column_end":26}},{"value":"/ #     // debug_abbrev_offset","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875315,"byte_end":875347,"line_start":869,"line_end":869,"column_start":5,"column_end":37}},{"value":"/ #     0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875352,"byte_end":875385,"line_start":870,"line_end":870,"column_start":5,"column_end":38}},{"value":"/ #     // Address size","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875390,"byte_end":875415,"line_start":871,"line_end":871,"column_start":5,"column_end":30}},{"value":"/ #     0x04,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875420,"byte_end":875435,"line_start":872,"line_end":872,"column_start":5,"column_end":20}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875440,"byte_end":875445,"line_start":873,"line_end":873,"column_start":5,"column_end":10}},{"value":"/ #     // DIEs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875450,"byte_end":875467,"line_start":874,"line_end":874,"column_start":5,"column_end":22}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875472,"byte_end":875477,"line_start":875,"line_end":875,"column_start":5,"column_end":10}},{"value":"/ #     // Abbreviation code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875482,"byte_end":875512,"line_start":876,"line_end":876,"column_start":5,"column_end":35}},{"value":"/ #     0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875517,"byte_end":875532,"line_start":877,"line_end":877,"column_start":5,"column_end":20}},{"value":"/ #     // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875537,"byte_end":875592,"line_start":878,"line_end":878,"column_start":5,"column_end":60}},{"value":"/ #     0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875597,"byte_end":875630,"line_start":879,"line_end":879,"column_start":5,"column_end":38}},{"value":"/ # ];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875635,"byte_end":875643,"line_start":880,"line_end":880,"column_start":5,"column_end":13}},{"value":"/ # let read_debug_info_section_somehow = || &info_buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875648,"byte_end":875705,"line_start":881,"line_end":881,"column_start":5,"column_end":62}},{"value":"/ let debug_info = DebugInfo::new(read_debug_info_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875710,"byte_end":875795,"line_start":882,"line_end":882,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875800,"byte_end":875803,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ // Get the data about the first compilation unit out of the `.debug_info`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875808,"byte_end":875886,"line_start":884,"line_end":884,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875891,"byte_end":875894,"line_start":885,"line_end":885,"column_start":5,"column_end":8}},{"value":"/ let unit = debug_info.units().next()","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875899,"byte_end":875939,"line_start":886,"line_end":886,"column_start":5,"column_end":45}},{"value":"/     .expect(\"Should have at least one compilation unit\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":875944,"byte_end":876004,"line_start":887,"line_end":887,"column_start":5,"column_end":65}},{"value":"/     .expect(\"and it should parse ok\");","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876009,"byte_end":876051,"line_start":888,"line_end":888,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876056,"byte_end":876059,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ // Read the `.debug_abbrev` section and parse the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876064,"byte_end":876117,"line_start":890,"line_end":890,"column_start":5,"column_end":58}},{"value":"/ // abbreviations for our compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876122,"byte_end":876168,"line_start":891,"line_end":891,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876173,"byte_end":876176,"line_start":892,"line_end":892,"column_start":5,"column_end":8}},{"value":"/ # let abbrev_buf = [","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876181,"byte_end":876205,"line_start":893,"line_end":893,"column_start":5,"column_end":29}},{"value":"/ #     // Code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876210,"byte_end":876227,"line_start":894,"line_end":894,"column_start":5,"column_end":22}},{"value":"/ #     0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876232,"byte_end":876247,"line_start":895,"line_end":895,"column_start":5,"column_end":20}},{"value":"/ #     // DW_TAG_subprogram","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876252,"byte_end":876282,"line_start":896,"line_end":896,"column_start":5,"column_end":35}},{"value":"/ #     0x2e,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876287,"byte_end":876302,"line_start":897,"line_end":897,"column_start":5,"column_end":20}},{"value":"/ #     // DW_CHILDREN_no","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876307,"byte_end":876334,"line_start":898,"line_end":898,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876339,"byte_end":876354,"line_start":899,"line_end":899,"column_start":5,"column_end":20}},{"value":"/ #     // Begin attributes","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876359,"byte_end":876388,"line_start":900,"line_end":900,"column_start":5,"column_end":34}},{"value":"/ #       // Attribute name = DW_AT_name","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876393,"byte_end":876435,"line_start":901,"line_end":901,"column_start":5,"column_end":47}},{"value":"/ #       0x03,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876440,"byte_end":876457,"line_start":902,"line_end":902,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute form = DW_FORM_string","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876462,"byte_end":876508,"line_start":903,"line_end":903,"column_start":5,"column_end":51}},{"value":"/ #       0x08,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876513,"byte_end":876530,"line_start":904,"line_end":904,"column_start":5,"column_end":22}},{"value":"/ #     // End attributes","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876535,"byte_end":876562,"line_start":905,"line_end":905,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876567,"byte_end":876582,"line_start":906,"line_end":906,"column_start":5,"column_end":20}},{"value":"/ #     0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876587,"byte_end":876602,"line_start":907,"line_end":907,"column_start":5,"column_end":20}},{"value":"/ #     // Null terminator","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876607,"byte_end":876635,"line_start":908,"line_end":908,"column_start":5,"column_end":33}},{"value":"/ #     0x00","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876640,"byte_end":876654,"line_start":909,"line_end":909,"column_start":5,"column_end":19}},{"value":"/ # ];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876659,"byte_end":876667,"line_start":910,"line_end":910,"column_start":5,"column_end":13}},{"value":"/ # let read_debug_abbrev_section_somehow = || &abbrev_buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876672,"byte_end":876733,"line_start":911,"line_end":911,"column_start":5,"column_end":66}},{"value":"/ let debug_abbrev = DebugAbbrev::new(read_debug_abbrev_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876738,"byte_end":876829,"line_start":912,"line_end":912,"column_start":5,"column_end":96}},{"value":"/ let abbrevs = unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876834,"byte_end":876895,"line_start":913,"line_end":913,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876900,"byte_end":876903,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ // Get the first entry from that compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876908,"byte_end":876962,"line_start":915,"line_end":915,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876967,"byte_end":876970,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ let mut cursor = unit.entries(&abbrevs);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":876975,"byte_end":877019,"line_start":917,"line_end":917,"column_start":5,"column_end":49}},{"value":"/ let (_, entry) = cursor.next_dfs()","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":877024,"byte_end":877062,"line_start":918,"line_end":918,"column_start":5,"column_end":43}},{"value":"/     .expect(\"Should parse next entry\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":877067,"byte_end":877109,"line_start":919,"line_end":919,"column_start":5,"column_end":47}},{"value":"/     .expect(\"Should have at least one entry\");","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":877114,"byte_end":877164,"line_start":920,"line_end":920,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":877169,"byte_end":877172,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ // Finally, print the first entry's attributes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":877177,"byte_end":877228,"line_start":922,"line_end":922,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":877233,"byte_end":877236,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ let mut attrs = entry.attrs();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":877241,"byte_end":877275,"line_start":924,"line_end":924,"column_start":5,"column_end":39}},{"value":"/ while let Some(attr) = attrs.next().unwrap() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":877280,"byte_end":877330,"line_start":925,"line_end":925,"column_start":5,"column_end":55}},{"value":"/     println!(\"Attribute name = {:?}\", attr.name());","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":877335,"byte_end":877390,"line_start":926,"line_end":926,"column_start":5,"column_end":60}},{"value":"/     println!(\"Attribute value = {:?}\", attr.value());","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":877395,"byte_end":877452,"line_start":927,"line_end":927,"column_start":5,"column_end":62}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":877457,"byte_end":877462,"line_start":928,"line_end":928,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":877467,"byte_end":877474,"line_start":929,"line_end":929,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":877479,"byte_end":877482,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":877487,"byte_end":877508,"line_start":931,"line_end":931,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":877513,"byte_end":877579,"line_start":932,"line_end":932,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1960},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":877961,"byte_end":877965,"line_start":943,"line_end":943,"column_start":12,"column_end":16},"name":"attr","qualname":"<DebuggingInformationEntry>::attr","value":"pub fn attr(&Self, constants::DwAt) -> Result<Option<Attribute<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Find the first attribute in this entry which has the given name,\n and return it. Returns `Ok(None)` if no attribute is found.\n","sig":null,"attributes":[{"value":"/ Find the first attribute in this entry which has the given name,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":877813,"byte_end":877881,"line_start":941,"line_end":941,"column_start":5,"column_end":73}},{"value":"/ and return it. Returns `Ok(None)` if no attribute is found.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":877886,"byte_end":877949,"line_start":942,"line_end":942,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1961},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":878402,"byte_end":878416,"line_start":955,"line_end":955,"column_start":12,"column_end":26},"name":"attr_value_raw","qualname":"<DebuggingInformationEntry>::attr_value_raw","value":"pub fn attr_value_raw(&Self, constants::DwAt)\n-> Result<Option<AttributeValue<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Find the first attribute in this entry which has the given name,\n and return its raw value. Returns `Ok(None)` if no attribute is found.\n","sig":null,"attributes":[{"value":"/ Find the first attribute in this entry which has the given name,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":878243,"byte_end":878311,"line_start":953,"line_end":953,"column_start":5,"column_end":73}},{"value":"/ and return its raw value. Returns `Ok(None)` if no attribute is found.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":878316,"byte_end":878390,"line_start":954,"line_end":954,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1964},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":878755,"byte_end":878765,"line_start":963,"line_end":963,"column_start":12,"column_end":22},"name":"attr_value","qualname":"<DebuggingInformationEntry>::attr_value","value":"pub fn attr_value(&Self, constants::DwAt) -> Result<Option<AttributeValue<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Find the first attribute in this entry which has the given name,\n and return its normalized value.  Returns `Ok(None)` if no\n attribute is found.\n","sig":null,"attributes":[{"value":"/ Find the first attribute in this entry which has the given name,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":878580,"byte_end":878648,"line_start":960,"line_end":960,"column_start":5,"column_end":73}},{"value":"/ and return its normalized value.  Returns `Ok(None)` if no","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":878653,"byte_end":878715,"line_start":961,"line_end":961,"column_start":5,"column_end":67}},{"value":"/ attribute is found.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":878720,"byte_end":878743,"line_start":962,"line_end":962,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7826},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881159,"byte_end":881163,"line_start":1032,"line_end":1032,"column_start":5,"column_end":9},"name":"Addr","qualname":"::read::unit::AttributeValue::Addr","value":"AttributeValue::Addr(u64)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" \"Refers to some location in the address space of the described program.\"\n","sig":null,"attributes":[{"value":"/ \"Refers to some location in the address space of the described program.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881078,"byte_end":881154,"line_start":1031,"line_end":1031,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7829},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881224,"byte_end":881229,"line_start":1035,"line_end":1035,"column_start":5,"column_end":10},"name":"Block","qualname":"::read::unit::AttributeValue::Block","value":"AttributeValue::Block(R)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" A slice of an arbitrary number of bytes.\n","sig":null,"attributes":[{"value":"/ A slice of an arbitrary number of bytes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881175,"byte_end":881219,"line_start":1034,"line_end":1034,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7832},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881507,"byte_end":881512,"line_start":1042,"line_end":1042,"column_start":5,"column_end":10},"name":"Data1","qualname":"::read::unit::AttributeValue::Data1","value":"AttributeValue::Data1(u8)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" A one byte constant data value. How to interpret the byte depends on context.","sig":null,"attributes":[{"value":"/ A one byte constant data value. How to interpret the byte depends on context.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881239,"byte_end":881320,"line_start":1037,"line_end":1037,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881325,"byte_end":881328,"line_start":1038,"line_end":1038,"column_start":5,"column_end":8}},{"value":"/ From section 7 of the standard: \"Depending on context, it may be a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881333,"byte_end":881403,"line_start":1039,"line_end":1039,"column_start":5,"column_end":75}},{"value":"/ signed integer, an unsigned integer, a floating-point constant, or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881408,"byte_end":881478,"line_start":1040,"line_end":1040,"column_start":5,"column_end":75}},{"value":"/ anything else.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881483,"byte_end":881502,"line_start":1041,"line_end":1041,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7835},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881921,"byte_end":881926,"line_start":1052,"line_end":1052,"column_start":5,"column_end":10},"name":"Data2","qualname":"::read::unit::AttributeValue::Data2","value":"AttributeValue::Data2(u16)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" A two byte constant data value. How to interpret the bytes depends on context.","sig":null,"attributes":[{"value":"/ A two byte constant data value. How to interpret the bytes depends on context.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881523,"byte_end":881605,"line_start":1044,"line_end":1044,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881610,"byte_end":881613,"line_start":1045,"line_end":1045,"column_start":5,"column_end":8}},{"value":"/ These bytes have been converted from `R::Endian`. This may need to be reversed","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881618,"byte_end":881700,"line_start":1046,"line_end":1046,"column_start":5,"column_end":87}},{"value":"/ if this was not required.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881705,"byte_end":881734,"line_start":1047,"line_end":1047,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881739,"byte_end":881742,"line_start":1048,"line_end":1048,"column_start":5,"column_end":8}},{"value":"/ From section 7 of the standard: \"Depending on context, it may be a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881747,"byte_end":881817,"line_start":1049,"line_end":1049,"column_start":5,"column_end":75}},{"value":"/ signed integer, an unsigned integer, a floating-point constant, or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881822,"byte_end":881892,"line_start":1050,"line_end":1050,"column_start":5,"column_end":75}},{"value":"/ anything else.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881897,"byte_end":881916,"line_start":1051,"line_end":1051,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7838},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882337,"byte_end":882342,"line_start":1062,"line_end":1062,"column_start":5,"column_end":10},"name":"Data4","qualname":"::read::unit::AttributeValue::Data4","value":"AttributeValue::Data4(u32)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" A four byte constant data value. How to interpret the bytes depends on context.","sig":null,"attributes":[{"value":"/ A four byte constant data value. How to interpret the bytes depends on context.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":881938,"byte_end":882021,"line_start":1054,"line_end":1054,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882026,"byte_end":882029,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ These bytes have been converted from `R::Endian`. This may need to be reversed","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882034,"byte_end":882116,"line_start":1056,"line_end":1056,"column_start":5,"column_end":87}},{"value":"/ if this was not required.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882121,"byte_end":882150,"line_start":1057,"line_end":1057,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882155,"byte_end":882158,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ From section 7 of the standard: \"Depending on context, it may be a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882163,"byte_end":882233,"line_start":1059,"line_end":1059,"column_start":5,"column_end":75}},{"value":"/ signed integer, an unsigned integer, a floating-point constant, or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882238,"byte_end":882308,"line_start":1060,"line_end":1060,"column_start":5,"column_end":75}},{"value":"/ anything else.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882313,"byte_end":882332,"line_start":1061,"line_end":1061,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7841},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882755,"byte_end":882760,"line_start":1072,"line_end":1072,"column_start":5,"column_end":10},"name":"Data8","qualname":"::read::unit::AttributeValue::Data8","value":"AttributeValue::Data8(u64)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An eight byte constant data value. How to interpret the bytes depends on context.","sig":null,"attributes":[{"value":"/ An eight byte constant data value. How to interpret the bytes depends on context.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882354,"byte_end":882439,"line_start":1064,"line_end":1064,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882444,"byte_end":882447,"line_start":1065,"line_end":1065,"column_start":5,"column_end":8}},{"value":"/ These bytes have been converted from `R::Endian`. This may need to be reversed","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882452,"byte_end":882534,"line_start":1066,"line_end":1066,"column_start":5,"column_end":87}},{"value":"/ if this was not required.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882539,"byte_end":882568,"line_start":1067,"line_end":1067,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882573,"byte_end":882576,"line_start":1068,"line_end":1068,"column_start":5,"column_end":8}},{"value":"/ From section 7 of the standard: \"Depending on context, it may be a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882581,"byte_end":882651,"line_start":1069,"line_end":1069,"column_start":5,"column_end":75}},{"value":"/ signed integer, an unsigned integer, a floating-point constant, or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882656,"byte_end":882726,"line_start":1070,"line_end":1070,"column_start":5,"column_end":75}},{"value":"/ anything else.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882731,"byte_end":882750,"line_start":1071,"line_end":1071,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7844},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882807,"byte_end":882812,"line_start":1075,"line_end":1075,"column_start":5,"column_end":10},"name":"Sdata","qualname":"::read::unit::AttributeValue::Sdata","value":"AttributeValue::Sdata(i64)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" A signed integer constant.\n","sig":null,"attributes":[{"value":"/ A signed integer constant.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882772,"byte_end":882802,"line_start":1074,"line_end":1074,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7847},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882862,"byte_end":882867,"line_start":1078,"line_end":1078,"column_start":5,"column_end":10},"name":"Udata","qualname":"::read::unit::AttributeValue::Udata","value":"AttributeValue::Udata(u64)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An unsigned integer constant.\n","sig":null,"attributes":[{"value":"/ An unsigned integer constant.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882824,"byte_end":882857,"line_start":1077,"line_end":1077,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7850},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883007,"byte_end":883014,"line_start":1082,"line_end":1082,"column_start":5,"column_end":12},"name":"Exprloc","qualname":"::read::unit::AttributeValue::Exprloc","value":"AttributeValue::Exprloc(Expression<R>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" \"The information bytes contain a DWARF expression (see Section 2.5) or\n location description (see Section 2.6).\"\n","sig":null,"attributes":[{"value":"/ \"The information bytes contain a DWARF expression (see Section 2.5) or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882879,"byte_end":882953,"line_start":1080,"line_end":1080,"column_start":5,"column_end":79}},{"value":"/ location description (see Section 2.6).\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":882958,"byte_end":883002,"line_start":1081,"line_end":1081,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7853},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883107,"byte_end":883111,"line_start":1085,"line_end":1085,"column_start":5,"column_end":9},"name":"Flag","qualname":"::read::unit::AttributeValue::Flag","value":"AttributeValue::Flag(bool)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" A boolean that indicates presence or absence of the attribute.\n","sig":null,"attributes":[{"value":"/ A boolean that indicates presence or absence of the attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883036,"byte_end":883102,"line_start":1084,"line_end":1084,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7856},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883229,"byte_end":883238,"line_start":1089,"line_end":1089,"column_start":5,"column_end":14},"name":"SecOffset","qualname":"::read::unit::AttributeValue::SecOffset","value":"AttributeValue::SecOffset(Offset)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An offset into another section. Which section this is an offset into\n depends on context.\n","sig":null,"attributes":[{"value":"/ An offset into another section. Which section this is an offset into","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883124,"byte_end":883196,"line_start":1087,"line_end":1087,"column_start":5,"column_end":77}},{"value":"/ depends on context.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883201,"byte_end":883224,"line_start":1088,"line_end":1088,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7859},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883323,"byte_end":883336,"line_start":1092,"line_end":1092,"column_start":5,"column_end":18},"name":"DebugAddrBase","qualname":"::read::unit::AttributeValue::DebugAddrBase","value":"AttributeValue::DebugAddrBase(DebugAddrBase<Offset>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An offset to a set of addresses in the `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of addresses in the `.debug_addr` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883253,"byte_end":883318,"line_start":1091,"line_end":1091,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7862},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883437,"byte_end":883451,"line_start":1095,"line_end":1095,"column_start":5,"column_end":19},"name":"DebugAddrIndex","qualname":"::read::unit::AttributeValue::DebugAddrIndex","value":"AttributeValue::DebugAddrIndex(DebugAddrIndex<Offset>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An index into a set of addresses in the `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of addresses in the `.debug_addr` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883366,"byte_end":883432,"line_start":1094,"line_end":1094,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7865},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883535,"byte_end":883542,"line_start":1098,"line_end":1098,"column_start":5,"column_end":12},"name":"UnitRef","qualname":"::read::unit::AttributeValue::UnitRef","value":"AttributeValue::UnitRef(UnitOffset<Offset>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An offset into the current compilation unit.\n","sig":null,"attributes":[{"value":"/ An offset into the current compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883482,"byte_end":883530,"line_start":1097,"line_end":1097,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7868},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883699,"byte_end":883711,"line_start":1102,"line_end":1102,"column_start":5,"column_end":17},"name":"DebugInfoRef","qualname":"::read::unit::AttributeValue::DebugInfoRef","value":"AttributeValue::DebugInfoRef(DebugInfoOffset<Offset>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An offset into the current `.debug_info` section, but possibly a\n different compilation unit from the current one.\n","sig":null,"attributes":[{"value":"/ An offset into the current `.debug_info` section, but possibly a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883569,"byte_end":883637,"line_start":1100,"line_end":1100,"column_start":5,"column_end":73}},{"value":"/ different compilation unit from the current one.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883642,"byte_end":883694,"line_start":1101,"line_end":1101,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7871},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883826,"byte_end":883841,"line_start":1105,"line_end":1105,"column_start":5,"column_end":20},"name":"DebugInfoRefSup","qualname":"::read::unit::AttributeValue::DebugInfoRefSup","value":"AttributeValue::DebugInfoRefSup(DebugInfoOffset<Offset>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An offset into the `.debug_info` section of the supplementary object file.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_info` section of the supplementary object file.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883743,"byte_end":883821,"line_start":1104,"line_end":1104,"column_start":5,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7874},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883923,"byte_end":883935,"line_start":1108,"line_end":1108,"column_start":5,"column_end":17},"name":"DebugLineRef","qualname":"::read::unit::AttributeValue::DebugLineRef","value":"AttributeValue::DebugLineRef(DebugLineOffset<Offset>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An offset into the `.debug_line` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_line` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883873,"byte_end":883918,"line_start":1107,"line_end":1107,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7877},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":884056,"byte_end":884072,"line_start":1111,"line_end":1111,"column_start":5,"column_end":21},"name":"LocationListsRef","qualname":"::read::unit::AttributeValue::LocationListsRef","value":"AttributeValue::LocationListsRef(LocationListsOffset<Offset>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An offset into either the `.debug_loc` section or the `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ An offset into either the `.debug_loc` section or the `.debug_loclists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":883967,"byte_end":884051,"line_start":1110,"line_end":1110,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7880},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":884180,"byte_end":884197,"line_start":1114,"line_end":1114,"column_start":5,"column_end":22},"name":"DebugLocListsBase","qualname":"::read::unit::AttributeValue::DebugLocListsBase","value":"AttributeValue::DebugLocListsBase(DebugLocListsBase<Offset>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An offset to a set of offsets in the `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of offsets in the `.debug_loclists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":884108,"byte_end":884175,"line_start":1113,"line_end":1113,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7883},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":884304,"byte_end":884322,"line_start":1117,"line_end":1117,"column_start":5,"column_end":23},"name":"DebugLocListsIndex","qualname":"::read::unit::AttributeValue::DebugLocListsIndex","value":"AttributeValue::DebugLocListsIndex(DebugLocListsIndex<Offset>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An index into a set of offsets in the `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of offsets in the `.debug_loclists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":884231,"byte_end":884299,"line_start":1116,"line_end":1116,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7886},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":884410,"byte_end":884425,"line_start":1120,"line_end":1120,"column_start":5,"column_end":20},"name":"DebugMacinfoRef","qualname":"::read::unit::AttributeValue::DebugMacinfoRef","value":"AttributeValue::DebugMacinfoRef(DebugMacinfoOffset<Offset>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An offset into the `.debug_macinfo` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_macinfo` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":884357,"byte_end":884405,"line_start":1119,"line_end":1119,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7889},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":884511,"byte_end":884524,"line_start":1123,"line_end":1123,"column_start":5,"column_end":18},"name":"DebugMacroRef","qualname":"::read::unit::AttributeValue::DebugMacroRef","value":"AttributeValue::DebugMacroRef(DebugMacroOffset<Offset>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An offset into the `.debug_macro` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_macro` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":884460,"byte_end":884506,"line_start":1122,"line_end":1122,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7892},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":884609,"byte_end":884622,"line_start":1126,"line_end":1126,"column_start":5,"column_end":18},"name":"RangeListsRef","qualname":"::read::unit::AttributeValue::RangeListsRef","value":"AttributeValue::RangeListsRef(RangeListsOffset<Offset>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An offset into the `.debug_ranges` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_ranges` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":884557,"byte_end":884604,"line_start":1125,"line_end":1125,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7895},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":884727,"byte_end":884744,"line_start":1129,"line_end":1129,"column_start":5,"column_end":22},"name":"DebugRngListsBase","qualname":"::read::unit::AttributeValue::DebugRngListsBase","value":"AttributeValue::DebugRngListsBase(DebugRngListsBase<Offset>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An offset to a set of offsets in the `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of offsets in the `.debug_rnglists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":884655,"byte_end":884722,"line_start":1128,"line_end":1128,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7898},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":884851,"byte_end":884869,"line_start":1132,"line_end":1132,"column_start":5,"column_end":23},"name":"DebugRngListsIndex","qualname":"::read::unit::AttributeValue::DebugRngListsIndex","value":"AttributeValue::DebugRngListsIndex(DebugRngListsIndex<Offset>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An index into a set of offsets in the `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of offsets in the `.debug_rnglists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":884778,"byte_end":884846,"line_start":1131,"line_end":1131,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7901},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":884930,"byte_end":884943,"line_start":1135,"line_end":1135,"column_start":5,"column_end":18},"name":"DebugTypesRef","qualname":"::read::unit::AttributeValue::DebugTypesRef","value":"AttributeValue::DebugTypesRef(DebugTypeSignature)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" A type signature.\n","sig":null,"attributes":[{"value":"/ A type signature.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":884904,"byte_end":884925,"line_start":1134,"line_end":1134,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7904},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":885019,"byte_end":885030,"line_start":1138,"line_end":1138,"column_start":5,"column_end":16},"name":"DebugStrRef","qualname":"::read::unit::AttributeValue::DebugStrRef","value":"AttributeValue::DebugStrRef(DebugStrOffset<Offset>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An offset into the `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":884970,"byte_end":885014,"line_start":1137,"line_end":1137,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7907},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":885143,"byte_end":885157,"line_start":1141,"line_end":1141,"column_start":5,"column_end":19},"name":"DebugStrRefSup","qualname":"::read::unit::AttributeValue::DebugStrRefSup","value":"AttributeValue::DebugStrRefSup(DebugStrOffset<Offset>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An offset into the `.debug_str` section of the supplementary object file.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_str` section of the supplementary object file.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":885061,"byte_end":885138,"line_start":1140,"line_end":1140,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7910},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":885263,"byte_end":885282,"line_start":1144,"line_end":1144,"column_start":5,"column_end":24},"name":"DebugStrOffsetsBase","qualname":"::read::unit::AttributeValue::DebugStrOffsetsBase","value":"AttributeValue::DebugStrOffsetsBase(DebugStrOffsetsBase<Offset>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An offset to a set of entries in the `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of entries in the `.debug_str_offsets` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":885188,"byte_end":885258,"line_start":1143,"line_end":1143,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7913},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":885394,"byte_end":885414,"line_start":1147,"line_end":1147,"column_start":5,"column_end":25},"name":"DebugStrOffsetsIndex","qualname":"::read::unit::AttributeValue::DebugStrOffsetsIndex","value":"AttributeValue::DebugStrOffsetsIndex(DebugStrOffsetsIndex<Offset>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An index into a set of entries in the `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of entries in the `.debug_str_offsets` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":885318,"byte_end":885389,"line_start":1146,"line_end":1146,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7916},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":885505,"byte_end":885520,"line_start":1150,"line_end":1150,"column_start":5,"column_end":20},"name":"DebugLineStrRef","qualname":"::read::unit::AttributeValue::DebugLineStrRef","value":"AttributeValue::DebugLineStrRef(DebugLineStrOffset<Offset>)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An offset into the `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_line_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":885451,"byte_end":885500,"line_start":1149,"line_end":1149,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7919},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":885697,"byte_end":885703,"line_start":1154,"line_end":1154,"column_start":5,"column_end":11},"name":"String","qualname":"::read::unit::AttributeValue::String","value":"AttributeValue::String(R)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" A slice of bytes representing a string. Does not include a final null byte.\n Not guaranteed to be UTF-8 or anything like that.\n","sig":null,"attributes":[{"value":"/ A slice of bytes representing a string. Does not include a final null byte.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":885555,"byte_end":885634,"line_start":1152,"line_end":1152,"column_start":5,"column_end":84}},{"value":"/ Not guaranteed to be UTF-8 or anything like that.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":885639,"byte_end":885692,"line_start":1153,"line_end":1153,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7922},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":885764,"byte_end":885772,"line_start":1157,"line_end":1157,"column_start":5,"column_end":13},"name":"Encoding","qualname":"::read::unit::AttributeValue::Encoding","value":"AttributeValue::Encoding(constants::DwAte)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_encoding` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_encoding` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":885713,"byte_end":885759,"line_start":1156,"line_end":1156,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7925},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":885852,"byte_end":885863,"line_start":1160,"line_end":1160,"column_start":5,"column_end":16},"name":"DecimalSign","qualname":"::read::unit::AttributeValue::DecimalSign","value":"AttributeValue::DecimalSign(constants::DwDs)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_decimal_sign` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_decimal_sign` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":885797,"byte_end":885847,"line_start":1159,"line_end":1159,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7928},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":885939,"byte_end":885948,"line_start":1163,"line_end":1163,"column_start":5,"column_end":14},"name":"Endianity","qualname":"::read::unit::AttributeValue::Endianity","value":"AttributeValue::Endianity(constants::DwEnd)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_endianity` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_endianity` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":885887,"byte_end":885934,"line_start":1162,"line_end":1162,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7931},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886029,"byte_end":886042,"line_start":1166,"line_end":1166,"column_start":5,"column_end":18},"name":"Accessibility","qualname":"::read::unit::AttributeValue::Accessibility","value":"AttributeValue::Accessibility(constants::DwAccess)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_accessibility` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_accessibility` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":885973,"byte_end":886024,"line_start":1165,"line_end":1165,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7934},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886123,"byte_end":886133,"line_start":1169,"line_end":1169,"column_start":5,"column_end":15},"name":"Visibility","qualname":"::read::unit::AttributeValue::Visibility","value":"AttributeValue::Visibility(constants::DwVis)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_visibility` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_visibility` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886070,"byte_end":886118,"line_start":1168,"line_end":1168,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7937},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886211,"byte_end":886221,"line_start":1172,"line_end":1172,"column_start":5,"column_end":15},"name":"Virtuality","qualname":"::read::unit::AttributeValue::Virtuality","value":"AttributeValue::Virtuality(constants::DwVirtuality)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_virtuality` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_virtuality` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886158,"byte_end":886206,"line_start":1171,"line_end":1171,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7940},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886304,"byte_end":886312,"line_start":1175,"line_end":1175,"column_start":5,"column_end":13},"name":"Language","qualname":"::read::unit::AttributeValue::Language","value":"AttributeValue::Language(constants::DwLang)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_language` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_language` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886253,"byte_end":886299,"line_start":1174,"line_end":1174,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7943},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886394,"byte_end":886406,"line_start":1178,"line_end":1178,"column_start":5,"column_end":17},"name":"AddressClass","qualname":"::read::unit::AttributeValue::AddressClass","value":"AttributeValue::AddressClass(constants::DwAddr)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_address_class` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_address_class` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886338,"byte_end":886389,"line_start":1177,"line_end":1177,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7946},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886490,"byte_end":886504,"line_start":1181,"line_end":1181,"column_start":5,"column_end":19},"name":"IdentifierCase","qualname":"::read::unit::AttributeValue::IdentifierCase","value":"AttributeValue::IdentifierCase(constants::DwId)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_identifier_case` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_identifier_case` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886432,"byte_end":886485,"line_start":1180,"line_end":1180,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7949},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886589,"byte_end":886606,"line_start":1184,"line_end":1184,"column_start":5,"column_end":22},"name":"CallingConvention","qualname":"::read::unit::AttributeValue::CallingConvention","value":"AttributeValue::CallingConvention(constants::DwCc)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_calling_convention` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_calling_convention` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886528,"byte_end":886584,"line_start":1183,"line_end":1183,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7952},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886679,"byte_end":886685,"line_start":1187,"line_end":1187,"column_start":5,"column_end":11},"name":"Inline","qualname":"::read::unit::AttributeValue::Inline","value":"AttributeValue::Inline(constants::DwInl)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_inline` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_inline` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886630,"byte_end":886674,"line_start":1186,"line_end":1186,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7955},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886761,"byte_end":886769,"line_start":1190,"line_end":1190,"column_start":5,"column_end":13},"name":"Ordering","qualname":"::read::unit::AttributeValue::Ordering","value":"AttributeValue::Ordering(constants::DwOrd)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_ordering` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_ordering` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886710,"byte_end":886756,"line_start":1189,"line_end":1189,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7958},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886932,"byte_end":886941,"line_start":1194,"line_end":1194,"column_start":5,"column_end":14},"name":"FileIndex","qualname":"::read::unit::AttributeValue::FileIndex","value":"AttributeValue::FileIndex(u64)","parent":{"krate":0,"index":7823},"children":[],"decl_id":null,"docs":" An index into the filename entries from the line number information\n table for the compilation unit containing this value.\n","sig":null,"attributes":[{"value":"/ An index into the filename entries from the line number information","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886794,"byte_end":886865,"line_start":1192,"line_end":1192,"column_start":5,"column_end":76}},{"value":"/ table for the compilation unit containing this value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886870,"byte_end":886927,"line_start":1193,"line_end":1193,"column_start":5,"column_end":62}}]},{"kind":"Enum","id":{"krate":0,"index":7823},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":880958,"byte_end":880972,"line_start":1026,"line_end":1026,"column_start":10,"column_end":24},"name":"AttributeValue","qualname":"::read::unit::AttributeValue","value":"pub enum AttributeValue<R, Offset = <R as Reader>::Offset> where\n         R: Reader<Offset = Offset>, Offset: ReaderOffset {\n\n    /// \"Refers to some location in the address space of the described program.\"\n    Addr(u64),\n\n    /// A slice of an arbitrary number of bytes.\n    Block(R),\n\n    /// A one byte constant data value. How to interpret the byte depends on context.\n    ///\n    /// From section 7 of the standard: \"Depending on context, it may be a\n    /// signed integer, an unsigned integer, a floating-point constant, or\n    /// anything else.\"\n    Data1(u8),\n\n    /// A two byte constant data value. How to interpret the bytes depends on context.\n    ///\n    /// These bytes have been converted from `R::Endian`. This may need to be reversed\n    /// if this was not required.\n    ///\n    /// From section 7 of the standard: \"Depending on context, it may be a\n    /// signed integer, an unsigned integer, a floating-point constant, or\n    /// anything else.\"\n    Data2(u16),\n\n    /// A four byte constant data value. How to interpret the bytes depends on context.\n    ///\n    /// These bytes have been converted from `R::Endian`. This may need to be reversed\n    /// if this was not required.\n    ///\n    /// From section 7 of the standard: \"Depending on context, it may be a\n    /// signed integer, an unsigned integer, a floating-point constant, or\n    /// anything else.\"\n    Data4(u32),\n\n    /// An eight byte constant data value. How to interpret the bytes depends on context.\n    ///\n    /// These bytes have been converted from `R::Endian`. This may need to be reversed\n    /// if this was not required.\n    ///\n    /// From section 7 of the standard: \"Depending on context, it may be a\n    /// signed integer, an unsigned integer, a floating-point constant, or\n    /// anything else.\"\n    Data8(u64),\n\n    /// A signed integer constant.\n    Sdata(i64),\n\n    /// An unsigned integer constant.\n    Udata(u64),\n\n    /// \"The information bytes contain a DWARF expression (see Section 2.5) or\n    /// location description (see Section 2.6).\"\n    Exprloc(Expression<R>),\n\n    /// A boolean that indicates presence or absence of the attribute.\n    Flag(bool),\n\n    /// An offset into another section. Which section this is an offset into\n    /// depends on context.\n    SecOffset(Offset),\n\n    /// An offset to a set of addresses in the `.debug_addr` section.\n    DebugAddrBase(DebugAddrBase<Offset>),\n\n    /// An index into a set of addresses in the `.debug_addr` section.\n    DebugAddrIndex(DebugAddrIndex<Offset>),\n\n    /// An offset into the current compilation unit.\n    UnitRef(UnitOffset<Offset>),\n\n    /// An offset into the current `.debug_info` section, but possibly a\n    /// different compilation unit from the current one.\n    DebugInfoRef(DebugInfoOffset<Offset>),\n\n    /// An offset into the `.debug_info` section of the supplementary object file.\n    DebugInfoRefSup(DebugInfoOffset<Offset>),\n\n    /// An offset into the `.debug_line` section.\n    DebugLineRef(DebugLineOffset<Offset>),\n\n    /// An offset into either the `.debug_loc` section or the `.debug_loclists` section.\n    LocationListsRef(LocationListsOffset<Offset>),\n\n    /// An offset to a set of offsets in the `.debug_loclists` section.\n    DebugLocListsBase(DebugLocListsBase<Offset>),\n\n    /// An index into a set of offsets in the `.debug_loclists` section.\n    DebugLocListsIndex(DebugLocListsIndex<Offset>),\n\n    /// An offset into the `.debug_macinfo` section.\n    DebugMacinfoRef(DebugMacinfoOffset<Offset>),\n\n    /// An offset into the `.debug_macro` section.\n    DebugMacroRef(DebugMacroOffset<Offset>),\n\n    /// An offset into the `.debug_ranges` section.\n    RangeListsRef(RangeListsOffset<Offset>),\n\n    /// An offset to a set of offsets in the `.debug_rnglists` section.\n    DebugRngListsBase(DebugRngListsBase<Offset>),\n\n    /// An index into a set of offsets in the `.debug_rnglists` section.\n    DebugRngListsIndex(DebugRngListsIndex<Offset>),\n\n    /// A type signature.\n    DebugTypesRef(DebugTypeSignature),\n\n    /// An offset into the `.debug_str` section.\n    DebugStrRef(DebugStrOffset<Offset>),\n\n    /// An offset into the `.debug_str` section of the supplementary object file.\n    DebugStrRefSup(DebugStrOffset<Offset>),\n\n    /// An offset to a set of entries in the `.debug_str_offsets` section.\n    DebugStrOffsetsBase(DebugStrOffsetsBase<Offset>),\n\n    /// An index into a set of entries in the `.debug_str_offsets` section.\n    DebugStrOffsetsIndex(DebugStrOffsetsIndex<Offset>),\n\n    /// An offset into the `.debug_line_str` section.\n    DebugLineStrRef(DebugLineStrOffset<Offset>),\n\n    /// A slice of bytes representing a string. Does not include a final null byte.\n    /// Not guaranteed to be UTF-8 or anything like that.\n    String(R),\n\n    /// The value of a `DW_AT_encoding` attribute.\n    Encoding(constants::DwAte),\n\n    /// The value of a `DW_AT_decimal_sign` attribute.\n    DecimalSign(constants::DwDs),\n\n    /// The value of a `DW_AT_endianity` attribute.\n    Endianity(constants::DwEnd),\n\n    /// The value of a `DW_AT_accessibility` attribute.\n    Accessibility(constants::DwAccess),\n\n    /// The value of a `DW_AT_visibility` attribute.\n    Visibility(constants::DwVis),\n\n    /// The value of a `DW_AT_virtuality` attribute.\n    Virtuality(constants::DwVirtuality),\n\n    /// The value of a `DW_AT_language` attribute.\n    Language(constants::DwLang),\n\n    /// The value of a `DW_AT_address_class` attribute.\n    AddressClass(constants::DwAddr),\n\n    /// The value of a `DW_AT_identifier_case` attribute.\n    IdentifierCase(constants::DwId),\n\n    /// The value of a `DW_AT_calling_convention` attribute.\n    CallingConvention(constants::DwCc),\n\n    /// The value of a `DW_AT_inline` attribute.\n    Inline(constants::DwInl),\n\n    /// The value of a `DW_AT_ordering` attribute.\n    Ordering(constants::DwOrd),\n\n    /// An index into the filename entries from the line number information\n    /// table for the compilation unit containing this value.\n    FileIndex(u64),\n}","parent":null,"children":[{"krate":0,"index":7826},{"krate":0,"index":7829},{"krate":0,"index":7832},{"krate":0,"index":7835},{"krate":0,"index":7838},{"krate":0,"index":7841},{"krate":0,"index":7844},{"krate":0,"index":7847},{"krate":0,"index":7850},{"krate":0,"index":7853},{"krate":0,"index":7856},{"krate":0,"index":7859},{"krate":0,"index":7862},{"krate":0,"index":7865},{"krate":0,"index":7868},{"krate":0,"index":7871},{"krate":0,"index":7874},{"krate":0,"index":7877},{"krate":0,"index":7880},{"krate":0,"index":7883},{"krate":0,"index":7886},{"krate":0,"index":7889},{"krate":0,"index":7892},{"krate":0,"index":7895},{"krate":0,"index":7898},{"krate":0,"index":7901},{"krate":0,"index":7904},{"krate":0,"index":7907},{"krate":0,"index":7910},{"krate":0,"index":7913},{"krate":0,"index":7916},{"krate":0,"index":7919},{"krate":0,"index":7922},{"krate":0,"index":7925},{"krate":0,"index":7928},{"krate":0,"index":7931},{"krate":0,"index":7934},{"krate":0,"index":7937},{"krate":0,"index":7940},{"krate":0,"index":7943},{"krate":0,"index":7946},{"krate":0,"index":7949},{"krate":0,"index":7952},{"krate":0,"index":7955},{"krate":0,"index":7958}],"decl_id":null,"docs":" The value of an attribute in a `DebuggingInformationEntry`.\n","sig":null,"attributes":[{"value":"/ The value of an attribute in a `DebuggingInformationEntry`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":880675,"byte_end":880738,"line_start":1020,"line_end":1020,"column_start":1,"column_end":64}},{"value":"repr(u64)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":880891,"byte_end":880903,"line_start":1024,"line_end":1024,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":7987},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":887105,"byte_end":887114,"line_start":1200,"line_end":1200,"column_start":12,"column_end":21},"name":"Attribute","qualname":"::read::unit::Attribute","value":"Attribute {  }","parent":null,"children":[{"krate":0,"index":7989},{"krate":0,"index":7990}],"decl_id":null,"docs":" An attribute in a `DebuggingInformationEntry`, consisting of a name and\n associated value.\n","sig":null,"attributes":[{"value":"/ An attribute in a `DebuggingInformationEntry`, consisting of a name and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":886951,"byte_end":887026,"line_start":1197,"line_end":1197,"column_start":1,"column_end":76}},{"value":"/ associated value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":887027,"byte_end":887048,"line_start":1198,"line_end":1198,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1972},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":887265,"byte_end":887269,"line_start":1207,"line_end":1207,"column_start":12,"column_end":16},"name":"name","qualname":"<Attribute<R>>::name","value":"pub fn name(&Self) -> constants::DwAt","parent":null,"children":[],"decl_id":null,"docs":" Get this attribute's name.\n","sig":null,"attributes":[{"value":"/ Get this attribute's name.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":887223,"byte_end":887253,"line_start":1206,"line_end":1206,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1973},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":887374,"byte_end":887383,"line_start":1212,"line_end":1212,"column_start":12,"column_end":21},"name":"raw_value","qualname":"<Attribute<R>>::raw_value","value":"pub fn raw_value(&Self) -> AttributeValue<R>","parent":null,"children":[],"decl_id":null,"docs":" Get this attribute's raw value.\n","sig":null,"attributes":[{"value":"/ Get this attribute's raw value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":887327,"byte_end":887362,"line_start":1211,"line_end":1211,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1974},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":887952,"byte_end":887957,"line_start":1226,"line_end":1226,"column_start":12,"column_end":17},"name":"value","qualname":"<Attribute<R>>::value","value":"pub fn value(&Self) -> AttributeValue<R>","parent":null,"children":[],"decl_id":null,"docs":" Get this attribute's normalized value.","sig":null,"attributes":[{"value":"/ Get this attribute's normalized value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":887452,"byte_end":887494,"line_start":1216,"line_end":1216,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":887499,"byte_end":887502,"line_start":1217,"line_end":1217,"column_start":5,"column_end":8}},{"value":"/ Attribute values can potentially be encoded in multiple equivalent forms,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":887507,"byte_end":887584,"line_start":1218,"line_end":1218,"column_start":5,"column_end":82}},{"value":"/ and may have special meaning depending on the attribute name.  This method","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":887589,"byte_end":887667,"line_start":1219,"line_end":1219,"column_start":5,"column_end":83}},{"value":"/ converts the attribute value to a normalized form based on the attribute","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":887672,"byte_end":887748,"line_start":1220,"line_end":1220,"column_start":5,"column_end":81}},{"value":"/ name.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":887753,"byte_end":887762,"line_start":1221,"line_end":1221,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":887767,"byte_end":887770,"line_start":1222,"line_end":1222,"column_start":5,"column_end":8}},{"value":"/ See \"Table 7.5: Attribute encodings\" and \"Table 7.6: Attribute form encodings\".","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":887775,"byte_end":887858,"line_start":1223,"line_end":1223,"column_start":5,"column_end":88}},{"value":"allow(clippy :: cyclomatic_complexity)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":887863,"byte_end":887902,"line_start":1224,"line_end":1224,"column_start":5,"column_end":44}},{"value":"allow(clippy :: match_same_arms)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":887907,"byte_end":887940,"line_start":1225,"line_end":1225,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1991},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":906614,"byte_end":906622,"line_start":1806,"line_end":1806,"column_start":12,"column_end":20},"name":"u8_value","qualname":"<Attribute<R>>::u8_value","value":"pub fn u8_value(&Self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to a u8.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to a u8.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":906538,"byte_end":906588,"line_start":1804,"line_end":1804,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":906593,"byte_end":906602,"line_start":1805,"line_end":1805,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1992},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":906764,"byte_end":906773,"line_start":1812,"line_end":1812,"column_start":12,"column_end":21},"name":"u16_value","qualname":"<Attribute<R>>::u16_value","value":"pub fn u16_value(&Self) -> Option<u16>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to a u16.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to a u16.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":906687,"byte_end":906738,"line_start":1810,"line_end":1810,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":906743,"byte_end":906752,"line_start":1811,"line_end":1811,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1993},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":906931,"byte_end":906942,"line_start":1818,"line_end":1818,"column_start":12,"column_end":23},"name":"udata_value","qualname":"<Attribute<R>>::udata_value","value":"pub fn udata_value(&Self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to an unsigned integer.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to an unsigned integer.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":906840,"byte_end":906905,"line_start":1816,"line_end":1816,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":906910,"byte_end":906919,"line_start":1817,"line_end":1817,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1994},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":907099,"byte_end":907110,"line_start":1824,"line_end":1824,"column_start":12,"column_end":23},"name":"sdata_value","qualname":"<Attribute<R>>::sdata_value","value":"pub fn sdata_value(&Self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to a signed integer.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to a signed integer.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":907011,"byte_end":907073,"line_start":1822,"line_end":1822,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":907078,"byte_end":907087,"line_start":1823,"line_end":1823,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1995},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":907260,"byte_end":907272,"line_start":1830,"line_end":1830,"column_start":12,"column_end":24},"name":"offset_value","qualname":"<Attribute<R>>::offset_value","value":"pub fn offset_value(&Self) -> Option<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to an offset.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to an offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":907179,"byte_end":907234,"line_start":1828,"line_end":1828,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":907239,"byte_end":907248,"line_start":1829,"line_end":1829,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1996},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":907657,"byte_end":907670,"line_start":1840,"line_end":1840,"column_start":12,"column_end":25},"name":"exprloc_value","qualname":"<Attribute<R>>::exprloc_value","value":"pub fn exprloc_value(&Self) -> Option<Expression<R>>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to an expression or location buffer.","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to an expression or location buffer.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":907348,"byte_end":907426,"line_start":1834,"line_end":1834,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":907431,"byte_end":907434,"line_start":1835,"line_end":1835,"column_start":5,"column_end":8}},{"value":"/ Expressions and locations may be `DW_FORM_block*` or `DW_FORM_exprloc`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":907439,"byte_end":907514,"line_start":1836,"line_end":1836,"column_start":5,"column_end":80}},{"value":"/ The standard doesn't mention `DW_FORM_block*` as a possible form, but","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":907519,"byte_end":907592,"line_start":1837,"line_end":1837,"column_start":5,"column_end":78}},{"value":"/ it is encountered in practice.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":907597,"byte_end":907631,"line_start":1838,"line_end":1838,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":907636,"byte_end":907645,"line_start":1839,"line_end":1839,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1997},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":908244,"byte_end":908256,"line_start":1854,"line_end":1854,"column_start":12,"column_end":24},"name":"string_value","qualname":"<Attribute<R>>::string_value","value":"pub fn string_value(&Self, &DebugStr<R>) -> Option<R>","parent":null,"children":[],"decl_id":null,"docs":" Try to return this attribute's value as a string slice.","sig":null,"attributes":[{"value":"/ Try to return this attribute's value as a string slice.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":907751,"byte_end":907810,"line_start":1844,"line_end":1844,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":907815,"byte_end":907818,"line_start":1845,"line_end":1845,"column_start":5,"column_end":8}},{"value":"/ If this attribute's value is either an inline `DW_FORM_string` string,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":907823,"byte_end":907897,"line_start":1846,"line_end":1846,"column_start":5,"column_end":79}},{"value":"/ or a `DW_FORM_strp` reference to an offset into the `.debug_str`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":907902,"byte_end":907970,"line_start":1847,"line_end":1847,"column_start":5,"column_end":73}},{"value":"/ section, return the attribute's string value as `Some`. Other attribute","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":907975,"byte_end":908050,"line_start":1848,"line_end":1848,"column_start":5,"column_end":80}},{"value":"/ value forms are returned as `None`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":908055,"byte_end":908094,"line_start":1849,"line_end":1849,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":908099,"byte_end":908102,"line_start":1850,"line_end":1850,"column_start":5,"column_end":8}},{"value":"/ Warning: this function does not handle all possible string forms.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":908107,"byte_end":908176,"line_start":1851,"line_end":1851,"column_start":5,"column_end":74}},{"value":"/ Use `Dwarf::attr_string` instead.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":908181,"byte_end":908218,"line_start":1852,"line_end":1852,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":908223,"byte_end":908232,"line_start":1853,"line_end":1853,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1998},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":908940,"byte_end":908956,"line_start":1869,"line_end":1869,"column_start":12,"column_end":28},"name":"string_value_sup","qualname":"<Attribute<R>>::string_value_sup","value":"pub fn string_value_sup(&Self, &DebugStr<R>, Option<&DebugStr<R>>)\n-> Option<R>","parent":null,"children":[],"decl_id":null,"docs":" Try to return this attribute's value as a string slice.","sig":null,"attributes":[{"value":"/ Try to return this attribute's value as a string slice.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":908358,"byte_end":908417,"line_start":1858,"line_end":1858,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":908422,"byte_end":908425,"line_start":1859,"line_end":1859,"column_start":5,"column_end":8}},{"value":"/ If this attribute's value is either an inline `DW_FORM_string` string,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":908430,"byte_end":908504,"line_start":1860,"line_end":1860,"column_start":5,"column_end":79}},{"value":"/ or a `DW_FORM_strp` reference to an offset into the `.debug_str`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":908509,"byte_end":908577,"line_start":1861,"line_end":1861,"column_start":5,"column_end":73}},{"value":"/ section, or a `DW_FORM_strp_sup` reference to an offset into a supplementary","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":908582,"byte_end":908662,"line_start":1862,"line_end":1862,"column_start":5,"column_end":85}},{"value":"/ object file, return the attribute's string value as `Some`. Other attribute","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":908667,"byte_end":908746,"line_start":1863,"line_end":1863,"column_start":5,"column_end":84}},{"value":"/ value forms are returned as `None`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":908751,"byte_end":908790,"line_start":1864,"line_end":1864,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":908795,"byte_end":908798,"line_start":1865,"line_end":1865,"column_start":5,"column_end":8}},{"value":"/ Warning: this function does not handle all possible string forms.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":908803,"byte_end":908872,"line_start":1866,"line_end":1866,"column_start":5,"column_end":74}},{"value":"/ Use `Dwarf::attr_string` instead.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":908877,"byte_end":908914,"line_start":1867,"line_end":1867,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":908919,"byte_end":908928,"line_start":1868,"line_end":1868,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2002},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":909317,"byte_end":909325,"line_start":1884,"line_end":1884,"column_start":12,"column_end":20},"name":"u8_value","qualname":"<AttributeValue<R, Offset>>::u8_value","value":"pub fn u8_value(&Self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to a u8.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to a u8.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":909255,"byte_end":909305,"line_start":1883,"line_end":1883,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2003},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":909597,"byte_end":909606,"line_start":1894,"line_end":1894,"column_start":12,"column_end":21},"name":"u16_value","qualname":"<AttributeValue<R, Offset>>::u16_value","value":"pub fn u16_value(&Self) -> Option<u16>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to a u16.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to a u16.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":909534,"byte_end":909585,"line_start":1893,"line_end":1893,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2004},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":909895,"byte_end":909906,"line_start":1904,"line_end":1904,"column_start":12,"column_end":23},"name":"udata_value","qualname":"<AttributeValue<R, Offset>>::udata_value","value":"pub fn udata_value(&Self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to an unsigned integer.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to an unsigned integer.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":909818,"byte_end":909883,"line_start":1903,"line_end":1903,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2005},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":910589,"byte_end":910600,"line_start":1923,"line_end":1923,"column_start":12,"column_end":23},"name":"sdata_value","qualname":"<AttributeValue<R, Offset>>::sdata_value","value":"pub fn sdata_value(&Self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to a signed integer.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to a signed integer.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":910515,"byte_end":910577,"line_start":1922,"line_end":1922,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2006},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":911325,"byte_end":911337,"line_start":1942,"line_end":1942,"column_start":12,"column_end":24},"name":"offset_value","qualname":"<AttributeValue<R, Offset>>::offset_value","value":"pub fn offset_value(&Self) -> Option<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to an offset.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to an offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":911258,"byte_end":911313,"line_start":1941,"line_end":1941,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2007},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":911933,"byte_end":911946,"line_start":1957,"line_end":1957,"column_start":12,"column_end":25},"name":"exprloc_value","qualname":"<AttributeValue<R, Offset>>::exprloc_value","value":"pub fn exprloc_value(&Self) -> Option<Expression<R>>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to an expression or location buffer.","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to an expression or location buffer.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":911638,"byte_end":911716,"line_start":1952,"line_end":1952,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":911721,"byte_end":911724,"line_start":1953,"line_end":1953,"column_start":5,"column_end":8}},{"value":"/ Expressions and locations may be `DW_FORM_block*` or `DW_FORM_exprloc`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":911729,"byte_end":911804,"line_start":1954,"line_end":1954,"column_start":5,"column_end":80}},{"value":"/ The standard doesn't mention `DW_FORM_block*` as a possible form, but","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":911809,"byte_end":911882,"line_start":1955,"line_end":1955,"column_start":5,"column_end":78}},{"value":"/ it is encountered in practice.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":911887,"byte_end":911921,"line_start":1956,"line_end":1956,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2008},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":912675,"byte_end":912687,"line_start":1974,"line_end":1974,"column_start":12,"column_end":24},"name":"string_value","qualname":"<AttributeValue<R, Offset>>::string_value","value":"pub fn string_value(&Self, &DebugStr<R>) -> Option<R>","parent":null,"children":[],"decl_id":null,"docs":" Try to return this attribute's value as a string slice.","sig":null,"attributes":[{"value":"/ Try to return this attribute's value as a string slice.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":912196,"byte_end":912255,"line_start":1965,"line_end":1965,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":912260,"byte_end":912263,"line_start":1966,"line_end":1966,"column_start":5,"column_end":8}},{"value":"/ If this attribute's value is either an inline `DW_FORM_string` string,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":912268,"byte_end":912342,"line_start":1967,"line_end":1967,"column_start":5,"column_end":79}},{"value":"/ or a `DW_FORM_strp` reference to an offset into the `.debug_str`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":912347,"byte_end":912415,"line_start":1968,"line_end":1968,"column_start":5,"column_end":73}},{"value":"/ section, return the attribute's string value as `Some`. Other attribute","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":912420,"byte_end":912495,"line_start":1969,"line_end":1969,"column_start":5,"column_end":80}},{"value":"/ value forms are returned as `None`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":912500,"byte_end":912539,"line_start":1970,"line_end":1970,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":912544,"byte_end":912547,"line_start":1971,"line_end":1971,"column_start":5,"column_end":8}},{"value":"/ Warning: this function does not handle all possible string forms.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":912552,"byte_end":912621,"line_start":1972,"line_end":1972,"column_start":5,"column_end":74}},{"value":"/ Use `Dwarf::attr_string` instead.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":912626,"byte_end":912663,"line_start":1973,"line_end":1973,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2009},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":913524,"byte_end":913540,"line_start":1992,"line_end":1992,"column_start":12,"column_end":28},"name":"string_value_sup","qualname":"<AttributeValue<R, Offset>>::string_value_sup","value":"pub fn string_value_sup(&Self, &DebugStr<R>, Option<&DebugStr<R>>)\n-> Option<R>","parent":null,"children":[],"decl_id":null,"docs":" Try to return this attribute's value as a string slice.","sig":null,"attributes":[{"value":"/ Try to return this attribute's value as a string slice.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":912956,"byte_end":913015,"line_start":1982,"line_end":1982,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":913020,"byte_end":913023,"line_start":1983,"line_end":1983,"column_start":5,"column_end":8}},{"value":"/ If this attribute's value is either an inline `DW_FORM_string` string,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":913028,"byte_end":913102,"line_start":1984,"line_end":1984,"column_start":5,"column_end":79}},{"value":"/ or a `DW_FORM_strp` reference to an offset into the `.debug_str`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":913107,"byte_end":913175,"line_start":1985,"line_end":1985,"column_start":5,"column_end":73}},{"value":"/ section, or a `DW_FORM_strp_sup` reference to an offset into a supplementary","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":913180,"byte_end":913260,"line_start":1986,"line_end":1986,"column_start":5,"column_end":85}},{"value":"/ object file, return the attribute's string value as `Some`. Other attribute","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":913265,"byte_end":913344,"line_start":1987,"line_end":1987,"column_start":5,"column_end":84}},{"value":"/ value forms are returned as `None`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":913349,"byte_end":913388,"line_start":1988,"line_end":1988,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":913393,"byte_end":913396,"line_start":1989,"line_end":1989,"column_start":5,"column_end":8}},{"value":"/ Warning: this function does not handle all possible string forms.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":913401,"byte_end":913470,"line_start":1990,"line_end":1990,"column_start":5,"column_end":74}},{"value":"/ Use `Dwarf::attr_string` instead.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":913475,"byte_end":913512,"line_start":1991,"line_end":1991,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":8010},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":925938,"byte_end":925947,"line_start":2284,"line_end":2284,"column_start":12,"column_end":21},"name":"AttrsIter","qualname":"::read::unit::AttrsIter","value":"AttrsIter {  }","parent":null,"children":[{"krate":0,"index":8015},{"krate":0,"index":8016},{"krate":0,"index":8017}],"decl_id":null,"docs":" An iterator over a particular entry's attributes.","sig":null,"attributes":[{"value":"/ An iterator over a particular entry's attributes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":925602,"byte_end":925655,"line_start":2275,"line_end":2275,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":925656,"byte_end":925659,"line_start":2276,"line_end":2276,"column_start":1,"column_end":4}},{"value":"/ See [the documentation for","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":925660,"byte_end":925690,"line_start":2277,"line_end":2277,"column_start":1,"column_end":31}},{"value":"/ `DebuggingInformationEntry::attrs()`](./struct.DebuggingInformationEntry.html#method.attrs)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":925691,"byte_end":925786,"line_start":2278,"line_end":2278,"column_start":1,"column_end":96}},{"value":"/ for details.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":925787,"byte_end":925803,"line_start":2279,"line_end":2279,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":925804,"byte_end":925807,"line_start":2280,"line_end":2280,"column_start":1,"column_end":4}},{"value":"/ Can be [used with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":925808,"byte_end":925829,"line_start":2281,"line_end":2281,"column_start":1,"column_end":22}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":925830,"byte_end":925896,"line_start":2282,"line_end":2282,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2028},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":926523,"byte_end":926527,"line_start":2298,"line_end":2298,"column_start":12,"column_end":16},"name":"next","qualname":"<AttrsIter>::next","value":"pub fn next(&mut Self) -> Result<Option<Attribute<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator and return the next attribute.","sig":null,"attributes":[{"value":"/ Advance the iterator and return the next attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":926201,"byte_end":926256,"line_start":2291,"line_end":2291,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":926261,"byte_end":926264,"line_start":2292,"line_end":2292,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when iteration is finished. If an error","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":926269,"byte_end":926327,"line_start":2293,"line_end":2293,"column_start":5,"column_end":63}},{"value":"/ occurs while parsing the next attribute, then this error","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":926332,"byte_end":926392,"line_start":2294,"line_end":2294,"column_start":5,"column_end":65}},{"value":"/ is returned, and all subsequent calls return `None`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":926397,"byte_end":926453,"line_start":2295,"line_end":2295,"column_start":5,"column_end":61}},{"value":"allow(clippy :: inline_always)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":926458,"byte_end":926489,"line_start":2296,"line_end":2296,"column_start":5,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":926494,"byte_end":926511,"line_start":2297,"line_end":2297,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":8035},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930278,"byte_end":930288,"line_start":2397,"line_end":2397,"column_start":12,"column_end":22},"name":"EntriesRaw","qualname":"::read::unit::EntriesRaw","value":"EntriesRaw {  }","parent":null,"children":[{"krate":0,"index":8039},{"krate":0,"index":8040},{"krate":0,"index":8041},{"krate":0,"index":8042}],"decl_id":null,"docs":" A raw reader of the data that defines the Debugging Information Entries.","sig":null,"attributes":[{"value":"/ A raw reader of the data that defines the Debugging Information Entries.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":927969,"byte_end":928045,"line_start":2342,"line_end":2342,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":928046,"byte_end":928049,"line_start":2343,"line_end":2343,"column_start":1,"column_end":4}},{"value":"/ `EntriesRaw` provides primitives to read the components of Debugging Information","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":928050,"byte_end":928134,"line_start":2344,"line_end":2344,"column_start":1,"column_end":85}},{"value":"/ Entries (DIEs). A DIE consists of an abbreviation code (read with `read_abbreviation`)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":928135,"byte_end":928225,"line_start":2345,"line_end":2345,"column_start":1,"column_end":91}},{"value":"/ followed by a number of attributes (read with `read_attribute`).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":928226,"byte_end":928294,"line_start":2346,"line_end":2346,"column_start":1,"column_end":69}},{"value":"/ The user must provide the control flow to read these correctly.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":928295,"byte_end":928362,"line_start":2347,"line_end":2347,"column_start":1,"column_end":68}},{"value":"/ In particular, all attributes must always be read before reading another","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":928363,"byte_end":928439,"line_start":2348,"line_end":2348,"column_start":1,"column_end":77}},{"value":"/ abbreviation code.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":928440,"byte_end":928462,"line_start":2349,"line_end":2349,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":928463,"byte_end":928466,"line_start":2350,"line_end":2350,"column_start":1,"column_end":4}},{"value":"/ `EntriesRaw` lacks some features of `EntriesCursor`, such as the ability to skip","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":928467,"byte_end":928551,"line_start":2351,"line_end":2351,"column_start":1,"column_end":85}},{"value":"/ to the next sibling DIE. However, this also allows it to optimize better, since it","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":928552,"byte_end":928638,"line_start":2352,"line_end":2352,"column_start":1,"column_end":87}},{"value":"/ does not need to perform the extra bookkeeping required to support these features,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":928639,"byte_end":928725,"line_start":2353,"line_end":2353,"column_start":1,"column_end":87}},{"value":"/ and thus it is suitable for cases where performance is important.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":928726,"byte_end":928795,"line_start":2354,"line_end":2354,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":928796,"byte_end":928799,"line_start":2355,"line_end":2355,"column_start":1,"column_end":4}},{"value":"/ ## Example Usage","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":928800,"byte_end":928820,"line_start":2356,"line_end":2356,"column_start":1,"column_end":21}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":928821,"byte_end":928839,"line_start":2357,"line_end":2357,"column_start":1,"column_end":19}},{"value":"/ # fn example() -> Result<(), gimli::Error> {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":928840,"byte_end":928888,"line_start":2358,"line_end":2358,"column_start":1,"column_end":49}},{"value":"/ # let debug_info = gimli::DebugInfo::new(&[], gimli::LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":928889,"byte_end":928960,"line_start":2359,"line_end":2359,"column_start":1,"column_end":72}},{"value":"/ # let get_some_unit = || debug_info.units().next().unwrap().unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":928961,"byte_end":929034,"line_start":2360,"line_end":2360,"column_start":1,"column_end":74}},{"value":"/ let unit = get_some_unit();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929035,"byte_end":929066,"line_start":2361,"line_end":2361,"column_start":1,"column_end":32}},{"value":"/ # let debug_abbrev = gimli::DebugAbbrev::new(&[], gimli::LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929067,"byte_end":929142,"line_start":2362,"line_end":2362,"column_start":1,"column_end":76}},{"value":"/ # let get_abbrevs_for_unit = |_| unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929143,"byte_end":929223,"line_start":2363,"line_end":2363,"column_start":1,"column_end":81}},{"value":"/ let abbrevs = get_abbrevs_for_unit(&unit);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929224,"byte_end":929270,"line_start":2364,"line_end":2364,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929271,"byte_end":929274,"line_start":2365,"line_end":2365,"column_start":1,"column_end":4}},{"value":"/ let mut entries = unit.entries_raw(&abbrevs, None)?;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929275,"byte_end":929331,"line_start":2366,"line_end":2366,"column_start":1,"column_end":57}},{"value":"/ while !entries.is_empty() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929332,"byte_end":929363,"line_start":2367,"line_end":2367,"column_start":1,"column_end":32}},{"value":"/     let abbrev = if let Some(abbrev) = entries.read_abbreviation()? {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929364,"byte_end":929437,"line_start":2368,"line_end":2368,"column_start":1,"column_end":74}},{"value":"/         abbrev","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929438,"byte_end":929456,"line_start":2369,"line_end":2369,"column_start":1,"column_end":19}},{"value":"/     } else {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929457,"byte_end":929473,"line_start":2370,"line_end":2370,"column_start":1,"column_end":17}},{"value":"/         // Null entry with no attributes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929474,"byte_end":929519,"line_start":2371,"line_end":2371,"column_start":1,"column_end":46}},{"value":"/         continue","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929520,"byte_end":929540,"line_start":2372,"line_end":2372,"column_start":1,"column_end":21}},{"value":"/     };","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929541,"byte_end":929551,"line_start":2373,"line_end":2373,"column_start":1,"column_end":11}},{"value":"/     match abbrev.tag() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929552,"byte_end":929580,"line_start":2374,"line_end":2374,"column_start":1,"column_end":29}},{"value":"/         gimli::DW_TAG_subprogram => {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929581,"byte_end":929622,"line_start":2375,"line_end":2375,"column_start":1,"column_end":42}},{"value":"/             // Loop over attributes for DIEs we care about.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929623,"byte_end":929686,"line_start":2376,"line_end":2376,"column_start":1,"column_end":64}},{"value":"/             for spec in abbrev.attributes() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929687,"byte_end":929736,"line_start":2377,"line_end":2377,"column_start":1,"column_end":50}},{"value":"/                 let attr = entries.read_attribute(*spec)?;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929737,"byte_end":929799,"line_start":2378,"line_end":2378,"column_start":1,"column_end":63}},{"value":"/                 match attr.name() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929800,"byte_end":929839,"line_start":2379,"line_end":2379,"column_start":1,"column_end":40}},{"value":"/                     // Handle attributes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929840,"byte_end":929885,"line_start":2380,"line_end":2380,"column_start":1,"column_end":46}},{"value":"/                     _ => {}","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929886,"byte_end":929917,"line_start":2381,"line_end":2381,"column_start":1,"column_end":32}},{"value":"/                 }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929918,"byte_end":929939,"line_start":2382,"line_end":2382,"column_start":1,"column_end":22}},{"value":"/             }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929940,"byte_end":929957,"line_start":2383,"line_end":2383,"column_start":1,"column_end":18}},{"value":"/         }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929958,"byte_end":929971,"line_start":2384,"line_end":2384,"column_start":1,"column_end":14}},{"value":"/         _ => {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929972,"byte_end":929990,"line_start":2385,"line_end":2385,"column_start":1,"column_end":19}},{"value":"/             // Skip attributes for DIEs we don't care about.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":929991,"byte_end":930055,"line_start":2386,"line_end":2386,"column_start":1,"column_end":65}},{"value":"/             for spec in abbrev.attributes() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930056,"byte_end":930105,"line_start":2387,"line_end":2387,"column_start":1,"column_end":50}},{"value":"/                 entries.read_attribute(*spec)?;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930106,"byte_end":930157,"line_start":2388,"line_end":2388,"column_start":1,"column_end":52}},{"value":"/             }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930158,"byte_end":930175,"line_start":2389,"line_end":2389,"column_start":1,"column_end":18}},{"value":"/         }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930176,"byte_end":930189,"line_start":2390,"line_end":2390,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930190,"byte_end":930199,"line_start":2391,"line_end":2391,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930200,"byte_end":930205,"line_start":2392,"line_end":2392,"column_start":1,"column_end":6}},{"value":"/ # unreachable!()","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930206,"byte_end":930226,"line_start":2393,"line_end":2393,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930227,"byte_end":930234,"line_start":2394,"line_end":2394,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930235,"byte_end":930242,"line_start":2395,"line_end":2395,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2041},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930577,"byte_end":930585,"line_start":2410,"line_end":2410,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<EntriesRaw>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if there is no more input.\n","sig":null,"attributes":[{"value":"/ Return true if there is no more input.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930509,"byte_end":930551,"line_start":2408,"line_end":2408,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930556,"byte_end":930565,"line_start":2409,"line_end":2409,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2042},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930842,"byte_end":930853,"line_start":2418,"line_end":2418,"column_start":12,"column_end":23},"name":"next_offset","qualname":"<EntriesRaw>::next_offset","value":"pub fn next_offset(&Self) -> UnitOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Return the unit offset at which the reader will read next.","sig":null,"attributes":[{"value":"/ Return the unit offset at which the reader will read next.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930644,"byte_end":930706,"line_start":2414,"line_end":2414,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930711,"byte_end":930714,"line_start":2415,"line_end":2415,"column_start":5,"column_end":8}},{"value":"/ If you want the offset of the next entry, then this must be called prior to reading","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930719,"byte_end":930806,"line_start":2416,"line_end":2416,"column_start":5,"column_end":92}},{"value":"/ the next entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930811,"byte_end":930830,"line_start":2417,"line_end":2417,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2043},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":931226,"byte_end":931236,"line_start":2427,"line_end":2427,"column_start":12,"column_end":22},"name":"next_depth","qualname":"<EntriesRaw>::next_depth","value":"pub fn next_depth(&Self) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Return the depth of the next entry.","sig":null,"attributes":[{"value":"/ Return the depth of the next entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930992,"byte_end":931031,"line_start":2422,"line_end":2422,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":931036,"byte_end":931039,"line_start":2423,"line_end":2423,"column_start":5,"column_end":8}},{"value":"/ This depth is updated when `read_abbreviation` is called, and is updated","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":931044,"byte_end":931120,"line_start":2424,"line_end":2424,"column_start":5,"column_end":81}},{"value":"/ based on null entries and the `has_children` field in the abbreviation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":931125,"byte_end":931200,"line_start":2425,"line_end":2425,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":931205,"byte_end":931214,"line_start":2426,"line_end":2426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2044},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":931438,"byte_end":931455,"line_start":2435,"line_end":2435,"column_start":12,"column_end":29},"name":"read_abbreviation","qualname":"<EntriesRaw>::read_abbreviation","value":"pub fn read_abbreviation(&mut Self) -> Result<Option<&'abbrev Abbreviation>>","parent":null,"children":[],"decl_id":null,"docs":" Read an abbreviation code and lookup the corresponding `Abbreviation`.","sig":null,"attributes":[{"value":"/ Read an abbreviation code and lookup the corresponding `Abbreviation`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":931285,"byte_end":931359,"line_start":2431,"line_end":2431,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":931364,"byte_end":931367,"line_start":2432,"line_end":2432,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(None)` for null entries.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":931372,"byte_end":931412,"line_start":2433,"line_end":2433,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":931417,"byte_end":931426,"line_start":2434,"line_end":2434,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2045},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":931932,"byte_end":931946,"line_start":2453,"line_end":2453,"column_start":12,"column_end":26},"name":"read_attribute","qualname":"<EntriesRaw>::read_attribute","value":"pub fn read_attribute(&mut Self, AttributeSpecification)\n-> Result<Attribute<R>>","parent":null,"children":[],"decl_id":null,"docs":" Read an attribute.\n","sig":null,"attributes":[{"value":"/ Read an attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":931884,"byte_end":931906,"line_start":2451,"line_end":2451,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":931911,"byte_end":931920,"line_start":2452,"line_end":2452,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":8053},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":932931,"byte_end":932944,"line_start":2472,"line_end":2472,"column_start":12,"column_end":25},"name":"EntriesCursor","qualname":"::read::unit::EntriesCursor","value":"EntriesCursor {  }","parent":null,"children":[{"krate":0,"index":8057},{"krate":0,"index":8058},{"krate":0,"index":8059},{"krate":0,"index":8060},{"krate":0,"index":8061}],"decl_id":null,"docs":" A cursor into the Debugging Information Entries tree for a compilation unit.","sig":null,"attributes":[{"value":"/ A cursor into the Debugging Information Entries tree for a compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":932092,"byte_end":932172,"line_start":2458,"line_end":2458,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":932173,"byte_end":932176,"line_start":2459,"line_end":2459,"column_start":1,"column_end":4}},{"value":"/ The `EntriesCursor` can traverse the DIE tree in DFS order using `next_dfs()`,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":932177,"byte_end":932259,"line_start":2460,"line_end":2460,"column_start":1,"column_end":83}},{"value":"/ or skip to the next sibling of the entry the cursor is currently pointing to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":932260,"byte_end":932340,"line_start":2461,"line_end":2461,"column_start":1,"column_end":81}},{"value":"/ using `next_sibling()`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":932341,"byte_end":932368,"line_start":2462,"line_end":2462,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":932369,"byte_end":932372,"line_start":2463,"line_end":2463,"column_start":1,"column_end":4}},{"value":"/ It is also possible to traverse the DIE tree at a lower abstraction level","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":932373,"byte_end":932450,"line_start":2464,"line_end":2464,"column_start":1,"column_end":78}},{"value":"/ using `next_entry()`. This method does not skip over null entries, or provide","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":932451,"byte_end":932532,"line_start":2465,"line_end":2465,"column_start":1,"column_end":82}},{"value":"/ any indication of the current tree depth. In this case, you must use `current()`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":932533,"byte_end":932617,"line_start":2466,"line_end":2466,"column_start":1,"column_end":85}},{"value":"/ to obtain the current entry, and `current().has_children()` to determine if","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":932618,"byte_end":932697,"line_start":2467,"line_end":2467,"column_start":1,"column_end":80}},{"value":"/ the entry following the current entry will be a sibling or child. `current()`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":932698,"byte_end":932779,"line_start":2468,"line_end":2468,"column_start":1,"column_end":82}},{"value":"/ will return `None` if the current entry is a null entry, which signifies the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":932780,"byte_end":932860,"line_start":2469,"line_end":2469,"column_start":1,"column_end":81}},{"value":"/ end of the current tree depth.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":932861,"byte_end":932895,"line_start":2470,"line_end":2470,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2050},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":933481,"byte_end":933488,"line_start":2489,"line_end":2489,"column_start":12,"column_end":19},"name":"current","qualname":"<EntriesCursor>::current","value":"pub fn current(&Self) -> Option<&DebuggingInformationEntry>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the entry that the cursor is currently pointing to.","sig":null,"attributes":[{"value":"/ Get a reference to the entry that the cursor is currently pointing to.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":933248,"byte_end":933322,"line_start":2484,"line_end":2484,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":933327,"byte_end":933330,"line_start":2485,"line_end":2485,"column_start":5,"column_end":8}},{"value":"/ If the cursor is not pointing at an entry, or if the current entry is a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":933335,"byte_end":933410,"line_start":2486,"line_end":2486,"column_start":5,"column_end":80}},{"value":"/ null entry, then `None` is returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":933415,"byte_end":933455,"line_start":2487,"line_end":2487,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":933460,"byte_end":933469,"line_start":2488,"line_end":2488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2051},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":933808,"byte_end":933818,"line_start":2497,"line_end":2497,"column_start":12,"column_end":22},"name":"next_entry","qualname":"<EntriesCursor>::next_entry","value":"pub fn next_entry(&mut Self) -> Result<Option<()>>","parent":null,"children":[],"decl_id":null,"docs":" Move the cursor to the next DIE in the tree.","sig":null,"attributes":[{"value":"/ Move the cursor to the next DIE in the tree.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":933603,"byte_end":933651,"line_start":2493,"line_end":2493,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":933656,"byte_end":933659,"line_start":2494,"line_end":2494,"column_start":5,"column_end":8}},{"value":"/ Returns `Some` if there is a next entry, even if this entry is null.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":933664,"byte_end":933736,"line_start":2495,"line_end":2495,"column_start":5,"column_end":77}},{"value":"/ If there is no next entry, then `None` is returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":933741,"byte_end":933796,"line_start":2496,"line_end":2496,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2052},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938817,"byte_end":938825,"line_start":2646,"line_end":2646,"column_start":12,"column_end":20},"name":"next_dfs","qualname":"<EntriesCursor>::next_dfs","value":"pub fn next_dfs(&mut Self)\n-> Result<Option<(isize, &DebuggingInformationEntry)>>","parent":null,"children":[],"decl_id":null,"docs":" Move the cursor to the next DIE in the tree in DFS order.","sig":null,"attributes":[{"value":"/ Move the cursor to the next DIE in the tree in DFS order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":934762,"byte_end":934823,"line_start":2528,"line_end":2528,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":934828,"byte_end":934831,"line_start":2529,"line_end":2529,"column_start":5,"column_end":8}},{"value":"/ Upon successful movement of the cursor, return the delta traversal","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":934836,"byte_end":934906,"line_start":2530,"line_end":2530,"column_start":5,"column_end":75}},{"value":"/ depth and the entry:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":934911,"byte_end":934935,"line_start":2531,"line_end":2531,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":934940,"byte_end":934943,"line_start":2532,"line_end":2532,"column_start":5,"column_end":8}},{"value":"/   * If we moved down into the previous current entry's children, we get","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":934948,"byte_end":935023,"line_start":2533,"line_end":2533,"column_start":5,"column_end":80}},{"value":"/     `Some((1, entry))`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935028,"byte_end":935055,"line_start":2534,"line_end":2534,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935060,"byte_end":935063,"line_start":2535,"line_end":2535,"column_start":5,"column_end":8}},{"value":"/   * If we moved to the previous current entry's sibling, we get","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935068,"byte_end":935135,"line_start":2536,"line_end":2536,"column_start":5,"column_end":72}},{"value":"/     `Some((0, entry))`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935140,"byte_end":935167,"line_start":2537,"line_end":2537,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935172,"byte_end":935175,"line_start":2538,"line_end":2538,"column_start":5,"column_end":8}},{"value":"/   * If the previous entry does not have any siblings and we move up to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935180,"byte_end":935254,"line_start":2539,"line_end":2539,"column_start":5,"column_end":79}},{"value":"/     its parent's next sibling, then we get `Some((-1, entry))`. Note that","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935259,"byte_end":935336,"line_start":2540,"line_end":2540,"column_start":5,"column_end":82}},{"value":"/     if the parent doesn't have a next sibling, then it could go up to the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935341,"byte_end":935418,"line_start":2541,"line_end":2541,"column_start":5,"column_end":82}},{"value":"/     parent's parent's next sibling and return `Some((-2, entry))`, etc.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935423,"byte_end":935498,"line_start":2542,"line_end":2542,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935503,"byte_end":935506,"line_start":2543,"line_end":2543,"column_start":5,"column_end":8}},{"value":"/ If there is no next entry, then `None` is returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935511,"byte_end":935566,"line_start":2544,"line_end":2544,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935571,"byte_end":935574,"line_start":2545,"line_end":2545,"column_start":5,"column_end":8}},{"value":"/ Here is an example that finds the first entry in a compilation unit that","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935579,"byte_end":935655,"line_start":2546,"line_end":2546,"column_start":5,"column_end":81}},{"value":"/ does not have any children.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935660,"byte_end":935691,"line_start":2547,"line_end":2547,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935696,"byte_end":935699,"line_start":2548,"line_end":2548,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935704,"byte_end":935711,"line_start":2549,"line_end":2549,"column_start":5,"column_end":12}},{"value":"/ # use gimli::{DebugAbbrev, DebugInfo, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935716,"byte_end":935772,"line_start":2550,"line_end":2550,"column_start":5,"column_end":61}},{"value":"/ # let info_buf = [","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935777,"byte_end":935799,"line_start":2551,"line_end":2551,"column_start":5,"column_end":27}},{"value":"/ #     // Comilation unit header","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935804,"byte_end":935839,"line_start":2552,"line_end":2552,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935844,"byte_end":935849,"line_start":2553,"line_end":2553,"column_start":5,"column_end":10}},{"value":"/ #     // 32-bit unit length = 25","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935854,"byte_end":935890,"line_start":2554,"line_end":2554,"column_start":5,"column_end":41}},{"value":"/ #     0x19, 0x00, 0x00, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935895,"byte_end":935928,"line_start":2555,"line_end":2555,"column_start":5,"column_end":38}},{"value":"/ #     // Version 4","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935933,"byte_end":935955,"line_start":2556,"line_end":2556,"column_start":5,"column_end":27}},{"value":"/ #     0x04, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935960,"byte_end":935981,"line_start":2557,"line_end":2557,"column_start":5,"column_end":26}},{"value":"/ #     // debug_abbrev_offset","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":935986,"byte_end":936018,"line_start":2558,"line_end":2558,"column_start":5,"column_end":37}},{"value":"/ #     0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936023,"byte_end":936056,"line_start":2559,"line_end":2559,"column_start":5,"column_end":38}},{"value":"/ #     // Address size","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936061,"byte_end":936086,"line_start":2560,"line_end":2560,"column_start":5,"column_end":30}},{"value":"/ #     0x04,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936091,"byte_end":936106,"line_start":2561,"line_end":2561,"column_start":5,"column_end":20}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936111,"byte_end":936116,"line_start":2562,"line_end":2562,"column_start":5,"column_end":10}},{"value":"/ #     // DIEs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936121,"byte_end":936138,"line_start":2563,"line_end":2563,"column_start":5,"column_end":22}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936143,"byte_end":936148,"line_start":2564,"line_end":2564,"column_start":5,"column_end":10}},{"value":"/ #     // Abbreviation code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936153,"byte_end":936183,"line_start":2565,"line_end":2565,"column_start":5,"column_end":35}},{"value":"/ #     0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936188,"byte_end":936203,"line_start":2566,"line_end":2566,"column_start":5,"column_end":20}},{"value":"/ #     // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936208,"byte_end":936263,"line_start":2567,"line_end":2567,"column_start":5,"column_end":60}},{"value":"/ #     0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936268,"byte_end":936301,"line_start":2568,"line_end":2568,"column_start":5,"column_end":38}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936306,"byte_end":936311,"line_start":2569,"line_end":2569,"column_start":5,"column_end":10}},{"value":"/ #       // Children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936316,"byte_end":936339,"line_start":2570,"line_end":2570,"column_start":5,"column_end":28}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936344,"byte_end":936349,"line_start":2571,"line_end":2571,"column_start":5,"column_end":10}},{"value":"/ #       // Abbreviation code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936354,"byte_end":936386,"line_start":2572,"line_end":2572,"column_start":5,"column_end":37}},{"value":"/ #       0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936391,"byte_end":936408,"line_start":2573,"line_end":2573,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936413,"byte_end":936470,"line_start":2574,"line_end":2574,"column_start":5,"column_end":62}},{"value":"/ #       0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936475,"byte_end":936510,"line_start":2575,"line_end":2575,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936515,"byte_end":936520,"line_start":2576,"line_end":2576,"column_start":5,"column_end":10}},{"value":"/ #         // Children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936525,"byte_end":936550,"line_start":2577,"line_end":2577,"column_start":5,"column_end":30}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936555,"byte_end":936560,"line_start":2578,"line_end":2578,"column_start":5,"column_end":10}},{"value":"/ #         // Abbreviation code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936565,"byte_end":936599,"line_start":2579,"line_end":2579,"column_start":5,"column_end":39}},{"value":"/ #         0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936604,"byte_end":936623,"line_start":2580,"line_end":2580,"column_start":5,"column_end":24}},{"value":"/ #         // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936628,"byte_end":936687,"line_start":2581,"line_end":2581,"column_start":5,"column_end":64}},{"value":"/ #         0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936692,"byte_end":936729,"line_start":2582,"line_end":2582,"column_start":5,"column_end":42}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936734,"byte_end":936739,"line_start":2583,"line_end":2583,"column_start":5,"column_end":10}},{"value":"/ #           // Children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936744,"byte_end":936771,"line_start":2584,"line_end":2584,"column_start":5,"column_end":32}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936776,"byte_end":936781,"line_start":2585,"line_end":2585,"column_start":5,"column_end":10}},{"value":"/ #           // End of children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936786,"byte_end":936820,"line_start":2586,"line_end":2586,"column_start":5,"column_end":39}},{"value":"/ #           0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936825,"byte_end":936846,"line_start":2587,"line_end":2587,"column_start":5,"column_end":26}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936851,"byte_end":936856,"line_start":2588,"line_end":2588,"column_start":5,"column_end":10}},{"value":"/ #         // End of children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936861,"byte_end":936893,"line_start":2589,"line_end":2589,"column_start":5,"column_end":37}},{"value":"/ #         0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936898,"byte_end":936917,"line_start":2590,"line_end":2590,"column_start":5,"column_end":24}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936922,"byte_end":936927,"line_start":2591,"line_end":2591,"column_start":5,"column_end":10}},{"value":"/ #       // End of children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936932,"byte_end":936962,"line_start":2592,"line_end":2592,"column_start":5,"column_end":35}},{"value":"/ #       0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936967,"byte_end":936984,"line_start":2593,"line_end":2593,"column_start":5,"column_end":22}},{"value":"/ # ];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":936989,"byte_end":936997,"line_start":2594,"line_end":2594,"column_start":5,"column_end":13}},{"value":"/ # let debug_info = DebugInfo::new(&info_buf, LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937002,"byte_end":937065,"line_start":2595,"line_end":2595,"column_start":5,"column_end":68}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937070,"byte_end":937075,"line_start":2596,"line_end":2596,"column_start":5,"column_end":10}},{"value":"/ # let abbrev_buf = [","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937080,"byte_end":937104,"line_start":2597,"line_end":2597,"column_start":5,"column_end":29}},{"value":"/ #     // Code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937109,"byte_end":937126,"line_start":2598,"line_end":2598,"column_start":5,"column_end":22}},{"value":"/ #     0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937131,"byte_end":937146,"line_start":2599,"line_end":2599,"column_start":5,"column_end":20}},{"value":"/ #     // DW_TAG_subprogram","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937151,"byte_end":937181,"line_start":2600,"line_end":2600,"column_start":5,"column_end":35}},{"value":"/ #     0x2e,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937186,"byte_end":937201,"line_start":2601,"line_end":2601,"column_start":5,"column_end":20}},{"value":"/ #     // DW_CHILDREN_yes","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937206,"byte_end":937234,"line_start":2602,"line_end":2602,"column_start":5,"column_end":33}},{"value":"/ #     0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937239,"byte_end":937254,"line_start":2603,"line_end":2603,"column_start":5,"column_end":20}},{"value":"/ #     // Begin attributes","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937259,"byte_end":937288,"line_start":2604,"line_end":2604,"column_start":5,"column_end":34}},{"value":"/ #       // Attribute name = DW_AT_name","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937293,"byte_end":937335,"line_start":2605,"line_end":2605,"column_start":5,"column_end":47}},{"value":"/ #       0x03,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937340,"byte_end":937357,"line_start":2606,"line_end":2606,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute form = DW_FORM_string","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937362,"byte_end":937408,"line_start":2607,"line_end":2607,"column_start":5,"column_end":51}},{"value":"/ #       0x08,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937413,"byte_end":937430,"line_start":2608,"line_end":2608,"column_start":5,"column_end":22}},{"value":"/ #     // End attributes","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937435,"byte_end":937462,"line_start":2609,"line_end":2609,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937467,"byte_end":937482,"line_start":2610,"line_end":2610,"column_start":5,"column_end":20}},{"value":"/ #     0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937487,"byte_end":937502,"line_start":2611,"line_end":2611,"column_start":5,"column_end":20}},{"value":"/ #     // Null terminator","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937507,"byte_end":937535,"line_start":2612,"line_end":2612,"column_start":5,"column_end":33}},{"value":"/ #     0x00","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937540,"byte_end":937554,"line_start":2613,"line_end":2613,"column_start":5,"column_end":19}},{"value":"/ # ];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937559,"byte_end":937567,"line_start":2614,"line_end":2614,"column_start":5,"column_end":13}},{"value":"/ # let debug_abbrev = DebugAbbrev::new(&abbrev_buf, LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937572,"byte_end":937641,"line_start":2615,"line_end":2615,"column_start":5,"column_end":74}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937646,"byte_end":937651,"line_start":2616,"line_end":2616,"column_start":5,"column_end":10}},{"value":"/ # let get_some_unit = || debug_info.units().next().unwrap().unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937656,"byte_end":937729,"line_start":2617,"line_end":2617,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937734,"byte_end":937737,"line_start":2618,"line_end":2618,"column_start":5,"column_end":8}},{"value":"/ let unit = get_some_unit();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937742,"byte_end":937773,"line_start":2619,"line_end":2619,"column_start":5,"column_end":36}},{"value":"/ # let get_abbrevs_for_unit = |_| unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937778,"byte_end":937858,"line_start":2620,"line_end":2620,"column_start":5,"column_end":85}},{"value":"/ let abbrevs = get_abbrevs_for_unit(&unit);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937863,"byte_end":937909,"line_start":2621,"line_end":2621,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937914,"byte_end":937917,"line_start":2622,"line_end":2622,"column_start":5,"column_end":8}},{"value":"/ let mut first_entry_with_no_children = None;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937922,"byte_end":937970,"line_start":2623,"line_end":2623,"column_start":5,"column_end":53}},{"value":"/ let mut cursor = unit.entries(&abbrevs);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":937975,"byte_end":938019,"line_start":2624,"line_end":2624,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938024,"byte_end":938027,"line_start":2625,"line_end":2625,"column_start":5,"column_end":8}},{"value":"/ // Move the cursor to the root.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938032,"byte_end":938067,"line_start":2626,"line_end":2626,"column_start":5,"column_end":40}},{"value":"/ assert!(cursor.next_dfs().unwrap().is_some());","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938072,"byte_end":938122,"line_start":2627,"line_end":2627,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938127,"byte_end":938130,"line_start":2628,"line_end":2628,"column_start":5,"column_end":8}},{"value":"/ // Traverse the DIE tree in depth-first search order.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938135,"byte_end":938192,"line_start":2629,"line_end":2629,"column_start":5,"column_end":62}},{"value":"/ let mut depth = 0;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938197,"byte_end":938219,"line_start":2630,"line_end":2630,"column_start":5,"column_end":27}},{"value":"/ while let Some((delta_depth, current)) = cursor.next_dfs().expect(\"Should parse next dfs\") {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938224,"byte_end":938320,"line_start":2631,"line_end":2631,"column_start":5,"column_end":101}},{"value":"/     // Update depth value, and break out of the loop when we","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938325,"byte_end":938389,"line_start":2632,"line_end":2632,"column_start":5,"column_end":69}},{"value":"/     // return to the original starting position.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938394,"byte_end":938446,"line_start":2633,"line_end":2633,"column_start":5,"column_end":57}},{"value":"/     depth += delta_depth;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938451,"byte_end":938480,"line_start":2634,"line_end":2634,"column_start":5,"column_end":34}},{"value":"/     if depth <= 0 {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938485,"byte_end":938508,"line_start":2635,"line_end":2635,"column_start":5,"column_end":28}},{"value":"/         break;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938513,"byte_end":938531,"line_start":2636,"line_end":2636,"column_start":5,"column_end":23}},{"value":"/     }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938536,"byte_end":938545,"line_start":2637,"line_end":2637,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938550,"byte_end":938553,"line_start":2638,"line_end":2638,"column_start":5,"column_end":8}},{"value":"/     first_entry_with_no_children = Some(current.clone());","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938558,"byte_end":938619,"line_start":2639,"line_end":2639,"column_start":5,"column_end":66}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938624,"byte_end":938629,"line_start":2640,"line_end":2640,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938634,"byte_end":938637,"line_start":2641,"line_end":2641,"column_start":5,"column_end":8}},{"value":"/ println!(\"The first entry with no children is {:?}\",","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938642,"byte_end":938698,"line_start":2642,"line_end":2642,"column_start":5,"column_end":61}},{"value":"/          first_entry_with_no_children.unwrap());","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938703,"byte_end":938755,"line_start":2643,"line_end":2643,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938760,"byte_end":938767,"line_start":2644,"line_end":2644,"column_start":5,"column_end":12}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":938772,"byte_end":938805,"line_start":2645,"line_end":2645,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2053},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942864,"byte_end":942876,"line_start":2771,"line_end":2771,"column_start":12,"column_end":24},"name":"next_sibling","qualname":"<EntriesCursor>::next_sibling","value":"pub fn next_sibling(&mut Self) -> Result<Option<&DebuggingInformationEntry>>","parent":null,"children":[],"decl_id":null,"docs":" Move the cursor to the next sibling DIE of the current one.","sig":null,"attributes":[{"value":"/ Move the cursor to the next sibling DIE of the current one.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":939424,"byte_end":939487,"line_start":2665,"line_end":2665,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":939492,"byte_end":939495,"line_start":2666,"line_end":2666,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(Some(entry))` when the cursor has been moved to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":939500,"byte_end":939563,"line_start":2667,"line_end":2667,"column_start":5,"column_end":68}},{"value":"/ the next sibling, `Ok(None)` when there is no next sibling.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":939568,"byte_end":939631,"line_start":2668,"line_end":2668,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":939636,"byte_end":939639,"line_start":2669,"line_end":2669,"column_start":5,"column_end":8}},{"value":"/ The depth of the cursor is never changed if this method returns `Ok`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":939644,"byte_end":939717,"line_start":2670,"line_end":2670,"column_start":5,"column_end":78}},{"value":"/ Once `Ok(None)` is returned, this method will continue to return","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":939722,"byte_end":939790,"line_start":2671,"line_end":2671,"column_start":5,"column_end":73}},{"value":"/ `Ok(None)` until either `next_entry` or `next_dfs` is called.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":939795,"byte_end":939860,"line_start":2672,"line_end":2672,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":939865,"byte_end":939868,"line_start":2673,"line_end":2673,"column_start":5,"column_end":8}},{"value":"/ Here is an example that iterates over all of the direct children of the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":939873,"byte_end":939948,"line_start":2674,"line_end":2674,"column_start":5,"column_end":80}},{"value":"/ root entry:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":939953,"byte_end":939968,"line_start":2675,"line_end":2675,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":939973,"byte_end":939976,"line_start":2676,"line_end":2676,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":939981,"byte_end":939988,"line_start":2677,"line_end":2677,"column_start":5,"column_end":12}},{"value":"/ # use gimli::{DebugAbbrev, DebugInfo, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":939993,"byte_end":940049,"line_start":2678,"line_end":2678,"column_start":5,"column_end":61}},{"value":"/ # let info_buf = [","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940054,"byte_end":940076,"line_start":2679,"line_end":2679,"column_start":5,"column_end":27}},{"value":"/ #     // Comilation unit header","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940081,"byte_end":940116,"line_start":2680,"line_end":2680,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940121,"byte_end":940126,"line_start":2681,"line_end":2681,"column_start":5,"column_end":10}},{"value":"/ #     // 32-bit unit length = 25","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940131,"byte_end":940167,"line_start":2682,"line_end":2682,"column_start":5,"column_end":41}},{"value":"/ #     0x19, 0x00, 0x00, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940172,"byte_end":940205,"line_start":2683,"line_end":2683,"column_start":5,"column_end":38}},{"value":"/ #     // Version 4","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940210,"byte_end":940232,"line_start":2684,"line_end":2684,"column_start":5,"column_end":27}},{"value":"/ #     0x04, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940237,"byte_end":940258,"line_start":2685,"line_end":2685,"column_start":5,"column_end":26}},{"value":"/ #     // debug_abbrev_offset","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940263,"byte_end":940295,"line_start":2686,"line_end":2686,"column_start":5,"column_end":37}},{"value":"/ #     0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940300,"byte_end":940333,"line_start":2687,"line_end":2687,"column_start":5,"column_end":38}},{"value":"/ #     // Address size","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940338,"byte_end":940363,"line_start":2688,"line_end":2688,"column_start":5,"column_end":30}},{"value":"/ #     0x04,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940368,"byte_end":940383,"line_start":2689,"line_end":2689,"column_start":5,"column_end":20}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940388,"byte_end":940393,"line_start":2690,"line_end":2690,"column_start":5,"column_end":10}},{"value":"/ #     // DIEs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940398,"byte_end":940415,"line_start":2691,"line_end":2691,"column_start":5,"column_end":22}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940420,"byte_end":940425,"line_start":2692,"line_end":2692,"column_start":5,"column_end":10}},{"value":"/ #     // Abbreviation code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940430,"byte_end":940460,"line_start":2693,"line_end":2693,"column_start":5,"column_end":35}},{"value":"/ #     0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940465,"byte_end":940480,"line_start":2694,"line_end":2694,"column_start":5,"column_end":20}},{"value":"/ #     // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940485,"byte_end":940540,"line_start":2695,"line_end":2695,"column_start":5,"column_end":60}},{"value":"/ #     0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940545,"byte_end":940578,"line_start":2696,"line_end":2696,"column_start":5,"column_end":38}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940583,"byte_end":940588,"line_start":2697,"line_end":2697,"column_start":5,"column_end":10}},{"value":"/ #       // Children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940593,"byte_end":940616,"line_start":2698,"line_end":2698,"column_start":5,"column_end":28}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940621,"byte_end":940626,"line_start":2699,"line_end":2699,"column_start":5,"column_end":10}},{"value":"/ #       // Abbreviation code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940631,"byte_end":940663,"line_start":2700,"line_end":2700,"column_start":5,"column_end":37}},{"value":"/ #       0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940668,"byte_end":940685,"line_start":2701,"line_end":2701,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940690,"byte_end":940747,"line_start":2702,"line_end":2702,"column_start":5,"column_end":62}},{"value":"/ #       0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940752,"byte_end":940787,"line_start":2703,"line_end":2703,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940792,"byte_end":940797,"line_start":2704,"line_end":2704,"column_start":5,"column_end":10}},{"value":"/ #         // Children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940802,"byte_end":940827,"line_start":2705,"line_end":2705,"column_start":5,"column_end":30}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940832,"byte_end":940837,"line_start":2706,"line_end":2706,"column_start":5,"column_end":10}},{"value":"/ #         // Abbreviation code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940842,"byte_end":940876,"line_start":2707,"line_end":2707,"column_start":5,"column_end":39}},{"value":"/ #         0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940881,"byte_end":940900,"line_start":2708,"line_end":2708,"column_start":5,"column_end":24}},{"value":"/ #         // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940905,"byte_end":940964,"line_start":2709,"line_end":2709,"column_start":5,"column_end":64}},{"value":"/ #         0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":940969,"byte_end":941006,"line_start":2710,"line_end":2710,"column_start":5,"column_end":42}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941011,"byte_end":941016,"line_start":2711,"line_end":2711,"column_start":5,"column_end":10}},{"value":"/ #           // Children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941021,"byte_end":941048,"line_start":2712,"line_end":2712,"column_start":5,"column_end":32}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941053,"byte_end":941058,"line_start":2713,"line_end":2713,"column_start":5,"column_end":10}},{"value":"/ #           // End of children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941063,"byte_end":941097,"line_start":2714,"line_end":2714,"column_start":5,"column_end":39}},{"value":"/ #           0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941102,"byte_end":941123,"line_start":2715,"line_end":2715,"column_start":5,"column_end":26}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941128,"byte_end":941133,"line_start":2716,"line_end":2716,"column_start":5,"column_end":10}},{"value":"/ #         // End of children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941138,"byte_end":941170,"line_start":2717,"line_end":2717,"column_start":5,"column_end":37}},{"value":"/ #         0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941175,"byte_end":941194,"line_start":2718,"line_end":2718,"column_start":5,"column_end":24}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941199,"byte_end":941204,"line_start":2719,"line_end":2719,"column_start":5,"column_end":10}},{"value":"/ #       // End of children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941209,"byte_end":941239,"line_start":2720,"line_end":2720,"column_start":5,"column_end":35}},{"value":"/ #       0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941244,"byte_end":941261,"line_start":2721,"line_end":2721,"column_start":5,"column_end":22}},{"value":"/ # ];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941266,"byte_end":941274,"line_start":2722,"line_end":2722,"column_start":5,"column_end":13}},{"value":"/ # let debug_info = DebugInfo::new(&info_buf, LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941279,"byte_end":941342,"line_start":2723,"line_end":2723,"column_start":5,"column_end":68}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941347,"byte_end":941352,"line_start":2724,"line_end":2724,"column_start":5,"column_end":10}},{"value":"/ # let get_some_unit = || debug_info.units().next().unwrap().unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941357,"byte_end":941430,"line_start":2725,"line_end":2725,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941435,"byte_end":941438,"line_start":2726,"line_end":2726,"column_start":5,"column_end":8}},{"value":"/ # let abbrev_buf = [","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941443,"byte_end":941467,"line_start":2727,"line_end":2727,"column_start":5,"column_end":29}},{"value":"/ #     // Code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941472,"byte_end":941489,"line_start":2728,"line_end":2728,"column_start":5,"column_end":22}},{"value":"/ #     0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941494,"byte_end":941509,"line_start":2729,"line_end":2729,"column_start":5,"column_end":20}},{"value":"/ #     // DW_TAG_subprogram","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941514,"byte_end":941544,"line_start":2730,"line_end":2730,"column_start":5,"column_end":35}},{"value":"/ #     0x2e,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941549,"byte_end":941564,"line_start":2731,"line_end":2731,"column_start":5,"column_end":20}},{"value":"/ #     // DW_CHILDREN_yes","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941569,"byte_end":941597,"line_start":2732,"line_end":2732,"column_start":5,"column_end":33}},{"value":"/ #     0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941602,"byte_end":941617,"line_start":2733,"line_end":2733,"column_start":5,"column_end":20}},{"value":"/ #     // Begin attributes","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941622,"byte_end":941651,"line_start":2734,"line_end":2734,"column_start":5,"column_end":34}},{"value":"/ #       // Attribute name = DW_AT_name","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941656,"byte_end":941698,"line_start":2735,"line_end":2735,"column_start":5,"column_end":47}},{"value":"/ #       0x03,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941703,"byte_end":941720,"line_start":2736,"line_end":2736,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute form = DW_FORM_string","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941725,"byte_end":941771,"line_start":2737,"line_end":2737,"column_start":5,"column_end":51}},{"value":"/ #       0x08,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941776,"byte_end":941793,"line_start":2738,"line_end":2738,"column_start":5,"column_end":22}},{"value":"/ #     // End attributes","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941798,"byte_end":941825,"line_start":2739,"line_end":2739,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941830,"byte_end":941845,"line_start":2740,"line_end":2740,"column_start":5,"column_end":20}},{"value":"/ #     0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941850,"byte_end":941865,"line_start":2741,"line_end":2741,"column_start":5,"column_end":20}},{"value":"/ #     // Null terminator","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941870,"byte_end":941898,"line_start":2742,"line_end":2742,"column_start":5,"column_end":33}},{"value":"/ #     0x00","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941903,"byte_end":941917,"line_start":2743,"line_end":2743,"column_start":5,"column_end":19}},{"value":"/ # ];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941922,"byte_end":941930,"line_start":2744,"line_end":2744,"column_start":5,"column_end":13}},{"value":"/ # let debug_abbrev = DebugAbbrev::new(&abbrev_buf, LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":941935,"byte_end":942004,"line_start":2745,"line_end":2745,"column_start":5,"column_end":74}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942009,"byte_end":942014,"line_start":2746,"line_end":2746,"column_start":5,"column_end":10}},{"value":"/ let unit = get_some_unit();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942019,"byte_end":942050,"line_start":2747,"line_end":2747,"column_start":5,"column_end":36}},{"value":"/ # let get_abbrevs_for_unit = |_| unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942055,"byte_end":942135,"line_start":2748,"line_end":2748,"column_start":5,"column_end":85}},{"value":"/ let abbrevs = get_abbrevs_for_unit(&unit);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942140,"byte_end":942186,"line_start":2749,"line_end":2749,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942191,"byte_end":942194,"line_start":2750,"line_end":2750,"column_start":5,"column_end":8}},{"value":"/ let mut cursor = unit.entries(&abbrevs);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942199,"byte_end":942243,"line_start":2751,"line_end":2751,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942248,"byte_end":942251,"line_start":2752,"line_end":2752,"column_start":5,"column_end":8}},{"value":"/ // Move the cursor to the root.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942256,"byte_end":942291,"line_start":2753,"line_end":2753,"column_start":5,"column_end":40}},{"value":"/ assert!(cursor.next_dfs().unwrap().is_some());","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942296,"byte_end":942346,"line_start":2754,"line_end":2754,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942351,"byte_end":942354,"line_start":2755,"line_end":2755,"column_start":5,"column_end":8}},{"value":"/ // Move the cursor to the root's first child.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942359,"byte_end":942408,"line_start":2756,"line_end":2756,"column_start":5,"column_end":54}},{"value":"/ assert!(cursor.next_dfs().unwrap().is_some());","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942413,"byte_end":942463,"line_start":2757,"line_end":2757,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942468,"byte_end":942471,"line_start":2758,"line_end":2758,"column_start":5,"column_end":8}},{"value":"/ // Iterate the root's children.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942476,"byte_end":942511,"line_start":2759,"line_end":2759,"column_start":5,"column_end":40}},{"value":"/ loop {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942516,"byte_end":942526,"line_start":2760,"line_end":2760,"column_start":5,"column_end":15}},{"value":"/     {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942531,"byte_end":942540,"line_start":2761,"line_end":2761,"column_start":5,"column_end":14}},{"value":"/         let current = cursor.current().expect(\"Should be at an entry\");","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942545,"byte_end":942620,"line_start":2762,"line_end":2762,"column_start":5,"column_end":80}},{"value":"/         println!(\"{:?} is a child of the root\", current);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942625,"byte_end":942686,"line_start":2763,"line_end":2763,"column_start":5,"column_end":66}},{"value":"/     }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942691,"byte_end":942700,"line_start":2764,"line_end":2764,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942705,"byte_end":942708,"line_start":2765,"line_end":2765,"column_start":5,"column_end":8}},{"value":"/     if cursor.next_sibling().expect(\"Should parse next sibling\").is_none() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942713,"byte_end":942793,"line_start":2766,"line_end":2766,"column_start":5,"column_end":85}},{"value":"/         break;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942798,"byte_end":942816,"line_start":2767,"line_end":2767,"column_start":5,"column_end":23}},{"value":"/     }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942821,"byte_end":942830,"line_start":2768,"line_end":2768,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942835,"byte_end":942840,"line_start":2769,"line_end":2769,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":942845,"byte_end":942852,"line_start":2770,"line_end":2770,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":8072},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945945,"byte_end":945956,"line_start":2857,"line_end":2857,"column_start":12,"column_end":23},"name":"EntriesTree","qualname":"::read::unit::EntriesTree","value":"EntriesTree {  }","parent":null,"children":[{"krate":0,"index":8076},{"krate":0,"index":8077},{"krate":0,"index":8078},{"krate":0,"index":8079},{"krate":0,"index":8080},{"krate":0,"index":8081}],"decl_id":null,"docs":" The state information for a tree view of the Debugging Information Entries.","sig":null,"attributes":[{"value":"/ The state information for a tree view of the Debugging Information Entries.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":944432,"byte_end":944511,"line_start":2816,"line_end":2816,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":944512,"byte_end":944515,"line_start":2817,"line_end":2817,"column_start":1,"column_end":4}},{"value":"/ The `EntriesTree` can be used to recursively iterate through the DIE","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":944516,"byte_end":944588,"line_start":2818,"line_end":2818,"column_start":1,"column_end":73}},{"value":"/ tree, following the parent/child relationships. The `EntriesTree` contains","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":944589,"byte_end":944667,"line_start":2819,"line_end":2819,"column_start":1,"column_end":79}},{"value":"/ shared state for all nodes in the tree, avoiding any duplicate parsing of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":944668,"byte_end":944745,"line_start":2820,"line_end":2820,"column_start":1,"column_end":78}},{"value":"/ entries during the traversal.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":944746,"byte_end":944779,"line_start":2821,"line_end":2821,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":944780,"byte_end":944783,"line_start":2822,"line_end":2822,"column_start":1,"column_end":4}},{"value":"/ ## Example Usage","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":944784,"byte_end":944804,"line_start":2823,"line_end":2823,"column_start":1,"column_end":21}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":944805,"byte_end":944823,"line_start":2824,"line_end":2824,"column_start":1,"column_end":19}},{"value":"/ # fn example() -> Result<(), gimli::Error> {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":944824,"byte_end":944872,"line_start":2825,"line_end":2825,"column_start":1,"column_end":49}},{"value":"/ # let debug_info = gimli::DebugInfo::new(&[], gimli::LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":944873,"byte_end":944944,"line_start":2826,"line_end":2826,"column_start":1,"column_end":72}},{"value":"/ # let get_some_unit = || debug_info.units().next().unwrap().unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":944945,"byte_end":945018,"line_start":2827,"line_end":2827,"column_start":1,"column_end":74}},{"value":"/ let unit = get_some_unit();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945019,"byte_end":945050,"line_start":2828,"line_end":2828,"column_start":1,"column_end":32}},{"value":"/ # let debug_abbrev = gimli::DebugAbbrev::new(&[], gimli::LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945051,"byte_end":945126,"line_start":2829,"line_end":2829,"column_start":1,"column_end":76}},{"value":"/ # let get_abbrevs_for_unit = |_| unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945127,"byte_end":945207,"line_start":2830,"line_end":2830,"column_start":1,"column_end":81}},{"value":"/ let abbrevs = get_abbrevs_for_unit(&unit);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945208,"byte_end":945254,"line_start":2831,"line_end":2831,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945255,"byte_end":945258,"line_start":2832,"line_end":2832,"column_start":1,"column_end":4}},{"value":"/ let mut tree = unit.entries_tree(&abbrevs, None)?;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945259,"byte_end":945313,"line_start":2833,"line_end":2833,"column_start":1,"column_end":55}},{"value":"/ let root = tree.root()?;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945314,"byte_end":945342,"line_start":2834,"line_end":2834,"column_start":1,"column_end":29}},{"value":"/ process_tree(root)?;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945343,"byte_end":945367,"line_start":2835,"line_end":2835,"column_start":1,"column_end":25}},{"value":"/ # unreachable!()","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945368,"byte_end":945388,"line_start":2836,"line_end":2836,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945389,"byte_end":945396,"line_start":2837,"line_end":2837,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945397,"byte_end":945400,"line_start":2838,"line_end":2838,"column_start":1,"column_end":4}},{"value":"/ fn process_tree<R>(mut node: gimli::EntriesTreeNode<R>) -> gimli::Result<()>","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945401,"byte_end":945481,"line_start":2839,"line_end":2839,"column_start":1,"column_end":81}},{"value":"/     where R: gimli::Reader","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945482,"byte_end":945512,"line_start":2840,"line_end":2840,"column_start":1,"column_end":31}},{"value":"/ {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945513,"byte_end":945518,"line_start":2841,"line_end":2841,"column_start":1,"column_end":6}},{"value":"/     {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945519,"byte_end":945528,"line_start":2842,"line_end":2842,"column_start":1,"column_end":10}},{"value":"/         // Examine the entry attributes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945529,"byte_end":945573,"line_start":2843,"line_end":2843,"column_start":1,"column_end":45}},{"value":"/         let mut attrs = node.entry().attrs();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945574,"byte_end":945623,"line_start":2844,"line_end":2844,"column_start":1,"column_end":50}},{"value":"/         while let Some(attr) = attrs.next()? {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945624,"byte_end":945674,"line_start":2845,"line_end":2845,"column_start":1,"column_end":51}},{"value":"/         }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945675,"byte_end":945688,"line_start":2846,"line_end":2846,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945689,"byte_end":945698,"line_start":2847,"line_end":2847,"column_start":1,"column_end":10}},{"value":"/     let mut children = node.children();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945699,"byte_end":945742,"line_start":2848,"line_end":2848,"column_start":1,"column_end":44}},{"value":"/     while let Some(child) = children.next()? {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945743,"byte_end":945793,"line_start":2849,"line_end":2849,"column_start":1,"column_end":51}},{"value":"/         // Recursively process a child.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945794,"byte_end":945837,"line_start":2850,"line_end":2850,"column_start":1,"column_end":44}},{"value":"/         process_tree(child);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945838,"byte_end":945870,"line_start":2851,"line_end":2851,"column_start":1,"column_end":33}},{"value":"/     }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945871,"byte_end":945880,"line_start":2852,"line_end":2852,"column_start":1,"column_end":10}},{"value":"/     Ok(())","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945881,"byte_end":945895,"line_start":2853,"line_end":2853,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945896,"byte_end":945901,"line_start":2854,"line_end":2854,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":945902,"byte_end":945909,"line_start":2855,"line_end":2855,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2059},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":946605,"byte_end":946609,"line_start":2883,"line_end":2883,"column_start":12,"column_end":16},"name":"root","qualname":"<EntriesTree>::root","value":"pub fn root<'me>(&'me mut Self) -> Result<EntriesTreeNode>","parent":null,"children":[],"decl_id":null,"docs":" Returns the root node of the tree.\n","sig":null,"attributes":[{"value":"/ Returns the root node of the tree.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":946555,"byte_end":946593,"line_start":2882,"line_end":2882,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":8092},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":950242,"byte_end":950257,"line_start":2989,"line_end":2989,"column_start":12,"column_end":27},"name":"EntriesTreeNode","qualname":"::read::unit::EntriesTreeNode","value":"EntriesTreeNode {  }","parent":null,"children":[{"krate":0,"index":8097},{"krate":0,"index":8098}],"decl_id":null,"docs":" A node in the Debugging Information Entry tree.","sig":null,"attributes":[{"value":"/ A node in the Debugging Information Entry tree.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":950044,"byte_end":950095,"line_start":2984,"line_end":2984,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":950096,"byte_end":950099,"line_start":2985,"line_end":2985,"column_start":1,"column_end":4}},{"value":"/ The root node of a tree can be obtained","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":950100,"byte_end":950143,"line_start":2986,"line_end":2986,"column_start":1,"column_end":44}},{"value":"/ via [`EntriesTree::root`](./struct.EntriesTree.html#method.root).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":950144,"byte_end":950213,"line_start":2987,"line_end":2987,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2068},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":950745,"byte_end":950750,"line_start":3004,"line_end":3004,"column_start":12,"column_end":17},"name":"entry","qualname":"<EntriesTreeNode>::entry","value":"pub fn entry(&Self) -> &DebuggingInformationEntry","parent":null,"children":[],"decl_id":null,"docs":" Returns the current entry in the tree.\n","sig":null,"attributes":[{"value":"/ Returns the current entry in the tree.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":950691,"byte_end":950733,"line_start":3003,"line_end":3003,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2069},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":951084,"byte_end":951092,"line_start":3013,"line_end":3013,"column_start":12,"column_end":20},"name":"children","qualname":"<EntriesTreeNode>::children","value":"pub fn children(Self) -> EntriesTreeIter","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator for the children of the current entry.","sig":null,"attributes":[{"value":"/ Create an iterator for the children of the current entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":950914,"byte_end":950975,"line_start":3009,"line_end":3009,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":950980,"byte_end":950983,"line_start":3010,"line_end":3010,"column_start":5,"column_end":8}},{"value":"/ The current entry can no longer be accessed after creating the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":950988,"byte_end":951054,"line_start":3011,"line_end":3011,"column_start":5,"column_end":71}},{"value":"/ iterator.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":951059,"byte_end":951072,"line_start":3012,"line_end":3012,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":8105},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":951450,"byte_end":951465,"line_start":3024,"line_end":3024,"column_start":12,"column_end":27},"name":"EntriesTreeIter","qualname":"::read::unit::EntriesTreeIter","value":"EntriesTreeIter {  }","parent":null,"children":[{"krate":0,"index":8110},{"krate":0,"index":8111},{"krate":0,"index":8112}],"decl_id":null,"docs":" An iterator that allows traversal of the children of an\n `EntriesTreeNode`.","sig":null,"attributes":[{"value":"/ An iterator that allows traversal of the children of an","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":951207,"byte_end":951266,"line_start":3018,"line_end":3018,"column_start":1,"column_end":60}},{"value":"/ `EntriesTreeNode`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":951267,"byte_end":951289,"line_start":3019,"line_end":3019,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":951290,"byte_end":951293,"line_start":3020,"line_end":3020,"column_start":1,"column_end":4}},{"value":"/ The items returned by this iterator are also `EntriesTreeNode`s,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":951294,"byte_end":951362,"line_start":3021,"line_end":3021,"column_start":1,"column_end":69}},{"value":"/ which allow recursive traversal of grandchildren, etc.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":951363,"byte_end":951421,"line_start":3022,"line_end":3022,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2076},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":952062,"byte_end":952066,"line_start":3045,"line_end":3045,"column_start":12,"column_end":16},"name":"next","qualname":"<EntriesTreeIter>::next","value":"pub fn next<'me>(&'me mut Self) -> Result<Option<EntriesTreeNode>>","parent":null,"children":[],"decl_id":null,"docs":" Returns an `EntriesTreeNode` for the next child entry.","sig":null,"attributes":[{"value":"/ Returns an `EntriesTreeNode` for the next child entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":951930,"byte_end":951988,"line_start":3042,"line_end":3042,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":951993,"byte_end":951996,"line_start":3043,"line_end":3043,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if there are no more children.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":952001,"byte_end":952050,"line_start":3044,"line_end":3044,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":8119},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":952979,"byte_end":952989,"line_start":3071,"line_end":3071,"column_start":12,"column_end":22},"name":"DebugTypes","qualname":"::read::unit::DebugTypes","value":"DebugTypes {  }","parent":null,"children":[{"krate":0,"index":8121}],"decl_id":null,"docs":" The `DebugTypes` struct represents the DWARF type information\n found in the `.debug_types` section.\n","sig":null,"attributes":[{"value":"/ The `DebugTypes` struct represents the DWARF type information","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":952822,"byte_end":952887,"line_start":3068,"line_end":3068,"column_start":1,"column_end":66}},{"value":"/ found in the `.debug_types` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":952888,"byte_end":952928,"line_start":3069,"line_end":3069,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2085},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953720,"byte_end":953723,"line_start":3093,"line_end":3093,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugTypes<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugTypes` instance from the data in the `.debug_types`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugTypes` instance from the data in the `.debug_types`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953122,"byte_end":953199,"line_start":3079,"line_end":3079,"column_start":5,"column_end":82}},{"value":"/ section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953204,"byte_end":953216,"line_start":3080,"line_end":3080,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953221,"byte_end":953224,"line_start":3081,"line_end":3081,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_types` section and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953229,"byte_end":953305,"line_start":3082,"line_end":3082,"column_start":5,"column_end":81}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953310,"byte_end":953380,"line_start":3083,"line_end":3083,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953385,"byte_end":953424,"line_start":3084,"line_end":3084,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953429,"byte_end":953432,"line_start":3085,"line_end":3085,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953437,"byte_end":953444,"line_start":3086,"line_end":3086,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugTypes, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953449,"byte_end":953491,"line_start":3087,"line_end":3087,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953496,"byte_end":953499,"line_start":3088,"line_end":3088,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953504,"byte_end":953545,"line_start":3089,"line_end":3089,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_types_section_somehow = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953550,"byte_end":953603,"line_start":3090,"line_end":3090,"column_start":5,"column_end":58}},{"value":"/ let debug_types = DebugTypes::new(read_debug_types_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953608,"byte_end":953696,"line_start":3091,"line_end":3091,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953701,"byte_end":953708,"line_start":3092,"line_end":3092,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2088},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":954520,"byte_end":954526,"line_start":3114,"line_end":3114,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugTypes<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugTypes<R> where F: FnMut(&'a T) ->\nR","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugTypes` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugTypes` section that references the data in `self`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953888,"byte_end":953957,"line_start":3099,"line_end":3099,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953962,"byte_end":953965,"line_start":3100,"line_end":3100,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953970,"byte_end":954035,"line_start":3101,"line_end":3101,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":954040,"byte_end":954043,"line_start":3102,"line_end":3102,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":954048,"byte_end":954068,"line_start":3103,"line_end":3103,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":954073,"byte_end":954076,"line_start":3104,"line_end":3104,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":954081,"byte_end":954099,"line_start":3105,"line_end":3105,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":954104,"byte_end":954149,"line_start":3106,"line_end":3106,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":954154,"byte_end":954238,"line_start":3107,"line_end":3107,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugTypes<Vec<u8>> = load_section();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":954243,"byte_end":954310,"line_start":3108,"line_end":3108,"column_start":5,"column_end":72}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":954315,"byte_end":954362,"line_start":3109,"line_end":3109,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":954367,"byte_end":954417,"line_start":3110,"line_end":3110,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":954422,"byte_end":954484,"line_start":3111,"line_end":3111,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":954489,"byte_end":954496,"line_start":3112,"line_end":3112,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":954501,"byte_end":954508,"line_start":3113,"line_end":3113,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2101},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955667,"byte_end":955672,"line_start":3158,"line_end":3158,"column_start":12,"column_end":17},"name":"units","qualname":"<DebugTypes<R>>::units","value":"pub fn units(&Self) -> TypeUnitHeadersIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the type-units in this `.debug_types` section.","sig":null,"attributes":[{"value":"/ Iterate the type-units in this `.debug_types` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955049,"byte_end":955107,"line_start":3141,"line_end":3141,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955112,"byte_end":955115,"line_start":3142,"line_end":3142,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955120,"byte_end":955127,"line_start":3143,"line_end":3143,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugTypes, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955132,"byte_end":955174,"line_start":3144,"line_end":3144,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955179,"byte_end":955182,"line_start":3145,"line_end":3145,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955187,"byte_end":955206,"line_start":3146,"line_end":3146,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_types_section_somehow = || &buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955211,"byte_end":955264,"line_start":3147,"line_end":3147,"column_start":5,"column_end":58}},{"value":"/ let debug_types = DebugTypes::new(read_debug_types_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955269,"byte_end":955357,"line_start":3148,"line_end":3148,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955362,"byte_end":955365,"line_start":3149,"line_end":3149,"column_start":5,"column_end":8}},{"value":"/ let mut iter = debug_types.units();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955370,"byte_end":955409,"line_start":3150,"line_end":3150,"column_start":5,"column_end":44}},{"value":"/ while let Some(unit) = iter.next().unwrap() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955414,"byte_end":955463,"line_start":3151,"line_end":3151,"column_start":5,"column_end":54}},{"value":"/     println!(\"unit's length is {}\", unit.unit_length());","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955468,"byte_end":955528,"line_start":3152,"line_end":3152,"column_start":5,"column_end":65}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955533,"byte_end":955538,"line_start":3153,"line_end":3153,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955543,"byte_end":955550,"line_start":3154,"line_end":3154,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955555,"byte_end":955558,"line_start":3155,"line_end":3155,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955563,"byte_end":955584,"line_start":3156,"line_end":3156,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955589,"byte_end":955655,"line_start":3157,"line_end":3157,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":8133},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":956093,"byte_end":956112,"line_start":3172,"line_end":3172,"column_start":12,"column_end":31},"name":"TypeUnitHeadersIter","qualname":"::read::unit::TypeUnitHeadersIter","value":"TypeUnitHeadersIter {  }","parent":null,"children":[{"krate":0,"index":8135},{"krate":0,"index":8136}],"decl_id":null,"docs":" An iterator over the type-units of this `.debug_types` section.","sig":null,"attributes":[{"value":"/ An iterator over the type-units of this `.debug_types` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955871,"byte_end":955938,"line_start":3166,"line_end":3166,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955939,"byte_end":955942,"line_start":3167,"line_end":3167,"column_start":1,"column_end":4}},{"value":"/ See the [documentation on","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955943,"byte_end":955972,"line_start":3168,"line_end":3168,"column_start":1,"column_end":30}},{"value":"/ `DebugTypes::units`](./struct.DebugTypes.html#method.units) for","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955973,"byte_end":956040,"line_start":3169,"line_end":3169,"column_start":1,"column_end":68}},{"value":"/ more detail.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":956041,"byte_end":956057,"line_start":3170,"line_end":3170,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2104},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":956295,"byte_end":956299,"line_start":3179,"line_end":3179,"column_start":12,"column_end":16},"name":"next","qualname":"<TypeUnitHeadersIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<TypeUnitHeader<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next type unit header.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next type unit header.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":956229,"byte_end":956283,"line_start":3178,"line_end":3178,"column_start":5,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":8143},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":957253,"byte_end":957267,"line_start":3210,"line_end":3210,"column_start":12,"column_end":26},"name":"TypeUnitHeader","qualname":"::read::unit::TypeUnitHeader","value":"TypeUnitHeader {  }","parent":null,"children":[{"krate":0,"index":8146},{"krate":0,"index":8147},{"krate":0,"index":8148},{"krate":0,"index":8149}],"decl_id":null,"docs":" The header of a type unit's debugging information.\n","sig":null,"attributes":[{"value":"/ The header of a type unit's debugging information.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":957142,"byte_end":957196,"line_start":3208,"line_end":3208,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2114},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":958073,"byte_end":958079,"line_start":3242,"line_end":3242,"column_start":12,"column_end":18},"name":"header","qualname":"<TypeUnitHeader<R, Offset>>::header","value":"pub fn header(Self) -> UnitHeader<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Return the `UnitHeader` containing common unit fields.\n","sig":null,"attributes":[{"value":"/ Return the `UnitHeader` containing common unit fields.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":958003,"byte_end":958061,"line_start":3241,"line_end":3241,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2115},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":958246,"byte_end":958260,"line_start":3248,"line_end":3248,"column_start":12,"column_end":26},"name":"size_of_header","qualname":"<TypeUnitHeader<R, Offset>>::size_of_header","value":"pub fn size_of_header(Encoding) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the serialized size of the type-unit header for the given\n DWARF format.\n","sig":null,"attributes":[{"value":"/ Return the serialized size of the type-unit header for the given","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":958144,"byte_end":958212,"line_start":3246,"line_end":3246,"column_start":5,"column_end":73}},{"value":"/ DWARF format.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":958217,"byte_end":958234,"line_start":3247,"line_end":3247,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2116},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":958639,"byte_end":958645,"line_start":3256,"line_end":3256,"column_start":12,"column_end":18},"name":"offset","qualname":"<TypeUnitHeader<R, Offset>>::offset","value":"pub fn offset(&Self) -> DebugTypesOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Get the offset of this compilation unit within the .debug_info section.\n","sig":null,"attributes":[{"value":"/ Get the offset of this compilation unit within the .debug_info section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":958552,"byte_end":958627,"line_start":3255,"line_end":3255,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2117},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":958789,"byte_end":958800,"line_start":3261,"line_end":3261,"column_start":12,"column_end":23},"name":"unit_length","qualname":"<TypeUnitHeader<R, Offset>>::unit_length","value":"pub fn unit_length(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the debugging info for this type-unit.\n","sig":null,"attributes":[{"value":"/ Get the length of the debugging info for this type-unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":958717,"byte_end":958777,"line_start":3260,"line_end":3260,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2118},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":959002,"byte_end":959023,"line_start":3267,"line_end":3267,"column_start":12,"column_end":33},"name":"length_including_self","qualname":"<TypeUnitHeader<R, Offset>>::length_including_self","value":"pub fn length_including_self(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the debugging info for this type-unit,\n including the byte length of the encoded length itself.\n","sig":null,"attributes":[{"value":"/ Get the length of the debugging info for this type-unit,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":958866,"byte_end":958926,"line_start":3265,"line_end":3265,"column_start":5,"column_end":65}},{"value":"/ including the byte length of the encoded length itself.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":958931,"byte_end":958990,"line_start":3266,"line_end":3266,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2119},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":959162,"byte_end":959170,"line_start":3272,"line_end":3272,"column_start":12,"column_end":20},"name":"encoding","qualname":"<TypeUnitHeader<R, Offset>>::encoding","value":"pub fn encoding(&Self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding parameters for this unit.\n","sig":null,"attributes":[{"value":"/ Return the encoding parameters for this unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":959101,"byte_end":959150,"line_start":3271,"line_end":3271,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2120},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":959311,"byte_end":959318,"line_start":3277,"line_end":3277,"column_start":12,"column_end":19},"name":"version","qualname":"<TypeUnitHeader<R, Offset>>::version","value":"pub fn version(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Get the DWARF version of the debugging info for this type-unit.\n","sig":null,"attributes":[{"value":"/ Get the DWARF version of the debugging info for this type-unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":959232,"byte_end":959299,"line_start":3276,"line_end":3276,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2121},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":959495,"byte_end":959514,"line_start":3283,"line_end":3283,"column_start":12,"column_end":31},"name":"debug_abbrev_offset","qualname":"<TypeUnitHeader<R, Offset>>::debug_abbrev_offset","value":"pub fn debug_abbrev_offset(&Self) -> DebugAbbrevOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" The offset into the `.debug_abbrev` section for this type-unit's\n debugging information entries.\n","sig":null,"attributes":[{"value":"/ The offset into the `.debug_abbrev` section for this type-unit's","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":959376,"byte_end":959444,"line_start":3281,"line_end":3281,"column_start":5,"column_end":73}},{"value":"/ debugging information entries.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":959449,"byte_end":959483,"line_start":3282,"line_end":3282,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2122},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":959674,"byte_end":959686,"line_start":3288,"line_end":3288,"column_start":12,"column_end":24},"name":"address_size","qualname":"<TypeUnitHeader<R, Offset>>::address_size","value":"pub fn address_size(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The size of addresses (in bytes) in this type-unit.\n","sig":null,"attributes":[{"value":"/ The size of addresses (in bytes) in this type-unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":959607,"byte_end":959662,"line_start":3287,"line_end":3287,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2123},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":959821,"byte_end":959827,"line_start":3293,"line_end":3293,"column_start":12,"column_end":18},"name":"format","qualname":"<TypeUnitHeader<R, Offset>>::format","value":"pub fn format(&Self) -> Format","parent":null,"children":[],"decl_id":null,"docs":" Whether this type unit is encoded in 64- or 32-bit DWARF.\n","sig":null,"attributes":[{"value":"/ Whether this type unit is encoded in 64- or 32-bit DWARF.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":959748,"byte_end":959809,"line_start":3292,"line_end":3292,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2124},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":959956,"byte_end":959967,"line_start":3298,"line_end":3298,"column_start":12,"column_end":23},"name":"header_size","qualname":"<TypeUnitHeader<R, Offset>>::header_size","value":"pub fn header_size(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" The serialized size of the header for this type-unit.\n","sig":null,"attributes":[{"value":"/ The serialized size of the header for this type-unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":959887,"byte_end":959944,"line_start":3297,"line_end":3297,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2125},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":960100,"byte_end":960114,"line_start":3303,"line_end":3303,"column_start":12,"column_end":26},"name":"type_signature","qualname":"<TypeUnitHeader<R, Offset>>::type_signature","value":"pub fn type_signature(&Self) -> DebugTypeSignature","parent":null,"children":[],"decl_id":null,"docs":" Get the unique type signature for this type unit.\n","sig":null,"attributes":[{"value":"/ Get the unique type signature for this type unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":960035,"byte_end":960088,"line_start":3302,"line_end":3302,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2126},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":960264,"byte_end":960275,"line_start":3308,"line_end":3308,"column_start":12,"column_end":23},"name":"type_offset","qualname":"<TypeUnitHeader<R, Offset>>::type_offset","value":"pub fn type_offset(&Self) -> UnitOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Get the offset within this type unit where the type is defined.\n","sig":null,"attributes":[{"value":"/ Get the offset within this type unit where the type is defined.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":960185,"byte_end":960252,"line_start":3307,"line_end":3307,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2127},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":960417,"byte_end":960424,"line_start":3313,"line_end":3313,"column_start":12,"column_end":19},"name":"entries","qualname":"<TypeUnitHeader<R, Offset>>::entries","value":"pub fn entries<'me, 'abbrev>(&'me Self, &'abbrev Abbreviations)\n-> EntriesCursor","parent":null,"children":[],"decl_id":null,"docs":" Navigate this type unit's `DebuggingInformationEntry`s.\n","sig":null,"attributes":[{"value":"/ Navigate this type unit's `DebuggingInformationEntry`s.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":960346,"byte_end":960405,"line_start":3312,"line_end":3312,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2130},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":960710,"byte_end":960727,"line_start":3322,"line_end":3322,"column_start":12,"column_end":29},"name":"entries_at_offset","qualname":"<TypeUnitHeader<R, Offset>>::entries_at_offset","value":"pub fn entries_at_offset<'me,\n                         'abbrev>(&'me Self, &'abbrev Abbreviations,\n                                  UnitOffset<R::Offset>)\n-> Result<EntriesCursor>","parent":null,"children":[],"decl_id":null,"docs":" Navigate this type unit's `DebuggingInformationEntry`s\n starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Navigate this type unit's `DebuggingInformationEntry`s","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":960602,"byte_end":960660,"line_start":3320,"line_end":3320,"column_start":5,"column_end":63}},{"value":"/ starting at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":960665,"byte_end":960698,"line_start":3321,"line_end":3321,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2133},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":961088,"byte_end":961100,"line_start":3332,"line_end":3332,"column_start":12,"column_end":24},"name":"entries_tree","qualname":"<TypeUnitHeader<R, Offset>>::entries_tree","value":"pub fn entries_tree<'me,\n                    'abbrev>(&'me Self, &'abbrev Abbreviations,\n                             Option<UnitOffset<R::Offset>>)\n-> Result<EntriesTree>","parent":null,"children":[],"decl_id":null,"docs":" Navigate this type unit's `DebuggingInformationEntry`s as a tree\n starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Navigate this type unit's `DebuggingInformationEntry`s as a tree","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":960970,"byte_end":961038,"line_start":3330,"line_end":3330,"column_start":5,"column_end":73}},{"value":"/ starting at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":961043,"byte_end":961076,"line_start":3331,"line_end":3331,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2136},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":961425,"byte_end":961436,"line_start":3341,"line_end":3341,"column_start":12,"column_end":23},"name":"entries_raw","qualname":"<TypeUnitHeader<R, Offset>>::entries_raw","value":"pub fn entries_raw<'me,\n                   'abbrev>(&'me Self, &'abbrev Abbreviations,\n                            Option<UnitOffset<R::Offset>>)\n-> Result<EntriesRaw>","parent":null,"children":[],"decl_id":null,"docs":" Read the raw data that defines the Debugging Information Entries.\n","sig":null,"attributes":[{"value":"/ Read the raw data that defines the Debugging Information Entries.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":961344,"byte_end":961413,"line_start":3340,"line_end":3340,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2139},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":964186,"byte_end":964199,"line_start":3431,"line_end":3431,"column_start":12,"column_end":25},"name":"abbreviations","qualname":"<TypeUnitHeader<R, Offset>>::abbreviations","value":"pub fn abbreviations(&Self, &DebugAbbrev<R>) -> Result<Abbreviations>","parent":null,"children":[],"decl_id":null,"docs":" Parse this type unit's abbreviations.","sig":null,"attributes":[{"value":"/ Parse this type unit's abbreviations.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":961678,"byte_end":961719,"line_start":3349,"line_end":3349,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":961724,"byte_end":961727,"line_start":3350,"line_end":3350,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":961732,"byte_end":961739,"line_start":3351,"line_end":3351,"column_start":5,"column_end":12}},{"value":"/ use gimli::DebugAbbrev;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":961744,"byte_end":961771,"line_start":3352,"line_end":3352,"column_start":5,"column_end":32}},{"value":"/ # use gimli::{DebugTypes, LittleEndian};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":961776,"byte_end":961820,"line_start":3353,"line_end":3353,"column_start":5,"column_end":49}},{"value":"/ # let types_buf = [","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":961825,"byte_end":961848,"line_start":3354,"line_end":3354,"column_start":5,"column_end":28}},{"value":"/ #     // Type unit header","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":961853,"byte_end":961882,"line_start":3355,"line_end":3355,"column_start":5,"column_end":34}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":961887,"byte_end":961892,"line_start":3356,"line_end":3356,"column_start":5,"column_end":10}},{"value":"/ #     // 32-bit unit length = 37","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":961897,"byte_end":961933,"line_start":3357,"line_end":3357,"column_start":5,"column_end":41}},{"value":"/ #     0x25, 0x00, 0x00, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":961938,"byte_end":961971,"line_start":3358,"line_end":3358,"column_start":5,"column_end":38}},{"value":"/ #     // Version 4","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":961976,"byte_end":961998,"line_start":3359,"line_end":3359,"column_start":5,"column_end":27}},{"value":"/ #     0x04, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962003,"byte_end":962024,"line_start":3360,"line_end":3360,"column_start":5,"column_end":26}},{"value":"/ #     // debug_abbrev_offset","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962029,"byte_end":962061,"line_start":3361,"line_end":3361,"column_start":5,"column_end":37}},{"value":"/ #     0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962066,"byte_end":962099,"line_start":3362,"line_end":3362,"column_start":5,"column_end":38}},{"value":"/ #     // Address size","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962104,"byte_end":962129,"line_start":3363,"line_end":3363,"column_start":5,"column_end":30}},{"value":"/ #     0x04,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962134,"byte_end":962149,"line_start":3364,"line_end":3364,"column_start":5,"column_end":20}},{"value":"/ #     // Type signature","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962154,"byte_end":962181,"line_start":3365,"line_end":3365,"column_start":5,"column_end":32}},{"value":"/ #     0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962186,"byte_end":962243,"line_start":3366,"line_end":3366,"column_start":5,"column_end":62}},{"value":"/ #     // Type offset","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962248,"byte_end":962272,"line_start":3367,"line_end":3367,"column_start":5,"column_end":29}},{"value":"/ #     0x01, 0x02, 0x03, 0x04,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962277,"byte_end":962310,"line_start":3368,"line_end":3368,"column_start":5,"column_end":38}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962315,"byte_end":962320,"line_start":3369,"line_end":3369,"column_start":5,"column_end":10}},{"value":"/ #     // DIEs","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962325,"byte_end":962342,"line_start":3370,"line_end":3370,"column_start":5,"column_end":22}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962347,"byte_end":962352,"line_start":3371,"line_end":3371,"column_start":5,"column_end":10}},{"value":"/ #     // Abbreviation code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962357,"byte_end":962387,"line_start":3372,"line_end":3372,"column_start":5,"column_end":35}},{"value":"/ #     0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962392,"byte_end":962407,"line_start":3373,"line_end":3373,"column_start":5,"column_end":20}},{"value":"/ #     // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962412,"byte_end":962467,"line_start":3374,"line_end":3374,"column_start":5,"column_end":60}},{"value":"/ #     0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962472,"byte_end":962505,"line_start":3375,"line_end":3375,"column_start":5,"column_end":38}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962510,"byte_end":962515,"line_start":3376,"line_end":3376,"column_start":5,"column_end":10}},{"value":"/ #       // Children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962520,"byte_end":962543,"line_start":3377,"line_end":3377,"column_start":5,"column_end":28}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962548,"byte_end":962553,"line_start":3378,"line_end":3378,"column_start":5,"column_end":10}},{"value":"/ #       // Abbreviation code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962558,"byte_end":962590,"line_start":3379,"line_end":3379,"column_start":5,"column_end":37}},{"value":"/ #       0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962595,"byte_end":962612,"line_start":3380,"line_end":3380,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962617,"byte_end":962674,"line_start":3381,"line_end":3381,"column_start":5,"column_end":62}},{"value":"/ #       0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962679,"byte_end":962714,"line_start":3382,"line_end":3382,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962719,"byte_end":962724,"line_start":3383,"line_end":3383,"column_start":5,"column_end":10}},{"value":"/ #         // Children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962729,"byte_end":962754,"line_start":3384,"line_end":3384,"column_start":5,"column_end":30}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962759,"byte_end":962764,"line_start":3385,"line_end":3385,"column_start":5,"column_end":10}},{"value":"/ #         // Abbreviation code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962769,"byte_end":962803,"line_start":3386,"line_end":3386,"column_start":5,"column_end":39}},{"value":"/ #         0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962808,"byte_end":962827,"line_start":3387,"line_end":3387,"column_start":5,"column_end":24}},{"value":"/ #         // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962832,"byte_end":962891,"line_start":3388,"line_end":3388,"column_start":5,"column_end":64}},{"value":"/ #         0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962896,"byte_end":962933,"line_start":3389,"line_end":3389,"column_start":5,"column_end":42}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962938,"byte_end":962943,"line_start":3390,"line_end":3390,"column_start":5,"column_end":10}},{"value":"/ #           // Children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962948,"byte_end":962975,"line_start":3391,"line_end":3391,"column_start":5,"column_end":32}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962980,"byte_end":962985,"line_start":3392,"line_end":3392,"column_start":5,"column_end":10}},{"value":"/ #           // End of children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":962990,"byte_end":963024,"line_start":3393,"line_end":3393,"column_start":5,"column_end":39}},{"value":"/ #           0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963029,"byte_end":963050,"line_start":3394,"line_end":3394,"column_start":5,"column_end":26}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963055,"byte_end":963060,"line_start":3395,"line_end":3395,"column_start":5,"column_end":10}},{"value":"/ #         // End of children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963065,"byte_end":963097,"line_start":3396,"line_end":3396,"column_start":5,"column_end":37}},{"value":"/ #         0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963102,"byte_end":963121,"line_start":3397,"line_end":3397,"column_start":5,"column_end":24}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963126,"byte_end":963131,"line_start":3398,"line_end":3398,"column_start":5,"column_end":10}},{"value":"/ #       // End of children","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963136,"byte_end":963166,"line_start":3399,"line_end":3399,"column_start":5,"column_end":35}},{"value":"/ #       0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963171,"byte_end":963188,"line_start":3400,"line_end":3400,"column_start":5,"column_end":22}},{"value":"/ # ];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963193,"byte_end":963201,"line_start":3401,"line_end":3401,"column_start":5,"column_end":13}},{"value":"/ # let debug_types = DebugTypes::new(&types_buf, LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963206,"byte_end":963272,"line_start":3402,"line_end":3402,"column_start":5,"column_end":71}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963277,"byte_end":963282,"line_start":3403,"line_end":3403,"column_start":5,"column_end":10}},{"value":"/ # let abbrev_buf = [","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963287,"byte_end":963311,"line_start":3404,"line_end":3404,"column_start":5,"column_end":29}},{"value":"/ #     // Code","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963316,"byte_end":963333,"line_start":3405,"line_end":3405,"column_start":5,"column_end":22}},{"value":"/ #     0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963338,"byte_end":963353,"line_start":3406,"line_end":3406,"column_start":5,"column_end":20}},{"value":"/ #     // DW_TAG_subprogram","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963358,"byte_end":963388,"line_start":3407,"line_end":3407,"column_start":5,"column_end":35}},{"value":"/ #     0x2e,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963393,"byte_end":963408,"line_start":3408,"line_end":3408,"column_start":5,"column_end":20}},{"value":"/ #     // DW_CHILDREN_yes","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963413,"byte_end":963441,"line_start":3409,"line_end":3409,"column_start":5,"column_end":33}},{"value":"/ #     0x01,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963446,"byte_end":963461,"line_start":3410,"line_end":3410,"column_start":5,"column_end":20}},{"value":"/ #     // Begin attributes","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963466,"byte_end":963495,"line_start":3411,"line_end":3411,"column_start":5,"column_end":34}},{"value":"/ #       // Attribute name = DW_AT_name","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963500,"byte_end":963542,"line_start":3412,"line_end":3412,"column_start":5,"column_end":47}},{"value":"/ #       0x03,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963547,"byte_end":963564,"line_start":3413,"line_end":3413,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute form = DW_FORM_string","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963569,"byte_end":963615,"line_start":3414,"line_end":3414,"column_start":5,"column_end":51}},{"value":"/ #       0x08,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963620,"byte_end":963637,"line_start":3415,"line_end":3415,"column_start":5,"column_end":22}},{"value":"/ #     // End attributes","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963642,"byte_end":963669,"line_start":3416,"line_end":3416,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963674,"byte_end":963689,"line_start":3417,"line_end":3417,"column_start":5,"column_end":20}},{"value":"/ #     0x00,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963694,"byte_end":963709,"line_start":3418,"line_end":3418,"column_start":5,"column_end":20}},{"value":"/ #     // Null terminator","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963714,"byte_end":963742,"line_start":3419,"line_end":3419,"column_start":5,"column_end":33}},{"value":"/ #     0x00","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963747,"byte_end":963761,"line_start":3420,"line_end":3420,"column_start":5,"column_end":19}},{"value":"/ # ];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963766,"byte_end":963774,"line_start":3421,"line_end":3421,"column_start":5,"column_end":13}},{"value":"/ #","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963779,"byte_end":963784,"line_start":3422,"line_end":3422,"column_start":5,"column_end":10}},{"value":"/ # let get_some_type_unit = || debug_types.units().next().unwrap().unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963789,"byte_end":963868,"line_start":3423,"line_end":3423,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963873,"byte_end":963876,"line_start":3424,"line_end":3424,"column_start":5,"column_end":8}},{"value":"/ let unit = get_some_type_unit();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963881,"byte_end":963917,"line_start":3425,"line_end":3425,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963922,"byte_end":963925,"line_start":3426,"line_end":3426,"column_start":5,"column_end":8}},{"value":"/ # let read_debug_abbrev_section_somehow = || &abbrev_buf;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963930,"byte_end":963991,"line_start":3427,"line_end":3427,"column_start":5,"column_end":66}},{"value":"/ let debug_abbrev = DebugAbbrev::new(read_debug_abbrev_section_somehow(), LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":963996,"byte_end":964087,"line_start":3428,"line_end":3428,"column_start":5,"column_end":96}},{"value":"/ let abbrevs_for_unit = unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":964092,"byte_end":964162,"line_start":3429,"line_end":3429,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":964167,"byte_end":964174,"line_start":3430,"line_end":3430,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8177},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1058688,"byte_end":1058695,"line_start":30,"line_end":30,"column_start":5,"column_end":12},"name":"Generic","qualname":"::read::value::ValueType::Generic","value":"ValueType::Generic","parent":{"krate":0,"index":8176},"children":[],"decl_id":null,"docs":" The generic type, which is address-sized and of unspecified sign,\n as specified in the DWARF 5 standard, section 2.5.1.\n This type is also used to represent address base types.\n","sig":null,"attributes":[{"value":"/ The generic type, which is address-sized and of unspecified sign,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1058489,"byte_end":1058558,"line_start":27,"line_end":27,"column_start":5,"column_end":74}},{"value":"/ as specified in the DWARF 5 standard, section 2.5.1.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1058563,"byte_end":1058619,"line_start":28,"line_end":28,"column_start":5,"column_end":61}},{"value":"/ This type is also used to represent address base types.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1058624,"byte_end":1058683,"line_start":29,"line_end":29,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8179},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1058736,"byte_end":1058738,"line_start":32,"line_end":32,"column_start":5,"column_end":7},"name":"I8","qualname":"::read::value::ValueType::I8","value":"ValueType::I8","parent":{"krate":0,"index":8176},"children":[],"decl_id":null,"docs":" Signed 8-bit integer type.\n","sig":null,"attributes":[{"value":"/ Signed 8-bit integer type.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1058701,"byte_end":1058731,"line_start":31,"line_end":31,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8181},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1058781,"byte_end":1058783,"line_start":34,"line_end":34,"column_start":5,"column_end":7},"name":"U8","qualname":"::read::value::ValueType::U8","value":"ValueType::U8","parent":{"krate":0,"index":8176},"children":[],"decl_id":null,"docs":" Unsigned 8-bit integer type.\n","sig":null,"attributes":[{"value":"/ Unsigned 8-bit integer type.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1058744,"byte_end":1058776,"line_start":33,"line_end":33,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8183},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1058825,"byte_end":1058828,"line_start":36,"line_end":36,"column_start":5,"column_end":8},"name":"I16","qualname":"::read::value::ValueType::I16","value":"ValueType::I16","parent":{"krate":0,"index":8176},"children":[],"decl_id":null,"docs":" Signed 16-bit integer type.\n","sig":null,"attributes":[{"value":"/ Signed 16-bit integer type.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1058789,"byte_end":1058820,"line_start":35,"line_end":35,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8185},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1058872,"byte_end":1058875,"line_start":38,"line_end":38,"column_start":5,"column_end":8},"name":"U16","qualname":"::read::value::ValueType::U16","value":"ValueType::U16","parent":{"krate":0,"index":8176},"children":[],"decl_id":null,"docs":" Unsigned 16-bit integer type.\n","sig":null,"attributes":[{"value":"/ Unsigned 16-bit integer type.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1058834,"byte_end":1058867,"line_start":37,"line_end":37,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8187},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1058917,"byte_end":1058920,"line_start":40,"line_end":40,"column_start":5,"column_end":8},"name":"I32","qualname":"::read::value::ValueType::I32","value":"ValueType::I32","parent":{"krate":0,"index":8176},"children":[],"decl_id":null,"docs":" Signed 32-bit integer type.\n","sig":null,"attributes":[{"value":"/ Signed 32-bit integer type.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1058881,"byte_end":1058912,"line_start":39,"line_end":39,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8189},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1058964,"byte_end":1058967,"line_start":42,"line_end":42,"column_start":5,"column_end":8},"name":"U32","qualname":"::read::value::ValueType::U32","value":"ValueType::U32","parent":{"krate":0,"index":8176},"children":[],"decl_id":null,"docs":" Unsigned 32-bit integer type.\n","sig":null,"attributes":[{"value":"/ Unsigned 32-bit integer type.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1058926,"byte_end":1058959,"line_start":41,"line_end":41,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8191},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059009,"byte_end":1059012,"line_start":44,"line_end":44,"column_start":5,"column_end":8},"name":"I64","qualname":"::read::value::ValueType::I64","value":"ValueType::I64","parent":{"krate":0,"index":8176},"children":[],"decl_id":null,"docs":" Signed 64-bit integer type.\n","sig":null,"attributes":[{"value":"/ Signed 64-bit integer type.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1058973,"byte_end":1059004,"line_start":43,"line_end":43,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8193},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059056,"byte_end":1059059,"line_start":46,"line_end":46,"column_start":5,"column_end":8},"name":"U64","qualname":"::read::value::ValueType::U64","value":"ValueType::U64","parent":{"krate":0,"index":8176},"children":[],"decl_id":null,"docs":" Unsigned 64-bit integer type.\n","sig":null,"attributes":[{"value":"/ Unsigned 64-bit integer type.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059018,"byte_end":1059051,"line_start":45,"line_end":45,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8195},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059101,"byte_end":1059104,"line_start":48,"line_end":48,"column_start":5,"column_end":8},"name":"F32","qualname":"::read::value::ValueType::F32","value":"ValueType::F32","parent":{"krate":0,"index":8176},"children":[],"decl_id":null,"docs":" 32-bit floating point type.\n","sig":null,"attributes":[{"value":"/ 32-bit floating point type.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059065,"byte_end":1059096,"line_start":47,"line_end":47,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8197},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059146,"byte_end":1059149,"line_start":50,"line_end":50,"column_start":5,"column_end":8},"name":"F64","qualname":"::read::value::ValueType::F64","value":"ValueType::F64","parent":{"krate":0,"index":8176},"children":[],"decl_id":null,"docs":" 64-bit floating point type.\n","sig":null,"attributes":[{"value":"/ 64-bit floating point type.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059110,"byte_end":1059141,"line_start":49,"line_end":49,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":8176},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1058473,"byte_end":1058482,"line_start":26,"line_end":26,"column_start":10,"column_end":19},"name":"ValueType","qualname":"::read::value::ValueType","value":"pub enum ValueType {\n\n    /// The generic type, which is address-sized and of unspecified sign,\n    /// as specified in the DWARF 5 standard, section 2.5.1.\n    /// This type is also used to represent address base types.\n    Generic,\n\n    /// Signed 8-bit integer type.\n    I8,\n\n    /// Unsigned 8-bit integer type.\n    U8,\n\n    /// Signed 16-bit integer type.\n    I16,\n\n    /// Unsigned 16-bit integer type.\n    U16,\n\n    /// Signed 32-bit integer type.\n    I32,\n\n    /// Unsigned 32-bit integer type.\n    U32,\n\n    /// Signed 64-bit integer type.\n    I64,\n\n    /// Unsigned 64-bit integer type.\n    U64,\n\n    /// 32-bit floating point type.\n    F32,\n\n    /// 64-bit floating point type.\n    F64,\n}","parent":null,"children":[{"krate":0,"index":8177},{"krate":0,"index":8179},{"krate":0,"index":8181},{"krate":0,"index":8183},{"krate":0,"index":8185},{"krate":0,"index":8187},{"krate":0,"index":8189},{"krate":0,"index":8191},{"krate":0,"index":8193},{"krate":0,"index":8195},{"krate":0,"index":8197}],"decl_id":null,"docs":" The type of an entry on the DWARF stack.\n","sig":null,"attributes":[{"value":"/ The type of an entry on the DWARF stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1058374,"byte_end":1058418,"line_start":24,"line_end":24,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8211},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059335,"byte_end":1059342,"line_start":57,"line_end":57,"column_start":5,"column_end":12},"name":"Generic","qualname":"::read::value::Value::Generic","value":"Value::Generic(u64)","parent":{"krate":0,"index":8210},"children":[],"decl_id":null,"docs":" A generic value, which is address-sized and of unspecified sign.\n","sig":null,"attributes":[{"value":"/ A generic value, which is address-sized and of unspecified sign.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059262,"byte_end":1059330,"line_start":56,"line_end":56,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8214},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059391,"byte_end":1059393,"line_start":59,"line_end":59,"column_start":5,"column_end":7},"name":"I8","qualname":"::read::value::Value::I8","value":"Value::I8(i8)","parent":{"krate":0,"index":8210},"children":[],"decl_id":null,"docs":" A signed 8-bit integer value.\n","sig":null,"attributes":[{"value":"/ A signed 8-bit integer value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059353,"byte_end":1059386,"line_start":58,"line_end":58,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8217},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059444,"byte_end":1059446,"line_start":61,"line_end":61,"column_start":5,"column_end":7},"name":"U8","qualname":"::read::value::Value::U8","value":"Value::U8(u8)","parent":{"krate":0,"index":8210},"children":[],"decl_id":null,"docs":" An unsigned 8-bit integer value.\n","sig":null,"attributes":[{"value":"/ An unsigned 8-bit integer value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059403,"byte_end":1059439,"line_start":60,"line_end":60,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8220},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059495,"byte_end":1059498,"line_start":63,"line_end":63,"column_start":5,"column_end":8},"name":"I16","qualname":"::read::value::Value::I16","value":"Value::I16(i16)","parent":{"krate":0,"index":8210},"children":[],"decl_id":null,"docs":" A signed 16-bit integer value.\n","sig":null,"attributes":[{"value":"/ A signed 16-bit integer value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059456,"byte_end":1059490,"line_start":62,"line_end":62,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8223},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059551,"byte_end":1059554,"line_start":65,"line_end":65,"column_start":5,"column_end":8},"name":"U16","qualname":"::read::value::Value::U16","value":"Value::U16(u16)","parent":{"krate":0,"index":8210},"children":[],"decl_id":null,"docs":" An unsigned 16-bit integer value.\n","sig":null,"attributes":[{"value":"/ An unsigned 16-bit integer value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059509,"byte_end":1059546,"line_start":64,"line_end":64,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8226},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059604,"byte_end":1059607,"line_start":67,"line_end":67,"column_start":5,"column_end":8},"name":"I32","qualname":"::read::value::Value::I32","value":"Value::I32(i32)","parent":{"krate":0,"index":8210},"children":[],"decl_id":null,"docs":" A signed 32-bit integer value.\n","sig":null,"attributes":[{"value":"/ A signed 32-bit integer value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059565,"byte_end":1059599,"line_start":66,"line_end":66,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8229},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059660,"byte_end":1059663,"line_start":69,"line_end":69,"column_start":5,"column_end":8},"name":"U32","qualname":"::read::value::Value::U32","value":"Value::U32(u32)","parent":{"krate":0,"index":8210},"children":[],"decl_id":null,"docs":" An unsigned 32-bit integer value.\n","sig":null,"attributes":[{"value":"/ An unsigned 32-bit integer value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059618,"byte_end":1059655,"line_start":68,"line_end":68,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8232},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059713,"byte_end":1059716,"line_start":71,"line_end":71,"column_start":5,"column_end":8},"name":"I64","qualname":"::read::value::Value::I64","value":"Value::I64(i64)","parent":{"krate":0,"index":8210},"children":[],"decl_id":null,"docs":" A signed 64-bit integer value.\n","sig":null,"attributes":[{"value":"/ A signed 64-bit integer value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059674,"byte_end":1059708,"line_start":70,"line_end":70,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8235},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059769,"byte_end":1059772,"line_start":73,"line_end":73,"column_start":5,"column_end":8},"name":"U64","qualname":"::read::value::Value::U64","value":"Value::U64(u64)","parent":{"krate":0,"index":8210},"children":[],"decl_id":null,"docs":" An unsigned 64-bit integer value.\n","sig":null,"attributes":[{"value":"/ An unsigned 64-bit integer value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059727,"byte_end":1059764,"line_start":72,"line_end":72,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8238},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059822,"byte_end":1059825,"line_start":75,"line_end":75,"column_start":5,"column_end":8},"name":"F32","qualname":"::read::value::Value::F32","value":"Value::F32(f32)","parent":{"krate":0,"index":8210},"children":[],"decl_id":null,"docs":" A 32-bit floating point value.\n","sig":null,"attributes":[{"value":"/ A 32-bit floating point value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059783,"byte_end":1059817,"line_start":74,"line_end":74,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8241},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059875,"byte_end":1059878,"line_start":77,"line_end":77,"column_start":5,"column_end":8},"name":"F64","qualname":"::read::value::Value::F64","value":"Value::F64(f64)","parent":{"krate":0,"index":8210},"children":[],"decl_id":null,"docs":" A 64-bit floating point value.\n","sig":null,"attributes":[{"value":"/ A 64-bit floating point value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059836,"byte_end":1059870,"line_start":76,"line_end":76,"column_start":5,"column_end":39}}]},{"kind":"Enum","id":{"krate":0,"index":8210},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059250,"byte_end":1059255,"line_start":55,"line_end":55,"column_start":10,"column_end":15},"name":"Value","qualname":"::read::value::Value","value":"pub enum Value {\n\n    /// A generic value, which is address-sized and of unspecified sign.\n    Generic(u64),\n\n    /// A signed 8-bit integer value.\n    I8(i8),\n\n    /// An unsigned 8-bit integer value.\n    U8(u8),\n\n    /// A signed 16-bit integer value.\n    I16(i16),\n\n    /// An unsigned 16-bit integer value.\n    U16(u16),\n\n    /// A signed 32-bit integer value.\n    I32(i32),\n\n    /// An unsigned 32-bit integer value.\n    U32(u32),\n\n    /// A signed 64-bit integer value.\n    I64(i64),\n\n    /// An unsigned 64-bit integer value.\n    U64(u64),\n\n    /// A 32-bit floating point value.\n    F32(f32),\n\n    /// A 64-bit floating point value.\n    F64(f64),\n}","parent":null,"children":[{"krate":0,"index":8211},{"krate":0,"index":8214},{"krate":0,"index":8217},{"krate":0,"index":8220},{"krate":0,"index":8223},{"krate":0,"index":8226},{"krate":0,"index":8229},{"krate":0,"index":8232},{"krate":0,"index":8235},{"krate":0,"index":8238},{"krate":0,"index":8241}],"decl_id":null,"docs":" The value of an entry on the DWARF stack.\n","sig":null,"attributes":[{"value":"/ The value of an entry on the DWARF stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059154,"byte_end":1059199,"line_start":53,"line_end":53,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2155},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059967,"byte_end":1059975,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"bit_size","qualname":"<ValueType>::bit_size","value":"pub fn bit_size(Self, u64) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The size in bits of a value for this type.\n","sig":null,"attributes":[{"value":"/ The size in bits of a value for this type.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059909,"byte_end":1059955,"line_start":81,"line_end":81,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2156},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1060423,"byte_end":1060436,"line_start":93,"line_end":93,"column_start":12,"column_end":25},"name":"from_encoding","qualname":"<ValueType>::from_encoding","value":"pub fn from_encoding(constants::DwAte, u64) -> Option<ValueType>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `ValueType` from the attributes of a base type DIE.\n","sig":null,"attributes":[{"value":"/ Construct a `ValueType` from the attributes of a base type DIE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1060344,"byte_end":1060411,"line_start":92,"line_end":92,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2157},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1061274,"byte_end":1061284,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"from_entry","qualname":"<ValueType>::from_entry","value":"pub fn from_entry<R: Reader>(&DebuggingInformationEntry<, , R>)\n-> Result<Option<ValueType>>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `ValueType` from a base type DIE.\n","sig":null,"attributes":[{"value":"/ Construct a `ValueType` from a base type DIE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1061213,"byte_end":1061262,"line_start":109,"line_end":109,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2160},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1062759,"byte_end":1062769,"line_start":153,"line_end":153,"column_start":12,"column_end":22},"name":"value_type","qualname":"<Value>::value_type","value":"pub fn value_type(&Self) -> ValueType","parent":null,"children":[],"decl_id":null,"docs":" Return the `ValueType` corresponding to this `Value`.\n","sig":null,"attributes":[{"value":"/ Return the `ValueType` corresponding to this `Value`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1062690,"byte_end":1062747,"line_start":152,"line_end":152,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2161},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1063409,"byte_end":1063414,"line_start":170,"line_end":170,"column_start":12,"column_end":17},"name":"parse","qualname":"<Value>::parse","value":"pub fn parse<R: Reader>(ValueType, R) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Read a `Value` with the given `value_type` from a `Reader`.\n","sig":null,"attributes":[{"value":"/ Read a `Value` with the given `value_type` from a `Reader`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1063334,"byte_end":1063397,"line_start":169,"line_end":169,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2163},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1064396,"byte_end":1064402,"line_start":191,"line_end":191,"column_start":12,"column_end":18},"name":"to_u64","qualname":"<Value>::to_u64","value":"pub fn to_u64(Self, u64) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Convert a `Value` to a `u64`.","sig":null,"attributes":[{"value":"/ Convert a `Value` to a `u64`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1064227,"byte_end":1064260,"line_start":187,"line_end":187,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1064265,"byte_end":1064268,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ The `ValueType` of `self` must be integral.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1064273,"byte_end":1064320,"line_start":189,"line_end":189,"column_start":5,"column_end":52}},{"value":"/ Values are sign extended if the source value is signed.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1064325,"byte_end":1064384,"line_start":190,"line_end":190,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2164},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1065267,"byte_end":1065275,"line_start":212,"line_end":212,"column_start":12,"column_end":20},"name":"from_u64","qualname":"<Value>::from_u64","value":"pub fn from_u64(ValueType, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Create a `Value` with the given `value_type` from a `u64` value.","sig":null,"attributes":[{"value":"/ Create a `Value` with the given `value_type` from a `u64` value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1065015,"byte_end":1065083,"line_start":207,"line_end":207,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1065088,"byte_end":1065091,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ The `value_type` may be integral or floating point.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1065096,"byte_end":1065151,"line_start":209,"line_end":209,"column_start":5,"column_end":60}},{"value":"/ The result is truncated if the `u64` value does","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1065156,"byte_end":1065207,"line_start":210,"line_end":210,"column_start":5,"column_end":56}},{"value":"/ not fit the bounds of the `value_type`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1065212,"byte_end":1065255,"line_start":211,"line_end":211,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2167},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1068459,"byte_end":1068466,"line_start":281,"line_end":281,"column_start":12,"column_end":19},"name":"convert","qualname":"<Value>::convert","value":"pub fn convert(Self, ValueType, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Convert a `Value` to the given `value_type`.","sig":null,"attributes":[{"value":"/ Convert a `Value` to the given `value_type`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1068023,"byte_end":1068071,"line_start":273,"line_end":273,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1068076,"byte_end":1068079,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ When converting between integral types, the result is truncated","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1068084,"byte_end":1068151,"line_start":275,"line_end":275,"column_start":5,"column_end":72}},{"value":"/ if the source value does not fit the bounds of the `value_type`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1068156,"byte_end":1068224,"line_start":276,"line_end":276,"column_start":5,"column_end":73}},{"value":"/ When converting from floating point types, the result is not defined","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1068229,"byte_end":1068301,"line_start":277,"line_end":277,"column_start":5,"column_end":77}},{"value":"/ if the source value does not fit the bounds of the `value_type`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1068306,"byte_end":1068374,"line_start":278,"line_end":278,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1068379,"byte_end":1068382,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_convert` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1068387,"byte_end":1068447,"line_start":280,"line_end":280,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2168},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1069008,"byte_end":1069019,"line_start":294,"line_end":294,"column_start":12,"column_end":23},"name":"reinterpret","qualname":"<Value>::reinterpret","value":"pub fn reinterpret(Self, ValueType, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Reinterpret the bits in a `Value` as the given `value_type`.","sig":null,"attributes":[{"value":"/ Reinterpret the bits in a `Value` as the given `value_type`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1068782,"byte_end":1068846,"line_start":289,"line_end":289,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1068851,"byte_end":1068854,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ The source and result value types must have equal sizes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1068859,"byte_end":1068919,"line_start":291,"line_end":291,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1068924,"byte_end":1068927,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_reinterpret` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1068932,"byte_end":1068996,"line_start":293,"line_end":293,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2169},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1070755,"byte_end":1070758,"line_start":332,"line_end":332,"column_start":12,"column_end":15},"name":"abs","qualname":"<Value>::abs","value":"pub fn abs(Self, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform an absolute value operation.","sig":null,"attributes":[{"value":"/ Perform an absolute value operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1070544,"byte_end":1070584,"line_start":327,"line_end":327,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1070589,"byte_end":1070592,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1070597,"byte_end":1070674,"line_start":329,"line_end":329,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1070679,"byte_end":1070682,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_abs` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1070687,"byte_end":1070743,"line_start":331,"line_end":331,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2170},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1071923,"byte_end":1071926,"line_start":356,"line_end":356,"column_start":12,"column_end":15},"name":"neg","qualname":"<Value>::neg","value":"pub fn neg(Self, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a negation operation.","sig":null,"attributes":[{"value":"/ Perform a negation operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1071719,"byte_end":1071752,"line_start":351,"line_end":351,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1071757,"byte_end":1071760,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1071765,"byte_end":1071842,"line_start":353,"line_end":353,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1071847,"byte_end":1071850,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_neg` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1071855,"byte_end":1071911,"line_start":355,"line_end":355,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2171},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1073134,"byte_end":1073137,"line_start":383,"line_end":383,"column_start":12,"column_end":15},"name":"add","qualname":"<Value>::add","value":"pub fn add(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform an addition operation.","sig":null,"attributes":[{"value":"/ Perform an addition operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1072962,"byte_end":1072996,"line_start":378,"line_end":378,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1073001,"byte_end":1073004,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching types.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1073009,"byte_end":1073052,"line_start":380,"line_end":380,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1073057,"byte_end":1073060,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_plus` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1073065,"byte_end":1073122,"line_start":382,"line_end":382,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2172},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1074412,"byte_end":1074415,"line_start":408,"line_end":408,"column_start":12,"column_end":15},"name":"sub","qualname":"<Value>::sub","value":"pub fn sub(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a subtraction operation.","sig":null,"attributes":[{"value":"/ Perform a subtraction operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1074237,"byte_end":1074273,"line_start":403,"line_end":403,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1074278,"byte_end":1074281,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching types.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1074286,"byte_end":1074329,"line_start":405,"line_end":405,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1074334,"byte_end":1074337,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_minus` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1074342,"byte_end":1074400,"line_start":407,"line_end":407,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2173},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1075691,"byte_end":1075694,"line_start":433,"line_end":433,"column_start":12,"column_end":15},"name":"mul","qualname":"<Value>::mul","value":"pub fn mul(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a multiplication operation.","sig":null,"attributes":[{"value":"/ Perform a multiplication operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1075515,"byte_end":1075554,"line_start":428,"line_end":428,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1075559,"byte_end":1075562,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching types.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1075567,"byte_end":1075610,"line_start":430,"line_end":430,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1075615,"byte_end":1075618,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_mul` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1075623,"byte_end":1075679,"line_start":432,"line_end":432,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2174},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1077046,"byte_end":1077049,"line_start":459,"line_end":459,"column_start":12,"column_end":15},"name":"div","qualname":"<Value>::div","value":"pub fn div(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a division operation.","sig":null,"attributes":[{"value":"/ Perform a division operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1076794,"byte_end":1076827,"line_start":453,"line_end":453,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1076832,"byte_end":1076835,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching types.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1076840,"byte_end":1076883,"line_start":455,"line_end":455,"column_start":5,"column_end":48}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1076888,"byte_end":1076965,"line_start":456,"line_end":456,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1076970,"byte_end":1076973,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_div` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1076978,"byte_end":1077034,"line_start":458,"line_end":458,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2175},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1079007,"byte_end":1079010,"line_start":504,"line_end":504,"column_start":12,"column_end":15},"name":"rem","qualname":"<Value>::rem","value":"pub fn rem(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a remainder operation.","sig":null,"attributes":[{"value":"/ Perform a remainder operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1078742,"byte_end":1078776,"line_start":498,"line_end":498,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1078781,"byte_end":1078784,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1078789,"byte_end":1078841,"line_start":500,"line_end":500,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as an unsigned value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1078846,"byte_end":1078926,"line_start":501,"line_end":501,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1078931,"byte_end":1078934,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_mod` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1078939,"byte_end":1078995,"line_start":503,"line_end":503,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2176},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1080846,"byte_end":1080849,"line_start":546,"line_end":546,"column_start":12,"column_end":15},"name":"not","qualname":"<Value>::not","value":"pub fn not(Self, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a bitwise not operation.","sig":null,"attributes":[{"value":"/ Perform a bitwise not operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1080664,"byte_end":1080700,"line_start":541,"line_end":541,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1080705,"byte_end":1080708,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1080713,"byte_end":1080765,"line_start":543,"line_end":543,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1080770,"byte_end":1080773,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_not` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1080778,"byte_end":1080834,"line_start":545,"line_end":545,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2177},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1081209,"byte_end":1081212,"line_start":557,"line_end":557,"column_start":12,"column_end":15},"name":"and","qualname":"<Value>::and","value":"pub fn and(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a bitwise and operation.","sig":null,"attributes":[{"value":"/ Perform a bitwise and operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1081027,"byte_end":1081063,"line_start":552,"line_end":552,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1081068,"byte_end":1081071,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1081076,"byte_end":1081128,"line_start":554,"line_end":554,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1081133,"byte_end":1081136,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_and` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1081141,"byte_end":1081197,"line_start":556,"line_end":556,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2178},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1081728,"byte_end":1081730,"line_start":572,"line_end":572,"column_start":12,"column_end":14},"name":"or","qualname":"<Value>::or","value":"pub fn or(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a bitwise or operation.","sig":null,"attributes":[{"value":"/ Perform a bitwise or operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1081548,"byte_end":1081583,"line_start":567,"line_end":567,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1081588,"byte_end":1081591,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1081596,"byte_end":1081648,"line_start":569,"line_end":569,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1081653,"byte_end":1081656,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_or` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1081661,"byte_end":1081716,"line_start":571,"line_end":571,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2179},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1082257,"byte_end":1082260,"line_start":587,"line_end":587,"column_start":12,"column_end":15},"name":"xor","qualname":"<Value>::xor","value":"pub fn xor(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a bitwise exclusive-or operation.","sig":null,"attributes":[{"value":"/ Perform a bitwise exclusive-or operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1082066,"byte_end":1082111,"line_start":582,"line_end":582,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1082116,"byte_end":1082119,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1082124,"byte_end":1082176,"line_start":584,"line_end":584,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1082181,"byte_end":1082184,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_xor` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1082189,"byte_end":1082245,"line_start":586,"line_end":586,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2181},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1083693,"byte_end":1083696,"line_start":623,"line_end":623,"column_start":12,"column_end":15},"name":"shl","qualname":"<Value>::shl","value":"pub fn shl(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a shift left operation.","sig":null,"attributes":[{"value":"/ Perform a shift left operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1083383,"byte_end":1083418,"line_start":616,"line_end":616,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1083423,"byte_end":1083426,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ This operation requires integral types.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1083431,"byte_end":1083474,"line_start":618,"line_end":618,"column_start":5,"column_end":48}},{"value":"/ If the shift length exceeds the type size, then 0 is returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1083479,"byte_end":1083545,"line_start":619,"line_end":619,"column_start":5,"column_end":71}},{"value":"/ If the shift length is negative then an error is returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1083550,"byte_end":1083612,"line_start":620,"line_end":620,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1083617,"byte_end":1083620,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_shl` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1083625,"byte_end":1083681,"line_start":622,"line_end":622,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2182},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1085243,"byte_end":1085246,"line_start":654,"line_end":654,"column_start":12,"column_end":15},"name":"shr","qualname":"<Value>::shr","value":"pub fn shr(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a logical shift right operation.","sig":null,"attributes":[{"value":"/ Perform a logical shift right operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1084735,"byte_end":1084779,"line_start":644,"line_end":644,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1084784,"byte_end":1084787,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ This operation requires an unsigned integral type for the value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1084792,"byte_end":1084860,"line_start":646,"line_end":646,"column_start":5,"column_end":73}},{"value":"/ If the value type is `Generic`, then it is interpreted as an unsigned value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1084865,"byte_end":1084945,"line_start":647,"line_end":647,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1084950,"byte_end":1084953,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ This operation requires an integral type for the shift length.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1084958,"byte_end":1085024,"line_start":649,"line_end":649,"column_start":5,"column_end":71}},{"value":"/ If the shift length exceeds the type size, then 0 is returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1085029,"byte_end":1085095,"line_start":650,"line_end":650,"column_start":5,"column_end":71}},{"value":"/ If the shift length is negative then an error is returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1085100,"byte_end":1085162,"line_start":651,"line_end":651,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1085167,"byte_end":1085170,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_shr` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1085175,"byte_end":1085231,"line_start":653,"line_end":653,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2183},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1086839,"byte_end":1086843,"line_start":687,"line_end":687,"column_start":12,"column_end":16},"name":"shra","qualname":"<Value>::shra","value":"pub fn shra(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform an arithmetic shift right operation.","sig":null,"attributes":[{"value":"/ Perform an arithmetic shift right operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1086264,"byte_end":1086312,"line_start":676,"line_end":676,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1086317,"byte_end":1086320,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ This operation requires a signed integral type for the value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1086325,"byte_end":1086390,"line_start":678,"line_end":678,"column_start":5,"column_end":70}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1086395,"byte_end":1086472,"line_start":679,"line_end":679,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1086477,"byte_end":1086480,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ This operation requires an integral type for the shift length.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1086485,"byte_end":1086551,"line_start":681,"line_end":681,"column_start":5,"column_end":71}},{"value":"/ If the shift length exceeds the type size, then 0 is returned for positive values,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1086556,"byte_end":1086642,"line_start":682,"line_end":682,"column_start":5,"column_end":91}},{"value":"/ and -1 is returned for negative values.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1086647,"byte_end":1086690,"line_start":683,"line_end":683,"column_start":5,"column_end":48}},{"value":"/ If the shift length is negative then an error is returned.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1086695,"byte_end":1086757,"line_start":684,"line_end":684,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1086762,"byte_end":1086765,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_shra` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1086770,"byte_end":1086827,"line_start":686,"line_end":686,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2184},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1088989,"byte_end":1088991,"line_start":755,"line_end":755,"column_start":12,"column_end":14},"name":"eq","qualname":"<Value>::eq","value":"pub fn eq(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform the `==` relational operation.","sig":null,"attributes":[{"value":"/ Perform the `==` relational operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1088720,"byte_end":1088762,"line_start":749,"line_end":749,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1088767,"byte_end":1088770,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1088775,"byte_end":1088827,"line_start":751,"line_end":751,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1088832,"byte_end":1088909,"line_start":752,"line_end":752,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1088914,"byte_end":1088917,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_eq` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1088922,"byte_end":1088977,"line_start":754,"line_end":754,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2185},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1090188,"byte_end":1090190,"line_start":781,"line_end":781,"column_start":12,"column_end":14},"name":"ge","qualname":"<Value>::ge","value":"pub fn ge(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform the `>=` relational operation.","sig":null,"attributes":[{"value":"/ Perform the `>=` relational operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1089919,"byte_end":1089961,"line_start":775,"line_end":775,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1089966,"byte_end":1089969,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1089974,"byte_end":1090026,"line_start":777,"line_end":777,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1090031,"byte_end":1090108,"line_start":778,"line_end":778,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1090113,"byte_end":1090116,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_ge` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1090121,"byte_end":1090176,"line_start":780,"line_end":780,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2186},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1091386,"byte_end":1091388,"line_start":807,"line_end":807,"column_start":12,"column_end":14},"name":"gt","qualname":"<Value>::gt","value":"pub fn gt(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform the `>` relational operation.","sig":null,"attributes":[{"value":"/ Perform the `>` relational operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1091118,"byte_end":1091159,"line_start":801,"line_end":801,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1091164,"byte_end":1091167,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1091172,"byte_end":1091224,"line_start":803,"line_end":803,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1091229,"byte_end":1091306,"line_start":804,"line_end":804,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1091311,"byte_end":1091314,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_gt` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1091319,"byte_end":1091374,"line_start":806,"line_end":806,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2187},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1092573,"byte_end":1092575,"line_start":833,"line_end":833,"column_start":12,"column_end":14},"name":"le","qualname":"<Value>::le","value":"pub fn le(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform the `<= relational operation.","sig":null,"attributes":[{"value":"/ Perform the `<= relational operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1092305,"byte_end":1092346,"line_start":827,"line_end":827,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1092351,"byte_end":1092354,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1092359,"byte_end":1092411,"line_start":829,"line_end":829,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1092416,"byte_end":1092493,"line_start":830,"line_end":830,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1092498,"byte_end":1092501,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_le` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1092506,"byte_end":1092561,"line_start":832,"line_end":832,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2188},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1093770,"byte_end":1093772,"line_start":859,"line_end":859,"column_start":12,"column_end":14},"name":"lt","qualname":"<Value>::lt","value":"pub fn lt(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform the `< relational operation.","sig":null,"attributes":[{"value":"/ Perform the `< relational operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1093503,"byte_end":1093543,"line_start":853,"line_end":853,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1093548,"byte_end":1093551,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1093556,"byte_end":1093608,"line_start":855,"line_end":855,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1093613,"byte_end":1093690,"line_start":856,"line_end":856,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1093695,"byte_end":1093698,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_lt` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1093703,"byte_end":1093758,"line_start":858,"line_end":858,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2189},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1094957,"byte_end":1094959,"line_start":885,"line_end":885,"column_start":12,"column_end":14},"name":"ne","qualname":"<Value>::ne","value":"pub fn ne(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform the `!= relational operation.","sig":null,"attributes":[{"value":"/ Perform the `!= relational operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1094689,"byte_end":1094730,"line_start":879,"line_end":879,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1094735,"byte_end":1094738,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1094743,"byte_end":1094795,"line_start":881,"line_end":881,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1094800,"byte_end":1094877,"line_start":882,"line_end":882,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1094882,"byte_end":1094885,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_ne` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1094890,"byte_end":1094945,"line_start":884,"line_end":884,"column_start":5,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":2191},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87944,"byte_end":87953,"line_start":231,"line_end":231,"column_start":10,"column_end":19},"name":"EndianBuf","qualname":"::read::EndianBuf","value":"EndianSlice","parent":null,"children":[],"decl_id":null,"docs":" `EndianBuf` has been renamed to `EndianSlice`. For ease of upgrading across\n `gimli` versions, we export this type alias.\n","sig":null,"attributes":[{"value":"/ `EndianBuf` has been renamed to `EndianSlice`. For ease of upgrading across","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87721,"byte_end":87800,"line_start":228,"line_end":228,"column_start":1,"column_end":80}},{"value":"/ `gimli` versions, we export this type alias.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87801,"byte_end":87849,"line_start":229,"line_end":229,"column_start":1,"column_end":49}},{"value":"deprecated(note =\n             \"EndianBuf has been renamed to EndianSlice, use that instead.\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":87850,"byte_end":87934,"line_start":230,"line_end":230,"column_start":1,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8254},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88154,"byte_end":88156,"line_start":237,"line_end":237,"column_start":5,"column_end":7},"name":"Io","qualname":"::read::Error::Io","value":"Error::Io","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" An I/O error occurred while reading.\n","sig":null,"attributes":[{"value":"/ An I/O error occurred while reading.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88109,"byte_end":88149,"line_start":236,"line_end":236,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8256},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88234,"byte_end":88276,"line_start":239,"line_end":239,"column_start":5,"column_end":47},"name":"PcRelativePointerButSectionBaseIsUndefined","qualname":"::read::Error::PcRelativePointerButSectionBaseIsUndefined","value":"Error::PcRelativePointerButSectionBaseIsUndefined","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Found a PC relative pointer, but the section base is undefined.\n","sig":null,"attributes":[{"value":"/ Found a PC relative pointer, but the section base is undefined.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88162,"byte_end":88229,"line_start":238,"line_end":238,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8258},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88359,"byte_end":88400,"line_start":241,"line_end":241,"column_start":5,"column_end":46},"name":"TextRelativePointerButTextBaseIsUndefined","qualname":"::read::Error::TextRelativePointerButTextBaseIsUndefined","value":"Error::TextRelativePointerButTextBaseIsUndefined","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Found a `.text` relative pointer, but the `.text` base is undefined.\n","sig":null,"attributes":[{"value":"/ Found a `.text` relative pointer, but the `.text` base is undefined.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88282,"byte_end":88354,"line_start":240,"line_end":240,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8260},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88477,"byte_end":88518,"line_start":243,"line_end":243,"column_start":5,"column_end":46},"name":"DataRelativePointerButDataBaseIsUndefined","qualname":"::read::Error::DataRelativePointerButDataBaseIsUndefined","value":"Error::DataRelativePointerButDataBaseIsUndefined","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Found a data relative pointer, but the data base is undefined.\n","sig":null,"attributes":[{"value":"/ Found a data relative pointer, but the data base is undefined.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88406,"byte_end":88472,"line_start":242,"line_end":242,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8262},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88623,"byte_end":88654,"line_start":246,"line_end":246,"column_start":5,"column_end":36},"name":"FuncRelativePointerInBadContext","qualname":"::read::Error::FuncRelativePointerInBadContext","value":"Error::FuncRelativePointerInBadContext","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Found a function relative pointer in a context that does not have a\n function base.\n","sig":null,"attributes":[{"value":"/ Found a function relative pointer in a context that does not have a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88524,"byte_end":88595,"line_start":244,"line_end":244,"column_start":5,"column_end":76}},{"value":"/ function base.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88600,"byte_end":88618,"line_start":245,"line_end":245,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8264},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88724,"byte_end":88754,"line_start":248,"line_end":248,"column_start":5,"column_end":35},"name":"CannotParseOmitPointerEncoding","qualname":"::read::Error::CannotParseOmitPointerEncoding","value":"Error::CannotParseOmitPointerEncoding","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Cannot parse a pointer with a `DW_EH_PE_omit` encoding.\n","sig":null,"attributes":[{"value":"/ Cannot parse a pointer with a `DW_EH_PE_omit` encoding.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88660,"byte_end":88719,"line_start":247,"line_end":247,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8266},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88811,"byte_end":88828,"line_start":250,"line_end":250,"column_start":5,"column_end":22},"name":"BadUnsignedLeb128","qualname":"::read::Error::BadUnsignedLeb128","value":"Error::BadUnsignedLeb128","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" An error parsing an unsigned LEB128 value.\n","sig":null,"attributes":[{"value":"/ An error parsing an unsigned LEB128 value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88760,"byte_end":88806,"line_start":249,"line_end":249,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8268},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88882,"byte_end":88897,"line_start":252,"line_end":252,"column_start":5,"column_end":20},"name":"BadSignedLeb128","qualname":"::read::Error::BadSignedLeb128","value":"Error::BadSignedLeb128","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" An error parsing a signed LEB128 value.\n","sig":null,"attributes":[{"value":"/ An error parsing a signed LEB128 value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88834,"byte_end":88877,"line_start":251,"line_end":251,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8270},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89005,"byte_end":89024,"line_start":255,"line_end":255,"column_start":5,"column_end":24},"name":"AbbreviationTagZero","qualname":"::read::Error::AbbreviationTagZero","value":"Error::AbbreviationTagZero","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" An abbreviation declared that its tag is zero, but zero is reserved for\n null records.\n","sig":null,"attributes":[{"value":"/ An abbreviation declared that its tag is zero, but zero is reserved for","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88903,"byte_end":88978,"line_start":253,"line_end":253,"column_start":5,"column_end":80}},{"value":"/ null records.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88983,"byte_end":89000,"line_start":254,"line_end":254,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8272},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89144,"byte_end":89161,"line_start":258,"line_end":258,"column_start":5,"column_end":22},"name":"AttributeFormZero","qualname":"::read::Error::AttributeFormZero","value":"Error::AttributeFormZero","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" An attribute specification declared that its form is zero, but zero is\n reserved for null records.\n","sig":null,"attributes":[{"value":"/ An attribute specification declared that its form is zero, but zero is","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89030,"byte_end":89104,"line_start":256,"line_end":256,"column_start":5,"column_end":79}},{"value":"/ reserved for null records.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89109,"byte_end":89139,"line_start":257,"line_end":257,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8274},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89259,"byte_end":89273,"line_start":261,"line_end":261,"column_start":5,"column_end":19},"name":"BadHasChildren","qualname":"::read::Error::BadHasChildren","value":"Error::BadHasChildren","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" The abbreviation's has-children byte was not one of\n `DW_CHILDREN_{yes,no}`.\n","sig":null,"attributes":[{"value":"/ The abbreviation's has-children byte was not one of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89167,"byte_end":89222,"line_start":259,"line_end":259,"column_start":5,"column_end":60}},{"value":"/ `DW_CHILDREN_{yes,no}`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89227,"byte_end":89254,"line_start":260,"line_end":260,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8276},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89323,"byte_end":89332,"line_start":263,"line_end":263,"column_start":5,"column_end":14},"name":"BadLength","qualname":"::read::Error::BadLength","value":"Error::BadLength","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" The specified length is impossible.\n","sig":null,"attributes":[{"value":"/ The specified length is impossible.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89279,"byte_end":89318,"line_start":262,"line_end":262,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8278},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89381,"byte_end":89392,"line_start":265,"line_end":265,"column_start":5,"column_end":16},"name":"UnknownForm","qualname":"::read::Error::UnknownForm","value":"Error::UnknownForm","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Found an unknown `DW_FORM_*` type.\n","sig":null,"attributes":[{"value":"/ Found an unknown `DW_FORM_*` type.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89338,"byte_end":89376,"line_start":264,"line_end":264,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8280},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89445,"byte_end":89457,"line_start":267,"line_end":267,"column_start":5,"column_end":17},"name":"ExpectedZero","qualname":"::read::Error::ExpectedZero","value":"Error::ExpectedZero","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Expected a zero, found something else.\n","sig":null,"attributes":[{"value":"/ Expected a zero, found something else.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89398,"byte_end":89440,"line_start":266,"line_end":266,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8282},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89526,"byte_end":89551,"line_start":269,"line_end":269,"column_start":5,"column_end":30},"name":"DuplicateAbbreviationCode","qualname":"::read::Error::DuplicateAbbreviationCode","value":"Error::DuplicateAbbreviationCode","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Found an abbreviation code that has already been used.\n","sig":null,"attributes":[{"value":"/ Found an abbreviation code that has already been used.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89463,"byte_end":89521,"line_start":268,"line_end":268,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8284},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89591,"byte_end":89606,"line_start":271,"line_end":271,"column_start":5,"column_end":20},"name":"DuplicateArange","qualname":"::read::Error::DuplicateArange","value":"Error::DuplicateArange","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Found a duplicate arange.\n","sig":null,"attributes":[{"value":"/ Found a duplicate arange.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89557,"byte_end":89586,"line_start":270,"line_end":270,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8286},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89660,"byte_end":89681,"line_start":273,"line_end":273,"column_start":5,"column_end":26},"name":"UnknownReservedLength","qualname":"::read::Error::UnknownReservedLength","value":"Error::UnknownReservedLength","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Found an unknown reserved length value.\n","sig":null,"attributes":[{"value":"/ Found an unknown reserved length value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89612,"byte_end":89655,"line_start":272,"line_end":272,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8288},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89727,"byte_end":89741,"line_start":275,"line_end":275,"column_start":5,"column_end":19},"name":"UnknownVersion","qualname":"::read::Error::UnknownVersion","value":"Error::UnknownVersion(u64)","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Found an unknown DWARF version.\n","sig":null,"attributes":[{"value":"/ Found an unknown DWARF version.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89687,"byte_end":89722,"line_start":274,"line_end":274,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8291},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89810,"byte_end":89829,"line_start":277,"line_end":277,"column_start":5,"column_end":24},"name":"UnknownAbbreviation","qualname":"::read::Error::UnknownAbbreviation","value":"Error::UnknownAbbreviation","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Found a record with an unknown abbreviation code.\n","sig":null,"attributes":[{"value":"/ Found a record with an unknown abbreviation code.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89752,"byte_end":89805,"line_start":276,"line_end":276,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8293},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89888,"byte_end":89901,"line_start":279,"line_end":279,"column_start":5,"column_end":18},"name":"UnexpectedEof","qualname":"::read::Error::UnexpectedEof","value":"Error::UnexpectedEof(ReaderOffsetId)","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Hit the end of input before it was expected.\n","sig":null,"attributes":[{"value":"/ Hit the end of input before it was expected.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89835,"byte_end":89883,"line_start":278,"line_end":278,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8296},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89973,"byte_end":89987,"line_start":281,"line_end":281,"column_start":5,"column_end":19},"name":"UnexpectedNull","qualname":"::read::Error::UnexpectedNull","value":"Error::UnexpectedNull","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Read a null entry before it was expected.\n","sig":null,"attributes":[{"value":"/ Read a null entry before it was expected.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89923,"byte_end":89968,"line_start":280,"line_end":280,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8298},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90035,"byte_end":90056,"line_start":283,"line_end":283,"column_start":5,"column_end":26},"name":"UnknownStandardOpcode","qualname":"::read::Error::UnknownStandardOpcode","value":"Error::UnknownStandardOpcode(constants::DwLns)","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Found an unknown standard opcode.\n","sig":null,"attributes":[{"value":"/ Found an unknown standard opcode.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":89993,"byte_end":90030,"line_start":282,"line_end":282,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8301},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90122,"byte_end":90143,"line_start":285,"line_end":285,"column_start":5,"column_end":26},"name":"UnknownExtendedOpcode","qualname":"::read::Error::UnknownExtendedOpcode","value":"Error::UnknownExtendedOpcode(constants::DwLne)","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Found an unknown extended opcode.\n","sig":null,"attributes":[{"value":"/ Found an unknown extended opcode.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90080,"byte_end":90117,"line_start":284,"line_end":284,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8304},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90220,"byte_end":90242,"line_start":287,"line_end":287,"column_start":5,"column_end":27},"name":"UnsupportedAddressSize","qualname":"::read::Error::UnsupportedAddressSize","value":"Error::UnsupportedAddressSize(u8)","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" The specified address size is not supported.\n","sig":null,"attributes":[{"value":"/ The specified address size is not supported.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90167,"byte_end":90215,"line_start":286,"line_end":286,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8307},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90304,"byte_end":90325,"line_start":289,"line_end":289,"column_start":5,"column_end":26},"name":"UnsupportedOffsetSize","qualname":"::read::Error::UnsupportedOffsetSize","value":"Error::UnsupportedOffsetSize(u8)","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" The specified offset size is not supported.\n","sig":null,"attributes":[{"value":"/ The specified offset size is not supported.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90252,"byte_end":90299,"line_start":288,"line_end":288,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8310},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90386,"byte_end":90406,"line_start":291,"line_end":291,"column_start":5,"column_end":25},"name":"UnsupportedFieldSize","qualname":"::read::Error::UnsupportedFieldSize","value":"Error::UnsupportedFieldSize(u8)","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" The specified field size is not supported.\n","sig":null,"attributes":[{"value":"/ The specified field size is not supported.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90335,"byte_end":90381,"line_start":290,"line_end":290,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8313},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90473,"byte_end":90501,"line_start":293,"line_end":293,"column_start":5,"column_end":33},"name":"MinimumInstructionLengthZero","qualname":"::read::Error::MinimumInstructionLengthZero","value":"Error::MinimumInstructionLengthZero","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" The minimum instruction length must not be zero.\n","sig":null,"attributes":[{"value":"/ The minimum instruction length must not be zero.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90416,"byte_end":90468,"line_start":292,"line_end":292,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8315},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90572,"byte_end":90607,"line_start":295,"line_end":295,"column_start":5,"column_end":40},"name":"MaximumOperationsPerInstructionZero","qualname":"::read::Error::MaximumOperationsPerInstructionZero","value":"Error::MaximumOperationsPerInstructionZero","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" The maximum operations per instruction must not be zero.\n","sig":null,"attributes":[{"value":"/ The maximum operations per instruction must not be zero.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90507,"byte_end":90567,"line_start":294,"line_end":294,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8317},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90654,"byte_end":90667,"line_start":297,"line_end":297,"column_start":5,"column_end":18},"name":"LineRangeZero","qualname":"::read::Error::LineRangeZero","value":"Error::LineRangeZero","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" The line range must not be zero.\n","sig":null,"attributes":[{"value":"/ The line range must not be zero.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90613,"byte_end":90649,"line_start":296,"line_end":296,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8319},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90715,"byte_end":90729,"line_start":299,"line_end":299,"column_start":5,"column_end":19},"name":"OpcodeBaseZero","qualname":"::read::Error::OpcodeBaseZero","value":"Error::OpcodeBaseZero","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" The opcode base must not be zero.\n","sig":null,"attributes":[{"value":"/ The opcode base must not be zero.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90673,"byte_end":90710,"line_start":298,"line_end":298,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8321},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90774,"byte_end":90781,"line_start":301,"line_end":301,"column_start":5,"column_end":12},"name":"BadUtf8","qualname":"::read::Error::BadUtf8","value":"Error::BadUtf8","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Found an invalid UTF-8 string.\n","sig":null,"attributes":[{"value":"/ Found an invalid UTF-8 string.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90735,"byte_end":90769,"line_start":300,"line_end":300,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8323},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90850,"byte_end":90858,"line_start":303,"line_end":303,"column_start":5,"column_end":13},"name":"NotCieId","qualname":"::read::Error::NotCieId","value":"Error::NotCieId","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Expected to find the CIE ID, but found something else.\n","sig":null,"attributes":[{"value":"/ Expected to find the CIE ID, but found something else.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90787,"byte_end":90845,"line_start":302,"line_end":302,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8325},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90939,"byte_end":90952,"line_start":305,"line_end":305,"column_start":5,"column_end":18},"name":"NotCiePointer","qualname":"::read::Error::NotCiePointer","value":"Error::NotCiePointer","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Expected to find a pointer to a CIE, but found the CIE ID instead.\n","sig":null,"attributes":[{"value":"/ Expected to find a pointer to a CIE, but found the CIE ID instead.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90864,"byte_end":90934,"line_start":304,"line_end":304,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8327},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91029,"byte_end":91042,"line_start":307,"line_end":307,"column_start":5,"column_end":18},"name":"NotFdePointer","qualname":"::read::Error::NotFdePointer","value":"Error::NotFdePointer","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Expected to find a pointer to an FDE, but found a CIE instead.\n","sig":null,"attributes":[{"value":"/ Expected to find a pointer to an FDE, but found a CIE instead.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":90958,"byte_end":91024,"line_start":306,"line_end":306,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8329},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91109,"byte_end":91124,"line_start":309,"line_end":309,"column_start":5,"column_end":20},"name":"BadBranchTarget","qualname":"::read::Error::BadBranchTarget","value":"Error::BadBranchTarget(u64)","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Invalid branch target for a DW_OP_bra or DW_OP_skip.\n","sig":null,"attributes":[{"value":"/ Invalid branch target for a DW_OP_bra or DW_OP_skip.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91048,"byte_end":91104,"line_start":308,"line_end":308,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8332},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91200,"byte_end":91224,"line_start":311,"line_end":311,"column_start":5,"column_end":29},"name":"InvalidPushObjectAddress","qualname":"::read::Error::InvalidPushObjectAddress","value":"Error::InvalidPushObjectAddress","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" DW_OP_push_object_address used but no address passed in.\n","sig":null,"attributes":[{"value":"/ DW_OP_push_object_address used but no address passed in.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91135,"byte_end":91195,"line_start":310,"line_end":310,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8334},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91299,"byte_end":91318,"line_start":313,"line_end":313,"column_start":5,"column_end":24},"name":"NotEnoughStackItems","qualname":"::read::Error::NotEnoughStackItems","value":"Error::NotEnoughStackItems","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Not enough items on the stack when evaluating an expression.\n","sig":null,"attributes":[{"value":"/ Not enough items on the stack when evaluating an expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91230,"byte_end":91294,"line_start":312,"line_end":312,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8336},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91379,"byte_end":91396,"line_start":315,"line_end":315,"column_start":5,"column_end":22},"name":"TooManyIterations","qualname":"::read::Error::TooManyIterations","value":"Error::TooManyIterations","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Too many iterations to compute the expression.\n","sig":null,"attributes":[{"value":"/ Too many iterations to compute the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91324,"byte_end":91374,"line_start":314,"line_end":314,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8338},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91488,"byte_end":91505,"line_start":318,"line_end":318,"column_start":5,"column_end":22},"name":"InvalidExpression","qualname":"::read::Error::InvalidExpression","value":"Error::InvalidExpression(constants::DwOp)","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" An unrecognized operation was found while parsing a DWARF\n expression.\n","sig":null,"attributes":[{"value":"/ An unrecognized operation was found while parsing a DWARF","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91402,"byte_end":91463,"line_start":316,"line_end":316,"column_start":5,"column_end":66}},{"value":"/ expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91468,"byte_end":91483,"line_start":317,"line_end":317,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8341},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91625,"byte_end":91637,"line_start":321,"line_end":321,"column_start":5,"column_end":17},"name":"InvalidPiece","qualname":"::read::Error::InvalidPiece","value":"Error::InvalidPiece","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" The expression had a piece followed by an expression\n terminator without a piece.\n","sig":null,"attributes":[{"value":"/ The expression had a piece followed by an expression","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91528,"byte_end":91584,"line_start":319,"line_end":319,"column_start":5,"column_end":61}},{"value":"/ terminator without a piece.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91589,"byte_end":91620,"line_start":320,"line_end":320,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8343},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91780,"byte_end":91807,"line_start":324,"line_end":324,"column_start":5,"column_end":32},"name":"InvalidExpressionTerminator","qualname":"::read::Error::InvalidExpressionTerminator","value":"Error::InvalidExpressionTerminator(u64)","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" An expression-terminating operation was followed by something\n other than the end of the expression or a piece operation.\n","sig":null,"attributes":[{"value":"/ An expression-terminating operation was followed by something","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91643,"byte_end":91708,"line_start":322,"line_end":322,"column_start":5,"column_end":70}},{"value":"/ other than the end of the expression or a piece operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91713,"byte_end":91775,"line_start":323,"line_end":323,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8346},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91885,"byte_end":91899,"line_start":326,"line_end":326,"column_start":5,"column_end":19},"name":"DivisionByZero","qualname":"::read::Error::DivisionByZero","value":"Error::DivisionByZero","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Division or modulus by zero when evaluating an expression.\n","sig":null,"attributes":[{"value":"/ Division or modulus by zero when evaluating an expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91818,"byte_end":91880,"line_start":325,"line_end":325,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8348},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91961,"byte_end":91973,"line_start":328,"line_end":328,"column_start":5,"column_end":17},"name":"TypeMismatch","qualname":"::read::Error::TypeMismatch","value":"Error::TypeMismatch","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" An expression operation used mismatching types.\n","sig":null,"attributes":[{"value":"/ An expression operation used mismatching types.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91905,"byte_end":91956,"line_start":327,"line_end":327,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8350},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92076,"byte_end":92096,"line_start":331,"line_end":331,"column_start":5,"column_end":25},"name":"IntegralTypeRequired","qualname":"::read::Error::IntegralTypeRequired","value":"Error::IntegralTypeRequired","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" An expression operation required an integral type but saw a\n floating point type.\n","sig":null,"attributes":[{"value":"/ An expression operation required an integral type but saw a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":91979,"byte_end":92042,"line_start":329,"line_end":329,"column_start":5,"column_end":68}},{"value":"/ floating point type.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92047,"byte_end":92071,"line_start":330,"line_end":330,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8352},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92169,"byte_end":92193,"line_start":333,"line_end":333,"column_start":5,"column_end":29},"name":"UnsupportedTypeOperation","qualname":"::read::Error::UnsupportedTypeOperation","value":"Error::UnsupportedTypeOperation","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" An expression operation used types that are not supported.\n","sig":null,"attributes":[{"value":"/ An expression operation used types that are not supported.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92102,"byte_end":92164,"line_start":332,"line_end":332,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8354},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92272,"byte_end":92294,"line_start":335,"line_end":335,"column_start":5,"column_end":27},"name":"InvalidShiftExpression","qualname":"::read::Error::InvalidShiftExpression","value":"Error::InvalidShiftExpression","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" The shift value in an expression must be a non-negative integer.\n","sig":null,"attributes":[{"value":"/ The shift value in an expression must be a non-negative integer.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92199,"byte_end":92267,"line_start":334,"line_end":334,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8356},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92341,"byte_end":92368,"line_start":337,"line_end":337,"column_start":5,"column_end":32},"name":"UnknownCallFrameInstruction","qualname":"::read::Error::UnknownCallFrameInstruction","value":"Error::UnknownCallFrameInstruction(constants::DwCfa)","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" An unknown DW_CFA_* instruction.\n","sig":null,"attributes":[{"value":"/ An unknown DW_CFA_* instruction.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92300,"byte_end":92336,"line_start":336,"line_end":336,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8359},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92454,"byte_end":92473,"line_start":339,"line_end":339,"column_start":5,"column_end":24},"name":"InvalidAddressRange","qualname":"::read::Error::InvalidAddressRange","value":"Error::InvalidAddressRange","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" The end of an address range was before the beginning.\n","sig":null,"attributes":[{"value":"/ The end of an address range was before the beginning.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92392,"byte_end":92449,"line_start":338,"line_end":338,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8361},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92548,"byte_end":92575,"line_start":341,"line_end":341,"column_start":5,"column_end":32},"name":"InvalidLocationAddressRange","qualname":"::read::Error::InvalidLocationAddressRange","value":"Error::InvalidLocationAddressRange","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" The end offset of a loc list entry was before the beginning.\n","sig":null,"attributes":[{"value":"/ The end offset of a loc list entry was before the beginning.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92479,"byte_end":92543,"line_start":340,"line_end":340,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8363},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92673,"byte_end":92703,"line_start":344,"line_end":344,"column_start":5,"column_end":35},"name":"CfiInstructionInInvalidContext","qualname":"::read::Error::CfiInstructionInInvalidContext","value":"Error::CfiInstructionInInvalidContext","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Encountered a call frame instruction in a context in which it is not\n valid.\n","sig":null,"attributes":[{"value":"/ Encountered a call frame instruction in a context in which it is not","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92581,"byte_end":92653,"line_start":342,"line_end":342,"column_start":5,"column_end":77}},{"value":"/ valid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92658,"byte_end":92668,"line_start":343,"line_end":343,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8365},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92869,"byte_end":92886,"line_start":347,"line_end":347,"column_start":5,"column_end":22},"name":"PopWithEmptyStack","qualname":"::read::Error::PopWithEmptyStack","value":"Error::PopWithEmptyStack","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" When evaluating call frame instructions, found a `DW_CFA_restore_state`\n stack pop instruction, but the stack was empty, and had nothing to pop.\n","sig":null,"attributes":[{"value":"/ When evaluating call frame instructions, found a `DW_CFA_restore_state`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92709,"byte_end":92784,"line_start":345,"line_end":345,"column_start":5,"column_end":80}},{"value":"/ stack pop instruction, but the stack was empty, and had nothing to pop.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92789,"byte_end":92864,"line_start":346,"line_end":346,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8367},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92947,"byte_end":92969,"line_start":349,"line_end":349,"column_start":5,"column_end":27},"name":"NoUnwindInfoForAddress","qualname":"::read::Error::NoUnwindInfoForAddress","value":"Error::NoUnwindInfoForAddress","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Do not have unwind info for the given address.\n","sig":null,"attributes":[{"value":"/ Do not have unwind info for the given address.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92892,"byte_end":92942,"line_start":348,"line_end":348,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8369},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93044,"byte_end":93061,"line_start":351,"line_end":351,"column_start":5,"column_end":22},"name":"UnsupportedOffset","qualname":"::read::Error::UnsupportedOffset","value":"Error::UnsupportedOffset","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" An offset value was larger than the maximum supported value.\n","sig":null,"attributes":[{"value":"/ An offset value was larger than the maximum supported value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":92975,"byte_end":93039,"line_start":350,"line_end":350,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8371},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93132,"byte_end":93154,"line_start":353,"line_end":353,"column_start":5,"column_end":27},"name":"UnknownPointerEncoding","qualname":"::read::Error::UnknownPointerEncoding","value":"Error::UnknownPointerEncoding","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" The given pointer encoding is either unknown or invalid.\n","sig":null,"attributes":[{"value":"/ The given pointer encoding is either unknown or invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93067,"byte_end":93127,"line_start":352,"line_end":352,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8373},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93211,"byte_end":93231,"line_start":355,"line_end":355,"column_start":5,"column_end":25},"name":"NoEntryAtGivenOffset","qualname":"::read::Error::NoEntryAtGivenOffset","value":"Error::NoEntryAtGivenOffset","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Did not find an entry at the given offset.\n","sig":null,"attributes":[{"value":"/ Did not find an entry at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93160,"byte_end":93206,"line_start":354,"line_end":354,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8375},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93280,"byte_end":93297,"line_start":357,"line_end":357,"column_start":5,"column_end":22},"name":"OffsetOutOfBounds","qualname":"::read::Error::OffsetOutOfBounds","value":"Error::OffsetOutOfBounds","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" The given offset is out of bounds.\n","sig":null,"attributes":[{"value":"/ The given offset is out of bounds.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93237,"byte_end":93275,"line_start":356,"line_end":356,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8377},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93346,"byte_end":93365,"line_start":359,"line_end":359,"column_start":5,"column_end":24},"name":"UnknownAugmentation","qualname":"::read::Error::UnknownAugmentation","value":"Error::UnknownAugmentation","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Found an unknown CFI augmentation.\n","sig":null,"attributes":[{"value":"/ Found an unknown CFI augmentation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93303,"byte_end":93341,"line_start":358,"line_end":358,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8379},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93429,"byte_end":93455,"line_start":361,"line_end":361,"column_start":5,"column_end":31},"name":"UnsupportedPointerEncoding","qualname":"::read::Error::UnsupportedPointerEncoding","value":"Error::UnsupportedPointerEncoding","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" We do not support the given pointer encoding yet.\n","sig":null,"attributes":[{"value":"/ We do not support the given pointer encoding yet.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93371,"byte_end":93424,"line_start":360,"line_end":360,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8381},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93516,"byte_end":93535,"line_start":363,"line_end":363,"column_start":5,"column_end":24},"name":"UnsupportedRegister","qualname":"::read::Error::UnsupportedRegister","value":"Error::UnsupportedRegister(u64)","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Registers larger than `u16` are not supported.\n","sig":null,"attributes":[{"value":"/ Registers larger than `u16` are not supported.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93461,"byte_end":93511,"line_start":362,"line_end":362,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8384},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93624,"byte_end":93644,"line_start":365,"line_end":365,"column_start":5,"column_end":25},"name":"TooManyRegisterRules","qualname":"::read::Error::TooManyRegisterRules","value":"Error::TooManyRegisterRules","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" The CFI program defined more register rules than we have storage for.\n","sig":null,"attributes":[{"value":"/ The CFI program defined more register rules than we have storage for.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93546,"byte_end":93619,"line_start":364,"line_end":364,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8386},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93741,"byte_end":93753,"line_start":368,"line_end":368,"column_start":5,"column_end":17},"name":"CfiStackFull","qualname":"::read::Error::CfiStackFull","value":"Error::CfiStackFull","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Attempted to push onto the CFI stack, but it was already at full\n capacity.\n","sig":null,"attributes":[{"value":"/ Attempted to push onto the CFI stack, but it was already at full","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93650,"byte_end":93718,"line_start":366,"line_end":366,"column_start":5,"column_end":73}},{"value":"/ capacity.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93723,"byte_end":93736,"line_start":367,"line_end":367,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8388},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93891,"byte_end":93916,"line_start":371,"line_end":371,"column_start":5,"column_end":30},"name":"VariableLengthSearchTable","qualname":"::read::Error::VariableLengthSearchTable","value":"Error::VariableLengthSearchTable","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" The `.eh_frame_hdr` binary search table claims to be variable-length encoded,\n which makes binary search impossible.\n","sig":null,"attributes":[{"value":"/ The `.eh_frame_hdr` binary search table claims to be variable-length encoded,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93759,"byte_end":93840,"line_start":369,"line_end":369,"column_start":5,"column_end":86}},{"value":"/ which makes binary search impossible.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93845,"byte_end":93886,"line_start":370,"line_end":370,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8390},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93986,"byte_end":94005,"line_start":373,"line_end":373,"column_start":5,"column_end":24},"name":"UnsupportedUnitType","qualname":"::read::Error::UnsupportedUnitType","value":"Error::UnsupportedUnitType","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" The `DW_UT_*` value for this unit is not supported yet.\n","sig":null,"attributes":[{"value":"/ The `DW_UT_*` value for this unit is not supported yet.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":93922,"byte_end":93981,"line_start":372,"line_end":372,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8392},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94068,"byte_end":94091,"line_start":375,"line_end":375,"column_start":5,"column_end":28},"name":"UnsupportedAddressIndex","qualname":"::read::Error::UnsupportedAddressIndex","value":"Error::UnsupportedAddressIndex","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Ranges using AddressIndex are not supported yet.\n","sig":null,"attributes":[{"value":"/ Ranges using AddressIndex are not supported yet.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94011,"byte_end":94063,"line_start":374,"line_end":374,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8394},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94158,"byte_end":94180,"line_start":377,"line_end":377,"column_start":5,"column_end":27},"name":"UnsupportedSegmentSize","qualname":"::read::Error::UnsupportedSegmentSize","value":"Error::UnsupportedSegmentSize","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Nonzero segment selector sizes aren't supported yet.\n","sig":null,"attributes":[{"value":"/ Nonzero segment selector sizes aren't supported yet.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94097,"byte_end":94153,"line_start":376,"line_end":376,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8396},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94256,"byte_end":94270,"line_start":379,"line_end":379,"column_start":5,"column_end":19},"name":"MissingUnitDie","qualname":"::read::Error::MissingUnitDie","value":"Error::MissingUnitDie","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" A compilation unit or type unit is missing its top level DIE.\n","sig":null,"attributes":[{"value":"/ A compilation unit or type unit is missing its top level DIE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94186,"byte_end":94251,"line_start":378,"line_end":378,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8398},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94326,"byte_end":94350,"line_start":381,"line_end":381,"column_start":5,"column_end":29},"name":"UnsupportedAttributeForm","qualname":"::read::Error::UnsupportedAttributeForm","value":"Error::UnsupportedAttributeForm","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" A DIE attribute used an unsupported form.\n","sig":null,"attributes":[{"value":"/ A DIE attribute used an unsupported form.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94276,"byte_end":94321,"line_start":380,"line_end":380,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8400},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94407,"byte_end":94433,"line_start":383,"line_end":383,"column_start":5,"column_end":31},"name":"MissingFileEntryFormatPath","qualname":"::read::Error::MissingFileEntryFormatPath","value":"Error::MissingFileEntryFormatPath","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Missing DW_LNCT_path in file entry format.\n","sig":null,"attributes":[{"value":"/ Missing DW_LNCT_path in file entry format.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94356,"byte_end":94402,"line_start":382,"line_end":382,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8402},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94496,"byte_end":94524,"line_start":385,"line_end":385,"column_start":5,"column_end":33},"name":"ExpectedStringAttributeValue","qualname":"::read::Error::ExpectedStringAttributeValue","value":"Error::ExpectedStringAttributeValue","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" Expected an attribute value to be a string form.\n","sig":null,"attributes":[{"value":"/ Expected an attribute value to be a string form.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94439,"byte_end":94491,"line_start":384,"line_end":384,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8404},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94591,"byte_end":94611,"line_start":387,"line_end":387,"column_start":5,"column_end":25},"name":"InvalidImplicitConst","qualname":"::read::Error::InvalidImplicitConst","value":"Error::InvalidImplicitConst","parent":{"krate":0,"index":8253},"children":[],"decl_id":null,"docs":" `DW_FORM_implicit_const` used in an invalid context.\n","sig":null,"attributes":[{"value":"/ `DW_FORM_implicit_const` used in an invalid context.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94530,"byte_end":94586,"line_start":386,"line_end":386,"column_start":5,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":8253},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88097,"byte_end":88102,"line_start":235,"line_end":235,"column_start":10,"column_end":15},"name":"Error","qualname":"::read::Error","value":"pub enum Error {\n\n    /// An I/O error occurred while reading.\n    Io,\n\n    /// Found a PC relative pointer, but the section base is undefined.\n    PcRelativePointerButSectionBaseIsUndefined,\n\n    /// Found a `.text` relative pointer, but the `.text` base is undefined.\n    TextRelativePointerButTextBaseIsUndefined,\n\n    /// Found a data relative pointer, but the data base is undefined.\n    DataRelativePointerButDataBaseIsUndefined,\n\n    /// Found a function relative pointer in a context that does not have a\n    /// function base.\n    FuncRelativePointerInBadContext,\n\n    /// Cannot parse a pointer with a `DW_EH_PE_omit` encoding.\n    CannotParseOmitPointerEncoding,\n\n    /// An error parsing an unsigned LEB128 value.\n    BadUnsignedLeb128,\n\n    /// An error parsing a signed LEB128 value.\n    BadSignedLeb128,\n\n    /// An abbreviation declared that its tag is zero, but zero is reserved for\n    /// null records.\n    AbbreviationTagZero,\n\n    /// An attribute specification declared that its form is zero, but zero is\n    /// reserved for null records.\n    AttributeFormZero,\n\n    /// The abbreviation's has-children byte was not one of\n    /// `DW_CHILDREN_{yes,no}`.\n    BadHasChildren,\n\n    /// The specified length is impossible.\n    BadLength,\n\n    /// Found an unknown `DW_FORM_*` type.\n    UnknownForm,\n\n    /// Expected a zero, found something else.\n    ExpectedZero,\n\n    /// Found an abbreviation code that has already been used.\n    DuplicateAbbreviationCode,\n\n    /// Found a duplicate arange.\n    DuplicateArange,\n\n    /// Found an unknown reserved length value.\n    UnknownReservedLength,\n\n    /// Found an unknown DWARF version.\n    UnknownVersion(u64),\n\n    /// Found a record with an unknown abbreviation code.\n    UnknownAbbreviation,\n\n    /// Hit the end of input before it was expected.\n    UnexpectedEof(ReaderOffsetId),\n\n    /// Read a null entry before it was expected.\n    UnexpectedNull,\n\n    /// Found an unknown standard opcode.\n    UnknownStandardOpcode(constants::DwLns),\n\n    /// Found an unknown extended opcode.\n    UnknownExtendedOpcode(constants::DwLne),\n\n    /// The specified address size is not supported.\n    UnsupportedAddressSize(u8),\n\n    /// The specified offset size is not supported.\n    UnsupportedOffsetSize(u8),\n\n    /// The specified field size is not supported.\n    UnsupportedFieldSize(u8),\n\n    /// The minimum instruction length must not be zero.\n    MinimumInstructionLengthZero,\n\n    /// The maximum operations per instruction must not be zero.\n    MaximumOperationsPerInstructionZero,\n\n    /// The line range must not be zero.\n    LineRangeZero,\n\n    /// The opcode base must not be zero.\n    OpcodeBaseZero,\n\n    /// Found an invalid UTF-8 string.\n    BadUtf8,\n\n    /// Expected to find the CIE ID, but found something else.\n    NotCieId,\n\n    /// Expected to find a pointer to a CIE, but found the CIE ID instead.\n    NotCiePointer,\n\n    /// Expected to find a pointer to an FDE, but found a CIE instead.\n    NotFdePointer,\n\n    /// Invalid branch target for a DW_OP_bra or DW_OP_skip.\n    BadBranchTarget(u64),\n\n    /// DW_OP_push_object_address used but no address passed in.\n    InvalidPushObjectAddress,\n\n    /// Not enough items on the stack when evaluating an expression.\n    NotEnoughStackItems,\n\n    /// Too many iterations to compute the expression.\n    TooManyIterations,\n\n    /// An unrecognized operation was found while parsing a DWARF\n    /// expression.\n    InvalidExpression(constants::DwOp),\n\n    /// The expression had a piece followed by an expression\n    /// terminator without a piece.\n    InvalidPiece,\n\n    /// An expression-terminating operation was followed by something\n    /// other than the end of the expression or a piece operation.\n    InvalidExpressionTerminator(u64),\n\n    /// Division or modulus by zero when evaluating an expression.\n    DivisionByZero,\n\n    /// An expression operation used mismatching types.\n    TypeMismatch,\n\n    /// An expression operation required an integral type but saw a\n    /// floating point type.\n    IntegralTypeRequired,\n\n    /// An expression operation used types that are not supported.\n    UnsupportedTypeOperation,\n\n    /// The shift value in an expression must be a non-negative integer.\n    InvalidShiftExpression,\n\n    /// An unknown DW_CFA_* instruction.\n    UnknownCallFrameInstruction(constants::DwCfa),\n\n    /// The end of an address range was before the beginning.\n    InvalidAddressRange,\n\n    /// The end offset of a loc list entry was before the beginning.\n    InvalidLocationAddressRange,\n\n    /// Encountered a call frame instruction in a context in which it is not\n    /// valid.\n    CfiInstructionInInvalidContext,\n\n    /// When evaluating call frame instructions, found a `DW_CFA_restore_state`\n    /// stack pop instruction, but the stack was empty, and had nothing to pop.\n    PopWithEmptyStack,\n\n    /// Do not have unwind info for the given address.\n    NoUnwindInfoForAddress,\n\n    /// An offset value was larger than the maximum supported value.\n    UnsupportedOffset,\n\n    /// The given pointer encoding is either unknown or invalid.\n    UnknownPointerEncoding,\n\n    /// Did not find an entry at the given offset.\n    NoEntryAtGivenOffset,\n\n    /// The given offset is out of bounds.\n    OffsetOutOfBounds,\n\n    /// Found an unknown CFI augmentation.\n    UnknownAugmentation,\n\n    /// We do not support the given pointer encoding yet.\n    UnsupportedPointerEncoding,\n\n    /// Registers larger than `u16` are not supported.\n    UnsupportedRegister(u64),\n\n    /// The CFI program defined more register rules than we have storage for.\n    TooManyRegisterRules,\n\n    /// Attempted to push onto the CFI stack, but it was already at full\n    /// capacity.\n    CfiStackFull,\n\n    /// The `.eh_frame_hdr` binary search table claims to be variable-length encoded,\n    /// which makes binary search impossible.\n    VariableLengthSearchTable,\n\n    /// The `DW_UT_*` value for this unit is not supported yet.\n    UnsupportedUnitType,\n\n    /// Ranges using AddressIndex are not supported yet.\n    UnsupportedAddressIndex,\n\n    /// Nonzero segment selector sizes aren't supported yet.\n    UnsupportedSegmentSize,\n\n    /// A compilation unit or type unit is missing its top level DIE.\n    MissingUnitDie,\n\n    /// A DIE attribute used an unsupported form.\n    UnsupportedAttributeForm,\n\n    /// Missing DW_LNCT_path in file entry format.\n    MissingFileEntryFormatPath,\n\n    /// Expected an attribute value to be a string form.\n    ExpectedStringAttributeValue,\n\n    /// `DW_FORM_implicit_const` used in an invalid context.\n    InvalidImplicitConst,\n}","parent":null,"children":[{"krate":0,"index":8254},{"krate":0,"index":8256},{"krate":0,"index":8258},{"krate":0,"index":8260},{"krate":0,"index":8262},{"krate":0,"index":8264},{"krate":0,"index":8266},{"krate":0,"index":8268},{"krate":0,"index":8270},{"krate":0,"index":8272},{"krate":0,"index":8274},{"krate":0,"index":8276},{"krate":0,"index":8278},{"krate":0,"index":8280},{"krate":0,"index":8282},{"krate":0,"index":8284},{"krate":0,"index":8286},{"krate":0,"index":8288},{"krate":0,"index":8291},{"krate":0,"index":8293},{"krate":0,"index":8296},{"krate":0,"index":8298},{"krate":0,"index":8301},{"krate":0,"index":8304},{"krate":0,"index":8307},{"krate":0,"index":8310},{"krate":0,"index":8313},{"krate":0,"index":8315},{"krate":0,"index":8317},{"krate":0,"index":8319},{"krate":0,"index":8321},{"krate":0,"index":8323},{"krate":0,"index":8325},{"krate":0,"index":8327},{"krate":0,"index":8329},{"krate":0,"index":8332},{"krate":0,"index":8334},{"krate":0,"index":8336},{"krate":0,"index":8338},{"krate":0,"index":8341},{"krate":0,"index":8343},{"krate":0,"index":8346},{"krate":0,"index":8348},{"krate":0,"index":8350},{"krate":0,"index":8352},{"krate":0,"index":8354},{"krate":0,"index":8356},{"krate":0,"index":8359},{"krate":0,"index":8361},{"krate":0,"index":8363},{"krate":0,"index":8365},{"krate":0,"index":8367},{"krate":0,"index":8369},{"krate":0,"index":8371},{"krate":0,"index":8373},{"krate":0,"index":8375},{"krate":0,"index":8377},{"krate":0,"index":8379},{"krate":0,"index":8381},{"krate":0,"index":8384},{"krate":0,"index":8386},{"krate":0,"index":8388},{"krate":0,"index":8390},{"krate":0,"index":8392},{"krate":0,"index":8394},{"krate":0,"index":8396},{"krate":0,"index":8398},{"krate":0,"index":8400},{"krate":0,"index":8402},{"krate":0,"index":8404}],"decl_id":null,"docs":" An error that occurred when parsing.\n","sig":null,"attributes":[{"value":"/ An error that occurred when parsing.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":88002,"byte_end":88042,"line_start":233,"line_end":233,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2197},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94865,"byte_end":94876,"line_start":399,"line_end":399,"column_start":12,"column_end":23},"name":"description","qualname":"<Error>::description","value":"pub fn description(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" A short description of the error.\n","sig":null,"attributes":[{"value":"/ A short description of the error.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94816,"byte_end":94853,"line_start":398,"line_end":398,"column_start":5,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":2201},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103071,"byte_end":103077,"line_start":547,"line_end":547,"column_start":10,"column_end":16},"name":"Result","qualname":"::read::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" The result of a parse.\n","sig":null,"attributes":[{"value":"/ The result of a parse.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103035,"byte_end":103061,"line_start":546,"line_end":546,"column_start":1,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":2203},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103531,"byte_end":103538,"line_start":561,"line_end":561,"column_start":11,"column_end":18},"name":"Section","qualname":"::read::Section","value":"Section<R>: From<R>","parent":null,"children":[{"krate":0,"index":2205},{"krate":0,"index":2206},{"krate":0,"index":2207},{"krate":0,"index":2208},{"krate":0,"index":2211},{"krate":0,"index":2212}],"decl_id":null,"docs":" A convenience trait for loading DWARF sections from object files.  To be\n used like:","sig":null,"attributes":[{"value":"/ A convenience trait for loading DWARF sections from object files.  To be","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103110,"byte_end":103186,"line_start":549,"line_end":549,"column_start":1,"column_end":77}},{"value":"/ used like:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103187,"byte_end":103201,"line_start":550,"line_end":550,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103202,"byte_end":103205,"line_start":551,"line_end":551,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103206,"byte_end":103213,"line_start":552,"line_end":552,"column_start":1,"column_end":8}},{"value":"/ use gimli::{DebugInfo, EndianSlice, LittleEndian, Reader, Section};","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103214,"byte_end":103285,"line_start":553,"line_end":553,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103286,"byte_end":103289,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103290,"byte_end":103329,"line_start":555,"line_end":555,"column_start":1,"column_end":40}},{"value":"/ let reader = EndianSlice::new(&buf, LittleEndian);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103330,"byte_end":103384,"line_start":556,"line_end":556,"column_start":1,"column_end":55}},{"value":"/ let loader = |name| -> Result<_, ()> { Ok(reader) };","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103385,"byte_end":103441,"line_start":557,"line_end":557,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103442,"byte_end":103445,"line_start":558,"line_end":558,"column_start":1,"column_end":4}},{"value":"/ let debug_info: DebugInfo<_> = Section::load(loader).unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103446,"byte_end":103512,"line_start":559,"line_end":559,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103513,"byte_end":103520,"line_start":560,"line_end":560,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2205},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103606,"byte_end":103608,"line_start":563,"line_end":563,"column_start":8,"column_end":10},"name":"id","qualname":"::read::Section::id","value":"pub fn id() -> SectionId","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":" Returns the section id for this type.\n","sig":null,"attributes":[{"value":"/ Returns the section id for this type.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103557,"byte_end":103598,"line_start":562,"line_end":562,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2206},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103685,"byte_end":103697,"line_start":566,"line_end":566,"column_start":8,"column_end":20},"name":"section_name","qualname":"::read::Section::section_name","value":"pub fn section_name() -> &'static str","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":" Returns the ELF section name for this type.\n","sig":null,"attributes":[{"value":"/ Returns the ELF section name for this type.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103630,"byte_end":103677,"line_start":565,"line_end":565,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2207},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103851,"byte_end":103867,"line_start":572,"line_end":572,"column_start":8,"column_end":24},"name":"dwo_section_name","qualname":"::read::Section::dwo_section_name","value":"pub fn dwo_section_name() -> Option<&'static str>","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":" Returns the ELF section name (if any) for this type when used in a dwo\n file.\n","sig":null,"attributes":[{"value":"/ Returns the ELF section name (if any) for this type when used in a dwo","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103755,"byte_end":103829,"line_start":570,"line_end":570,"column_start":5,"column_end":79}},{"value":"/ file.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103834,"byte_end":103843,"line_start":571,"line_end":571,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2208},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":104005,"byte_end":104009,"line_start":577,"line_end":577,"column_start":8,"column_end":12},"name":"load","qualname":"::read::Section::load","value":"pub fn load<F, E>(F) -> core::result::Result<Self, E> where\nF: FnOnce(SectionId) -> core::result::Result<R, E>","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":" Try to load the section using the given loader function.\n","sig":null,"attributes":[{"value":"/ Try to load the section using the given loader function.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103937,"byte_end":103997,"line_start":576,"line_end":576,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2211},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":104230,"byte_end":104236,"line_start":585,"line_end":585,"column_start":8,"column_end":14},"name":"reader","qualname":"::read::Section::reader","value":"pub fn reader(&Self) -> &R where R: Reader","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":" Returns the `Reader` for this section.\n","sig":null,"attributes":[{"value":"/ Returns the `Reader` for this section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":104180,"byte_end":104222,"line_start":584,"line_end":584,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2212},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":104334,"byte_end":104350,"line_start":590,"line_end":590,"column_start":8,"column_end":24},"name":"lookup_offset_id","qualname":"::read::Section::lookup_offset_id","value":"pub fn lookup_offset_id(&Self, ReaderOffsetId)\n-> Option<(SectionId, R::Offset)> where R: Reader","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":" Returns the `Reader` for this section.\n","sig":null,"attributes":[{"value":"/ Returns the `Reader` for this section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":104284,"byte_end":104326,"line_start":589,"line_end":589,"column_start":5,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":2217},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::write","value":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","parent":null,"children":[{"krate":0,"index":2218},{"krate":0,"index":2219},{"krate":0,"index":2220},{"krate":0,"index":2221},{"krate":0,"index":2222},{"krate":0,"index":2243},{"krate":0,"index":2244},{"krate":0,"index":2290},{"krate":0,"index":2291},{"krate":0,"index":2328},{"krate":0,"index":2331},{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":2438},{"krate":0,"index":2439},{"krate":0,"index":2471},{"krate":0,"index":2472},{"krate":0,"index":2564},{"krate":0,"index":2565},{"krate":0,"index":2610},{"krate":0,"index":2611},{"krate":0,"index":2694},{"krate":0,"index":2695},{"krate":0,"index":2734},{"krate":0,"index":2735},{"krate":0,"index":2751},{"krate":0,"index":2752},{"krate":0,"index":2926},{"krate":0,"index":9698},{"krate":0,"index":9751},{"krate":0,"index":9749},{"krate":0,"index":9748},{"krate":0,"index":9744},{"krate":0,"index":9745},{"krate":0,"index":9741},{"krate":0,"index":9742},{"krate":0,"index":2927},{"krate":0,"index":2929},{"krate":0,"index":2930},{"krate":0,"index":9753},{"krate":0,"index":9773},{"krate":0,"index":9771},{"krate":0,"index":9770},{"krate":0,"index":9766},{"krate":0,"index":9767},{"krate":0,"index":9763},{"krate":0,"index":9764},{"krate":0,"index":9760},{"krate":0,"index":9775},{"krate":0,"index":9796},{"krate":0,"index":9794},{"krate":0,"index":9793},{"krate":0,"index":9789},{"krate":0,"index":9790},{"krate":0,"index":9786},{"krate":0,"index":9787},{"krate":0,"index":9783},{"krate":0,"index":9798},{"krate":0,"index":9814},{"krate":0,"index":9812},{"krate":0,"index":9811},{"krate":0,"index":9807},{"krate":0,"index":9808},{"krate":0,"index":9804},{"krate":0,"index":9805},{"krate":0,"index":9801},{"krate":0,"index":2932},{"krate":0,"index":2936},{"krate":0,"index":2948}],"decl_id":null,"docs":" Write DWARF debugging information.","sig":null,"attributes":[{"value":"cfg(feature = \"write\")","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":2065,"byte_end":2090,"line_start":71,"line_end":71,"column_start":1,"column_end":26}},{"value":"/ Write DWARF debugging information.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1130689,"byte_end":1130727,"line_start":1,"line_end":1,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1130728,"byte_end":1130731,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ ## API Structure","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1130732,"byte_end":1130752,"line_start":3,"line_end":3,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1130753,"byte_end":1130756,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ This module works by building up a representation of the debugging information","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1130757,"byte_end":1130839,"line_start":5,"line_end":5,"column_start":1,"column_end":83}},{"value":"/ in memory, and then writing it all at once. It supports two major use cases:","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1130840,"byte_end":1130920,"line_start":6,"line_end":6,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1130921,"byte_end":1130924,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ * Use the [`DwarfUnit`](./struct.DwarfUnit.html) type when writing DWARF","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1130925,"byte_end":1131001,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ for a single compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131002,"byte_end":1131036,"line_start":9,"line_end":9,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131037,"byte_end":1131040,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * Use the [`Dwarf`](./struct.Dwarf.html) type when writing DWARF for multiple","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131041,"byte_end":1131122,"line_start":11,"line_end":11,"column_start":1,"column_end":82}},{"value":"/ compilation units.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131123,"byte_end":1131145,"line_start":12,"line_end":12,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131146,"byte_end":1131149,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The module also supports reading in DWARF debugging information and writing it out","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131150,"byte_end":1131236,"line_start":14,"line_end":14,"column_start":1,"column_end":87}},{"value":"/ again, possibly after modifying it. Create a [`read::Dwarf`](../read/struct.Dwarf.html)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131237,"byte_end":1131328,"line_start":15,"line_end":15,"column_start":1,"column_end":92}},{"value":"/ instance, and then use [`Dwarf::from`](./struct.Dwarf.html#method.from) to convert","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131329,"byte_end":1131415,"line_start":16,"line_end":16,"column_start":1,"column_end":87}},{"value":"/ it to a writable instance.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131416,"byte_end":1131446,"line_start":17,"line_end":17,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131447,"byte_end":1131450,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ## Example Usage","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131451,"byte_end":1131471,"line_start":19,"line_end":19,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131472,"byte_end":1131475,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Write a compilation unit containing only the top level DIE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131476,"byte_end":1131539,"line_start":21,"line_end":21,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131540,"byte_end":1131543,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131544,"byte_end":1131555,"line_start":23,"line_end":23,"column_start":1,"column_end":12}},{"value":"/ use gimli::write::{","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131556,"byte_end":1131579,"line_start":24,"line_end":24,"column_start":1,"column_end":24}},{"value":"/     Address, AttributeValue, DwarfUnit, EndianVec, Error, Range, RangeList, Sections,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131580,"byte_end":1131669,"line_start":25,"line_end":25,"column_start":1,"column_end":90}},{"value":"/ };","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131670,"byte_end":1131676,"line_start":26,"line_end":26,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131677,"byte_end":1131680,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ fn example() -> Result<(), Error> {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131681,"byte_end":1131720,"line_start":28,"line_end":28,"column_start":1,"column_end":40}},{"value":"/     // Choose the encoding parameters.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131721,"byte_end":1131763,"line_start":29,"line_end":29,"column_start":1,"column_end":43}},{"value":"/     let encoding = gimli::Encoding {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131764,"byte_end":1131804,"line_start":30,"line_end":30,"column_start":1,"column_end":41}},{"value":"/         format: gimli::Format::Dwarf32,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131805,"byte_end":1131848,"line_start":31,"line_end":31,"column_start":1,"column_end":44}},{"value":"/         version: 5,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131849,"byte_end":1131872,"line_start":32,"line_end":32,"column_start":1,"column_end":24}},{"value":"/         address_size: 8,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131873,"byte_end":1131901,"line_start":33,"line_end":33,"column_start":1,"column_end":29}},{"value":"/     };","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131902,"byte_end":1131912,"line_start":34,"line_end":34,"column_start":1,"column_end":11}},{"value":"/     // Create a container for a single compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131913,"byte_end":1131973,"line_start":35,"line_end":35,"column_start":1,"column_end":61}},{"value":"/     let mut dwarf = DwarfUnit::new(encoding);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1131974,"byte_end":1132023,"line_start":36,"line_end":36,"column_start":1,"column_end":50}},{"value":"/     // Set a range attribute on the root DIE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132024,"byte_end":1132073,"line_start":37,"line_end":37,"column_start":1,"column_end":50}},{"value":"/     let range_list = RangeList(vec![Range::StartLength {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132074,"byte_end":1132134,"line_start":38,"line_end":38,"column_start":1,"column_end":61}},{"value":"/         begin: Address::Constant(0x100),","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132135,"byte_end":1132179,"line_start":39,"line_end":39,"column_start":1,"column_end":45}},{"value":"/         length: 42,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132180,"byte_end":1132203,"line_start":40,"line_end":40,"column_start":1,"column_end":24}},{"value":"/     }]);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132204,"byte_end":1132216,"line_start":41,"line_end":41,"column_start":1,"column_end":13}},{"value":"/     let range_list_id = dwarf.unit.ranges.add(range_list);","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132217,"byte_end":1132279,"line_start":42,"line_end":42,"column_start":1,"column_end":63}},{"value":"/     let root = dwarf.unit.root();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132280,"byte_end":1132317,"line_start":43,"line_end":43,"column_start":1,"column_end":38}},{"value":"/     dwarf.unit.get_mut(root).set(","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132318,"byte_end":1132355,"line_start":44,"line_end":44,"column_start":1,"column_end":38}},{"value":"/         gimli::DW_AT_ranges,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132356,"byte_end":1132388,"line_start":45,"line_end":45,"column_start":1,"column_end":33}},{"value":"/         AttributeValue::RangeListRef(range_list_id),","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132389,"byte_end":1132445,"line_start":46,"line_end":46,"column_start":1,"column_end":57}},{"value":"/     );","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132446,"byte_end":1132456,"line_start":47,"line_end":47,"column_start":1,"column_end":11}},{"value":"/     // Create a `Vec` for each DWARF section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132457,"byte_end":1132506,"line_start":48,"line_end":48,"column_start":1,"column_end":50}},{"value":"/     let mut sections = Sections::new(EndianVec::new(gimli::LittleEndian));","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132507,"byte_end":1132585,"line_start":49,"line_end":49,"column_start":1,"column_end":79}},{"value":"/     // Finally, write the DWARF data to the sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132586,"byte_end":1132643,"line_start":50,"line_end":50,"column_start":1,"column_end":58}},{"value":"/     dwarf.write(&mut sections)?;","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132644,"byte_end":1132680,"line_start":51,"line_end":51,"column_start":1,"column_end":37}},{"value":"/     sections.for_each(|id, data| {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132681,"byte_end":1132719,"line_start":52,"line_end":52,"column_start":1,"column_end":39}},{"value":"/         // Here you can add the data to the output object file.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132720,"byte_end":1132787,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"/         Ok(())","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132788,"byte_end":1132806,"line_start":54,"line_end":54,"column_start":1,"column_end":19}},{"value":"/     })","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132807,"byte_end":1132817,"line_start":55,"line_end":55,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132818,"byte_end":1132823,"line_start":56,"line_end":56,"column_start":1,"column_end":6}},{"value":"/ # fn main() {","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132824,"byte_end":1132841,"line_start":57,"line_end":57,"column_start":1,"column_end":18}},{"value":"/ #     example().unwrap();","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132842,"byte_end":1132871,"line_start":58,"line_end":58,"column_start":1,"column_end":30}},{"value":"/ # }","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1132872,"byte_end":1132879,"line_start":59,"line_end":59,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":8418},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/endian_vec.rs","byte_start":1145573,"byte_end":1145582,"line_start":11,"line_end":11,"column_start":12,"column_end":21},"name":"EndianVec","qualname":"::write::endian_vec::EndianVec","value":"EndianVec {  }","parent":null,"children":[{"krate":0,"index":8420},{"krate":0,"index":8421}],"decl_id":null,"docs":" A `Vec<u8>` with endianity metadata.","sig":null,"attributes":[{"value":"/ A `Vec<u8>` with endianity metadata.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/endian_vec.rs","byte_start":1145404,"byte_end":1145444,"line_start":7,"line_end":7,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/endian_vec.rs","byte_start":1145445,"byte_end":1145448,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This implements the `Writer` trait, which is used for all writing of DWARF sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/endian_vec.rs","byte_start":1145449,"byte_end":1145537,"line_start":9,"line_end":9,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2232},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/endian_vec.rs","byte_start":1145801,"byte_end":1145804,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"new","qualname":"<EndianVec<Endian>>::new","value":"pub fn new(Endian) -> EndianVec<Endian>","parent":null,"children":[],"decl_id":null,"docs":" Construct an empty `EndianVec` with the given endianity.\n","sig":null,"attributes":[{"value":"/ Construct an empty `EndianVec` with the given endianity.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/endian_vec.rs","byte_start":1145729,"byte_end":1145789,"line_start":23,"line_end":23,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2233},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/endian_vec.rs","byte_start":1145986,"byte_end":1145991,"line_start":32,"line_end":32,"column_start":12,"column_end":17},"name":"slice","qualname":"<EndianVec<Endian>>::slice","value":"pub fn slice(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the raw slice.\n","sig":null,"attributes":[{"value":"/ Return a reference to the raw slice.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/endian_vec.rs","byte_start":1145934,"byte_end":1145974,"line_start":31,"line_end":31,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2234},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/endian_vec.rs","byte_start":1146080,"byte_end":1146088,"line_start":37,"line_end":37,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<EndianVec<Endian>>::into_vec","value":"pub fn into_vec(Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Convert into a `Vec<u8>`.\n","sig":null,"attributes":[{"value":"/ Convert into a `Vec<u8>`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/endian_vec.rs","byte_start":1146039,"byte_end":1146068,"line_start":36,"line_end":36,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2235},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/endian_vec.rs","byte_start":1146234,"byte_end":1146238,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"take","qualname":"<EndianVec<Endian>>::take","value":"pub fn take(&mut Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Take any written data out of the `EndianVec`, leaving an empty `Vec` in its place.\n","sig":null,"attributes":[{"value":"/ Take any written data out of the `EndianVec`, leaving an empty `Vec` in its place.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/endian_vec.rs","byte_start":1146136,"byte_end":1146222,"line_start":41,"line_end":41,"column_start":5,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":2255},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1148475,"byte_end":1148481,"line_start":11,"line_end":11,"column_start":11,"column_end":17},"name":"Writer","qualname":"::write::writer::Writer","value":"Writer","parent":null,"children":[{"krate":0,"index":2256},{"krate":0,"index":2257},{"krate":0,"index":2258},{"krate":0,"index":2259},{"krate":0,"index":2260},{"krate":0,"index":2261},{"krate":0,"index":2262},{"krate":0,"index":2263},{"krate":0,"index":2264},{"krate":0,"index":2265},{"krate":0,"index":2266},{"krate":0,"index":2267},{"krate":0,"index":2268},{"krate":0,"index":2270},{"krate":0,"index":2272},{"krate":0,"index":2274},{"krate":0,"index":2275},{"krate":0,"index":2277},{"krate":0,"index":2279},{"krate":0,"index":2281},{"krate":0,"index":2282},{"krate":0,"index":2283},{"krate":0,"index":2284},{"krate":0,"index":2286},{"krate":0,"index":2288},{"krate":0,"index":2289}],"decl_id":null,"docs":" A trait for writing the data to a DWARF section.","sig":null,"attributes":[{"value":"/ A trait for writing the data to a DWARF section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1148294,"byte_end":1148346,"line_start":7,"line_end":7,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1148347,"byte_end":1148350,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ All write operations append to the section unless otherwise specified.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1148351,"byte_end":1148425,"line_start":9,"line_end":9,"column_start":1,"column_end":75}},{"value":"allow(clippy :: len_without_is_empty)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1148426,"byte_end":1148464,"line_start":10,"line_end":10,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":2256},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1148542,"byte_end":1148548,"line_start":13,"line_end":13,"column_start":10,"column_end":16},"name":"Endian","qualname":"::write::writer::Writer::Endian","value":"type Endian: Endianity;","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" The endianity of bytes that are written.\n","sig":null,"attributes":[{"value":"/ The endianity of bytes that are written.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1148488,"byte_end":1148532,"line_start":12,"line_end":12,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2257},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1148625,"byte_end":1148631,"line_start":16,"line_end":16,"column_start":8,"column_end":14},"name":"endian","qualname":"::write::writer::Writer::endian","value":"pub fn endian(&Self) -> Self::Endian","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Return the endianity of bytes that are written.\n","sig":null,"attributes":[{"value":"/ Return the endianity of bytes that are written.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1148566,"byte_end":1148617,"line_start":15,"line_end":15,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2258},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1148782,"byte_end":1148785,"line_start":21,"line_end":21,"column_start":8,"column_end":11},"name":"len","qualname":"::write::writer::Writer::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Return the current section length.","sig":null,"attributes":[{"value":"/ Return the current section length.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1148661,"byte_end":1148699,"line_start":18,"line_end":18,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1148704,"byte_end":1148707,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ This may be used as an offset for future `write_at` calls.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1148712,"byte_end":1148774,"line_start":20,"line_end":20,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2259},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1148834,"byte_end":1148839,"line_start":24,"line_end":24,"column_start":8,"column_end":13},"name":"write","qualname":"::write::writer::Writer::write","value":"pub fn write(&mut Self, &[u8]) -> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write a slice.\n","sig":null,"attributes":[{"value":"/ Write a slice.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1148808,"byte_end":1148826,"line_start":23,"line_end":23,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2260},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1149004,"byte_end":1149012,"line_start":29,"line_end":29,"column_start":8,"column_end":16},"name":"write_at","qualname":"::write::writer::Writer::write_at","value":"pub fn write_at(&mut Self, usize, &[u8]) -> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write a slice at a given offset.","sig":null,"attributes":[{"value":"/ Write a slice at a given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1148885,"byte_end":1148921,"line_start":26,"line_end":26,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1148926,"byte_end":1148929,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ The write must not extend past the current section length.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1148934,"byte_end":1148996,"line_start":28,"line_end":28,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2261},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1149264,"byte_end":1149277,"line_start":36,"line_end":36,"column_start":8,"column_end":21},"name":"write_address","qualname":"::write::writer::Writer::write_address","value":"pub fn write_address(&mut Self, Address, u8) -> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write an address.","sig":null,"attributes":[{"value":"/ Write an address.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1149073,"byte_end":1149094,"line_start":31,"line_end":31,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1149099,"byte_end":1149102,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ If the writer supports relocations, then it must provide its own implementation","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1149107,"byte_end":1149190,"line_start":33,"line_end":33,"column_start":5,"column_end":88}},{"value":"/ of this method.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1149195,"byte_end":1149214,"line_start":34,"line_end":34,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2262},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1149771,"byte_end":1149787,"line_start":49,"line_end":49,"column_start":8,"column_end":24},"name":"write_eh_pointer","qualname":"::write::writer::Writer::write_eh_pointer","value":"pub fn write_eh_pointer(&mut Self, Address, constants::DwEhPe, u8)\n-> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write an address with a `.eh_frame` pointer encoding.","sig":null,"attributes":[{"value":"/ Write an address with a `.eh_frame` pointer encoding.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1149511,"byte_end":1149568,"line_start":43,"line_end":43,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1149573,"byte_end":1149576,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ The given size is only used for `DW_EH_PE_absptr` formats.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1149581,"byte_end":1149643,"line_start":45,"line_end":45,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1149648,"byte_end":1149651,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ If the writer supports relocations, then it must provide its own implementation","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1149656,"byte_end":1149739,"line_start":47,"line_end":47,"column_start":5,"column_end":88}},{"value":"/ of this method.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1149744,"byte_end":1149763,"line_start":48,"line_end":48,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2263},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1150904,"byte_end":1150925,"line_start":80,"line_end":80,"column_start":8,"column_end":29},"name":"write_eh_pointer_data","qualname":"::write::writer::Writer::write_eh_pointer_data","value":"pub fn write_eh_pointer_data(&mut Self, u64, constants::DwEhPe, u8)\n-> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write a value with a `.eh_frame` pointer format.","sig":null,"attributes":[{"value":"/ Write a value with a `.eh_frame` pointer format.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1150682,"byte_end":1150734,"line_start":75,"line_end":75,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1150739,"byte_end":1150742,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ The given size is only used for `DW_EH_PE_absptr` formats.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1150747,"byte_end":1150809,"line_start":77,"line_end":77,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1150814,"byte_end":1150817,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ This must not be used directly for values that may require relocation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1150822,"byte_end":1150896,"line_start":79,"line_end":79,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2264},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1152029,"byte_end":1152041,"line_start":106,"line_end":106,"column_start":8,"column_end":20},"name":"write_offset","qualname":"::write::writer::Writer::write_offset","value":"pub fn write_offset(&mut Self, usize, SectionId, u8) -> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write an offset that is relative to the start of the given section.","sig":null,"attributes":[{"value":"/ Write an offset that is relative to the start of the given section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1151830,"byte_end":1151901,"line_start":102,"line_end":102,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1151906,"byte_end":1151909,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ If the writer supports relocations, then it must provide its own implementation","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1151914,"byte_end":1151997,"line_start":104,"line_end":104,"column_start":5,"column_end":88}},{"value":"/ of this method.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1152002,"byte_end":1152021,"line_start":105,"line_end":105,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2265},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1152365,"byte_end":1152380,"line_start":114,"line_end":114,"column_start":8,"column_end":23},"name":"write_offset_at","qualname":"::write::writer::Writer::write_offset_at","value":"pub fn write_offset_at(&mut Self, usize, usize, SectionId, u8) -> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write an offset that is relative to the start of the given section.","sig":null,"attributes":[{"value":"/ Write an offset that is relative to the start of the given section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1152166,"byte_end":1152237,"line_start":110,"line_end":110,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1152242,"byte_end":1152245,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ If the writer supports relocations, then it must provide its own implementation","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1152250,"byte_end":1152333,"line_start":112,"line_end":112,"column_start":5,"column_end":88}},{"value":"/ of this method.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1152338,"byte_end":1152357,"line_start":113,"line_end":113,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2266},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1152736,"byte_end":1152751,"line_start":128,"line_end":128,"column_start":8,"column_end":23},"name":"write_reference","qualname":"::write::writer::Writer::write_reference","value":"pub fn write_reference(&mut Self, usize, u8) -> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write a reference to a symbol.","sig":null,"attributes":[{"value":"/ Write a reference to a symbol.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1152578,"byte_end":1152612,"line_start":124,"line_end":124,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1152617,"byte_end":1152620,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ If the writer supports symbols, then it must provide its own implementation","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1152625,"byte_end":1152704,"line_start":126,"line_end":126,"column_start":5,"column_end":84}},{"value":"/ of this method.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1152709,"byte_end":1152728,"line_start":127,"line_end":127,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2267},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1152877,"byte_end":1152885,"line_start":133,"line_end":133,"column_start":8,"column_end":16},"name":"write_u8","qualname":"::write::writer::Writer::write_u8","value":"pub fn write_u8(&mut Self, u8) -> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write a u8.\n","sig":null,"attributes":[{"value":"/ Write a u8.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1152854,"byte_end":1152869,"line_start":132,"line_end":132,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":2268},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1153011,"byte_end":1153020,"line_start":139,"line_end":139,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::write::writer::Writer::write_u16","value":"pub fn write_u16(&mut Self, u16) -> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write a u16.\n","sig":null,"attributes":[{"value":"/ Write a u16.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1152987,"byte_end":1153003,"line_start":138,"line_end":138,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2270},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1153202,"byte_end":1153211,"line_start":146,"line_end":146,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::write::writer::Writer::write_u32","value":"pub fn write_u32(&mut Self, u32) -> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write a u32.\n","sig":null,"attributes":[{"value":"/ Write a u32.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1153178,"byte_end":1153194,"line_start":145,"line_end":145,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2272},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1153393,"byte_end":1153402,"line_start":153,"line_end":153,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::write::writer::Writer::write_u64","value":"pub fn write_u64(&mut Self, u64) -> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write a u64.\n","sig":null,"attributes":[{"value":"/ Write a u64.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1153369,"byte_end":1153385,"line_start":152,"line_end":152,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2274},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1153603,"byte_end":1153614,"line_start":160,"line_end":160,"column_start":8,"column_end":19},"name":"write_u8_at","qualname":"::write::writer::Writer::write_u8_at","value":"pub fn write_u8_at(&mut Self, usize, u8) -> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write a u8 at the given offset.\n","sig":null,"attributes":[{"value":"/ Write a u8 at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1153560,"byte_end":1153595,"line_start":159,"line_end":159,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2275},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1153786,"byte_end":1153798,"line_start":166,"line_end":166,"column_start":8,"column_end":20},"name":"write_u16_at","qualname":"::write::writer::Writer::write_u16_at","value":"pub fn write_u16_at(&mut Self, usize, u16) -> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write a u16 at the given offset.\n","sig":null,"attributes":[{"value":"/ Write a u16 at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1153742,"byte_end":1153778,"line_start":165,"line_end":165,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2277},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1154026,"byte_end":1154038,"line_start":173,"line_end":173,"column_start":8,"column_end":20},"name":"write_u32_at","qualname":"::write::writer::Writer::write_u32_at","value":"pub fn write_u32_at(&mut Self, usize, u32) -> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write a u32 at the given offset.\n","sig":null,"attributes":[{"value":"/ Write a u32 at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1153982,"byte_end":1154018,"line_start":172,"line_end":172,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2279},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1154266,"byte_end":1154278,"line_start":180,"line_end":180,"column_start":8,"column_end":20},"name":"write_u64_at","qualname":"::write::writer::Writer::write_u64_at","value":"pub fn write_u64_at(&mut Self, usize, u64) -> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write a u64 at the given offset.\n","sig":null,"attributes":[{"value":"/ Write a u64 at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1154222,"byte_end":1154258,"line_start":179,"line_end":179,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2281},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1154664,"byte_end":1154675,"line_start":190,"line_end":190,"column_start":8,"column_end":19},"name":"write_udata","qualname":"::write::writer::Writer::write_udata","value":"pub fn write_udata(&mut Self, u64, u8) -> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write unsigned data of the given size.","sig":null,"attributes":[{"value":"/ Write unsigned data of the given size.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1154462,"byte_end":1154504,"line_start":186,"line_end":186,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1154509,"byte_end":1154512,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the value is too large for the size.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1154517,"byte_end":1154577,"line_start":188,"line_end":188,"column_start":5,"column_end":65}},{"value":"/ This must not be used directly for values that may require relocation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1154582,"byte_end":1154656,"line_start":189,"line_end":189,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2282},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1155790,"byte_end":1155801,"line_start":222,"line_end":222,"column_start":8,"column_end":19},"name":"write_sdata","qualname":"::write::writer::Writer::write_sdata","value":"pub fn write_sdata(&mut Self, i64, u8) -> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write signed data of the given size.","sig":null,"attributes":[{"value":"/ Write signed data of the given size.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1155590,"byte_end":1155630,"line_start":218,"line_end":218,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1155635,"byte_end":1155638,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the value is too large for the size.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1155643,"byte_end":1155703,"line_start":220,"line_end":220,"column_start":5,"column_end":65}},{"value":"/ This must not be used directly for values that may require relocation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1155708,"byte_end":1155782,"line_start":221,"line_end":221,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2283},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1156958,"byte_end":1156972,"line_start":254,"line_end":254,"column_start":8,"column_end":22},"name":"write_udata_at","qualname":"::write::writer::Writer::write_udata_at","value":"pub fn write_udata_at(&mut Self, usize, u64, u8) -> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write a word of the given size at the given offset.","sig":null,"attributes":[{"value":"/ Write a word of the given size at the given offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1156743,"byte_end":1156798,"line_start":250,"line_end":250,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1156803,"byte_end":1156806,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the value is too large for the size.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1156811,"byte_end":1156871,"line_start":252,"line_end":252,"column_start":5,"column_end":65}},{"value":"/ This must not be used directly for values that may require relocation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1156876,"byte_end":1156950,"line_start":253,"line_end":253,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2284},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1157999,"byte_end":1158012,"line_start":283,"line_end":283,"column_start":8,"column_end":21},"name":"write_uleb128","qualname":"::write::writer::Writer::write_uleb128","value":"pub fn write_uleb128(&mut Self, u64) -> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write an unsigned LEB128 encoded integer.\n","sig":null,"attributes":[{"value":"/ Write an unsigned LEB128 encoded integer.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1157946,"byte_end":1157991,"line_start":282,"line_end":282,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2286},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1158321,"byte_end":1158334,"line_start":291,"line_end":291,"column_start":8,"column_end":21},"name":"write_sleb128","qualname":"::write::writer::Writer::write_sleb128","value":"pub fn write_sleb128(&mut Self, i64) -> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Read an unsigned LEB128 encoded integer.\n","sig":null,"attributes":[{"value":"/ Read an unsigned LEB128 encoded integer.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1158269,"byte_end":1158313,"line_start":290,"line_end":290,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2288},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1158847,"byte_end":1158867,"line_start":303,"line_end":303,"column_start":8,"column_end":28},"name":"write_initial_length","qualname":"::write::writer::Writer::write_initial_length","value":"pub fn write_initial_length(&mut Self, Format) -> Result<InitialLengthOffset>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write an initial length according to the given DWARF format.","sig":null,"attributes":[{"value":"/ Write an initial length according to the given DWARF format.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1158589,"byte_end":1158653,"line_start":298,"line_end":298,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1158658,"byte_end":1158661,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ This will only write a length of zero, since the length isn't","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1158666,"byte_end":1158731,"line_start":300,"line_end":300,"column_start":5,"column_end":70}},{"value":"/ known yet, and a subsequent call to `write_initial_length_at`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1158736,"byte_end":1158801,"line_start":301,"line_end":301,"column_start":5,"column_end":70}},{"value":"/ will write the actual length.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1158806,"byte_end":1158839,"line_start":302,"line_end":302,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2289},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1159326,"byte_end":1159349,"line_start":315,"line_end":315,"column_start":8,"column_end":31},"name":"write_initial_length_at","qualname":"::write::writer::Writer::write_initial_length_at","value":"pub fn write_initial_length_at(&mut Self, InitialLengthOffset, u64, Format)\n-> Result<()>","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":" Write an initial length at the given offset according to the given DWARF format.","sig":null,"attributes":[{"value":"/ Write an initial length at the given offset according to the given DWARF format.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1159153,"byte_end":1159237,"line_start":312,"line_end":312,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1159242,"byte_end":1159245,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ `write_initial_length` must have previously returned the offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1159250,"byte_end":1159318,"line_start":314,"line_end":314,"column_start":5,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":8428},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1159651,"byte_end":1159670,"line_start":327,"line_end":327,"column_start":12,"column_end":31},"name":"InitialLengthOffset","qualname":"::write::writer::InitialLengthOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" The offset at which an initial length should be written.\n","sig":null,"attributes":[{"value":"/ The offset at which an initial length should be written.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/writer.rs","byte_start":1159549,"byte_end":1159609,"line_start":325,"line_end":325,"column_start":1,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":2311},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167226,"byte_end":1167233,"line_start":57,"line_end":57,"column_start":11,"column_end":18},"name":"Section","qualname":"::write::section::Section","value":"Section<W: Writer>: DerefMut<Target = W>","parent":null,"children":[{"krate":0,"index":2313},{"krate":0,"index":2314}],"decl_id":null,"docs":" Functionality common to all writable DWARF sections.\n","sig":null,"attributes":[{"value":"/ Functionality common to all writable DWARF sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167159,"byte_end":1167215,"line_start":56,"line_end":56,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2313},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167330,"byte_end":1167332,"line_start":59,"line_end":59,"column_start":8,"column_end":10},"name":"id","qualname":"::write::section::Section::id","value":"pub fn id(&Self) -> SectionId","parent":{"krate":0,"index":2311},"children":[],"decl_id":null,"docs":" Returns the DWARF section kind for this type.\n","sig":null,"attributes":[{"value":"/ Returns the DWARF section kind for this type.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167273,"byte_end":1167322,"line_start":58,"line_end":58,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2314},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167414,"byte_end":1167418,"line_start":62,"line_end":62,"column_start":8,"column_end":12},"name":"name","qualname":"::write::section::Section::name","value":"pub fn name(&Self) -> &'static str","parent":{"krate":0,"index":2311},"children":[],"decl_id":null,"docs":" Returns the ELF section name for this type.\n","sig":null,"attributes":[{"value":"/ Returns the ELF section name for this type.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167359,"byte_end":1167406,"line_start":61,"line_end":61,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":8436},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167555,"byte_end":1167563,"line_start":69,"line_end":69,"column_start":12,"column_end":20},"name":"Sections","qualname":"::write::section::Sections","value":"Sections { debug_abbrev, debug_info, debug_line, debug_line_str, debug_ranges, debug_rnglists, debug_loc, debug_loclists, debug_str, debug_frame, eh_frame }","parent":null,"children":[{"krate":0,"index":8438},{"krate":0,"index":8439},{"krate":0,"index":8440},{"krate":0,"index":8441},{"krate":0,"index":8442},{"krate":0,"index":8443},{"krate":0,"index":8444},{"krate":0,"index":8445},{"krate":0,"index":8446},{"krate":0,"index":8447},{"krate":0,"index":8448},{"krate":0,"index":8449},{"krate":0,"index":8450},{"krate":0,"index":8451}],"decl_id":null,"docs":" All of the writable DWARF sections.\n","sig":null,"attributes":[{"value":"/ All of the writable DWARF sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167478,"byte_end":1167517,"line_start":67,"line_end":67,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":8438},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167622,"byte_end":1167634,"line_start":71,"line_end":71,"column_start":9,"column_end":21},"name":"debug_abbrev","qualname":"::write::section::Sections::debug_abbrev","value":"write::abbrev::DebugAbbrev<W>","parent":{"krate":0,"index":8436},"children":[],"decl_id":null,"docs":" The `.debug_abbrev` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_abbrev` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167581,"byte_end":1167613,"line_start":70,"line_end":70,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":8439},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167695,"byte_end":1167705,"line_start":73,"line_end":73,"column_start":9,"column_end":19},"name":"debug_info","qualname":"::write::section::Sections::debug_info","value":"write::unit::DebugInfo<W>","parent":{"krate":0,"index":8436},"children":[],"decl_id":null,"docs":" The `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_info` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167656,"byte_end":1167686,"line_start":72,"line_end":72,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":8440},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167764,"byte_end":1167774,"line_start":75,"line_end":75,"column_start":9,"column_end":19},"name":"debug_line","qualname":"::write::section::Sections::debug_line","value":"write::line::DebugLine<W>","parent":{"krate":0,"index":8436},"children":[],"decl_id":null,"docs":" The `.debug_line` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_line` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167725,"byte_end":1167755,"line_start":74,"line_end":74,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":8441},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167837,"byte_end":1167851,"line_start":77,"line_end":77,"column_start":9,"column_end":23},"name":"debug_line_str","qualname":"::write::section::Sections::debug_line_str","value":"write::str::DebugLineStr<W>","parent":{"krate":0,"index":8436},"children":[],"decl_id":null,"docs":" The `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_line_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167794,"byte_end":1167828,"line_start":76,"line_end":76,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":8442},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167915,"byte_end":1167927,"line_start":79,"line_end":79,"column_start":9,"column_end":21},"name":"debug_ranges","qualname":"::write::section::Sections::debug_ranges","value":"write::range::DebugRanges<W>","parent":{"krate":0,"index":8436},"children":[],"decl_id":null,"docs":" The `.debug_ranges` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_ranges` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167874,"byte_end":1167906,"line_start":78,"line_end":78,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":8443},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167992,"byte_end":1168006,"line_start":81,"line_end":81,"column_start":9,"column_end":23},"name":"debug_rnglists","qualname":"::write::section::Sections::debug_rnglists","value":"write::range::DebugRngLists<W>","parent":{"krate":0,"index":8436},"children":[],"decl_id":null,"docs":" The `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_rnglists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167949,"byte_end":1167983,"line_start":80,"line_end":80,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":8444},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1168068,"byte_end":1168077,"line_start":83,"line_end":83,"column_start":9,"column_end":18},"name":"debug_loc","qualname":"::write::section::Sections::debug_loc","value":"write::loc::DebugLoc<W>","parent":{"krate":0,"index":8436},"children":[],"decl_id":null,"docs":" The `.debug_loc` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_loc` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1168030,"byte_end":1168059,"line_start":82,"line_end":82,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":8445},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1168139,"byte_end":1168153,"line_start":85,"line_end":85,"column_start":9,"column_end":23},"name":"debug_loclists","qualname":"::write::section::Sections::debug_loclists","value":"write::loc::DebugLocLists<W>","parent":{"krate":0,"index":8436},"children":[],"decl_id":null,"docs":" The `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_loclists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1168096,"byte_end":1168130,"line_start":84,"line_end":84,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":8446},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1168215,"byte_end":1168224,"line_start":87,"line_end":87,"column_start":9,"column_end":18},"name":"debug_str","qualname":"::write::section::Sections::debug_str","value":"write::str::DebugStr<W>","parent":{"krate":0,"index":8436},"children":[],"decl_id":null,"docs":" The `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1168177,"byte_end":1168206,"line_start":86,"line_end":86,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":8447},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1168283,"byte_end":1168294,"line_start":89,"line_end":89,"column_start":9,"column_end":20},"name":"debug_frame","qualname":"::write::section::Sections::debug_frame","value":"write::cfi::DebugFrame<W>","parent":{"krate":0,"index":8436},"children":[],"decl_id":null,"docs":" The `.debug_frame` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_frame` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1168243,"byte_end":1168274,"line_start":88,"line_end":88,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":8448},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1168352,"byte_end":1168360,"line_start":91,"line_end":91,"column_start":9,"column_end":17},"name":"eh_frame","qualname":"::write::section::Sections::eh_frame","value":"write::cfi::EhFrame<W>","parent":{"krate":0,"index":8436},"children":[],"decl_id":null,"docs":" The `.eh_frame` section.\n","sig":null,"attributes":[{"value":"/ The `.eh_frame` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1168315,"byte_end":1168343,"line_start":90,"line_end":90,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2317},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1168852,"byte_end":1168855,"line_start":102,"line_end":102,"column_start":12,"column_end":15},"name":"new","qualname":"<Sections<W>>::new","value":"pub fn new(W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Sections` using clones of the given `section`.\n","sig":null,"attributes":[{"value":"/ Create a new `Sections` using clones of the given `section`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1168776,"byte_end":1168840,"line_start":101,"line_end":101,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2320},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1169745,"byte_end":1169753,"line_start":124,"line_end":124,"column_start":12,"column_end":20},"name":"for_each","qualname":"<Sections<W>>::for_each","value":"pub fn for_each<F, E>(&Self, F) -> result::Result<(), E> where\nF: FnMut(SectionId, &W) -> result::Result<(), E>","parent":null,"children":[],"decl_id":null,"docs":" For each section, call `f` once with a shared reference.\n","sig":null,"attributes":[{"value":"/ For each section, call `f` once with a shared reference.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1169673,"byte_end":1169733,"line_start":123,"line_end":123,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2324},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1170504,"byte_end":1170516,"line_start":149,"line_end":149,"column_start":12,"column_end":24},"name":"for_each_mut","qualname":"<Sections<W>>::for_each_mut","value":"pub fn for_each_mut<F, E>(&mut Self, F) -> result::Result<(), E> where\nF: FnMut(SectionId, &mut W) -> result::Result<(), E>","parent":null,"children":[],"decl_id":null,"docs":" For each section, call `f` once with a mutable reference.\n","sig":null,"attributes":[{"value":"/ For each section, call `f` once with a mutable reference.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1170431,"byte_end":1170492,"line_start":148,"line_end":148,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":8516},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/abbrev.rs","byte_start":1174319,"byte_end":1174330,"line_start":103,"line_end":103,"column_start":5,"column_end":16},"name":"DebugAbbrev","qualname":"::write::abbrev::DebugAbbrev","value":"","parent":null,"children":[],"decl_id":null,"docs":"A writable `.debug_abbrev` section.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8542},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1177632,"byte_end":1177642,"line_start":10,"line_end":10,"column_start":5,"column_end":15},"name":"DebugFrame","qualname":"::write::cfi::DebugFrame","value":"","parent":null,"children":[],"decl_id":null,"docs":"A writable `.debug_frame` section.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8568},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1177727,"byte_end":1177734,"line_start":15,"line_end":15,"column_start":17,"column_end":24},"name":"EhFrame","qualname":"::write::cfi::EhFrame","value":"","parent":null,"children":[],"decl_id":null,"docs":"A writable `.eh_frame` section.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8580},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1177799,"byte_end":1177804,"line_start":17,"line_end":17,"column_start":12,"column_end":17},"name":"CieId","qualname":"::write::cfi::CieId","value":"CieId {  }","parent":null,"children":[{"krate":0,"index":8581},{"krate":0,"index":8582}],"decl_id":null,"docs":"An identifier for a CIE in a `FrameTable`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8598},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1177933,"byte_end":1177943,"line_start":21,"line_end":21,"column_start":12,"column_end":22},"name":"FrameTable","qualname":"::write::cfi::FrameTable","value":"FrameTable {  }","parent":null,"children":[{"krate":0,"index":8599},{"krate":0,"index":8600},{"krate":0,"index":8601}],"decl_id":null,"docs":" A table of frame description entries.\n","sig":null,"attributes":[{"value":"/ A table of frame description entries.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1177854,"byte_end":1177895,"line_start":19,"line_end":19,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2381},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1178315,"byte_end":1178322,"line_start":34,"line_end":34,"column_start":12,"column_end":19},"name":"add_cie","qualname":"<FrameTable>::add_cie","value":"pub fn add_cie(&mut Self, CommonInformationEntry) -> CieId","parent":null,"children":[],"decl_id":null,"docs":" Add a CIE and return its id.","sig":null,"attributes":[{"value":"/ Add a CIE and return its id.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1178188,"byte_end":1178220,"line_start":31,"line_end":31,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1178225,"byte_end":1178228,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ If the CIE already exists, then return the id of the existing CIE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1178233,"byte_end":1178303,"line_start":33,"line_end":33,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2382},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1178513,"byte_end":1178522,"line_start":40,"line_end":40,"column_start":12,"column_end":21},"name":"cie_count","qualname":"<FrameTable>::cie_count","value":"pub fn cie_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of CIEs.\n","sig":null,"attributes":[{"value":"/ The number of CIEs.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1178478,"byte_end":1178501,"line_start":39,"line_end":39,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2383},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1178723,"byte_end":1178730,"line_start":51,"line_end":51,"column_start":12,"column_end":19},"name":"add_fde","qualname":"<FrameTable>::add_fde","value":"pub fn add_fde(&mut Self, CieId, FrameDescriptionEntry)","parent":null,"children":[],"decl_id":null,"docs":" Add a FDE.","sig":null,"attributes":[{"value":"/ Add a FDE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1178576,"byte_end":1178590,"line_start":44,"line_end":44,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1178595,"byte_end":1178598,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ Does not check for duplicates.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1178603,"byte_end":1178637,"line_start":46,"line_end":46,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1178642,"byte_end":1178645,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1178650,"byte_end":1178662,"line_start":48,"line_end":48,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1178667,"byte_end":1178670,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ Panics if the CIE id is invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1178675,"byte_end":1178711,"line_start":50,"line_end":50,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2384},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1178919,"byte_end":1178928,"line_start":57,"line_end":57,"column_start":12,"column_end":21},"name":"fde_count","qualname":"<FrameTable>::fde_count","value":"pub fn fde_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of FDEs.\n","sig":null,"attributes":[{"value":"/ The number of FDEs.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1178884,"byte_end":1178907,"line_start":56,"line_end":56,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2385},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1179064,"byte_end":1179081,"line_start":62,"line_end":62,"column_start":12,"column_end":29},"name":"write_debug_frame","qualname":"<FrameTable>::write_debug_frame","value":"pub fn write_debug_frame<W: Writer>(&Self, &mut DebugFrame<W>) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write the frame table entries to the given `.debug_frame` section.\n","sig":null,"attributes":[{"value":"/ Write the frame table entries to the given `.debug_frame` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1178982,"byte_end":1179052,"line_start":61,"line_end":61,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2387},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1179265,"byte_end":1179279,"line_start":67,"line_end":67,"column_start":12,"column_end":26},"name":"write_eh_frame","qualname":"<FrameTable>::write_eh_frame","value":"pub fn write_eh_frame<W: Writer>(&Self, &mut EhFrame<W>) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write the frame table entries to the given `.eh_frame` section.\n","sig":null,"attributes":[{"value":"/ Write the frame table entries to the given `.eh_frame` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1179186,"byte_end":1179253,"line_start":66,"line_end":66,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":8606},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1180311,"byte_end":1180333,"line_start":95,"line_end":95,"column_start":12,"column_end":34},"name":"CommonInformationEntry","qualname":"::write::cfi::CommonInformationEntry","value":"CommonInformationEntry { personality, lsda_encoding, fde_address_encoding, signal_trampoline }","parent":null,"children":[{"krate":0,"index":8607},{"krate":0,"index":8608},{"krate":0,"index":8609},{"krate":0,"index":8610},{"krate":0,"index":8611},{"krate":0,"index":8612},{"krate":0,"index":8613},{"krate":0,"index":8614},{"krate":0,"index":8615}],"decl_id":null,"docs":" A common information entry. This contains information that is shared between FDEs.\n","sig":null,"attributes":[{"value":"/ A common information entry. This contains information that is shared between FDEs.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1180168,"byte_end":1180254,"line_start":93,"line_end":93,"column_start":1,"column_end":87}}]},{"kind":"Field","id":{"krate":0,"index":8611},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1181081,"byte_end":1181092,"line_start":114,"line_end":114,"column_start":9,"column_end":20},"name":"personality","qualname":"::write::cfi::CommonInformationEntry::personality","value":"core::option::Option<(constants::DwEhPe, write::Address)>","parent":{"krate":0,"index":8606},"children":[],"decl_id":null,"docs":" The address of the personality function and its encoding.\n","sig":null,"attributes":[{"value":"/ The address of the personality function and its encoding.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1181011,"byte_end":1181072,"line_start":113,"line_end":113,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":8612},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1181281,"byte_end":1181294,"line_start":119,"line_end":119,"column_start":9,"column_end":22},"name":"lsda_encoding","qualname":"::write::cfi::CommonInformationEntry::lsda_encoding","value":"core::option::Option<constants::DwEhPe>","parent":{"krate":0,"index":8606},"children":[],"decl_id":null,"docs":" The encoding to use for the LSDA address in FDEs.","sig":null,"attributes":[{"value":"/ The encoding to use for the LSDA address in FDEs.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1181137,"byte_end":1181190,"line_start":116,"line_end":116,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1181195,"byte_end":1181198,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ If set then all FDEs which use this CIE must have a LSDA address.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1181203,"byte_end":1181272,"line_start":118,"line_end":118,"column_start":5,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":8613},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1181383,"byte_end":1181403,"line_start":122,"line_end":122,"column_start":9,"column_end":29},"name":"fde_address_encoding","qualname":"::write::cfi::CommonInformationEntry::fde_address_encoding","value":"constants::DwEhPe","parent":{"krate":0,"index":8606},"children":[],"decl_id":null,"docs":" The encoding to use for addresses in FDEs.\n","sig":null,"attributes":[{"value":"/ The encoding to use for addresses in FDEs.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1181328,"byte_end":1181374,"line_start":121,"line_end":121,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":8614},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1181470,"byte_end":1181487,"line_start":125,"line_end":125,"column_start":9,"column_end":26},"name":"signal_trampoline","qualname":"::write::cfi::CommonInformationEntry::signal_trampoline","value":"bool","parent":{"krate":0,"index":8606},"children":[],"decl_id":null,"docs":" True for signal trampolines.\n","sig":null,"attributes":[{"value":"/ True for signal trampolines.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1181429,"byte_end":1181461,"line_start":124,"line_end":124,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":2392},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1181775,"byte_end":1181778,"line_start":135,"line_end":135,"column_start":12,"column_end":15},"name":"new","qualname":"<CommonInformationEntry>::new","value":"pub fn new(Encoding, u8, i8, Register) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new common information entry.","sig":null,"attributes":[{"value":"/ Create a new common information entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1181640,"byte_end":1181682,"line_start":132,"line_end":132,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1181687,"byte_end":1181690,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ The encoding version must be a CFI version, not a DWARF version.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1181695,"byte_end":1181763,"line_start":134,"line_end":134,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2393},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1182365,"byte_end":1182380,"line_start":155,"line_end":155,"column_start":12,"column_end":27},"name":"add_instruction","qualname":"<CommonInformationEntry>::add_instruction","value":"pub fn add_instruction(&mut Self, CallFrameInstruction)","parent":null,"children":[],"decl_id":null,"docs":" Add an initial instruction.\n","sig":null,"attributes":[{"value":"/ Add an initial instruction.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1182322,"byte_end":1182353,"line_start":154,"line_end":154,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":8630},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1186274,"byte_end":1186295,"line_start":272,"line_end":272,"column_start":12,"column_end":33},"name":"FrameDescriptionEntry","qualname":"::write::cfi::FrameDescriptionEntry","value":"FrameDescriptionEntry { lsda }","parent":null,"children":[{"krate":0,"index":8631},{"krate":0,"index":8632},{"krate":0,"index":8633},{"krate":0,"index":8634}],"decl_id":null,"docs":" A frame description entry. There should be one FDE per function.\n","sig":null,"attributes":[{"value":"/ A frame description entry. There should be one FDE per function.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1186155,"byte_end":1186223,"line_start":270,"line_end":270,"column_start":1,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":8633},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1186470,"byte_end":1186474,"line_start":280,"line_end":280,"column_start":9,"column_end":13},"name":"lsda","qualname":"::write::cfi::FrameDescriptionEntry::lsda","value":"core::option::Option<write::Address>","parent":{"krate":0,"index":8630},"children":[],"decl_id":null,"docs":" The address of the LSDA.\n","sig":null,"attributes":[{"value":"/ The address of the LSDA.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1186433,"byte_end":1186461,"line_start":279,"line_end":279,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2398},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1186713,"byte_end":1186716,"line_start":288,"line_end":288,"column_start":12,"column_end":15},"name":"new","qualname":"<FrameDescriptionEntry>::new","value":"pub fn new(Address, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new frame description entry for a function.\n","sig":null,"attributes":[{"value":"/ Create a new frame description entry for a function.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1186645,"byte_end":1186701,"line_start":287,"line_end":287,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2399},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1187045,"byte_end":1187060,"line_start":300,"line_end":300,"column_start":12,"column_end":27},"name":"add_instruction","qualname":"<FrameDescriptionEntry>::add_instruction","value":"pub fn add_instruction(&mut Self, u32, CallFrameInstruction)","parent":null,"children":[],"decl_id":null,"docs":" Add an instruction.","sig":null,"attributes":[{"value":"/ Add an instruction.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1186914,"byte_end":1186937,"line_start":297,"line_end":297,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1186942,"byte_end":1186945,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ Instructions must be added in increasing order of offset, or writing will fail.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1186950,"byte_end":1187033,"line_start":299,"line_end":299,"column_start":5,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8648},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1189895,"byte_end":1189898,"line_start":382,"line_end":382,"column_start":5,"column_end":8},"name":"Cfa","qualname":"::write::cfi::CallFrameInstruction::Cfa","value":"CallFrameInstruction::Cfa(Register, i32)","parent":{"krate":0,"index":8647},"children":[],"decl_id":null,"docs":" Define the CFA rule to use the provided register and offset.\n","sig":null,"attributes":[{"value":"/ Define the CFA rule to use the provided register and offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1189826,"byte_end":1189890,"line_start":381,"line_end":381,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8652},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190002,"byte_end":1190013,"line_start":384,"line_end":384,"column_start":5,"column_end":16},"name":"CfaRegister","qualname":"::write::cfi::CallFrameInstruction::CfaRegister","value":"CallFrameInstruction::CfaRegister(Register)","parent":{"krate":0,"index":8647},"children":[],"decl_id":null,"docs":" Update the CFA rule to use the provided register. The offset is unchanged.\n","sig":null,"attributes":[{"value":"/ Update the CFA rule to use the provided register. The offset is unchanged.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1189919,"byte_end":1189997,"line_start":383,"line_end":383,"column_start":5,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8655},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190112,"byte_end":1190121,"line_start":386,"line_end":386,"column_start":5,"column_end":14},"name":"CfaOffset","qualname":"::write::cfi::CallFrameInstruction::CfaOffset","value":"CallFrameInstruction::CfaOffset(i32)","parent":{"krate":0,"index":8647},"children":[],"decl_id":null,"docs":" Update the CFA rule to use the provided offset. The register is unchanged.\n","sig":null,"attributes":[{"value":"/ Update the CFA rule to use the provided offset. The register is unchanged.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190029,"byte_end":1190107,"line_start":385,"line_end":385,"column_start":5,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8658},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190192,"byte_end":1190205,"line_start":388,"line_end":388,"column_start":5,"column_end":18},"name":"CfaExpression","qualname":"::write::cfi::CallFrameInstruction::CfaExpression","value":"CallFrameInstruction::CfaExpression(Expression)","parent":{"krate":0,"index":8647},"children":[],"decl_id":null,"docs":" Define the CFA rule to use the provided expression.\n","sig":null,"attributes":[{"value":"/ Define the CFA rule to use the provided expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190132,"byte_end":1190187,"line_start":387,"line_end":387,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8661},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190275,"byte_end":1190282,"line_start":391,"line_end":391,"column_start":5,"column_end":12},"name":"Restore","qualname":"::write::cfi::CallFrameInstruction::Restore","value":"CallFrameInstruction::Restore(Register)","parent":{"krate":0,"index":8647},"children":[],"decl_id":null,"docs":" Restore the initial rule for the register.\n","sig":null,"attributes":[{"value":"/ Restore the initial rule for the register.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190224,"byte_end":1190270,"line_start":390,"line_end":390,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8664},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190361,"byte_end":1190370,"line_start":393,"line_end":393,"column_start":5,"column_end":14},"name":"Undefined","qualname":"::write::cfi::CallFrameInstruction::Undefined","value":"CallFrameInstruction::Undefined(Register)","parent":{"krate":0,"index":8647},"children":[],"decl_id":null,"docs":" The previous value of the register is not recoverable.\n","sig":null,"attributes":[{"value":"/ The previous value of the register is not recoverable.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190298,"byte_end":1190356,"line_start":392,"line_end":392,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8667},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190430,"byte_end":1190439,"line_start":395,"line_end":395,"column_start":5,"column_end":14},"name":"SameValue","qualname":"::write::cfi::CallFrameInstruction::SameValue","value":"CallFrameInstruction::SameValue(Register)","parent":{"krate":0,"index":8647},"children":[],"decl_id":null,"docs":" The register has not been modified.\n","sig":null,"attributes":[{"value":"/ The register has not been modified.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190386,"byte_end":1190425,"line_start":394,"line_end":394,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8670},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190532,"byte_end":1190538,"line_start":397,"line_end":397,"column_start":5,"column_end":11},"name":"Offset","qualname":"::write::cfi::CallFrameInstruction::Offset","value":"CallFrameInstruction::Offset(Register, i32)","parent":{"krate":0,"index":8647},"children":[],"decl_id":null,"docs":" The previous value of the register is saved at address CFA + offset.\n","sig":null,"attributes":[{"value":"/ The previous value of the register is saved at address CFA + offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190455,"byte_end":1190527,"line_start":396,"line_end":396,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8674},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190619,"byte_end":1190628,"line_start":399,"line_end":399,"column_start":5,"column_end":14},"name":"ValOffset","qualname":"::write::cfi::CallFrameInstruction::ValOffset","value":"CallFrameInstruction::ValOffset(Register, i32)","parent":{"krate":0,"index":8647},"children":[],"decl_id":null,"docs":" The previous value of the register is CFA + offset.\n","sig":null,"attributes":[{"value":"/ The previous value of the register is CFA + offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190559,"byte_end":1190614,"line_start":398,"line_end":398,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8678},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190723,"byte_end":1190731,"line_start":401,"line_end":401,"column_start":5,"column_end":13},"name":"Register","qualname":"::write::cfi::CallFrameInstruction::Register","value":"CallFrameInstruction::Register(Register, Register)","parent":{"krate":0,"index":8647},"children":[],"decl_id":null,"docs":" The previous value of the register is stored in another register.\n","sig":null,"attributes":[{"value":"/ The previous value of the register is stored in another register.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190649,"byte_end":1190718,"line_start":400,"line_end":400,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8682},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190845,"byte_end":1190855,"line_start":403,"line_end":403,"column_start":5,"column_end":15},"name":"Expression","qualname":"::write::cfi::CallFrameInstruction::Expression","value":"CallFrameInstruction::Expression(Register, Expression)","parent":{"krate":0,"index":8647},"children":[],"decl_id":null,"docs":" The previous value of the register is saved at address given by the expression.\n","sig":null,"attributes":[{"value":"/ The previous value of the register is saved at address given by the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190757,"byte_end":1190840,"line_start":402,"line_end":402,"column_start":5,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8686},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190954,"byte_end":1190967,"line_start":405,"line_end":405,"column_start":5,"column_end":18},"name":"ValExpression","qualname":"::write::cfi::CallFrameInstruction::ValExpression","value":"CallFrameInstruction::ValExpression(Register, Expression)","parent":{"krate":0,"index":8647},"children":[],"decl_id":null,"docs":" The previous value of the register is given by the expression.\n","sig":null,"attributes":[{"value":"/ The previous value of the register is given by the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190883,"byte_end":1190949,"line_start":404,"line_end":404,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8690},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1191042,"byte_end":1191055,"line_start":408,"line_end":408,"column_start":5,"column_end":18},"name":"RememberState","qualname":"::write::cfi::CallFrameInstruction::RememberState","value":"CallFrameInstruction::RememberState","parent":{"krate":0,"index":8647},"children":[],"decl_id":null,"docs":" Push all register rules onto a stack.\n","sig":null,"attributes":[{"value":"/ Push all register rules onto a stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1190996,"byte_end":1191037,"line_start":407,"line_end":407,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8692},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1191107,"byte_end":1191119,"line_start":410,"line_end":410,"column_start":5,"column_end":17},"name":"RestoreState","qualname":"::write::cfi::CallFrameInstruction::RestoreState","value":"CallFrameInstruction::RestoreState","parent":{"krate":0,"index":8647},"children":[],"decl_id":null,"docs":" Pop all register rules off the stack.\n","sig":null,"attributes":[{"value":"/ Pop all register rules off the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1191061,"byte_end":1191102,"line_start":409,"line_end":409,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8694},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1191197,"byte_end":1191205,"line_start":412,"line_end":412,"column_start":5,"column_end":13},"name":"ArgsSize","qualname":"::write::cfi::CallFrameInstruction::ArgsSize","value":"CallFrameInstruction::ArgsSize(u32)","parent":{"krate":0,"index":8647},"children":[],"decl_id":null,"docs":" The size of the arguments that have been pushed onto the stack.\n","sig":null,"attributes":[{"value":"/ The size of the arguments that have been pushed onto the stack.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1191125,"byte_end":1191192,"line_start":411,"line_end":411,"column_start":5,"column_end":72}}]},{"kind":"Enum","id":{"krate":0,"index":8647},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1189799,"byte_end":1189819,"line_start":380,"line_end":380,"column_start":10,"column_end":30},"name":"CallFrameInstruction","qualname":"::write::cfi::CallFrameInstruction","value":"pub enum CallFrameInstruction {\n\n    /// Define the CFA rule to use the provided register and offset.\n    Cfa(Register, i32),\n\n    /// Update the CFA rule to use the provided register. The offset is unchanged.\n    CfaRegister(Register),\n\n    /// Update the CFA rule to use the provided offset. The register is unchanged.\n    CfaOffset(i32),\n\n    /// Define the CFA rule to use the provided expression.\n    CfaExpression(Expression),\n\n    /// Restore the initial rule for the register.\n    Restore(Register),\n\n    /// The previous value of the register is not recoverable.\n    Undefined(Register),\n\n    /// The register has not been modified.\n    SameValue(Register),\n\n    /// The previous value of the register is saved at address CFA + offset.\n    Offset(Register, i32),\n\n    /// The previous value of the register is CFA + offset.\n    ValOffset(Register, i32),\n\n    /// The previous value of the register is stored in another register.\n    Register(Register, Register),\n\n    /// The previous value of the register is saved at address given by the expression.\n    Expression(Register, Expression),\n\n    /// The previous value of the register is given by the expression.\n    ValExpression(Register, Expression),\n\n    /// Push all register rules onto a stack.\n    RememberState,\n\n    /// Pop all register rules off the stack.\n    RestoreState,\n\n    /// The size of the arguments that have been pushed onto the stack.\n    ArgsSize(u32),\n}","parent":null,"children":[{"krate":0,"index":8648},{"krate":0,"index":8652},{"krate":0,"index":8655},{"krate":0,"index":8658},{"krate":0,"index":8661},{"krate":0,"index":8664},{"krate":0,"index":8667},{"krate":0,"index":8670},{"krate":0,"index":8674},{"krate":0,"index":8678},{"krate":0,"index":8682},{"krate":0,"index":8686},{"krate":0,"index":8690},{"krate":0,"index":8692},{"krate":0,"index":8694}],"decl_id":null,"docs":" An instruction in a frame description entry.","sig":null,"attributes":[{"value":"/ An instruction in a frame description entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1189616,"byte_end":1189664,"line_start":376,"line_end":376,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1189665,"byte_end":1189668,"line_start":377,"line_end":377,"column_start":1,"column_end":4}},{"value":"/ This may be a CFA definition, a register rule, or some other directive.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1189669,"byte_end":1189744,"line_start":378,"line_end":378,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2423},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1199012,"byte_end":1199016,"line_start":602,"line_end":602,"column_start":16,"column_end":20},"name":"from","qualname":"<FrameTable>::from","value":"pub fn from<R, Section>(&Section, &Fn(u64) -> Option<Address>)\n-> ConvertResult<FrameTable> where R: Reader<Offset = usize>,\nSection: read::UnwindSection<R>, Section::Offset: read::UnwindOffset<usize>","parent":null,"children":[],"decl_id":null,"docs":" Create a frame table by reading the data in the given section.","sig":null,"attributes":[{"value":"/ Create a frame table by reading the data in the given section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1198508,"byte_end":1198574,"line_start":595,"line_end":595,"column_start":9,"column_end":75}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1198583,"byte_end":1198586,"line_start":596,"line_end":596,"column_start":9,"column_end":12}},{"value":"/ `convert_address` is a function to convert read addresses into the `Address`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1198595,"byte_end":1198675,"line_start":597,"line_end":597,"column_start":9,"column_end":89}},{"value":"/ type. For non-relocatable addresses, this function may simply return","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1198684,"byte_end":1198756,"line_start":598,"line_end":598,"column_start":9,"column_end":81}},{"value":"/ `Address::Constant(address)`. For relocatable addresses, it is the caller's","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1198765,"byte_end":1198844,"line_start":599,"line_end":599,"column_start":9,"column_end":88}},{"value":"/ responsibility to determine the symbol and addend corresponding to the address","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1198853,"byte_end":1198935,"line_start":600,"line_end":600,"column_start":9,"column_end":91}},{"value":"/ and return `Address::Symbol { symbol, addend }`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1198944,"byte_end":1198996,"line_start":601,"line_end":601,"column_start":9,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":8711},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1217524,"byte_end":1217529,"line_start":11,"line_end":11,"column_start":12,"column_end":17},"name":"Dwarf","qualname":"::write::dwarf::Dwarf","value":"Dwarf { units, line_programs, line_strings, strings }","parent":null,"children":[{"krate":0,"index":8712},{"krate":0,"index":8713},{"krate":0,"index":8714},{"krate":0,"index":8715}],"decl_id":null,"docs":" Writable DWARF information for more than one unit.\n","sig":null,"attributes":[{"value":"/ Writable DWARF information for more than one unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1217432,"byte_end":1217486,"line_start":9,"line_end":9,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":8712},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1217699,"byte_end":1217704,"line_start":14,"line_end":14,"column_start":9,"column_end":14},"name":"units","qualname":"::write::dwarf::Dwarf::units","value":"write::unit::UnitTable","parent":{"krate":0,"index":8711},"children":[],"decl_id":null,"docs":" A table of units. These are primarily stored in the `.debug_info` section,\n but they also contain information that is stored in other sections.\n","sig":null,"attributes":[{"value":"/ A table of units. These are primarily stored in the `.debug_info` section,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1217536,"byte_end":1217614,"line_start":12,"line_end":12,"column_start":5,"column_end":83}},{"value":"/ but they also contain information that is stored in other sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1217619,"byte_end":1217690,"line_start":13,"line_end":13,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":8713},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1217900,"byte_end":1217913,"line_start":20,"line_end":20,"column_start":9,"column_end":22},"name":"line_programs","qualname":"::write::dwarf::Dwarf::line_programs","value":"alloc::vec::Vec<write::line::LineProgram>","parent":{"krate":0,"index":8711},"children":[],"decl_id":null,"docs":" Extra line number programs that are not associated with a unit.","sig":null,"attributes":[{"value":"/ Extra line number programs that are not associated with a unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1217722,"byte_end":1217789,"line_start":16,"line_end":16,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1217794,"byte_end":1217797,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ These should only be used when generating DWARF5 line-only debug","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1217802,"byte_end":1217870,"line_start":18,"line_end":18,"column_start":5,"column_end":73}},{"value":"/ information.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1217875,"byte_end":1217891,"line_start":19,"line_end":19,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":8714},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1218023,"byte_end":1218035,"line_start":23,"line_end":23,"column_start":9,"column_end":21},"name":"line_strings","qualname":"::write::dwarf::Dwarf::line_strings","value":"write::str::LineStringTable","parent":{"krate":0,"index":8711},"children":[],"decl_id":null,"docs":" A table of strings that will be stored in the `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ A table of strings that will be stored in the `.debug_line_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1217938,"byte_end":1218014,"line_start":22,"line_end":22,"column_start":5,"column_end":81}}]},{"kind":"Field","id":{"krate":0,"index":8715},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1218139,"byte_end":1218146,"line_start":26,"line_end":26,"column_start":9,"column_end":16},"name":"strings","qualname":"::write::dwarf::Dwarf::strings","value":"write::str::StringTable","parent":{"krate":0,"index":8711},"children":[],"decl_id":null,"docs":" A table of strings that will be stored in the `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ A table of strings that will be stored in the `.debug_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1218059,"byte_end":1218130,"line_start":25,"line_end":25,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2453},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1218241,"byte_end":1218244,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<Dwarf>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Dwarf` instance.\n","sig":null,"attributes":[{"value":"/ Create a new `Dwarf` instance.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1218181,"byte_end":1218215,"line_start":30,"line_end":30,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1218220,"byte_end":1218229,"line_start":31,"line_end":31,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2454},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1218358,"byte_end":1218363,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"name":"write","qualname":"<Dwarf>::write","value":"pub fn write<W: Writer>(&mut Self, &mut Sections<W>) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write the DWARF information to the given sections.\n","sig":null,"attributes":[{"value":"/ Write the DWARF information to the given sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1218292,"byte_end":1218346,"line_start":36,"line_end":36,"column_start":5,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":8720},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1218993,"byte_end":1219002,"line_start":55,"line_end":55,"column_start":12,"column_end":21},"name":"DwarfUnit","qualname":"::write::dwarf::DwarfUnit","value":"DwarfUnit { unit, line_strings, strings }","parent":null,"children":[{"krate":0,"index":8721},{"krate":0,"index":8722},{"krate":0,"index":8723}],"decl_id":null,"docs":" Writable DWARF information for a single unit.\n","sig":null,"attributes":[{"value":"/ Writable DWARF information for a single unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1218915,"byte_end":1218964,"line_start":53,"line_end":53,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":8721},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1219156,"byte_end":1219160,"line_start":58,"line_end":58,"column_start":9,"column_end":13},"name":"unit","qualname":"::write::dwarf::DwarfUnit::unit","value":"write::unit::Unit","parent":{"krate":0,"index":8720},"children":[],"decl_id":null,"docs":" A unit. This is primarily stored in the `.debug_info` section,\n but also contains information that is stored in other sections.\n","sig":null,"attributes":[{"value":"/ A unit. This is primarily stored in the `.debug_info` section,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1219009,"byte_end":1219075,"line_start":56,"line_end":56,"column_start":5,"column_end":71}},{"value":"/ but also contains information that is stored in other sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1219080,"byte_end":1219147,"line_start":57,"line_end":57,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":8722},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1219258,"byte_end":1219270,"line_start":61,"line_end":61,"column_start":9,"column_end":21},"name":"line_strings","qualname":"::write::dwarf::DwarfUnit::line_strings","value":"write::str::LineStringTable","parent":{"krate":0,"index":8720},"children":[],"decl_id":null,"docs":" A table of strings that will be stored in the `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ A table of strings that will be stored in the `.debug_line_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1219173,"byte_end":1219249,"line_start":60,"line_end":60,"column_start":5,"column_end":81}}]},{"kind":"Field","id":{"krate":0,"index":8723},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1219374,"byte_end":1219381,"line_start":64,"line_end":64,"column_start":9,"column_end":16},"name":"strings","qualname":"::write::dwarf::DwarfUnit::strings","value":"write::str::StringTable","parent":{"krate":0,"index":8720},"children":[],"decl_id":null,"docs":" A table of strings that will be stored in the `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ A table of strings that will be stored in the `.debug_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1219294,"byte_end":1219365,"line_start":63,"line_end":63,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2457},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1219637,"byte_end":1219640,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"new","qualname":"<DwarfUnit>::new","value":"pub fn new(Encoding) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DwarfUnit`.","sig":null,"attributes":[{"value":"/ Create a new `DwarfUnit`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1219420,"byte_end":1219449,"line_start":68,"line_end":68,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1219454,"byte_end":1219457,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ Note: you should set `self.unit.line_program` after creation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1219462,"byte_end":1219527,"line_start":70,"line_end":70,"column_start":5,"column_end":70}},{"value":"/ This cannot be done earlier because it may need to reference","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1219532,"byte_end":1219596,"line_start":71,"line_end":71,"column_start":5,"column_end":69}},{"value":"/ `self.line_strings`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1219601,"byte_end":1219625,"line_start":72,"line_end":72,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2458},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1219956,"byte_end":1219961,"line_start":83,"line_end":83,"column_start":12,"column_end":17},"name":"write","qualname":"<DwarfUnit>::write","value":"pub fn write<W: Writer>(&mut Self, &mut Sections<W>) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write the DWARf information to the given sections.\n","sig":null,"attributes":[{"value":"/ Write the DWARf information to the given sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1219890,"byte_end":1219944,"line_start":82,"line_end":82,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2469},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1221443,"byte_end":1221447,"line_start":121,"line_end":121,"column_start":16,"column_end":20},"name":"from","qualname":"<Dwarf>::from","value":"pub fn from<R: Reader<Offset =\n            usize>>(&read::Dwarf<R>, &Fn(u64) -> Option<Address>)\n-> ConvertResult<Dwarf>","parent":null,"children":[],"decl_id":null,"docs":" Create a `write::Dwarf` by converting a `read::Dwarf`.","sig":null,"attributes":[{"value":"/ Create a `write::Dwarf` by converting a `read::Dwarf`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1220947,"byte_end":1221005,"line_start":114,"line_end":114,"column_start":9,"column_end":67}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1221014,"byte_end":1221017,"line_start":115,"line_end":115,"column_start":9,"column_end":12}},{"value":"/ `convert_address` is a function to convert read addresses into the `Address`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1221026,"byte_end":1221106,"line_start":116,"line_end":116,"column_start":9,"column_end":89}},{"value":"/ type. For non-relocatable addresses, this function may simply return","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1221115,"byte_end":1221187,"line_start":117,"line_end":117,"column_start":9,"column_end":81}},{"value":"/ `Address::Constant(address)`. For relocatable addresses, it is the caller's","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1221196,"byte_end":1221275,"line_start":118,"line_end":118,"column_start":9,"column_end":88}},{"value":"/ responsibility to determine the symbol and addend corresponding to the address","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1221284,"byte_end":1221366,"line_start":119,"line_end":119,"column_start":9,"column_end":91}},{"value":"/ and return `Address::Symbol { symbol, addend }`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1221375,"byte_end":1221427,"line_start":120,"line_end":120,"column_start":9,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":8726},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1222760,"byte_end":1222771,"line_start":21,"line_end":21,"column_start":12,"column_end":23},"name":"LineProgram","qualname":"::write::line::LineProgram","value":"LineProgram { file_has_timestamp, file_has_size, file_has_md5 }","parent":null,"children":[{"krate":0,"index":8727},{"krate":0,"index":8728},{"krate":0,"index":8729},{"krate":0,"index":8730},{"krate":0,"index":8731},{"krate":0,"index":8732},{"krate":0,"index":8733},{"krate":0,"index":8734},{"krate":0,"index":8735},{"krate":0,"index":8736},{"krate":0,"index":8737},{"krate":0,"index":8738},{"krate":0,"index":8739}],"decl_id":null,"docs":" A line number program.\n","sig":null,"attributes":[{"value":"/ A line number program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1222698,"byte_end":1222724,"line_start":19,"line_end":19,"column_start":1,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":8733},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224106,"byte_end":1224124,"line_start":55,"line_end":55,"column_start":9,"column_end":27},"name":"file_has_timestamp","qualname":"::write::line::LineProgram::file_has_timestamp","value":"bool","parent":{"krate":0,"index":8726},"children":[],"decl_id":null,"docs":" True if the file entries may have valid timestamps.","sig":null,"attributes":[{"value":"/ True if the file entries may have valid timestamps.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1223848,"byte_end":1223903,"line_start":50,"line_end":50,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1223908,"byte_end":1223911,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Entries may still have a timestamp of 0 even if this is set.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1223916,"byte_end":1223980,"line_start":52,"line_end":52,"column_start":5,"column_end":69}},{"value":"/ For version <= 4, this is ignored.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1223985,"byte_end":1224023,"line_start":53,"line_end":53,"column_start":5,"column_end":43}},{"value":"/ For version 5, this controls whether to emit `DW_LNCT_timestamp`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224028,"byte_end":1224097,"line_start":54,"line_end":54,"column_start":5,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":8734},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224380,"byte_end":1224393,"line_start":62,"line_end":62,"column_start":9,"column_end":22},"name":"file_has_size","qualname":"::write::line::LineProgram::file_has_size","value":"bool","parent":{"krate":0,"index":8726},"children":[],"decl_id":null,"docs":" True if the file entries may have valid sizes.","sig":null,"attributes":[{"value":"/ True if the file entries may have valid sizes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224137,"byte_end":1224187,"line_start":57,"line_end":57,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224192,"byte_end":1224195,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ Entries may still have a size of 0 even if this is set.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224200,"byte_end":1224259,"line_start":59,"line_end":59,"column_start":5,"column_end":64}},{"value":"/ For version <= 4, this is ignored.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224264,"byte_end":1224302,"line_start":60,"line_end":60,"column_start":5,"column_end":43}},{"value":"/ For version 5, this controls whether to emit `DW_LNCT_size`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224307,"byte_end":1224371,"line_start":61,"line_end":61,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":8735},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224588,"byte_end":1224600,"line_start":68,"line_end":68,"column_start":9,"column_end":21},"name":"file_has_md5","qualname":"::write::line::LineProgram::file_has_md5","value":"bool","parent":{"krate":0,"index":8726},"children":[],"decl_id":null,"docs":" True if the file entries have valid MD5 checksums.","sig":null,"attributes":[{"value":"/ True if the file entries have valid MD5 checksums.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224406,"byte_end":1224460,"line_start":64,"line_end":64,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224465,"byte_end":1224468,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ For version <= 4, this is ignored.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224473,"byte_end":1224511,"line_start":66,"line_end":66,"column_start":5,"column_end":43}},{"value":"/ For version 5, this controls whether to emit `DW_LNCT_MD5`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224516,"byte_end":1224579,"line_start":67,"line_end":67,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2501},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1225625,"byte_end":1225628,"line_start":99,"line_end":99,"column_start":12,"column_end":15},"name":"new","qualname":"<LineProgram>::new","value":"pub fn new(Encoding, LineEncoding, LineString, LineString, Option<FileInfo>)\n-> LineProgram","parent":null,"children":[],"decl_id":null,"docs":" Create a new `LineProgram`.","sig":null,"attributes":[{"value":"/ Create a new `LineProgram`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224809,"byte_end":1224840,"line_start":78,"line_end":78,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224845,"byte_end":1224848,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ `comp_dir` defines the working directory of the compilation unit,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224853,"byte_end":1224922,"line_start":80,"line_end":80,"column_start":5,"column_end":74}},{"value":"/ and must be the same as the `DW_AT_comp_dir` attribute","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224927,"byte_end":1224985,"line_start":81,"line_end":81,"column_start":5,"column_end":63}},{"value":"/ of the compilation unit DIE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224990,"byte_end":1225022,"line_start":82,"line_end":82,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1225027,"byte_end":1225030,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ `comp_file` and `comp_file_info` define the primary source file","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1225035,"byte_end":1225102,"line_start":84,"line_end":84,"column_start":5,"column_end":72}},{"value":"/ of the compilation unit and must be the same as the `DW_AT_name`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1225107,"byte_end":1225175,"line_start":85,"line_end":85,"column_start":5,"column_end":73}},{"value":"/ attribute of the compilation unit DIE.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1225180,"byte_end":1225222,"line_start":86,"line_end":86,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1225227,"byte_end":1225230,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1225235,"byte_end":1225247,"line_start":88,"line_end":88,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1225252,"byte_end":1225255,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ Panics if `line_encoding.line_base` > 0.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1225260,"byte_end":1225304,"line_start":90,"line_end":90,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1225309,"byte_end":1225312,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Panics if `line_encoding.line_base` + `line_encoding.line_range` <= 0.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1225317,"byte_end":1225391,"line_start":92,"line_end":92,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1225396,"byte_end":1225399,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Panics if `comp_dir` is empty or contains a null byte.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1225404,"byte_end":1225462,"line_start":94,"line_end":94,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1225467,"byte_end":1225470,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ Panics if `comp_file` is empty or contains a null byte.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1225475,"byte_end":1225534,"line_start":96,"line_end":96,"column_start":5,"column_end":64}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1225539,"byte_end":1225575,"line_start":97,"line_end":97,"column_start":5,"column_end":41}},{"value":"allow(clippy :: new_ret_no_self)","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1225580,"byte_end":1225613,"line_start":98,"line_end":98,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2502},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1227171,"byte_end":1227175,"line_start":138,"line_end":138,"column_start":12,"column_end":16},"name":"none","qualname":"<LineProgram>::none","value":"pub fn none() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `LineProgram` with no fields set.","sig":null,"attributes":[{"value":"/ Create a new `LineProgram` with no fields set.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1226890,"byte_end":1226940,"line_start":132,"line_end":132,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1226945,"byte_end":1226948,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ This can be used when the `LineProgram` will not be used.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1226953,"byte_end":1227014,"line_start":134,"line_end":134,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1227019,"byte_end":1227022,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ You should not attempt to add files or line instructions to","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1227027,"byte_end":1227090,"line_start":136,"line_end":136,"column_start":5,"column_end":68}},{"value":"/ this line program, or write it to the `.debug_line` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1227095,"byte_end":1227159,"line_start":137,"line_end":137,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2503},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228036,"byte_end":1228043,"line_start":163,"line_end":163,"column_start":12,"column_end":19},"name":"is_none","qualname":"<LineProgram>::is_none","value":"pub fn is_none(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if this line program was created with `LineProgram::none()`.\n","sig":null,"attributes":[{"value":"/ Return true if this line program was created with `LineProgram::none()`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1227934,"byte_end":1228010,"line_start":161,"line_end":161,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228015,"byte_end":1228024,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2504},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228173,"byte_end":1228181,"line_start":169,"line_end":169,"column_start":12,"column_end":20},"name":"encoding","qualname":"<LineProgram>::encoding","value":"pub fn encoding(&Self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding parameters for this line program.\n","sig":null,"attributes":[{"value":"/ Return the encoding parameters for this line program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228090,"byte_end":1228147,"line_start":167,"line_end":167,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228152,"byte_end":1228161,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2505},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228313,"byte_end":1228320,"line_start":175,"line_end":175,"column_start":12,"column_end":19},"name":"version","qualname":"<LineProgram>::version","value":"pub fn version(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Return the DWARF version for this line program.\n","sig":null,"attributes":[{"value":"/ Return the DWARF version for this line program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228236,"byte_end":1228287,"line_start":173,"line_end":173,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228292,"byte_end":1228301,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2506},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228463,"byte_end":1228475,"line_start":181,"line_end":181,"column_start":12,"column_end":24},"name":"address_size","qualname":"<LineProgram>::address_size","value":"pub fn address_size(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return the address size in bytes for this line program.\n","sig":null,"attributes":[{"value":"/ Return the address size in bytes for this line program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228378,"byte_end":1228437,"line_start":179,"line_end":179,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228442,"byte_end":1228451,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2507},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228613,"byte_end":1228619,"line_start":187,"line_end":187,"column_start":12,"column_end":18},"name":"format","qualname":"<LineProgram>::format","value":"pub fn format(&Self) -> Format","parent":null,"children":[],"decl_id":null,"docs":" Return the DWARF format for this line program.\n","sig":null,"attributes":[{"value":"/ Return the DWARF format for this line program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228537,"byte_end":1228587,"line_start":185,"line_end":185,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228592,"byte_end":1228601,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2508},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228773,"byte_end":1228790,"line_start":193,"line_end":193,"column_start":12,"column_end":29},"name":"default_directory","qualname":"<LineProgram>::default_directory","value":"pub fn default_directory(&Self) -> DirectoryId","parent":null,"children":[],"decl_id":null,"docs":" Return the id for the working directory of the compilation unit.\n","sig":null,"attributes":[{"value":"/ Return the id for the working directory of the compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228679,"byte_end":1228747,"line_start":191,"line_end":191,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228752,"byte_end":1228761,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2509},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1229231,"byte_end":1229244,"line_start":207,"line_end":207,"column_start":12,"column_end":25},"name":"add_directory","qualname":"<LineProgram>::add_directory","value":"pub fn add_directory(&mut Self, LineString) -> DirectoryId","parent":null,"children":[],"decl_id":null,"docs":" Add a directory entry and return its id.","sig":null,"attributes":[{"value":"/ Add a directory entry and return its id.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228849,"byte_end":1228893,"line_start":197,"line_end":197,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228898,"byte_end":1228901,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ If the directory already exists, then return the id of the existing entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228906,"byte_end":1228984,"line_start":199,"line_end":199,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228989,"byte_end":1228992,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ If the path is relative, then the directory is located relative to the working","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1228997,"byte_end":1229079,"line_start":201,"line_end":201,"column_start":5,"column_end":87}},{"value":"/ directory of the compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1229084,"byte_end":1229122,"line_start":202,"line_end":202,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1229127,"byte_end":1229130,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1229135,"byte_end":1229147,"line_start":204,"line_end":204,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1229152,"byte_end":1229155,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ Panics if `directory` is empty or contains a null byte.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1229160,"byte_end":1229219,"line_start":206,"line_end":206,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2510},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1229905,"byte_end":1229918,"line_start":225,"line_end":225,"column_start":12,"column_end":25},"name":"get_directory","qualname":"<LineProgram>::get_directory","value":"pub fn get_directory(&Self, DirectoryId) -> &LineString","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a directory entry.","sig":null,"attributes":[{"value":"/ Get a reference to a directory entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1229784,"byte_end":1229825,"line_start":220,"line_end":220,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1229830,"byte_end":1229833,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1229838,"byte_end":1229850,"line_start":222,"line_end":222,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1229855,"byte_end":1229858,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ Panics if `id` is invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1229863,"byte_end":1229893,"line_start":224,"line_end":224,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2511},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1230709,"byte_end":1230717,"line_start":246,"line_end":246,"column_start":12,"column_end":20},"name":"add_file","qualname":"<LineProgram>::add_file","value":"pub fn add_file(&mut Self, LineString, DirectoryId, Option<FileInfo>)\n-> FileId","parent":null,"children":[],"decl_id":null,"docs":" Add a file entry and return its id.","sig":null,"attributes":[{"value":"/ Add a file entry and return its id.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1230021,"byte_end":1230060,"line_start":229,"line_end":229,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1230065,"byte_end":1230068,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ If the file already exists, then return the id of the existing entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1230073,"byte_end":1230146,"line_start":231,"line_end":231,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1230151,"byte_end":1230154,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ If the file path is relative, then the file is located relative","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1230159,"byte_end":1230226,"line_start":233,"line_end":233,"column_start":5,"column_end":72}},{"value":"/ to the directory. Otherwise the directory is meaningless, but it","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1230231,"byte_end":1230299,"line_start":234,"line_end":234,"column_start":5,"column_end":73}},{"value":"/ is still used as a key for file entries.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1230304,"byte_end":1230348,"line_start":235,"line_end":235,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1230353,"byte_end":1230356,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ If `info` is `None`, then new entries are assigned","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1230361,"byte_end":1230415,"line_start":237,"line_end":237,"column_start":5,"column_end":59}},{"value":"/ default information, and existing entries are unmodified.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1230420,"byte_end":1230481,"line_start":238,"line_end":238,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1230486,"byte_end":1230489,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ If `info` is not `None`, then it is always assigned to the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1230494,"byte_end":1230556,"line_start":240,"line_end":240,"column_start":5,"column_end":67}},{"value":"/ entry, even if the entry already exists.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1230561,"byte_end":1230605,"line_start":241,"line_end":241,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1230610,"byte_end":1230613,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1230618,"byte_end":1230630,"line_start":243,"line_end":243,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1230635,"byte_end":1230638,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Panics if 'file' is empty or contains a null byte.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1230643,"byte_end":1230697,"line_start":245,"line_end":245,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2512},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1231489,"byte_end":1231497,"line_start":275,"line_end":275,"column_start":12,"column_end":20},"name":"get_file","qualname":"<LineProgram>::get_file","value":"pub fn get_file(&Self, FileId) -> (&LineString, DirectoryId)","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a file entry.","sig":null,"attributes":[{"value":"/ Get a reference to a file entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1231373,"byte_end":1231409,"line_start":270,"line_end":270,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1231414,"byte_end":1231417,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1231422,"byte_end":1231434,"line_start":272,"line_end":272,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1231439,"byte_end":1231442,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ Panics if `id` is invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1231447,"byte_end":1231477,"line_start":274,"line_end":274,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2514},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1231957,"byte_end":1231970,"line_start":291,"line_end":291,"column_start":12,"column_end":25},"name":"get_file_info","qualname":"<LineProgram>::get_file_info","value":"pub fn get_file_info(&Self, FileId) -> &FileInfo","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the info for a file entry.","sig":null,"attributes":[{"value":"/ Get a reference to the info for a file entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1231828,"byte_end":1231877,"line_start":286,"line_end":286,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1231882,"byte_end":1231885,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1231890,"byte_end":1231902,"line_start":288,"line_end":288,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1231907,"byte_end":1231910,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ Panics if `id` is invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1231915,"byte_end":1231945,"line_start":290,"line_end":290,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2516},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1232315,"byte_end":1232332,"line_start":303,"line_end":303,"column_start":12,"column_end":29},"name":"get_file_info_mut","qualname":"<LineProgram>::get_file_info_mut","value":"pub fn get_file_info_mut(&mut Self, FileId) -> &mut FileInfo","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the info for a file entry.","sig":null,"attributes":[{"value":"/ Get a mutable reference to the info for a file entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1232178,"byte_end":1232235,"line_start":298,"line_end":298,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1232240,"byte_end":1232243,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1232248,"byte_end":1232260,"line_start":300,"line_end":300,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1232265,"byte_end":1232268,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ Panics if `id` is invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1232273,"byte_end":1232303,"line_start":302,"line_end":302,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2518},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1232767,"byte_end":1232781,"line_start":319,"line_end":319,"column_start":12,"column_end":26},"name":"begin_sequence","qualname":"<LineProgram>::begin_sequence","value":"pub fn begin_sequence(&mut Self, Option<Address>)","parent":null,"children":[],"decl_id":null,"docs":" Begin a new sequence and set its base address.","sig":null,"attributes":[{"value":"/ Begin a new sequence and set its base address.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1232624,"byte_end":1232674,"line_start":314,"line_end":314,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1232679,"byte_end":1232682,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1232687,"byte_end":1232699,"line_start":316,"line_end":316,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1232704,"byte_end":1232707,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ Panics if a sequence has already begun.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1232712,"byte_end":1232755,"line_start":318,"line_end":318,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2519},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1233269,"byte_end":1233281,"line_start":334,"line_end":334,"column_start":12,"column_end":24},"name":"end_sequence","qualname":"<LineProgram>::end_sequence","value":"pub fn end_sequence(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" End the sequence, and reset the row to its default values.","sig":null,"attributes":[{"value":"/ End the sequence, and reset the row to its default values.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1233026,"byte_end":1233088,"line_start":327,"line_end":327,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1233093,"byte_end":1233096,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ Only the `address_offset` and op_index` fields of the current row are used.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1233101,"byte_end":1233180,"line_start":329,"line_end":329,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1233185,"byte_end":1233188,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1233193,"byte_end":1233205,"line_start":331,"line_end":331,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1233210,"byte_end":1233213,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ Panics if a sequence has not begun.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1233218,"byte_end":1233257,"line_start":333,"line_end":333,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2520},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1233881,"byte_end":1233892,"line_start":350,"line_end":350,"column_start":12,"column_end":23},"name":"in_sequence","qualname":"<LineProgram>::in_sequence","value":"pub fn in_sequence(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if a sequence has begun.\n","sig":null,"attributes":[{"value":"/ Return true if a sequence has begun.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1233815,"byte_end":1233855,"line_start":348,"line_end":348,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1233860,"byte_end":1233869,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2521},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1234028,"byte_end":1234031,"line_start":356,"line_end":356,"column_start":12,"column_end":15},"name":"row","qualname":"<LineProgram>::row","value":"pub fn row(&mut Self) -> &mut LineRow","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the data for the current row.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the data for the current row.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1233946,"byte_end":1234002,"line_start":354,"line_end":354,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1234007,"byte_end":1234016,"line_start":355,"line_end":355,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2522},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1234469,"byte_end":1234481,"line_start":369,"line_end":369,"column_start":12,"column_end":24},"name":"generate_row","qualname":"<LineProgram>::generate_row","value":"pub fn generate_row(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Generates the line number information instructions for the current row.","sig":null,"attributes":[{"value":"/ Generates the line number information instructions for the current row.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1234094,"byte_end":1234169,"line_start":360,"line_end":360,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1234174,"byte_end":1234177,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ After the instructions are generated, it sets `discriminator` to 0, and sets","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1234182,"byte_end":1234262,"line_start":362,"line_end":362,"column_start":5,"column_end":85}},{"value":"/ `basic_block`, `prologue_end`, and `epilogue_begin` to false.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1234267,"byte_end":1234332,"line_start":363,"line_end":363,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1234337,"byte_end":1234340,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1234345,"byte_end":1234357,"line_start":365,"line_end":365,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1234362,"byte_end":1234365,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ Panics if a sequence has not begun.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1234370,"byte_end":1234409,"line_start":367,"line_end":367,"column_start":5,"column_end":44}},{"value":"/ Panics if the address_offset decreases.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1234414,"byte_end":1234457,"line_start":368,"line_end":368,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2524},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1239151,"byte_end":1239159,"line_start":487,"line_end":487,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<LineProgram>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the line number program has no instructions.","sig":null,"attributes":[{"value":"/ Returns true if the line number program has no instructions.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1238999,"byte_end":1239063,"line_start":483,"line_end":483,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1239068,"byte_end":1239071,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ Does not check the file or directory entries.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1239076,"byte_end":1239125,"line_start":485,"line_end":485,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1239130,"byte_end":1239139,"line_start":486,"line_end":486,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2525},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1239361,"byte_end":1239366,"line_start":496,"line_end":496,"column_start":12,"column_end":17},"name":"write","qualname":"<LineProgram>::write","value":"pub fn write<W: Writer>(&Self, &mut DebugLine<W>, Encoding,\n                        &DebugLineStrOffsets, &DebugStrOffsets)\n-> Result<DebugLineOffset>","parent":null,"children":[],"decl_id":null,"docs":" Write the line number program to the given section.","sig":null,"attributes":[{"value":"/ Write the line number program to the given section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1239225,"byte_end":1239280,"line_start":491,"line_end":491,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1239285,"byte_end":1239288,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1239293,"byte_end":1239305,"line_start":493,"line_end":493,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1239310,"byte_end":1239313,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ Panics if `self.is_none()`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1239318,"byte_end":1239349,"line_start":495,"line_end":495,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":8744},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1245469,"byte_end":1245476,"line_start":665,"line_end":665,"column_start":12,"column_end":19},"name":"LineRow","qualname":"::write::line::LineRow","value":"LineRow { address_offset, op_index, file, line, column, discriminator, is_statement, basic_block, prologue_end, epilogue_begin, isa }","parent":null,"children":[{"krate":0,"index":8745},{"krate":0,"index":8746},{"krate":0,"index":8747},{"krate":0,"index":8748},{"krate":0,"index":8749},{"krate":0,"index":8750},{"krate":0,"index":8751},{"krate":0,"index":8752},{"krate":0,"index":8753},{"krate":0,"index":8754},{"krate":0,"index":8755}],"decl_id":null,"docs":" A row in the line number table that corresponds to a machine instruction.\n","sig":null,"attributes":[{"value":"/ A row in the line number table that corresponds to a machine instruction.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1245350,"byte_end":1245427,"line_start":663,"line_end":663,"column_start":1,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":8745},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1245565,"byte_end":1245579,"line_start":667,"line_end":667,"column_start":9,"column_end":23},"name":"address_offset","qualname":"::write::line::LineRow::address_offset","value":"u64","parent":{"krate":0,"index":8744},"children":[],"decl_id":null,"docs":" The offset of the instruction from the start address of the sequence.\n","sig":null,"attributes":[{"value":"/ The offset of the instruction from the start address of the sequence.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1245483,"byte_end":1245556,"line_start":666,"line_end":666,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":8746},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1245754,"byte_end":1245762,"line_start":672,"line_end":672,"column_start":9,"column_end":17},"name":"op_index","qualname":"::write::line::LineRow::op_index","value":"u64","parent":{"krate":0,"index":8744},"children":[],"decl_id":null,"docs":" The index of an operation within a VLIW instruction.","sig":null,"attributes":[{"value":"/ The index of an operation within a VLIW instruction.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1245590,"byte_end":1245646,"line_start":668,"line_end":668,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1245651,"byte_end":1245654,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ The index of the first operation is 0.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1245659,"byte_end":1245701,"line_start":670,"line_end":670,"column_start":5,"column_end":47}},{"value":"/ Set to 0 for non-VLIW instructions.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1245706,"byte_end":1245745,"line_start":671,"line_end":671,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":8747},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1245836,"byte_end":1245840,"line_start":675,"line_end":675,"column_start":9,"column_end":13},"name":"file","qualname":"::write::line::LineRow::file","value":"write::line::id::FileId","parent":{"krate":0,"index":8744},"children":[],"decl_id":null,"docs":" The source file corresponding to the instruction.\n","sig":null,"attributes":[{"value":"/ The source file corresponding to the instruction.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1245774,"byte_end":1245827,"line_start":674,"line_end":674,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":8748},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1245994,"byte_end":1245998,"line_start":679,"line_end":679,"column_start":9,"column_end":13},"name":"line","qualname":"::write::line::LineRow::line","value":"u64","parent":{"krate":0,"index":8744},"children":[],"decl_id":null,"docs":" The line number within the source file.","sig":null,"attributes":[{"value":"/ The line number within the source file.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1245854,"byte_end":1245897,"line_start":676,"line_end":676,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1245902,"byte_end":1245905,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ Lines are numbered beginning at 1. Set to 0 if there is no source line.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1245910,"byte_end":1245985,"line_start":678,"line_end":678,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":8749},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246158,"byte_end":1246164,"line_start":683,"line_end":683,"column_start":9,"column_end":15},"name":"column","qualname":"::write::line::LineRow::column","value":"u64","parent":{"krate":0,"index":8744},"children":[],"decl_id":null,"docs":" The column number within the source line.","sig":null,"attributes":[{"value":"/ The column number within the source line.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246009,"byte_end":1246054,"line_start":680,"line_end":680,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246059,"byte_end":1246062,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ Columns are numbered beginning at 1. Set to 0 for the \"left edge\" of the line.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246067,"byte_end":1246149,"line_start":682,"line_end":682,"column_start":5,"column_end":87}}]},{"kind":"Field","id":{"krate":0,"index":8750},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246327,"byte_end":1246340,"line_start":686,"line_end":686,"column_start":9,"column_end":22},"name":"discriminator","qualname":"::write::line::LineRow::discriminator","value":"u64","parent":{"krate":0,"index":8744},"children":[],"decl_id":null,"docs":" An additional discriminator used to distinguish between source locations.\n This value is assigned arbitrarily by the DWARF producer.\n","sig":null,"attributes":[{"value":"/ An additional discriminator used to distinguish between source locations.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246175,"byte_end":1246252,"line_start":684,"line_end":684,"column_start":5,"column_end":82}},{"value":"/ This value is assigned arbitrarily by the DWARF producer.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246257,"byte_end":1246318,"line_start":685,"line_end":685,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":8751},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246440,"byte_end":1246452,"line_start":689,"line_end":689,"column_start":9,"column_end":21},"name":"is_statement","qualname":"::write::line::LineRow::is_statement","value":"bool","parent":{"krate":0,"index":8744},"children":[],"decl_id":null,"docs":" Set to true if the instruction is a recommended breakpoint for a statement.\n","sig":null,"attributes":[{"value":"/ Set to true if the instruction is a recommended breakpoint for a statement.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246352,"byte_end":1246431,"line_start":688,"line_end":688,"column_start":5,"column_end":84}}]},{"kind":"Field","id":{"krate":0,"index":8752},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246542,"byte_end":1246553,"line_start":691,"line_end":691,"column_start":9,"column_end":20},"name":"basic_block","qualname":"::write::line::LineRow::basic_block","value":"bool","parent":{"krate":0,"index":8744},"children":[],"decl_id":null,"docs":" Set to true if the instruction is the beginning of a basic block.\n","sig":null,"attributes":[{"value":"/ Set to true if the instruction is the beginning of a basic block.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246464,"byte_end":1246533,"line_start":690,"line_end":690,"column_start":5,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":8753},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246672,"byte_end":1246684,"line_start":694,"line_end":694,"column_start":9,"column_end":21},"name":"prologue_end","qualname":"::write::line::LineRow::prologue_end","value":"bool","parent":{"krate":0,"index":8744},"children":[],"decl_id":null,"docs":" Set to true if the instruction is a recommended breakpoint at the entry of a\n function.\n","sig":null,"attributes":[{"value":"/ Set to true if the instruction is a recommended breakpoint at the entry of a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246565,"byte_end":1246645,"line_start":692,"line_end":692,"column_start":5,"column_end":85}},{"value":"/ function.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246650,"byte_end":1246663,"line_start":693,"line_end":693,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":8754},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246808,"byte_end":1246822,"line_start":697,"line_end":697,"column_start":9,"column_end":23},"name":"epilogue_begin","qualname":"::write::line::LineRow::epilogue_begin","value":"bool","parent":{"krate":0,"index":8744},"children":[],"decl_id":null,"docs":" Set to true if the instruction is a recommended breakpoint prior to the exit of\n a function.\n","sig":null,"attributes":[{"value":"/ Set to true if the instruction is a recommended breakpoint prior to the exit of","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246696,"byte_end":1246779,"line_start":695,"line_end":695,"column_start":5,"column_end":88}},{"value":"/ a function.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246784,"byte_end":1246799,"line_start":696,"line_end":696,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":8755},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246996,"byte_end":1246999,"line_start":702,"line_end":702,"column_start":9,"column_end":12},"name":"isa","qualname":"::write::line::LineRow::isa","value":"u64","parent":{"krate":0,"index":8744},"children":[],"decl_id":null,"docs":" The instruction set architecture of the instruction.","sig":null,"attributes":[{"value":"/ The instruction set architecture of the instruction.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246835,"byte_end":1246891,"line_start":699,"line_end":699,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246896,"byte_end":1246899,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ Set to 0 for the default ISA. Other values are defined by the architecture ABI.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1246904,"byte_end":1246987,"line_start":701,"line_end":701,"column_start":5,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8813},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1250822,"byte_end":1250828,"line_start":817,"line_end":817,"column_start":5,"column_end":11},"name":"String","qualname":"::write::line::LineString::String","value":"LineString::String(Vec<u8>)","parent":{"krate":0,"index":8812},"children":[],"decl_id":null,"docs":" A slice of bytes representing a string. Must not include null bytes.\n Not guaranteed to be UTF-8 or anything like that.\n","sig":null,"attributes":[{"value":"/ A slice of bytes representing a string. Must not include null bytes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1250687,"byte_end":1250759,"line_start":815,"line_end":815,"column_start":5,"column_end":77}},{"value":"/ Not guaranteed to be UTF-8 or anything like that.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1250764,"byte_end":1250817,"line_start":816,"line_end":816,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8816},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1250905,"byte_end":1250914,"line_start":820,"line_end":820,"column_start":5,"column_end":14},"name":"StringRef","qualname":"::write::line::LineString::StringRef","value":"LineString::StringRef(StringId)","parent":{"krate":0,"index":8812},"children":[],"decl_id":null,"docs":" A reference to a string in the `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ A reference to a string in the `.debug_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1250844,"byte_end":1250900,"line_start":819,"line_end":819,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8819},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1250997,"byte_end":1251010,"line_start":823,"line_end":823,"column_start":5,"column_end":18},"name":"LineStringRef","qualname":"::write::line::LineString::LineStringRef","value":"LineString::LineStringRef(LineStringId)","parent":{"krate":0,"index":8812},"children":[],"decl_id":null,"docs":" A reference to a string in the `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ A reference to a string in the `.debug_line_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1250931,"byte_end":1250992,"line_start":822,"line_end":822,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":8812},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1250670,"byte_end":1250680,"line_start":814,"line_end":814,"column_start":10,"column_end":20},"name":"LineString","qualname":"::write::line::LineString","value":"pub enum LineString {\n\n    /// A slice of bytes representing a string. Must not include null bytes.\n    /// Not guaranteed to be UTF-8 or anything like that.\n    String(Vec<u8>),\n\n    /// A reference to a string in the `.debug_str` section.\n    StringRef(StringId),\n\n    /// A reference to a string in the `.debug_line_str` section.\n    LineStringRef(LineStringId),\n}","parent":null,"children":[{"krate":0,"index":8813},{"krate":0,"index":8816},{"krate":0,"index":8819}],"decl_id":null,"docs":" A string value for use in defining paths in line number programs.\n","sig":null,"attributes":[{"value":"/ A string value for use in defining paths in line number programs.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1250546,"byte_end":1250615,"line_start":812,"line_end":812,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2536},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1251134,"byte_end":1251137,"line_start":828,"line_end":828,"column_start":12,"column_end":15},"name":"new","qualname":"<LineString>::new","value":"pub fn new<T>(T, Encoding, &mut LineStringTable) -> Self where\nT: Into<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Create a `LineString` using the normal form for the given encoding.\n","sig":null,"attributes":[{"value":"/ Create a `LineString` using the normal form for the given encoding.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1251051,"byte_end":1251122,"line_start":827,"line_end":827,"column_start":5,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":8836},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1253306,"byte_end":1253317,"line_start":897,"line_end":897,"column_start":12,"column_end":23},"name":"DirectoryId","qualname":"::write::line::DirectoryId","value":"","parent":null,"children":[],"decl_id":null,"docs":" An identifier for a directory in a `LineProgram`.","sig":null,"attributes":[{"value":"/ An identifier for a directory in a `LineProgram`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1253123,"byte_end":1253176,"line_start":893,"line_end":893,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1253177,"byte_end":1253180,"line_start":894,"line_end":894,"column_start":1,"column_end":4}},{"value":"/ Defaults to the working directory of the compilation unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1253181,"byte_end":1253243,"line_start":895,"line_end":895,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":8854},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1253499,"byte_end":1253505,"line_start":903,"line_end":903,"column_start":16,"column_end":22},"name":"FileId","qualname":"::write::line::id::FileId","value":"","parent":null,"children":[],"decl_id":null,"docs":" An identifier for a file in a `LineProgram`.\n","sig":null,"attributes":[{"value":"/ An identifier for a file in a `LineProgram`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1253380,"byte_end":1253428,"line_start":901,"line_end":901,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":8872},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1254560,"byte_end":1254568,"line_start":943,"line_end":943,"column_start":12,"column_end":20},"name":"FileInfo","qualname":"::write::line::FileInfo","value":"FileInfo { timestamp, size, md5 }","parent":null,"children":[{"krate":0,"index":8873},{"krate":0,"index":8874},{"krate":0,"index":8875}],"decl_id":null,"docs":" Extra information for file in a `LineProgram`.\n","sig":null,"attributes":[{"value":"/ Extra information for file in a `LineProgram`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1254444,"byte_end":1254494,"line_start":941,"line_end":941,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":8873},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1254693,"byte_end":1254702,"line_start":946,"line_end":946,"column_start":9,"column_end":18},"name":"timestamp","qualname":"::write::line::FileInfo::timestamp","value":"u64","parent":{"krate":0,"index":8872},"children":[],"decl_id":null,"docs":" The implementation defined timestamp of the last modification of the file,\n or 0 if not available.\n","sig":null,"attributes":[{"value":"/ The implementation defined timestamp of the last modification of the file,","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1254575,"byte_end":1254653,"line_start":944,"line_end":944,"column_start":5,"column_end":83}},{"value":"/ or 0 if not available.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1254658,"byte_end":1254684,"line_start":945,"line_end":945,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":8874},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1254780,"byte_end":1254784,"line_start":949,"line_end":949,"column_start":9,"column_end":13},"name":"size","qualname":"::write::line::FileInfo::size","value":"u64","parent":{"krate":0,"index":8872},"children":[],"decl_id":null,"docs":" The size of the file in bytes, or 0 if not available.\n","sig":null,"attributes":[{"value":"/ The size of the file in bytes, or 0 if not available.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1254714,"byte_end":1254771,"line_start":948,"line_end":948,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":8875},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1254936,"byte_end":1254939,"line_start":954,"line_end":954,"column_start":9,"column_end":12},"name":"md5","qualname":"::write::line::FileInfo::md5","value":"[u8; 16]","parent":{"krate":0,"index":8872},"children":[],"decl_id":null,"docs":" A 16-byte MD5 digest of the file contents.","sig":null,"attributes":[{"value":"/ A 16-byte MD5 digest of the file contents.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1254796,"byte_end":1254842,"line_start":951,"line_end":951,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1254847,"byte_end":1254850,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ Only used if version >= 5 and `LineProgram::file_has_md5` is `true`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1254855,"byte_end":1254927,"line_start":953,"line_end":953,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":8909},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1254975,"byte_end":1254984,"line_start":958,"line_end":958,"column_start":5,"column_end":14},"name":"DebugLine","qualname":"::write::line::DebugLine","value":"","parent":null,"children":[],"decl_id":null,"docs":"A writable `.debug_line` section.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2559},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1255414,"byte_end":1255418,"line_start":973,"line_end":973,"column_start":16,"column_end":20},"name":"from","qualname":"<LineProgram>::from","value":"pub fn from<R: Reader<Offset =\n            usize>>(read::IncompleteLineProgram<R>, &read::Dwarf<R>,\n                    &mut write::LineStringTable, &mut write::StringTable,\n                    &Fn(u64) -> Option<Address>)\n-> ConvertResult<(LineProgram, Vec<FileId>)>","parent":null,"children":[],"decl_id":null,"docs":" Create a line number program by reading the data from the given program.","sig":null,"attributes":[{"value":"/ Create a line number program by reading the data from the given program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1255236,"byte_end":1255312,"line_start":970,"line_end":970,"column_start":9,"column_end":85}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1255321,"byte_end":1255324,"line_start":971,"line_end":971,"column_start":9,"column_end":12}},{"value":"/ Return the program and a mapping from file index to `FileId`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1255333,"byte_end":1255398,"line_start":972,"line_end":972,"column_start":9,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8935},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1298591,"byte_end":1298599,"line_start":12,"line_end":12,"column_start":5,"column_end":13},"name":"DebugLoc","qualname":"::write::loc::DebugLoc","value":"","parent":null,"children":[],"decl_id":null,"docs":"A writable `.debug_loc` section.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8961},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1298689,"byte_end":1298702,"line_start":17,"line_end":17,"column_start":5,"column_end":18},"name":"DebugLocLists","qualname":"::write::loc::DebugLocLists","value":"","parent":null,"children":[],"decl_id":null,"docs":"A writable `.debug_loclists` section.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8975},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1298798,"byte_end":1298817,"line_start":23,"line_end":23,"column_start":5,"column_end":24},"name":"LocationListOffsets","qualname":"::write::loc::LocationListOffsets","value":"LocationListOffsets {  }","parent":null,"children":[{"krate":0,"index":8976},{"krate":0,"index":8977}],"decl_id":null,"docs":"The section offsets of a series of location lists within the `.debug_loc` or `.debug_loclists` sections.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8982},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1298989,"byte_end":1299003,"line_start":28,"line_end":28,"column_start":5,"column_end":19},"name":"LocationListId","qualname":"::write::loc::LocationListId","value":"LocationListId {  }","parent":null,"children":[{"krate":0,"index":8983},{"krate":0,"index":8984}],"decl_id":null,"docs":"An identifier for a location list in a `LocationListTable`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9000},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1299210,"byte_end":1299227,"line_start":34,"line_end":34,"column_start":12,"column_end":29},"name":"LocationListTable","qualname":"::write::loc::LocationListTable","value":"LocationListTable {  }","parent":null,"children":[{"krate":0,"index":9001},{"krate":0,"index":9002}],"decl_id":null,"docs":" A table of location lists that will be stored in a `.debug_loc` or `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ A table of location lists that will be stored in a `.debug_loc` or `.debug_loclists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1299075,"byte_end":1299172,"line_start":32,"line_end":32,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":2587},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1299371,"byte_end":1299374,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"add","qualname":"<LocationListTable>::add","value":"pub fn add(&mut Self, LocationList) -> LocationListId","parent":null,"children":[],"decl_id":null,"docs":" Add a location list to the table.\n","sig":null,"attributes":[{"value":"/ Add a location list to the table.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1299322,"byte_end":1299359,"line_start":40,"line_end":40,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":9007},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1307322,"byte_end":1307334,"line_start":236,"line_end":236,"column_start":12,"column_end":24},"name":"LocationList","qualname":"::write::loc::LocationList","value":"","parent":null,"children":[],"decl_id":null,"docs":" A locations list that will be stored in a `.debug_loc` or `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ A locations list that will be stored in a `.debug_loc` or `.debug_loclists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1307177,"byte_end":1307265,"line_start":234,"line_end":234,"column_start":1,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":9009},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1307335,"byte_end":1307352,"line_start":236,"line_end":236,"column_start":25,"column_end":42},"name":"0","qualname":"::write::loc::LocationList::0","value":"alloc::vec::Vec<write::loc::Location>","parent":{"krate":0,"index":9007},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":9025},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1307476,"byte_end":1307487,"line_start":242,"line_end":242,"column_start":5,"column_end":16},"name":"BaseAddress","qualname":"::write::loc::Location::BaseAddress","value":"Location::BaseAddress { address }","parent":{"krate":0,"index":9024},"children":[],"decl_id":null,"docs":" DW_LLE_base_address\n","sig":null,"attributes":[{"value":"/ DW_LLE_base_address","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1307448,"byte_end":1307471,"line_start":241,"line_end":241,"column_start":5,"column_end":28}}]},{"kind":"StructVariant","id":{"krate":0,"index":9027},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1307580,"byte_end":1307590,"line_start":247,"line_end":247,"column_start":5,"column_end":15},"name":"OffsetPair","qualname":"::write::loc::Location::OffsetPair","value":"Location::OffsetPair { begin, end, data }","parent":{"krate":0,"index":9024},"children":[],"decl_id":null,"docs":" DW_LLE_offset_pair\n","sig":null,"attributes":[{"value":"/ DW_LLE_offset_pair","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1307553,"byte_end":1307575,"line_start":246,"line_end":246,"column_start":5,"column_end":27}}]},{"kind":"StructVariant","id":{"krate":0,"index":9031},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1307831,"byte_end":1307839,"line_start":256,"line_end":256,"column_start":5,"column_end":13},"name":"StartEnd","qualname":"::write::loc::Location::StartEnd","value":"Location::StartEnd { begin, end, data }","parent":{"krate":0,"index":9024},"children":[],"decl_id":null,"docs":" DW_LLE_start_end\n","sig":null,"attributes":[{"value":"/ DW_LLE_start_end","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1307806,"byte_end":1307826,"line_start":255,"line_end":255,"column_start":5,"column_end":25}}]},{"kind":"StructVariant","id":{"krate":0,"index":9035},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1308041,"byte_end":1308052,"line_start":265,"line_end":265,"column_start":5,"column_end":16},"name":"StartLength","qualname":"::write::loc::Location::StartLength","value":"Location::StartLength { begin, length, data }","parent":{"krate":0,"index":9024},"children":[],"decl_id":null,"docs":" DW_LLE_start_length\n","sig":null,"attributes":[{"value":"/ DW_LLE_start_length","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1308013,"byte_end":1308036,"line_start":264,"line_end":264,"column_start":5,"column_end":28}}]},{"kind":"StructVariant","id":{"krate":0,"index":9039},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1308260,"byte_end":1308275,"line_start":274,"line_end":274,"column_start":5,"column_end":20},"name":"DefaultLocation","qualname":"::write::loc::Location::DefaultLocation","value":"Location::DefaultLocation { data }","parent":{"krate":0,"index":9024},"children":[],"decl_id":null,"docs":" DW_LLE_default_location\n","sig":null,"attributes":[{"value":"/ DW_LLE_default_location","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1308228,"byte_end":1308255,"line_start":273,"line_end":273,"column_start":5,"column_end":32}}]},{"kind":"Enum","id":{"krate":0,"index":9024},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1307433,"byte_end":1307441,"line_start":240,"line_end":240,"column_start":10,"column_end":18},"name":"Location","qualname":"::write::loc::Location","value":"pub enum Location {\n\n    /// DW_LLE_base_address\n    BaseAddress {\n        /// Base address.\n        address: Address,\n    },\n\n    /// DW_LLE_offset_pair\n    OffsetPair {\n        /// Start of range relative to base address.\n        begin: u64,\n        /// End of range relative to base address.\n        end: u64,\n        /// Location description.\n        data: Expression,\n    },\n\n    /// DW_LLE_start_end\n    StartEnd {\n        /// Start of range.\n        begin: Address,\n        /// End of range.\n        end: Address,\n        /// Location description.\n        data: Expression,\n    },\n\n    /// DW_LLE_start_length\n    StartLength {\n        /// Start of range.\n        begin: Address,\n        /// Length of range.\n        length: u64,\n        /// Location description.\n        data: Expression,\n    },\n\n    /// DW_LLE_default_location\n    DefaultLocation {\n        /// Location description.\n        data: Expression,\n    },\n}","parent":null,"children":[{"krate":0,"index":9025},{"krate":0,"index":9027},{"krate":0,"index":9031},{"krate":0,"index":9035},{"krate":0,"index":9039}],"decl_id":null,"docs":" A single location.\n","sig":null,"attributes":[{"value":"/ A single location.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1307356,"byte_end":1307378,"line_start":238,"line_end":238,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":9055},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1320662,"byte_end":1320672,"line_start":13,"line_end":13,"column_start":12,"column_end":22},"name":"Expression","qualname":"::write::op::Expression","value":"Expression {  }","parent":null,"children":[{"krate":0,"index":9056}],"decl_id":null,"docs":" The bytecode for a DWARF expression or location description.\n","sig":null,"attributes":[{"value":"/ The bytecode for a DWARF expression or location description.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1320532,"byte_end":1320596,"line_start":11,"line_end":11,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2633},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1320789,"byte_end":1320792,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<Expression>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an empty expression.\n","sig":null,"attributes":[{"value":"/ Create an empty expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1320732,"byte_end":1320763,"line_start":18,"line_end":18,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1320768,"byte_end":1320777,"line_start":19,"line_end":19,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2634},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1321005,"byte_end":1321008,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"raw","qualname":"<Expression>::raw","value":"pub fn raw(Vec<u8>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an expression from raw bytecode.","sig":null,"attributes":[{"value":"/ Create an expression from raw bytecode.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1320840,"byte_end":1320883,"line_start":24,"line_end":24,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1320888,"byte_end":1320891,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ This does not support operations that require references, such as `DW_OP_addr`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1320896,"byte_end":1320979,"line_start":26,"line_end":26,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1320984,"byte_end":1320993,"line_start":27,"line_end":27,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2635},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1321275,"byte_end":1321277,"line_start":37,"line_end":37,"column_start":12,"column_end":14},"name":"op","qualname":"<Expression>::op","value":"pub fn op(&mut Self, DwOp)","parent":null,"children":[],"decl_id":null,"docs":" Add an operation to the expression.","sig":null,"attributes":[{"value":"/ Add an operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1321136,"byte_end":1321175,"line_start":34,"line_end":34,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1321180,"byte_end":1321183,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ This should only be used for operations that have no explicit operands.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1321188,"byte_end":1321263,"line_start":36,"line_end":36,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2636},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1321436,"byte_end":1321443,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"op_addr","qualname":"<Expression>::op_addr","value":"pub fn op_addr(&mut Self, Address)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_addr` operation to the expression.\n","sig":null,"attributes":[{"value":"/ Add a `DW_OP_addr` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1321373,"byte_end":1321424,"line_start":41,"line_end":41,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2637},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1321681,"byte_end":1321690,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"op_constu","qualname":"<Expression>::op_constu","value":"pub fn op_constu(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_constu` operation to the expression.","sig":null,"attributes":[{"value":"/ Add a `DW_OP_constu` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1321545,"byte_end":1321598,"line_start":46,"line_end":46,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1321603,"byte_end":1321606,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ This may be emitted as a smaller equivalent operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1321611,"byte_end":1321669,"line_start":48,"line_end":48,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2638},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1321929,"byte_end":1321938,"line_start":56,"line_end":56,"column_start":12,"column_end":21},"name":"op_consts","qualname":"<Expression>::op_consts","value":"pub fn op_consts(&mut Self, i64)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_consts` operation to the expression.","sig":null,"attributes":[{"value":"/ Add a `DW_OP_consts` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1321793,"byte_end":1321846,"line_start":53,"line_end":53,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1321851,"byte_end":1321854,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ This may be emitted as a smaller equivalent operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1321859,"byte_end":1321917,"line_start":55,"line_end":55,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2639},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1322134,"byte_end":1322147,"line_start":61,"line_end":61,"column_start":12,"column_end":25},"name":"op_const_type","qualname":"<Expression>::op_const_type","value":"pub fn op_const_type(&mut Self, UnitEntryId, Box<[u8]>)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_const_type` or `DW_OP_GNU_const_type` operation to the expression.\n","sig":null,"attributes":[{"value":"/ Add a `DW_OP_const_type` or `DW_OP_GNU_const_type` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1322039,"byte_end":1322122,"line_start":60,"line_end":60,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2640},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1322341,"byte_end":1322349,"line_start":66,"line_end":66,"column_start":12,"column_end":20},"name":"op_fbreg","qualname":"<Expression>::op_fbreg","value":"pub fn op_fbreg(&mut Self, i64)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_fbreg` operation to the expression.\n","sig":null,"attributes":[{"value":"/ Add a `DW_OP_fbreg` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1322277,"byte_end":1322329,"line_start":65,"line_end":65,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2641},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1322584,"byte_end":1322591,"line_start":73,"line_end":73,"column_start":12,"column_end":19},"name":"op_breg","qualname":"<Expression>::op_breg","value":"pub fn op_breg(&mut Self, Register, i64)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_bregx` operation to the expression.","sig":null,"attributes":[{"value":"/ Add a `DW_OP_bregx` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1322449,"byte_end":1322501,"line_start":70,"line_end":70,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1322506,"byte_end":1322509,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ This may be emitted as a smaller equivalent operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1322514,"byte_end":1322572,"line_start":72,"line_end":72,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2642},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1322905,"byte_end":1322919,"line_start":81,"line_end":81,"column_start":12,"column_end":26},"name":"op_regval_type","qualname":"<Expression>::op_regval_type","value":"pub fn op_regval_type(&mut Self, Register, UnitEntryId)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_regval_type` or `DW_OP_GNU_regval_type` operation to the expression.","sig":null,"attributes":[{"value":"/ Add a `DW_OP_regval_type` or `DW_OP_GNU_regval_type` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1322737,"byte_end":1322822,"line_start":78,"line_end":78,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1322827,"byte_end":1322830,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ This may be emitted as a smaller equivalent operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1322835,"byte_end":1322893,"line_start":80,"line_end":80,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2643},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1323210,"byte_end":1323217,"line_start":89,"line_end":89,"column_start":12,"column_end":19},"name":"op_pick","qualname":"<Expression>::op_pick","value":"pub fn op_pick(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_pick` operation to the expression.","sig":null,"attributes":[{"value":"/ Add a `DW_OP_pick` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1323067,"byte_end":1323118,"line_start":86,"line_end":86,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1323123,"byte_end":1323126,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ This may be emitted as a `DW_OP_dup` or `DW_OP_over` operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1323131,"byte_end":1323198,"line_start":88,"line_end":88,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2644},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1323371,"byte_end":1323379,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"op_deref","qualname":"<Expression>::op_deref","value":"pub fn op_deref(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_deref` operation to the expression.\n","sig":null,"attributes":[{"value":"/ Add a `DW_OP_deref` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1323307,"byte_end":1323359,"line_start":93,"line_end":93,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2645},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1323534,"byte_end":1323543,"line_start":99,"line_end":99,"column_start":12,"column_end":21},"name":"op_xderef","qualname":"<Expression>::op_xderef","value":"pub fn op_xderef(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_xderef` operation to the expression.\n","sig":null,"attributes":[{"value":"/ Add a `DW_OP_xderef` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1323469,"byte_end":1323522,"line_start":98,"line_end":98,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2646},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1323701,"byte_end":1323714,"line_start":104,"line_end":104,"column_start":12,"column_end":25},"name":"op_deref_size","qualname":"<Expression>::op_deref_size","value":"pub fn op_deref_size(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_deref_size` operation to the expression.\n","sig":null,"attributes":[{"value":"/ Add a `DW_OP_deref_size` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1323632,"byte_end":1323689,"line_start":103,"line_end":103,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2647},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1323907,"byte_end":1323921,"line_start":110,"line_end":110,"column_start":12,"column_end":26},"name":"op_xderef_size","qualname":"<Expression>::op_xderef_size","value":"pub fn op_xderef_size(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_xderef_size` operation to the expression.\n","sig":null,"attributes":[{"value":"/ Add a `DW_OP_xderef_size` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1323837,"byte_end":1323895,"line_start":109,"line_end":109,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2648},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1324138,"byte_end":1324151,"line_start":116,"line_end":116,"column_start":12,"column_end":25},"name":"op_deref_type","qualname":"<Expression>::op_deref_type","value":"pub fn op_deref_type(&mut Self, u8, UnitEntryId)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_deref_type` or `DW_OP_GNU_deref_type` operation to the expression.\n","sig":null,"attributes":[{"value":"/ Add a `DW_OP_deref_type` or `DW_OP_GNU_deref_type` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1324043,"byte_end":1324126,"line_start":115,"line_end":115,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2649},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1324401,"byte_end":1324415,"line_start":125,"line_end":125,"column_start":12,"column_end":26},"name":"op_xderef_type","qualname":"<Expression>::op_xderef_type","value":"pub fn op_xderef_type(&mut Self, u8, UnitEntryId)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_xderef_type` operation to the expression.\n","sig":null,"attributes":[{"value":"/ Add a `DW_OP_xderef_type` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1324331,"byte_end":1324389,"line_start":124,"line_end":124,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2650},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1324664,"byte_end":1324678,"line_start":134,"line_end":134,"column_start":12,"column_end":26},"name":"op_plus_uconst","qualname":"<Expression>::op_plus_uconst","value":"pub fn op_plus_uconst(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_plus_uconst` operation to the expression.\n","sig":null,"attributes":[{"value":"/ Add a `DW_OP_plus_uconst` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1324594,"byte_end":1324652,"line_start":133,"line_end":133,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2651},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1324983,"byte_end":1324990,"line_start":142,"line_end":142,"column_start":12,"column_end":19},"name":"op_skip","qualname":"<Expression>::op_skip","value":"pub fn op_skip(&mut Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_skip` operation to the expression.","sig":null,"attributes":[{"value":"/ Add a `DW_OP_skip` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1324777,"byte_end":1324828,"line_start":138,"line_end":138,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1324833,"byte_end":1324836,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Returns the index of the operation. The caller must call `set_target` with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1324841,"byte_end":1324919,"line_start":140,"line_end":140,"column_start":5,"column_end":83}},{"value":"/ this index to set the target of the branch.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1324924,"byte_end":1324971,"line_start":141,"line_end":141,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2652},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1325333,"byte_end":1325339,"line_start":152,"line_end":152,"column_start":12,"column_end":18},"name":"op_bra","qualname":"<Expression>::op_bra","value":"pub fn op_bra(&mut Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_bra` operation to the expression.","sig":null,"attributes":[{"value":"/ Add a `DW_OP_bra` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1325128,"byte_end":1325178,"line_start":148,"line_end":148,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1325183,"byte_end":1325186,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ Returns the index of the operation. The caller must call `set_target` with","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1325191,"byte_end":1325269,"line_start":150,"line_end":150,"column_start":5,"column_end":83}},{"value":"/ this index to set the target of the branch.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1325274,"byte_end":1325321,"line_start":151,"line_end":151,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2653},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1325622,"byte_end":1325632,"line_start":162,"line_end":162,"column_start":12,"column_end":22},"name":"next_index","qualname":"<Expression>::next_index","value":"pub fn next_index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index that will be assigned to the next operation.","sig":null,"attributes":[{"value":"/ Return the index that will be assigned to the next operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1325479,"byte_end":1325544,"line_start":158,"line_end":158,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1325549,"byte_end":1325552,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ This can be passed to `set_target`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1325557,"byte_end":1325596,"line_start":160,"line_end":160,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1325601,"byte_end":1325610,"line_start":161,"line_end":161,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2654},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1325767,"byte_end":1325777,"line_start":167,"line_end":167,"column_start":12,"column_end":22},"name":"set_target","qualname":"<Expression>::set_target","value":"pub fn set_target(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Set the target of a `DW_OP_skip` or `DW_OP_bra` operation .\n","sig":null,"attributes":[{"value":"/ Set the target of a `DW_OP_skip` or `DW_OP_bra` operation .","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1325692,"byte_end":1325755,"line_start":166,"line_end":166,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2655},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1326233,"byte_end":1326240,"line_start":179,"line_end":179,"column_start":12,"column_end":19},"name":"op_call","qualname":"<Expression>::op_call","value":"pub fn op_call(&mut Self, UnitEntryId)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_call4` operation to the expression.\n","sig":null,"attributes":[{"value":"/ Add a `DW_OP_call4` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1326169,"byte_end":1326221,"line_start":178,"line_end":178,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2656},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1326406,"byte_end":1326417,"line_start":184,"line_end":184,"column_start":12,"column_end":23},"name":"op_call_ref","qualname":"<Expression>::op_call_ref","value":"pub fn op_call_ref(&mut Self, Reference)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_call_ref` operation to the expression.\n","sig":null,"attributes":[{"value":"/ Add a `DW_OP_call_ref` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1326339,"byte_end":1326394,"line_start":183,"line_end":183,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2657},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1326690,"byte_end":1326700,"line_start":191,"line_end":191,"column_start":12,"column_end":22},"name":"op_convert","qualname":"<Expression>::op_convert","value":"pub fn op_convert(&mut Self, Option<UnitEntryId>)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_convert` or `DW_OP_GNU_convert` operation to the expression.","sig":null,"attributes":[{"value":"/ Add a `DW_OP_convert` or `DW_OP_GNU_convert` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1326517,"byte_end":1326594,"line_start":188,"line_end":188,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1326599,"byte_end":1326602,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ `base` is the DIE of the base type, or `None` for the generic type.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1326607,"byte_end":1326678,"line_start":190,"line_end":190,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2658},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1326989,"byte_end":1327003,"line_start":198,"line_end":198,"column_start":12,"column_end":26},"name":"op_reinterpret","qualname":"<Expression>::op_reinterpret","value":"pub fn op_reinterpret(&mut Self, Option<UnitEntryId>)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_reinterpret` or `DW_OP_GNU_reinterpret` operation to the expression.","sig":null,"attributes":[{"value":"/ Add a `DW_OP_reinterpret` or `DW_OP_GNU_reinterpret` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1326808,"byte_end":1326893,"line_start":195,"line_end":195,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1326898,"byte_end":1326901,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ `base` is the DIE of the base type, or `None` for the generic type.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1326906,"byte_end":1326977,"line_start":197,"line_end":197,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2659},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1327212,"byte_end":1327226,"line_start":203,"line_end":203,"column_start":12,"column_end":26},"name":"op_entry_value","qualname":"<Expression>::op_entry_value","value":"pub fn op_entry_value(&mut Self, Expression)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_entry_value` or `DW_OP_GNU_entry_value` operation to the expression.\n","sig":null,"attributes":[{"value":"/ Add a `DW_OP_entry_value` or `DW_OP_GNU_entry_value` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1327115,"byte_end":1327200,"line_start":202,"line_end":202,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":2660},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1327474,"byte_end":1327480,"line_start":210,"line_end":210,"column_start":12,"column_end":18},"name":"op_reg","qualname":"<Expression>::op_reg","value":"pub fn op_reg(&mut Self, Register)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_regx` operation to the expression.","sig":null,"attributes":[{"value":"/ Add a `DW_OP_regx` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1327340,"byte_end":1327391,"line_start":207,"line_end":207,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1327396,"byte_end":1327399,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ This may be emitted as a smaller equivalent operation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1327404,"byte_end":1327462,"line_start":209,"line_end":209,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2661},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1327659,"byte_end":1327676,"line_start":215,"line_end":215,"column_start":12,"column_end":29},"name":"op_implicit_value","qualname":"<Expression>::op_implicit_value","value":"pub fn op_implicit_value(&mut Self, Box<[u8]>)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_implicit_value` operation to the expression.\n","sig":null,"attributes":[{"value":"/ Add a `DW_OP_implicit_value` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1327586,"byte_end":1327647,"line_start":214,"line_end":214,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2662},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1327887,"byte_end":1327906,"line_start":220,"line_end":220,"column_start":12,"column_end":31},"name":"op_implicit_pointer","qualname":"<Expression>::op_implicit_pointer","value":"pub fn op_implicit_pointer(&mut Self, Reference, i64)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_implicit_pointer` or `DW_OP_GNU_implicit_pointer` operation to the expression.\n","sig":null,"attributes":[{"value":"/ Add a `DW_OP_implicit_pointer` or `DW_OP_GNU_implicit_pointer` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1327780,"byte_end":1327875,"line_start":219,"line_end":219,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":2663},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1328125,"byte_end":1328133,"line_start":226,"line_end":226,"column_start":12,"column_end":20},"name":"op_piece","qualname":"<Expression>::op_piece","value":"pub fn op_piece(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_piece` operation to the expression.\n","sig":null,"attributes":[{"value":"/ Add a `DW_OP_piece` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1328061,"byte_end":1328113,"line_start":225,"line_end":225,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2664},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1328312,"byte_end":1328324,"line_start":231,"line_end":231,"column_start":12,"column_end":24},"name":"op_bit_piece","qualname":"<Expression>::op_bit_piece","value":"pub fn op_bit_piece(&mut Self, u64, u64)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_bit_piece` operation to the expression.\n","sig":null,"attributes":[{"value":"/ Add a `DW_OP_bit_piece` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1328244,"byte_end":1328300,"line_start":230,"line_end":230,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2665},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1328574,"byte_end":1328594,"line_start":239,"line_end":239,"column_start":12,"column_end":32},"name":"op_gnu_parameter_ref","qualname":"<Expression>::op_gnu_parameter_ref","value":"pub fn op_gnu_parameter_ref(&mut Self, UnitEntryId)","parent":null,"children":[],"decl_id":null,"docs":" Add a `DW_OP_GNU_parameter_ref` operation to the expression.\n","sig":null,"attributes":[{"value":"/ Add a `DW_OP_GNU_parameter_ref` operation to the expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1328498,"byte_end":1328562,"line_start":238,"line_end":238,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2688},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1350406,"byte_end":1350410,"line_start":800,"line_end":800,"column_start":16,"column_end":20},"name":"from","qualname":"<Expression>::from","value":"pub fn from<R: Reader<Offset =\n            usize>>(read::Expression<R>, Encoding, Option<&read::Dwarf<R>>,\n                    Option<&read::Unit<R>>,\n                    Option<&HashMap<UnitSectionOffset,\n                                    (UnitId, UnitEntryId)>>,\n                    &Fn(u64) -> Option<Address>) -> ConvertResult<Expression>","parent":null,"children":[],"decl_id":null,"docs":" Create an expression from the input expression.\n","sig":null,"attributes":[{"value":"/ Create an expression from the input expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1350339,"byte_end":1350390,"line_start":799,"line_end":799,"column_start":9,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":9187},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1389095,"byte_end":1389106,"line_start":9,"line_end":9,"column_start":5,"column_end":16},"name":"DebugRanges","qualname":"::write::range::DebugRanges","value":"","parent":null,"children":[],"decl_id":null,"docs":"A writable `.debug_ranges` section.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9213},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1389196,"byte_end":1389209,"line_start":14,"line_end":14,"column_start":5,"column_end":18},"name":"DebugRngLists","qualname":"::write::range::DebugRngLists","value":"","parent":null,"children":[],"decl_id":null,"docs":"A writable `.debug_rnglists` section.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9227},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1389302,"byte_end":1389318,"line_start":20,"line_end":20,"column_start":5,"column_end":21},"name":"RangeListOffsets","qualname":"::write::range::RangeListOffsets","value":"RangeListOffsets {  }","parent":null,"children":[{"krate":0,"index":9228},{"krate":0,"index":9229}],"decl_id":null,"docs":"The section offsets of a series of range lists within the `.debug_ranges` or `.debug_rnglists` sections.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9234},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1389484,"byte_end":1389495,"line_start":25,"line_end":25,"column_start":5,"column_end":16},"name":"RangeListId","qualname":"::write::range::RangeListId","value":"RangeListId {  }","parent":null,"children":[{"krate":0,"index":9235},{"krate":0,"index":9236}],"decl_id":null,"docs":"An identifier for a range list in a `RangeListTable`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9252},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1389696,"byte_end":1389710,"line_start":31,"line_end":31,"column_start":12,"column_end":26},"name":"RangeListTable","qualname":"::write::range::RangeListTable","value":"RangeListTable {  }","parent":null,"children":[{"krate":0,"index":9253},{"krate":0,"index":9254}],"decl_id":null,"docs":" A table of range lists that will be stored in a `.debug_ranges` or `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ A table of range lists that will be stored in a `.debug_ranges` or `.debug_rnglists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1389561,"byte_end":1389658,"line_start":29,"line_end":29,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":2714},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1389842,"byte_end":1389845,"line_start":38,"line_end":38,"column_start":12,"column_end":15},"name":"add","qualname":"<RangeListTable>::add","value":"pub fn add(&mut Self, RangeList) -> RangeListId","parent":null,"children":[],"decl_id":null,"docs":" Add a range list to the table.\n","sig":null,"attributes":[{"value":"/ Add a range list to the table.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1389796,"byte_end":1389830,"line_start":37,"line_end":37,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":9259},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1395699,"byte_end":1395708,"line_start":180,"line_end":180,"column_start":12,"column_end":21},"name":"RangeList","qualname":"::write::range::RangeList","value":"","parent":null,"children":[],"decl_id":null,"docs":" A range list that will be stored in a `.debug_ranges` or `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ A range list that will be stored in a `.debug_ranges` or `.debug_rnglists` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1395555,"byte_end":1395642,"line_start":178,"line_end":178,"column_start":1,"column_end":88}}]},{"kind":"Field","id":{"krate":0,"index":9261},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1395709,"byte_end":1395723,"line_start":180,"line_end":180,"column_start":22,"column_end":36},"name":"0","qualname":"::write::range::RangeList::0","value":"alloc::vec::Vec<write::range::Range>","parent":{"krate":0,"index":9259},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":9277},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1395841,"byte_end":1395852,"line_start":186,"line_end":186,"column_start":5,"column_end":16},"name":"BaseAddress","qualname":"::write::range::Range::BaseAddress","value":"Range::BaseAddress { address }","parent":{"krate":0,"index":9276},"children":[],"decl_id":null,"docs":" DW_RLE_base_address\n","sig":null,"attributes":[{"value":"/ DW_RLE_base_address","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1395813,"byte_end":1395836,"line_start":185,"line_end":185,"column_start":5,"column_end":28}}]},{"kind":"StructVariant","id":{"krate":0,"index":9279},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1395945,"byte_end":1395955,"line_start":191,"line_end":191,"column_start":5,"column_end":15},"name":"OffsetPair","qualname":"::write::range::Range::OffsetPair","value":"Range::OffsetPair { begin, end }","parent":{"krate":0,"index":9276},"children":[],"decl_id":null,"docs":" DW_RLE_offset_pair\n","sig":null,"attributes":[{"value":"/ DW_RLE_offset_pair","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1395918,"byte_end":1395940,"line_start":190,"line_end":190,"column_start":5,"column_end":27}}]},{"kind":"StructVariant","id":{"krate":0,"index":9282},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1396136,"byte_end":1396144,"line_start":198,"line_end":198,"column_start":5,"column_end":13},"name":"StartEnd","qualname":"::write::range::Range::StartEnd","value":"Range::StartEnd { begin, end }","parent":{"krate":0,"index":9276},"children":[],"decl_id":null,"docs":" DW_RLE_start_end\n","sig":null,"attributes":[{"value":"/ DW_RLE_start_end","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1396111,"byte_end":1396131,"line_start":197,"line_end":197,"column_start":5,"column_end":25}}]},{"kind":"StructVariant","id":{"krate":0,"index":9285},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1396286,"byte_end":1396297,"line_start":205,"line_end":205,"column_start":5,"column_end":16},"name":"StartLength","qualname":"::write::range::Range::StartLength","value":"Range::StartLength { begin, length }","parent":{"krate":0,"index":9276},"children":[],"decl_id":null,"docs":" DW_RLE_start_length\n","sig":null,"attributes":[{"value":"/ DW_RLE_start_length","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1396258,"byte_end":1396281,"line_start":204,"line_end":204,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":9276},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1395801,"byte_end":1395806,"line_start":184,"line_end":184,"column_start":10,"column_end":15},"name":"Range","qualname":"::write::range::Range","value":"pub enum Range {\n\n    /// DW_RLE_base_address\n    BaseAddress {\n        /// Base address.\n        address: Address,\n    },\n\n    /// DW_RLE_offset_pair\n    OffsetPair {\n        /// Start of range relative to base address.\n        begin: u64,\n        /// End of range relative to base address.\n        end: u64,\n    },\n\n    /// DW_RLE_start_end\n    StartEnd {\n        /// Start of range.\n        begin: Address,\n        /// End of range.\n        end: Address,\n    },\n\n    /// DW_RLE_start_length\n    StartLength {\n        /// Start of range.\n        begin: Address,\n        /// Length of range.\n        length: u64,\n    },\n}","parent":null,"children":[{"krate":0,"index":9277},{"krate":0,"index":9279},{"krate":0,"index":9282},{"krate":0,"index":9285}],"decl_id":null,"docs":" A single range.\n","sig":null,"attributes":[{"value":"/ A single range.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1395727,"byte_end":1395746,"line_start":182,"line_end":182,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":9304},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/str.rs","byte_start":1408674,"byte_end":1408682,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"StringId","qualname":"::write::str::StringId","value":"StringId {  }","parent":null,"children":[{"krate":0,"index":9305},{"krate":0,"index":9306}],"decl_id":null,"docs":"An identifier for a string in a `StringTable`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9329},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/str.rs","byte_start":1408762,"byte_end":1408773,"line_start":91,"line_end":91,"column_start":5,"column_end":16},"name":"StringTable","qualname":"::write::str::StringTable","value":"StringTable {  }","parent":null,"children":[{"krate":0,"index":9330},{"krate":0,"index":9331}],"decl_id":null,"docs":"A table of strings that will be stored in a `.debug_str` section.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9352},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/str.rs","byte_start":1408916,"byte_end":1408924,"line_start":98,"line_end":98,"column_start":17,"column_end":25},"name":"DebugStr","qualname":"::write::str::DebugStr","value":"","parent":null,"children":[],"decl_id":null,"docs":"A writable `.debug_str` section.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9366},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/str.rs","byte_start":1409001,"byte_end":1409016,"line_start":101,"line_end":101,"column_start":5,"column_end":20},"name":"DebugStrOffsets","qualname":"::write::str::DebugStrOffsets","value":"DebugStrOffsets {  }","parent":null,"children":[{"krate":0,"index":9367},{"krate":0,"index":9368}],"decl_id":null,"docs":"The section offsets of all strings within a `.debug_str` section.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9373},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/str.rs","byte_start":1409138,"byte_end":1409150,"line_start":106,"line_end":106,"column_start":5,"column_end":17},"name":"LineStringId","qualname":"::write::str::LineStringId","value":"LineStringId {  }","parent":null,"children":[{"krate":0,"index":9374},{"krate":0,"index":9375}],"decl_id":null,"docs":"An identifier for a string in a `LineStringTable`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9398},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/str.rs","byte_start":1409239,"byte_end":1409254,"line_start":111,"line_end":111,"column_start":5,"column_end":20},"name":"LineStringTable","qualname":"::write::str::LineStringTable","value":"LineStringTable {  }","parent":null,"children":[{"krate":0,"index":9399},{"krate":0,"index":9400}],"decl_id":null,"docs":"A table of strings that will be stored in a `.debug_line_str` section.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9421},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/str.rs","byte_start":1409419,"byte_end":1409431,"line_start":119,"line_end":119,"column_start":5,"column_end":17},"name":"DebugLineStr","qualname":"::write::str::DebugLineStr","value":"","parent":null,"children":[],"decl_id":null,"docs":"A writable `.debug_line_str` section.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9435},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/str.rs","byte_start":1409526,"byte_end":1409545,"line_start":125,"line_end":125,"column_start":5,"column_end":24},"name":"DebugLineStrOffsets","qualname":"::write::str::DebugLineStrOffsets","value":"DebugLineStrOffsets {  }","parent":null,"children":[{"krate":0,"index":9436},{"krate":0,"index":9437}],"decl_id":null,"docs":"The section offsets of all strings within a `.debug_line_str` section.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9442},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412001,"byte_end":1412007,"line_start":18,"line_end":18,"column_start":12,"column_end":18},"name":"UnitId","qualname":"::write::unit::UnitId","value":"UnitId {  }","parent":null,"children":[{"krate":0,"index":9443},{"krate":0,"index":9444}],"decl_id":null,"docs":"An identifier for a unit in a `UnitTable`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9462},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412068,"byte_end":1412079,"line_start":20,"line_end":20,"column_start":12,"column_end":23},"name":"UnitEntryId","qualname":"::write::unit::UnitEntryId","value":"UnitEntryId {  }","parent":null,"children":[{"krate":0,"index":9463},{"krate":0,"index":9464}],"decl_id":null,"docs":"An identifier for an entry in a `Unit`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9480},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412234,"byte_end":1412243,"line_start":24,"line_end":24,"column_start":12,"column_end":21},"name":"UnitTable","qualname":"::write::unit::UnitTable","value":"UnitTable {  }","parent":null,"children":[{"krate":0,"index":9481},{"krate":0,"index":9482}],"decl_id":null,"docs":" A table of units that will be stored in the `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ A table of units that will be stored in the `.debug_info` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412126,"byte_end":1412196,"line_start":22,"line_end":22,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2801},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412488,"byte_end":1412491,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"add","qualname":"<UnitTable>::add","value":"pub fn add(&mut Self, Unit) -> UnitId","parent":null,"children":[],"decl_id":null,"docs":" Create a new unit and add it to the table.","sig":null,"attributes":[{"value":"/ Create a new unit and add it to the table.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412313,"byte_end":1412359,"line_start":30,"line_end":30,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412364,"byte_end":1412367,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ `address_size` must be in bytes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412372,"byte_end":1412408,"line_start":32,"line_end":32,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412413,"byte_end":1412416,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ Returns the `UnitId` of the new unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412421,"byte_end":1412462,"line_start":34,"line_end":34,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412467,"byte_end":1412476,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2802},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412699,"byte_end":1412704,"line_start":44,"line_end":44,"column_start":12,"column_end":17},"name":"count","qualname":"<UnitTable>::count","value":"pub fn count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of units.\n","sig":null,"attributes":[{"value":"/ Return the number of units.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412642,"byte_end":1412673,"line_start":42,"line_end":42,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412678,"byte_end":1412687,"line_start":43,"line_end":43,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2803},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412889,"byte_end":1412891,"line_start":54,"line_end":54,"column_start":12,"column_end":14},"name":"id","qualname":"<UnitTable>::id","value":"pub fn id(&Self, usize) -> UnitId","parent":null,"children":[],"decl_id":null,"docs":" Return the id of a unit.","sig":null,"attributes":[{"value":"/ Return the id of a unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412759,"byte_end":1412787,"line_start":48,"line_end":48,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412792,"byte_end":1412795,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412800,"byte_end":1412812,"line_start":50,"line_end":50,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412817,"byte_end":1412820,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Panics if `index >= self.count()`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412825,"byte_end":1412863,"line_start":52,"line_end":52,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412868,"byte_end":1412877,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2804},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1413140,"byte_end":1413143,"line_start":65,"line_end":65,"column_start":12,"column_end":15},"name":"get","qualname":"<UnitTable>::get","value":"pub fn get(&Self, UnitId) -> &Unit","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a unit.","sig":null,"attributes":[{"value":"/ Get a reference to a unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1413016,"byte_end":1413046,"line_start":59,"line_end":59,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1413051,"byte_end":1413054,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1413059,"byte_end":1413071,"line_start":61,"line_end":61,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1413076,"byte_end":1413079,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ Panics if `id` is invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1413084,"byte_end":1413114,"line_start":63,"line_end":63,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1413119,"byte_end":1413128,"line_start":64,"line_end":64,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2805},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1413399,"byte_end":1413406,"line_start":76,"line_end":76,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<UnitTable>::get_mut","value":"pub fn get_mut(&mut Self, UnitId) -> &mut Unit","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a unit.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1413267,"byte_end":1413305,"line_start":70,"line_end":70,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1413310,"byte_end":1413313,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1413318,"byte_end":1413330,"line_start":72,"line_end":72,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1413335,"byte_end":1413338,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Panics if `id` is invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1413343,"byte_end":1413373,"line_start":74,"line_end":74,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1413378,"byte_end":1413387,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2806},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1413704,"byte_end":1413709,"line_start":85,"line_end":85,"column_start":12,"column_end":17},"name":"write","qualname":"<UnitTable>::write","value":"pub fn write<W: Writer>(&mut Self, &mut Sections<W>, &DebugLineStrOffsets,\n                        &DebugStrOffsets) -> Result<DebugInfoOffsets>","parent":null,"children":[],"decl_id":null,"docs":" Write the units to the given sections.","sig":null,"attributes":[{"value":"/ Write the units to the given sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1413542,"byte_end":1413584,"line_start":81,"line_end":81,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1413589,"byte_end":1413592,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ `strings` must contain the `.debug_str` offsets of the corresponding","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1413597,"byte_end":1413669,"line_start":83,"line_end":83,"column_start":5,"column_end":77}},{"value":"/ `StringTable`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1413674,"byte_end":1413692,"line_start":84,"line_end":84,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":9487},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1415422,"byte_end":1415426,"line_start":146,"line_end":146,"column_start":12,"column_end":16},"name":"Unit","qualname":"::write::unit::Unit","value":"Unit { line_program, ranges, locations }","parent":null,"children":[{"krate":0,"index":9488},{"krate":0,"index":9489},{"krate":0,"index":9490},{"krate":0,"index":9491},{"krate":0,"index":9492},{"krate":0,"index":9493},{"krate":0,"index":9494}],"decl_id":null,"docs":" A unit's debugging information.\n","sig":null,"attributes":[{"value":"/ A unit's debugging information.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1415358,"byte_end":1415393,"line_start":144,"line_end":144,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":9490},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1415576,"byte_end":1415588,"line_start":151,"line_end":151,"column_start":9,"column_end":21},"name":"line_program","qualname":"::write::unit::Unit::line_program","value":"write::line::LineProgram","parent":{"krate":0,"index":9487},"children":[],"decl_id":null,"docs":" The line number program for this unit.\n","sig":null,"attributes":[{"value":"/ The line number program for this unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1415525,"byte_end":1415567,"line_start":150,"line_end":150,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":9491},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1415661,"byte_end":1415667,"line_start":153,"line_end":153,"column_start":9,"column_end":15},"name":"ranges","qualname":"::write::unit::Unit::ranges","value":"write::range::RangeListTable","parent":{"krate":0,"index":9487},"children":[],"decl_id":null,"docs":" A table of range lists used by this unit.\n","sig":null,"attributes":[{"value":"/ A table of range lists used by this unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1415607,"byte_end":1415652,"line_start":152,"line_end":152,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":9492},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1415746,"byte_end":1415755,"line_start":155,"line_end":155,"column_start":9,"column_end":18},"name":"locations","qualname":"::write::unit::Unit::locations","value":"write::loc::LocationListTable","parent":{"krate":0,"index":9487},"children":[],"decl_id":null,"docs":" A table of location lists used by this unit.\n","sig":null,"attributes":[{"value":"/ A table of location lists used by this unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1415689,"byte_end":1415737,"line_start":154,"line_end":154,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2811},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1416316,"byte_end":1416319,"line_start":171,"line_end":171,"column_start":12,"column_end":15},"name":"new","qualname":"<Unit>::new","value":"pub fn new(Encoding, LineProgram) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Unit`.\n","sig":null,"attributes":[{"value":"/ Create a new `Unit`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1416280,"byte_end":1416304,"line_start":170,"line_end":170,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2812},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1416991,"byte_end":1416999,"line_start":195,"line_end":195,"column_start":12,"column_end":20},"name":"encoding","qualname":"<Unit>::encoding","value":"pub fn encoding(&Self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding parameters for this unit.\n","sig":null,"attributes":[{"value":"/ Return the encoding parameters for this unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1416916,"byte_end":1416965,"line_start":193,"line_end":193,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1416970,"byte_end":1416979,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2813},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417123,"byte_end":1417130,"line_start":201,"line_end":201,"column_start":12,"column_end":19},"name":"version","qualname":"<Unit>::version","value":"pub fn version(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Return the DWARF version for this unit.\n","sig":null,"attributes":[{"value":"/ Return the DWARF version for this unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417054,"byte_end":1417097,"line_start":199,"line_end":199,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417102,"byte_end":1417111,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2814},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417265,"byte_end":1417277,"line_start":207,"line_end":207,"column_start":12,"column_end":24},"name":"address_size","qualname":"<Unit>::address_size","value":"pub fn address_size(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return the address size in bytes for this unit.\n","sig":null,"attributes":[{"value":"/ Return the address size in bytes for this unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417188,"byte_end":1417239,"line_start":205,"line_end":205,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417244,"byte_end":1417253,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2815},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417407,"byte_end":1417413,"line_start":213,"line_end":213,"column_start":12,"column_end":18},"name":"format","qualname":"<Unit>::format","value":"pub fn format(&Self) -> Format","parent":null,"children":[],"decl_id":null,"docs":" Return the DWARF format for this unit.\n","sig":null,"attributes":[{"value":"/ Return the DWARF format for this unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417339,"byte_end":1417381,"line_start":211,"line_end":211,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417386,"byte_end":1417395,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2816},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417643,"byte_end":1417648,"line_start":221,"line_end":221,"column_start":12,"column_end":17},"name":"count","qualname":"<Unit>::count","value":"pub fn count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of `DebuggingInformationEntry`s created for this unit.","sig":null,"attributes":[{"value":"/ Return the number of `DebuggingInformationEntry`s created for this unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417473,"byte_end":1417549,"line_start":217,"line_end":217,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417554,"byte_end":1417557,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ This includes entries that no longer have a parent.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417562,"byte_end":1417617,"line_start":219,"line_end":219,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417622,"byte_end":1417631,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2817},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417767,"byte_end":1417771,"line_start":227,"line_end":227,"column_start":12,"column_end":16},"name":"root","qualname":"<Unit>::root","value":"pub fn root(&Self) -> UnitEntryId","parent":null,"children":[],"decl_id":null,"docs":" Return the id of the root entry.\n","sig":null,"attributes":[{"value":"/ Return the id of the root entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417705,"byte_end":1417741,"line_start":225,"line_end":225,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417746,"byte_end":1417755,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2818},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1418055,"byte_end":1418058,"line_start":239,"line_end":239,"column_start":12,"column_end":15},"name":"add","qualname":"<Unit>::add","value":"pub fn add(&mut Self, UnitEntryId, constants::DwTag) -> UnitEntryId","parent":null,"children":[],"decl_id":null,"docs":" Add a new `DebuggingInformationEntry` to this unit and return its id.","sig":null,"attributes":[{"value":"/ Add a new `DebuggingInformationEntry` to this unit and return its id.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417825,"byte_end":1417898,"line_start":231,"line_end":231,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417903,"byte_end":1417906,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ The `parent` must be within the same unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417911,"byte_end":1417957,"line_start":233,"line_end":233,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417962,"byte_end":1417965,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417970,"byte_end":1417982,"line_start":235,"line_end":235,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417987,"byte_end":1417990,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ Panics if `parent` is invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1417995,"byte_end":1418029,"line_start":237,"line_end":237,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1418034,"byte_end":1418043,"line_start":238,"line_end":238,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2819},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1418415,"byte_end":1418418,"line_start":250,"line_end":250,"column_start":12,"column_end":15},"name":"get","qualname":"<Unit>::get","value":"pub fn get(&Self, UnitEntryId) -> &DebuggingInformationEntry","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to an entry.","sig":null,"attributes":[{"value":"/ Get a reference to an entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1418289,"byte_end":1418321,"line_start":244,"line_end":244,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1418326,"byte_end":1418329,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1418334,"byte_end":1418346,"line_start":246,"line_end":246,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1418351,"byte_end":1418354,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ Panics if `id` is invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1418359,"byte_end":1418389,"line_start":248,"line_end":248,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1418394,"byte_end":1418403,"line_start":249,"line_end":249,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2820},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1418704,"byte_end":1418711,"line_start":261,"line_end":261,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Unit>::get_mut","value":"pub fn get_mut(&mut Self, UnitEntryId) -> &mut DebuggingInformationEntry","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to an entry.","sig":null,"attributes":[{"value":"/ Get a mutable reference to an entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1418570,"byte_end":1418610,"line_start":255,"line_end":255,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1418615,"byte_end":1418618,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1418623,"byte_end":1418635,"line_start":257,"line_end":257,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1418640,"byte_end":1418643,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ Panics if `id` is invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1418648,"byte_end":1418678,"line_start":259,"line_end":259,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1418683,"byte_end":1418692,"line_start":260,"line_end":260,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":9497},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1423935,"byte_end":1423960,"line_start":417,"line_end":417,"column_start":12,"column_end":37},"name":"DebuggingInformationEntry","qualname":"::write::unit::DebuggingInformationEntry","value":"DebuggingInformationEntry {  }","parent":null,"children":[{"krate":0,"index":9498},{"krate":0,"index":9499},{"krate":0,"index":9500},{"krate":0,"index":9501},{"krate":0,"index":9502},{"krate":0,"index":9503}],"decl_id":null,"docs":" A Debugging Information Entry (DIE).","sig":null,"attributes":[{"value":"/ A Debugging Information Entry (DIE).","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1423638,"byte_end":1423678,"line_start":410,"line_end":410,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1423679,"byte_end":1423682,"line_start":411,"line_end":411,"column_start":1,"column_end":4}},{"value":"/ DIEs have a set of attributes and optionally have children DIEs as well.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1423683,"byte_end":1423759,"line_start":412,"line_end":412,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1423760,"byte_end":1423763,"line_start":413,"line_end":413,"column_start":1,"column_end":4}},{"value":"/ DIEs form a tree without any cycles. This is enforced by specifying the","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1423764,"byte_end":1423839,"line_start":414,"line_end":414,"column_start":1,"column_end":76}},{"value":"/ parent when creating a DIE, and disallowing changes of parent.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1423840,"byte_end":1423906,"line_start":415,"line_end":415,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2827},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425080,"byte_end":1425082,"line_start":459,"line_end":459,"column_start":12,"column_end":14},"name":"id","qualname":"<DebuggingInformationEntry>::id","value":"pub fn id(&Self) -> UnitEntryId","parent":null,"children":[],"decl_id":null,"docs":" Return the id of this entry.\n","sig":null,"attributes":[{"value":"/ Return the id of this entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425022,"byte_end":1425054,"line_start":457,"line_end":457,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425059,"byte_end":1425068,"line_start":458,"line_end":458,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2828},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425196,"byte_end":1425202,"line_start":465,"line_end":465,"column_start":12,"column_end":18},"name":"parent","qualname":"<DebuggingInformationEntry>::parent","value":"pub fn parent(&Self) -> Option<UnitEntryId>","parent":null,"children":[],"decl_id":null,"docs":" Return the parent of this entry.\n","sig":null,"attributes":[{"value":"/ Return the parent of this entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425134,"byte_end":1425170,"line_start":463,"line_end":463,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425175,"byte_end":1425184,"line_start":464,"line_end":464,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2829},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425325,"byte_end":1425328,"line_start":471,"line_end":471,"column_start":12,"column_end":15},"name":"tag","qualname":"<DebuggingInformationEntry>::tag","value":"pub fn tag(&Self) -> constants::DwTag","parent":null,"children":[],"decl_id":null,"docs":" Return the tag of this entry.\n","sig":null,"attributes":[{"value":"/ Return the tag of this entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425266,"byte_end":1425299,"line_start":469,"line_end":469,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425304,"byte_end":1425313,"line_start":470,"line_end":470,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2830},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425477,"byte_end":1425484,"line_start":477,"line_end":477,"column_start":12,"column_end":19},"name":"sibling","qualname":"<DebuggingInformationEntry>::sibling","value":"pub fn sibling(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if a `DW_AT_sibling` attribute will be emitted.\n","sig":null,"attributes":[{"value":"/ Return `true` if a `DW_AT_sibling` attribute will be emitted.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425386,"byte_end":1425451,"line_start":475,"line_end":475,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425456,"byte_end":1425465,"line_start":476,"line_end":476,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2831},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425696,"byte_end":1425707,"line_start":485,"line_end":485,"column_start":12,"column_end":23},"name":"set_sibling","qualname":"<DebuggingInformationEntry>::set_sibling","value":"pub fn set_sibling(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Set whether a `DW_AT_sibling` attribute will be emitted.","sig":null,"attributes":[{"value":"/ Set whether a `DW_AT_sibling` attribute will be emitted.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425534,"byte_end":1425594,"line_start":481,"line_end":481,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425599,"byte_end":1425602,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ The attribute will only be emitted if the DIE has children.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425607,"byte_end":1425670,"line_start":483,"line_end":483,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425675,"byte_end":1425684,"line_start":484,"line_end":484,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2832},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425851,"byte_end":1425856,"line_start":491,"line_end":491,"column_start":12,"column_end":17},"name":"attrs","qualname":"<DebuggingInformationEntry>::attrs","value":"pub fn attrs(&Self) -> slice::Iter<, Attribute>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the attributes of this entry.\n","sig":null,"attributes":[{"value":"/ Iterate over the attributes of this entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425779,"byte_end":1425825,"line_start":489,"line_end":489,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425830,"byte_end":1425839,"line_start":490,"line_end":490,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2833},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1426018,"byte_end":1426027,"line_start":497,"line_end":497,"column_start":12,"column_end":21},"name":"attrs_mut","qualname":"<DebuggingInformationEntry>::attrs_mut","value":"pub fn attrs_mut(&mut Self) -> slice::IterMut<, Attribute>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the attributes of this entry for modification.\n","sig":null,"attributes":[{"value":"/ Iterate over the attributes of this entry for modification.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425929,"byte_end":1425992,"line_start":495,"line_end":495,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1425997,"byte_end":1426006,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2834},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1426144,"byte_end":1426147,"line_start":502,"line_end":502,"column_start":12,"column_end":15},"name":"get","qualname":"<DebuggingInformationEntry>::get","value":"pub fn get(&Self, constants::DwAt) -> Option<&AttributeValue>","parent":null,"children":[],"decl_id":null,"docs":" Get an attribute.\n","sig":null,"attributes":[{"value":"/ Get an attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1426111,"byte_end":1426132,"line_start":501,"line_end":501,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2837},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1426388,"byte_end":1426395,"line_start":510,"line_end":510,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DebuggingInformationEntry>::get_mut","value":"pub fn get_mut(&mut Self, constants::DwAt) -> Option<&mut AttributeValue>","parent":null,"children":[],"decl_id":null,"docs":" Get an attribute for modification.\n","sig":null,"attributes":[{"value":"/ Get an attribute for modification.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1426338,"byte_end":1426376,"line_start":509,"line_end":509,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2840},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1426808,"byte_end":1426811,"line_start":524,"line_end":524,"column_start":12,"column_end":15},"name":"set","qualname":"<DebuggingInformationEntry>::set","value":"pub fn set(&mut Self, constants::DwAt, AttributeValue)","parent":null,"children":[],"decl_id":null,"docs":" Set an attribute.","sig":null,"attributes":[{"value":"/ Set an attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1426602,"byte_end":1426623,"line_start":517,"line_end":517,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1426628,"byte_end":1426631,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ Replaces any existing attribute with the same name.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1426636,"byte_end":1426691,"line_start":519,"line_end":519,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1426696,"byte_end":1426699,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1426704,"byte_end":1426716,"line_start":521,"line_end":521,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1426721,"byte_end":1426724,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ Panics if `name` is `DW_AT_sibling`. Use `set_sibling` instead.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1426729,"byte_end":1426796,"line_start":523,"line_end":523,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2842},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1427235,"byte_end":1427241,"line_start":536,"line_end":536,"column_start":12,"column_end":18},"name":"delete","qualname":"<DebuggingInformationEntry>::delete","value":"pub fn delete(&mut Self, constants::DwAt)","parent":null,"children":[],"decl_id":null,"docs":" Delete an attribute.","sig":null,"attributes":[{"value":"/ Delete an attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1427131,"byte_end":1427155,"line_start":533,"line_end":533,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1427160,"byte_end":1427163,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ Replaces any existing attribute with the same name.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1427168,"byte_end":1427223,"line_start":535,"line_end":535,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2844},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1427478,"byte_end":1427486,"line_start":544,"line_end":544,"column_start":12,"column_end":20},"name":"children","qualname":"<DebuggingInformationEntry>::children","value":"pub fn children(&Self) -> slice::Iter<, UnitEntryId>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the children of this entry.","sig":null,"attributes":[{"value":"/ Iterate over the children of this entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1427336,"byte_end":1427380,"line_start":540,"line_end":540,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1427385,"byte_end":1427388,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ Note: use `Unit::add` to add a new child to this entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1427393,"byte_end":1427452,"line_start":542,"line_end":542,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1427457,"byte_end":1427466,"line_start":543,"line_end":543,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":9506},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1431642,"byte_end":1431651,"line_start":676,"line_end":676,"column_start":12,"column_end":21},"name":"Attribute","qualname":"::write::unit::Attribute","value":"Attribute {  }","parent":null,"children":[{"krate":0,"index":9507},{"krate":0,"index":9508}],"decl_id":null,"docs":" An attribute in a `DebuggingInformationEntry`, consisting of a name and\n associated value.\n","sig":null,"attributes":[{"value":"/ An attribute in a `DebuggingInformationEntry`, consisting of a name and","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1431494,"byte_end":1431569,"line_start":673,"line_end":673,"column_start":1,"column_end":76}},{"value":"/ associated value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1431570,"byte_end":1431591,"line_start":674,"line_end":674,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2851},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1431793,"byte_end":1431797,"line_start":684,"line_end":684,"column_start":12,"column_end":16},"name":"name","qualname":"<Attribute>::name","value":"pub fn name(&Self) -> constants::DwAt","parent":null,"children":[],"decl_id":null,"docs":" Get the name of this attribute.\n","sig":null,"attributes":[{"value":"/ Get the name of this attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1431732,"byte_end":1431767,"line_start":682,"line_end":682,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1431772,"byte_end":1431781,"line_start":683,"line_end":683,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2852},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1431917,"byte_end":1431920,"line_start":690,"line_end":690,"column_start":12,"column_end":15},"name":"get","qualname":"<Attribute>::get","value":"pub fn get(&Self) -> &AttributeValue","parent":null,"children":[],"decl_id":null,"docs":" Get the value of this attribute.\n","sig":null,"attributes":[{"value":"/ Get the value of this attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1431855,"byte_end":1431891,"line_start":688,"line_end":688,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1431896,"byte_end":1431905,"line_start":689,"line_end":689,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2853},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1432042,"byte_end":1432045,"line_start":696,"line_end":696,"column_start":12,"column_end":15},"name":"set","qualname":"<Attribute>::set","value":"pub fn set(&mut Self, AttributeValue)","parent":null,"children":[],"decl_id":null,"docs":" Set the value of this attribute.\n","sig":null,"attributes":[{"value":"/ Set the value of this attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1431980,"byte_end":1432016,"line_start":694,"line_end":694,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1432021,"byte_end":1432030,"line_start":695,"line_end":695,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9521},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1432596,"byte_end":1432603,"line_start":713,"line_end":713,"column_start":5,"column_end":12},"name":"Address","qualname":"::write::unit::AttributeValue::Address","value":"AttributeValue::Address(Address)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" \"Refers to some location in the address space of the described program.\"\n","sig":null,"attributes":[{"value":"/ \"Refers to some location in the address space of the described program.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1432515,"byte_end":1432591,"line_start":712,"line_end":712,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9524},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1432668,"byte_end":1432673,"line_start":716,"line_end":716,"column_start":5,"column_end":10},"name":"Block","qualname":"::write::unit::AttributeValue::Block","value":"AttributeValue::Block(Vec<u8>)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" A slice of an arbitrary number of bytes.\n","sig":null,"attributes":[{"value":"/ A slice of an arbitrary number of bytes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1432619,"byte_end":1432663,"line_start":715,"line_end":715,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9527},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1432957,"byte_end":1432962,"line_start":723,"line_end":723,"column_start":5,"column_end":10},"name":"Data1","qualname":"::write::unit::AttributeValue::Data1","value":"AttributeValue::Data1(u8)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" A one byte constant data value. How to interpret the byte depends on context.","sig":null,"attributes":[{"value":"/ A one byte constant data value. How to interpret the byte depends on context.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1432689,"byte_end":1432770,"line_start":718,"line_end":718,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1432775,"byte_end":1432778,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ From section 7 of the standard: \"Depending on context, it may be a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1432783,"byte_end":1432853,"line_start":720,"line_end":720,"column_start":5,"column_end":75}},{"value":"/ signed integer, an unsigned integer, a floating-point constant, or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1432858,"byte_end":1432928,"line_start":721,"line_end":721,"column_start":5,"column_end":75}},{"value":"/ anything else.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1432933,"byte_end":1432952,"line_start":722,"line_end":722,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9530},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433324,"byte_end":1433329,"line_start":732,"line_end":732,"column_start":5,"column_end":10},"name":"Data2","qualname":"::write::unit::AttributeValue::Data2","value":"AttributeValue::Data2(u16)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" A two byte constant data value. How to interpret the bytes depends on context.","sig":null,"attributes":[{"value":"/ A two byte constant data value. How to interpret the bytes depends on context.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1432973,"byte_end":1433055,"line_start":725,"line_end":725,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433060,"byte_end":1433063,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ This value will be converted to the target endian before writing.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433068,"byte_end":1433137,"line_start":727,"line_end":727,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433142,"byte_end":1433145,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ From section 7 of the standard: \"Depending on context, it may be a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433150,"byte_end":1433220,"line_start":729,"line_end":729,"column_start":5,"column_end":75}},{"value":"/ signed integer, an unsigned integer, a floating-point constant, or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433225,"byte_end":1433295,"line_start":730,"line_end":730,"column_start":5,"column_end":75}},{"value":"/ anything else.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433300,"byte_end":1433319,"line_start":731,"line_end":731,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9533},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433693,"byte_end":1433698,"line_start":741,"line_end":741,"column_start":5,"column_end":10},"name":"Data4","qualname":"::write::unit::AttributeValue::Data4","value":"AttributeValue::Data4(u32)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" A four byte constant data value. How to interpret the bytes depends on context.","sig":null,"attributes":[{"value":"/ A four byte constant data value. How to interpret the bytes depends on context.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433341,"byte_end":1433424,"line_start":734,"line_end":734,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433429,"byte_end":1433432,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ This value will be converted to the target endian before writing.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433437,"byte_end":1433506,"line_start":736,"line_end":736,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433511,"byte_end":1433514,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ From section 7 of the standard: \"Depending on context, it may be a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433519,"byte_end":1433589,"line_start":738,"line_end":738,"column_start":5,"column_end":75}},{"value":"/ signed integer, an unsigned integer, a floating-point constant, or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433594,"byte_end":1433664,"line_start":739,"line_end":739,"column_start":5,"column_end":75}},{"value":"/ anything else.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433669,"byte_end":1433688,"line_start":740,"line_end":740,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9536},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434064,"byte_end":1434069,"line_start":750,"line_end":750,"column_start":5,"column_end":10},"name":"Data8","qualname":"::write::unit::AttributeValue::Data8","value":"AttributeValue::Data8(u64)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" An eight byte constant data value. How to interpret the bytes depends on context.","sig":null,"attributes":[{"value":"/ An eight byte constant data value. How to interpret the bytes depends on context.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433710,"byte_end":1433795,"line_start":743,"line_end":743,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433800,"byte_end":1433803,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ This value will be converted to the target endian before writing.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433808,"byte_end":1433877,"line_start":745,"line_end":745,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433882,"byte_end":1433885,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ From section 7 of the standard: \"Depending on context, it may be a","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433890,"byte_end":1433960,"line_start":747,"line_end":747,"column_start":5,"column_end":75}},{"value":"/ signed integer, an unsigned integer, a floating-point constant, or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1433965,"byte_end":1434035,"line_start":748,"line_end":748,"column_start":5,"column_end":75}},{"value":"/ anything else.\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434040,"byte_end":1434059,"line_start":749,"line_end":749,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9539},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434116,"byte_end":1434121,"line_start":753,"line_end":753,"column_start":5,"column_end":10},"name":"Sdata","qualname":"::write::unit::AttributeValue::Sdata","value":"AttributeValue::Sdata(i64)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" A signed integer constant.\n","sig":null,"attributes":[{"value":"/ A signed integer constant.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434081,"byte_end":1434111,"line_start":752,"line_end":752,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9542},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434171,"byte_end":1434176,"line_start":756,"line_end":756,"column_start":5,"column_end":10},"name":"Udata","qualname":"::write::unit::AttributeValue::Udata","value":"AttributeValue::Udata(u64)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" An unsigned integer constant.\n","sig":null,"attributes":[{"value":"/ An unsigned integer constant.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434133,"byte_end":1434166,"line_start":755,"line_end":755,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9545},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434316,"byte_end":1434323,"line_start":760,"line_end":760,"column_start":5,"column_end":12},"name":"Exprloc","qualname":"::write::unit::AttributeValue::Exprloc","value":"AttributeValue::Exprloc(Expression)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" \"The information bytes contain a DWARF expression (see Section 2.5) or\n location description (see Section 2.6).\"\n","sig":null,"attributes":[{"value":"/ \"The information bytes contain a DWARF expression (see Section 2.5) or","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434188,"byte_end":1434262,"line_start":758,"line_end":758,"column_start":5,"column_end":79}},{"value":"/ location description (see Section 2.6).\"","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434267,"byte_end":1434311,"line_start":759,"line_end":759,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9548},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434413,"byte_end":1434417,"line_start":763,"line_end":763,"column_start":5,"column_end":9},"name":"Flag","qualname":"::write::unit::AttributeValue::Flag","value":"AttributeValue::Flag(bool)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" A boolean that indicates presence or absence of the attribute.\n","sig":null,"attributes":[{"value":"/ A boolean that indicates presence or absence of the attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434342,"byte_end":1434408,"line_start":762,"line_end":762,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9551},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434475,"byte_end":1434486,"line_start":766,"line_end":766,"column_start":5,"column_end":16},"name":"FlagPresent","qualname":"::write::unit::AttributeValue::FlagPresent","value":"AttributeValue::FlagPresent","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" An attribute that is always present.\n","sig":null,"attributes":[{"value":"/ An attribute that is always present.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434430,"byte_end":1434470,"line_start":765,"line_end":765,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9553},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434560,"byte_end":1434567,"line_start":769,"line_end":769,"column_start":5,"column_end":12},"name":"UnitRef","qualname":"::write::unit::AttributeValue::UnitRef","value":"AttributeValue::UnitRef(UnitEntryId)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" A reference to a `DebuggingInformationEntry` in this unit.\n","sig":null,"attributes":[{"value":"/ A reference to a `DebuggingInformationEntry` in this unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434493,"byte_end":1434555,"line_start":768,"line_end":768,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9556},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434673,"byte_end":1434685,"line_start":772,"line_end":772,"column_start":5,"column_end":17},"name":"DebugInfoRef","qualname":"::write::unit::AttributeValue::DebugInfoRef","value":"AttributeValue::DebugInfoRef(Reference)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" A reference to a `DebuggingInformationEntry` in a potentially different unit.\n","sig":null,"attributes":[{"value":"/ A reference to a `DebuggingInformationEntry` in a potentially different unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434587,"byte_end":1434668,"line_start":771,"line_end":771,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9559},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434991,"byte_end":1435006,"line_start":779,"line_end":779,"column_start":5,"column_end":20},"name":"DebugInfoRefSup","qualname":"::write::unit::AttributeValue::DebugInfoRefSup","value":"AttributeValue::DebugInfoRefSup(DebugInfoOffset)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" An offset into the `.debug_info` section of the supplementary object file.","sig":null,"attributes":[{"value":"/ An offset into the `.debug_info` section of the supplementary object file.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434703,"byte_end":1434781,"line_start":774,"line_end":774,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434786,"byte_end":1434789,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ The API does not currently assist with generating this offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434794,"byte_end":1434860,"line_start":776,"line_end":776,"column_start":5,"column_end":71}},{"value":"/ This variant will be removed from the API once support for writing","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434865,"byte_end":1434935,"line_start":777,"line_end":777,"column_start":5,"column_end":75}},{"value":"/ supplementary object files is implemented.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1434940,"byte_end":1434986,"line_start":778,"line_end":778,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9562},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435076,"byte_end":1435090,"line_start":782,"line_end":782,"column_start":5,"column_end":19},"name":"LineProgramRef","qualname":"::write::unit::AttributeValue::LineProgramRef","value":"AttributeValue::LineProgramRef","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" A reference to a line number program.\n","sig":null,"attributes":[{"value":"/ A reference to a line number program.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435030,"byte_end":1435071,"line_start":781,"line_end":781,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9564},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435137,"byte_end":1435152,"line_start":785,"line_end":785,"column_start":5,"column_end":20},"name":"LocationListRef","qualname":"::write::unit::AttributeValue::LocationListRef","value":"AttributeValue::LocationListRef(LocationListId)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" A reference to a location list.\n","sig":null,"attributes":[{"value":"/ A reference to a location list.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435097,"byte_end":1435132,"line_start":784,"line_end":784,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9567},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435432,"byte_end":1435447,"line_start":792,"line_end":792,"column_start":5,"column_end":20},"name":"DebugMacinfoRef","qualname":"::write::unit::AttributeValue::DebugMacinfoRef","value":"AttributeValue::DebugMacinfoRef(DebugMacinfoOffset)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" An offset into the `.debug_macinfo` section.","sig":null,"attributes":[{"value":"/ An offset into the `.debug_macinfo` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435175,"byte_end":1435223,"line_start":787,"line_end":787,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435228,"byte_end":1435231,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ The API does not currently assist with generating this offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435236,"byte_end":1435302,"line_start":789,"line_end":789,"column_start":5,"column_end":71}},{"value":"/ This variant will be removed from the API once support for writing","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435307,"byte_end":1435377,"line_start":790,"line_end":790,"column_start":5,"column_end":75}},{"value":"/ `.debug_macinfo` sections is implemented.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435382,"byte_end":1435427,"line_start":791,"line_end":791,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9570},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435727,"byte_end":1435740,"line_start":799,"line_end":799,"column_start":5,"column_end":18},"name":"DebugMacroRef","qualname":"::write::unit::AttributeValue::DebugMacroRef","value":"AttributeValue::DebugMacroRef(DebugMacroOffset)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" An offset into the `.debug_macro` section.","sig":null,"attributes":[{"value":"/ An offset into the `.debug_macro` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435474,"byte_end":1435520,"line_start":794,"line_end":794,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435525,"byte_end":1435528,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ The API does not currently assist with generating this offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435533,"byte_end":1435599,"line_start":796,"line_end":796,"column_start":5,"column_end":71}},{"value":"/ This variant will be removed from the API once support for writing","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435604,"byte_end":1435674,"line_start":797,"line_end":797,"column_start":5,"column_end":75}},{"value":"/ `.debug_macro` sections is implemented.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435679,"byte_end":1435722,"line_start":798,"line_end":798,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9573},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435802,"byte_end":1435814,"line_start":802,"line_end":802,"column_start":5,"column_end":17},"name":"RangeListRef","qualname":"::write::unit::AttributeValue::RangeListRef","value":"AttributeValue::RangeListRef(RangeListId)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" A reference to a range list.\n","sig":null,"attributes":[{"value":"/ A reference to a range list.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435765,"byte_end":1435797,"line_start":801,"line_end":801,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9576},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436065,"byte_end":1436078,"line_start":809,"line_end":809,"column_start":5,"column_end":18},"name":"DebugTypesRef","qualname":"::write::unit::AttributeValue::DebugTypesRef","value":"AttributeValue::DebugTypesRef(DebugTypeSignature)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" A type signature.","sig":null,"attributes":[{"value":"/ A type signature.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435834,"byte_end":1435855,"line_start":804,"line_end":804,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435860,"byte_end":1435863,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ The API does not currently assist with generating this signature.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435868,"byte_end":1435937,"line_start":806,"line_end":806,"column_start":5,"column_end":74}},{"value":"/ This variant will be removed from the API once support for writing","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1435942,"byte_end":1436012,"line_start":807,"line_end":807,"column_start":5,"column_end":75}},{"value":"/ `.debug_types` sections is implemented.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436017,"byte_end":1436060,"line_start":808,"line_end":808,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9579},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436166,"byte_end":1436175,"line_start":812,"line_end":812,"column_start":5,"column_end":14},"name":"StringRef","qualname":"::write::unit::AttributeValue::StringRef","value":"AttributeValue::StringRef(StringId)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" A reference to a string in the `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ A reference to a string in the `.debug_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436105,"byte_end":1436161,"line_start":811,"line_end":811,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9582},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436479,"byte_end":1436493,"line_start":819,"line_end":819,"column_start":5,"column_end":19},"name":"DebugStrRefSup","qualname":"::write::unit::AttributeValue::DebugStrRefSup","value":"AttributeValue::DebugStrRefSup(DebugStrOffset)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" An offset into the `.debug_str` section of the supplementary object file.","sig":null,"attributes":[{"value":"/ An offset into the `.debug_str` section of the supplementary object file.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436192,"byte_end":1436269,"line_start":814,"line_end":814,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436274,"byte_end":1436277,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ The API does not currently assist with generating this offset.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436282,"byte_end":1436348,"line_start":816,"line_end":816,"column_start":5,"column_end":71}},{"value":"/ This variant will be removed from the API once support for writing","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436353,"byte_end":1436423,"line_start":817,"line_end":817,"column_start":5,"column_end":75}},{"value":"/ supplementary object files is implemented.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436428,"byte_end":1436474,"line_start":818,"line_end":818,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9585},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436582,"byte_end":1436595,"line_start":822,"line_end":822,"column_start":5,"column_end":18},"name":"LineStringRef","qualname":"::write::unit::AttributeValue::LineStringRef","value":"AttributeValue::LineStringRef(LineStringId)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" A reference to a string in the `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ A reference to a string in the `.debug_line_str` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436516,"byte_end":1436577,"line_start":821,"line_end":821,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9588},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436751,"byte_end":1436757,"line_start":826,"line_end":826,"column_start":5,"column_end":11},"name":"String","qualname":"::write::unit::AttributeValue::String","value":"AttributeValue::String(Vec<u8>)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" A slice of bytes representing a string. Must not include null bytes.\n Not guaranteed to be UTF-8 or anything like that.\n","sig":null,"attributes":[{"value":"/ A slice of bytes representing a string. Must not include null bytes.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436616,"byte_end":1436688,"line_start":824,"line_end":824,"column_start":5,"column_end":77}},{"value":"/ Not guaranteed to be UTF-8 or anything like that.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436693,"byte_end":1436746,"line_start":825,"line_end":825,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9591},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436824,"byte_end":1436832,"line_start":829,"line_end":829,"column_start":5,"column_end":13},"name":"Encoding","qualname":"::write::unit::AttributeValue::Encoding","value":"AttributeValue::Encoding(constants::DwAte)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_encoding` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_encoding` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436773,"byte_end":1436819,"line_start":828,"line_end":828,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9594},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436912,"byte_end":1436923,"line_start":832,"line_end":832,"column_start":5,"column_end":16},"name":"DecimalSign","qualname":"::write::unit::AttributeValue::DecimalSign","value":"AttributeValue::DecimalSign(constants::DwDs)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_decimal_sign` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_decimal_sign` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436857,"byte_end":1436907,"line_start":831,"line_end":831,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9597},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436999,"byte_end":1437008,"line_start":835,"line_end":835,"column_start":5,"column_end":14},"name":"Endianity","qualname":"::write::unit::AttributeValue::Endianity","value":"AttributeValue::Endianity(constants::DwEnd)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_endianity` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_endianity` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1436947,"byte_end":1436994,"line_start":834,"line_end":834,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9600},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437089,"byte_end":1437102,"line_start":838,"line_end":838,"column_start":5,"column_end":18},"name":"Accessibility","qualname":"::write::unit::AttributeValue::Accessibility","value":"AttributeValue::Accessibility(constants::DwAccess)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_accessibility` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_accessibility` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437033,"byte_end":1437084,"line_start":837,"line_end":837,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9603},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437183,"byte_end":1437193,"line_start":841,"line_end":841,"column_start":5,"column_end":15},"name":"Visibility","qualname":"::write::unit::AttributeValue::Visibility","value":"AttributeValue::Visibility(constants::DwVis)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_visibility` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_visibility` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437130,"byte_end":1437178,"line_start":840,"line_end":840,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9606},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437271,"byte_end":1437281,"line_start":844,"line_end":844,"column_start":5,"column_end":15},"name":"Virtuality","qualname":"::write::unit::AttributeValue::Virtuality","value":"AttributeValue::Virtuality(constants::DwVirtuality)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_virtuality` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_virtuality` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437218,"byte_end":1437266,"line_start":843,"line_end":843,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9609},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437364,"byte_end":1437372,"line_start":847,"line_end":847,"column_start":5,"column_end":13},"name":"Language","qualname":"::write::unit::AttributeValue::Language","value":"AttributeValue::Language(constants::DwLang)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_language` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_language` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437313,"byte_end":1437359,"line_start":846,"line_end":846,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9612},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437454,"byte_end":1437466,"line_start":850,"line_end":850,"column_start":5,"column_end":17},"name":"AddressClass","qualname":"::write::unit::AttributeValue::AddressClass","value":"AttributeValue::AddressClass(constants::DwAddr)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_address_class` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_address_class` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437398,"byte_end":1437449,"line_start":849,"line_end":849,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9615},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437550,"byte_end":1437564,"line_start":853,"line_end":853,"column_start":5,"column_end":19},"name":"IdentifierCase","qualname":"::write::unit::AttributeValue::IdentifierCase","value":"AttributeValue::IdentifierCase(constants::DwId)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_identifier_case` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_identifier_case` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437492,"byte_end":1437545,"line_start":852,"line_end":852,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9618},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437649,"byte_end":1437666,"line_start":856,"line_end":856,"column_start":5,"column_end":22},"name":"CallingConvention","qualname":"::write::unit::AttributeValue::CallingConvention","value":"AttributeValue::CallingConvention(constants::DwCc)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_calling_convention` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_calling_convention` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437588,"byte_end":1437644,"line_start":855,"line_end":855,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9621},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437739,"byte_end":1437745,"line_start":859,"line_end":859,"column_start":5,"column_end":11},"name":"Inline","qualname":"::write::unit::AttributeValue::Inline","value":"AttributeValue::Inline(constants::DwInl)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_inline` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_inline` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437690,"byte_end":1437734,"line_start":858,"line_end":858,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9624},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437821,"byte_end":1437829,"line_start":862,"line_end":862,"column_start":5,"column_end":13},"name":"Ordering","qualname":"::write::unit::AttributeValue::Ordering","value":"AttributeValue::Ordering(constants::DwOrd)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_ordering` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_ordering` attribute.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437770,"byte_end":1437816,"line_start":861,"line_end":861,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9627},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437980,"byte_end":1437989,"line_start":866,"line_end":866,"column_start":5,"column_end":14},"name":"FileIndex","qualname":"::write::unit::AttributeValue::FileIndex","value":"AttributeValue::FileIndex(Option<FileId>)","parent":{"krate":0,"index":9520},"children":[],"decl_id":null,"docs":" An index into the filename entries from the line number information\n table for the unit containing this value.\n","sig":null,"attributes":[{"value":"/ An index into the filename entries from the line number information","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437854,"byte_end":1437925,"line_start":864,"line_end":864,"column_start":5,"column_end":76}},{"value":"/ table for the unit containing this value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1437930,"byte_end":1437975,"line_start":865,"line_end":865,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":9520},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1432494,"byte_end":1432508,"line_start":711,"line_end":711,"column_start":10,"column_end":24},"name":"AttributeValue","qualname":"::write::unit::AttributeValue","value":"pub enum AttributeValue {\n\n    /// \"Refers to some location in the address space of the described program.\"\n    Address(Address),\n\n    /// A slice of an arbitrary number of bytes.\n    Block(Vec<u8>),\n\n    /// A one byte constant data value. How to interpret the byte depends on context.\n    ///\n    /// From section 7 of the standard: \"Depending on context, it may be a\n    /// signed integer, an unsigned integer, a floating-point constant, or\n    /// anything else.\"\n    Data1(u8),\n\n    /// A two byte constant data value. How to interpret the bytes depends on context.\n    ///\n    /// This value will be converted to the target endian before writing.\n    ///\n    /// From section 7 of the standard: \"Depending on context, it may be a\n    /// signed integer, an unsigned integer, a floating-point constant, or\n    /// anything else.\"\n    Data2(u16),\n\n    /// A four byte constant data value. How to interpret the bytes depends on context.\n    ///\n    /// This value will be converted to the target endian before writing.\n    ///\n    /// From section 7 of the standard: \"Depending on context, it may be a\n    /// signed integer, an unsigned integer, a floating-point constant, or\n    /// anything else.\"\n    Data4(u32),\n\n    /// An eight byte constant data value. How to interpret the bytes depends on context.\n    ///\n    /// This value will be converted to the target endian before writing.\n    ///\n    /// From section 7 of the standard: \"Depending on context, it may be a\n    /// signed integer, an unsigned integer, a floating-point constant, or\n    /// anything else.\"\n    Data8(u64),\n\n    /// A signed integer constant.\n    Sdata(i64),\n\n    /// An unsigned integer constant.\n    Udata(u64),\n\n    /// \"The information bytes contain a DWARF expression (see Section 2.5) or\n    /// location description (see Section 2.6).\"\n    Exprloc(Expression),\n\n    /// A boolean that indicates presence or absence of the attribute.\n    Flag(bool),\n\n    /// An attribute that is always present.\n    FlagPresent,\n\n    /// A reference to a `DebuggingInformationEntry` in this unit.\n    UnitRef(UnitEntryId),\n\n    /// A reference to a `DebuggingInformationEntry` in a potentially different unit.\n    DebugInfoRef(Reference),\n\n    /// An offset into the `.debug_info` section of the supplementary object file.\n    ///\n    /// The API does not currently assist with generating this offset.\n    /// This variant will be removed from the API once support for writing\n    /// supplementary object files is implemented.\n    DebugInfoRefSup(DebugInfoOffset),\n\n    /// A reference to a line number program.\n    LineProgramRef,\n\n    /// A reference to a location list.\n    LocationListRef(LocationListId),\n\n    /// An offset into the `.debug_macinfo` section.\n    ///\n    /// The API does not currently assist with generating this offset.\n    /// This variant will be removed from the API once support for writing\n    /// `.debug_macinfo` sections is implemented.\n    DebugMacinfoRef(DebugMacinfoOffset),\n\n    /// An offset into the `.debug_macro` section.\n    ///\n    /// The API does not currently assist with generating this offset.\n    /// This variant will be removed from the API once support for writing\n    /// `.debug_macro` sections is implemented.\n    DebugMacroRef(DebugMacroOffset),\n\n    /// A reference to a range list.\n    RangeListRef(RangeListId),\n\n    /// A type signature.\n    ///\n    /// The API does not currently assist with generating this signature.\n    /// This variant will be removed from the API once support for writing\n    /// `.debug_types` sections is implemented.\n    DebugTypesRef(DebugTypeSignature),\n\n    /// A reference to a string in the `.debug_str` section.\n    StringRef(StringId),\n\n    /// An offset into the `.debug_str` section of the supplementary object file.\n    ///\n    /// The API does not currently assist with generating this offset.\n    /// This variant will be removed from the API once support for writing\n    /// supplementary object files is implemented.\n    DebugStrRefSup(DebugStrOffset),\n\n    /// A reference to a string in the `.debug_line_str` section.\n    LineStringRef(LineStringId),\n\n    /// A slice of bytes representing a string. Must not include null bytes.\n    /// Not guaranteed to be UTF-8 or anything like that.\n    String(Vec<u8>),\n\n    /// The value of a `DW_AT_encoding` attribute.\n    Encoding(constants::DwAte),\n\n    /// The value of a `DW_AT_decimal_sign` attribute.\n    DecimalSign(constants::DwDs),\n\n    /// The value of a `DW_AT_endianity` attribute.\n    Endianity(constants::DwEnd),\n\n    /// The value of a `DW_AT_accessibility` attribute.\n    Accessibility(constants::DwAccess),\n\n    /// The value of a `DW_AT_visibility` attribute.\n    Visibility(constants::DwVis),\n\n    /// The value of a `DW_AT_virtuality` attribute.\n    Virtuality(constants::DwVirtuality),\n\n    /// The value of a `DW_AT_language` attribute.\n    Language(constants::DwLang),\n\n    /// The value of a `DW_AT_address_class` attribute.\n    AddressClass(constants::DwAddr),\n\n    /// The value of a `DW_AT_identifier_case` attribute.\n    IdentifierCase(constants::DwId),\n\n    /// The value of a `DW_AT_calling_convention` attribute.\n    CallingConvention(constants::DwCc),\n\n    /// The value of a `DW_AT_inline` attribute.\n    Inline(constants::DwInl),\n\n    /// The value of a `DW_AT_ordering` attribute.\n    Ordering(constants::DwOrd),\n\n    /// An index into the filename entries from the line number information\n    /// table for the unit containing this value.\n    FileIndex(Option<FileId>),\n}","parent":null,"children":[{"krate":0,"index":9521},{"krate":0,"index":9524},{"krate":0,"index":9527},{"krate":0,"index":9530},{"krate":0,"index":9533},{"krate":0,"index":9536},{"krate":0,"index":9539},{"krate":0,"index":9542},{"krate":0,"index":9545},{"krate":0,"index":9548},{"krate":0,"index":9551},{"krate":0,"index":9553},{"krate":0,"index":9556},{"krate":0,"index":9559},{"krate":0,"index":9562},{"krate":0,"index":9564},{"krate":0,"index":9567},{"krate":0,"index":9570},{"krate":0,"index":9573},{"krate":0,"index":9576},{"krate":0,"index":9579},{"krate":0,"index":9582},{"krate":0,"index":9585},{"krate":0,"index":9588},{"krate":0,"index":9591},{"krate":0,"index":9594},{"krate":0,"index":9597},{"krate":0,"index":9600},{"krate":0,"index":9603},{"krate":0,"index":9606},{"krate":0,"index":9609},{"krate":0,"index":9612},{"krate":0,"index":9615},{"krate":0,"index":9618},{"krate":0,"index":9621},{"krate":0,"index":9624},{"krate":0,"index":9627}],"decl_id":null,"docs":" The value of an attribute in a `DebuggingInformationEntry`.\n","sig":null,"attributes":[{"value":"/ The value of an attribute in a `DebuggingInformationEntry`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1432382,"byte_end":1432445,"line_start":709,"line_end":709,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2856},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1438107,"byte_end":1438111,"line_start":871,"line_end":871,"column_start":12,"column_end":16},"name":"form","qualname":"<AttributeValue>::form","value":"pub fn form(&Self, Encoding) -> Result<constants::DwForm>","parent":null,"children":[],"decl_id":null,"docs":" Return the form that will be used to encode this value.\n","sig":null,"attributes":[{"value":"/ Return the form that will be used to encode this value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1438036,"byte_end":1438095,"line_start":870,"line_end":870,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":9657},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1459032,"byte_end":1459041,"line_start":1367,"line_end":1367,"column_start":5,"column_end":14},"name":"DebugInfo","qualname":"::write::unit::DebugInfo","value":"","parent":null,"children":[],"decl_id":null,"docs":"A writable `.debug_info` section.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9667},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1459217,"byte_end":1459233,"line_start":1374,"line_end":1374,"column_start":12,"column_end":28},"name":"DebugInfoOffsets","qualname":"::write::unit::DebugInfoOffsets","value":"DebugInfoOffsets {  }","parent":null,"children":[{"krate":0,"index":9668},{"krate":0,"index":9669}],"decl_id":null,"docs":" The section offsets of all elements within a `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ The section offsets of all elements within a `.debug_info` section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1459108,"byte_end":1459179,"line_start":1372,"line_end":1372,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2863},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1459583,"byte_end":1459587,"line_start":1388,"line_end":1388,"column_start":12,"column_end":16},"name":"unit","qualname":"<DebugInfoOffsets>::unit","value":"pub fn unit(&Self, UnitId) -> DebugInfoOffset","parent":null,"children":[],"decl_id":null,"docs":" Get the `.debug_info` section offset for the given unit.\n","sig":null,"attributes":[{"value":"/ Get the `.debug_info` section offset for the given unit.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1459497,"byte_end":1459557,"line_start":1386,"line_end":1386,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1459562,"byte_end":1459571,"line_start":1387,"line_end":1387,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2864},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1459818,"byte_end":1459823,"line_start":1395,"line_end":1395,"column_start":12,"column_end":17},"name":"entry","qualname":"<DebugInfoOffsets>::entry","value":"pub fn entry(&Self, UnitId, UnitEntryId) -> DebugInfoOffset","parent":null,"children":[],"decl_id":null,"docs":" Get the `.debug_info` section offset for the given entry.\n","sig":null,"attributes":[{"value":"/ Get the `.debug_info` section offset for the given entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1459731,"byte_end":1459792,"line_start":1393,"line_end":1393,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1459797,"byte_end":1459806,"line_start":1394,"line_end":1394,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2907},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1463745,"byte_end":1463749,"line_start":1513,"line_end":1513,"column_start":16,"column_end":20},"name":"from","qualname":"<UnitTable>::from","value":"pub fn from<R: Reader<Offset =\n            usize>>(&read::Dwarf<R>, &mut write::LineStringTable,\n                    &mut write::StringTable, &Fn(u64) -> Option<Address>)\n-> ConvertResult<UnitTable>","parent":null,"children":[],"decl_id":null,"docs":" Create a unit table by reading the data in the given sections.","sig":null,"attributes":[{"value":"/ Create a unit table by reading the data in the given sections.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1463101,"byte_end":1463167,"line_start":1503,"line_end":1503,"column_start":9,"column_end":75}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1463176,"byte_end":1463179,"line_start":1504,"line_end":1504,"column_start":9,"column_end":12}},{"value":"/ This also updates the given tables with the values that are referenced from","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1463188,"byte_end":1463267,"line_start":1505,"line_end":1505,"column_start":9,"column_end":88}},{"value":"/ attributes in this section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1463276,"byte_end":1463307,"line_start":1506,"line_end":1506,"column_start":9,"column_end":40}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1463316,"byte_end":1463319,"line_start":1507,"line_end":1507,"column_start":9,"column_end":12}},{"value":"/ `convert_address` is a function to convert read addresses into the `Address`","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1463328,"byte_end":1463408,"line_start":1508,"line_end":1508,"column_start":9,"column_end":89}},{"value":"/ type. For non-relocatable addresses, this function may simply return","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1463417,"byte_end":1463489,"line_start":1509,"line_end":1509,"column_start":9,"column_end":81}},{"value":"/ `Address::Constant(address)`. For relocatable addresses, it is the caller's","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1463498,"byte_end":1463577,"line_start":1510,"line_end":1510,"column_start":9,"column_end":88}},{"value":"/ responsibility to determine the symbol and addend corresponding to the address","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1463586,"byte_end":1463668,"line_start":1511,"line_end":1511,"column_start":9,"column_end":91}},{"value":"/ and return `Address::Symbol { symbol, addend }`.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1463677,"byte_end":1463729,"line_start":1512,"line_end":1512,"column_start":9,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9699},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135025,"byte_end":1135042,"line_start":166,"line_end":166,"column_start":5,"column_end":22},"name":"OffsetOutOfBounds","qualname":"::write::Error::OffsetOutOfBounds","value":"Error::OffsetOutOfBounds","parent":{"krate":0,"index":9698},"children":[],"decl_id":null,"docs":" The given offset is out of bounds.\n","sig":null,"attributes":[{"value":"/ The given offset is out of bounds.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1134982,"byte_end":1135020,"line_start":165,"line_end":165,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9701},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135091,"byte_end":1135108,"line_start":168,"line_end":168,"column_start":5,"column_end":22},"name":"LengthOutOfBounds","qualname":"::write::Error::LengthOutOfBounds","value":"Error::LengthOutOfBounds","parent":{"krate":0,"index":9698},"children":[],"decl_id":null,"docs":" The given length is out of bounds.\n","sig":null,"attributes":[{"value":"/ The given length is out of bounds.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135048,"byte_end":1135086,"line_start":167,"line_end":167,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9703},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135169,"byte_end":1135190,"line_start":170,"line_end":170,"column_start":5,"column_end":26},"name":"InvalidAttributeValue","qualname":"::write::Error::InvalidAttributeValue","value":"Error::InvalidAttributeValue","parent":{"krate":0,"index":9698},"children":[],"decl_id":null,"docs":" The attribute value is an invalid for writing.\n","sig":null,"attributes":[{"value":"/ The attribute value is an invalid for writing.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135114,"byte_end":1135164,"line_start":169,"line_end":169,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9705},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135250,"byte_end":1135263,"line_start":172,"line_end":172,"column_start":5,"column_end":18},"name":"ValueTooLarge","qualname":"::write::Error::ValueTooLarge","value":"Error::ValueTooLarge","parent":{"krate":0,"index":9698},"children":[],"decl_id":null,"docs":" The value is too large for the encoding form.\n","sig":null,"attributes":[{"value":"/ The value is too large for the encoding form.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135196,"byte_end":1135245,"line_start":171,"line_end":171,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9707},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135300,"byte_end":1135319,"line_start":174,"line_end":174,"column_start":5,"column_end":24},"name":"UnsupportedWordSize","qualname":"::write::Error::UnsupportedWordSize","value":"Error::UnsupportedWordSize(u8)","parent":{"krate":0,"index":9698},"children":[],"decl_id":null,"docs":" Unsupported word size.\n","sig":null,"attributes":[{"value":"/ Unsupported word size.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135269,"byte_end":1135295,"line_start":173,"line_end":173,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9710},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135364,"byte_end":1135382,"line_start":176,"line_end":176,"column_start":5,"column_end":23},"name":"UnsupportedVersion","qualname":"::write::Error::UnsupportedVersion","value":"Error::UnsupportedVersion(u16)","parent":{"krate":0,"index":9698},"children":[],"decl_id":null,"docs":" Unsupported DWARF version.\n","sig":null,"attributes":[{"value":"/ Unsupported DWARF version.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135329,"byte_end":1135359,"line_start":175,"line_end":175,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9713},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135462,"byte_end":1135483,"line_start":178,"line_end":178,"column_start":5,"column_end":26},"name":"InitialLengthOverflow","qualname":"::write::Error::InitialLengthOverflow","value":"Error::InitialLengthOverflow","parent":{"krate":0,"index":9698},"children":[],"decl_id":null,"docs":" The unit length is too large for the requested DWARF format.\n","sig":null,"attributes":[{"value":"/ The unit length is too large for the requested DWARF format.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135393,"byte_end":1135457,"line_start":177,"line_end":177,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9715},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135521,"byte_end":1135535,"line_start":180,"line_end":180,"column_start":5,"column_end":19},"name":"InvalidAddress","qualname":"::write::Error::InvalidAddress","value":"Error::InvalidAddress","parent":{"krate":0,"index":9698},"children":[],"decl_id":null,"docs":" The address is invalid.\n","sig":null,"attributes":[{"value":"/ The address is invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135489,"byte_end":1135516,"line_start":179,"line_end":179,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9717},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135575,"byte_end":1135591,"line_start":182,"line_end":182,"column_start":5,"column_end":21},"name":"InvalidReference","qualname":"::write::Error::InvalidReference","value":"Error::InvalidReference","parent":{"krate":0,"index":9698},"children":[],"decl_id":null,"docs":" The reference is invalid.\n","sig":null,"attributes":[{"value":"/ The reference is invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135541,"byte_end":1135570,"line_start":181,"line_end":181,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9719},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135661,"byte_end":1135672,"line_start":184,"line_end":184,"column_start":5,"column_end":16},"name":"NeedVersion","qualname":"::write::Error::NeedVersion","value":"Error::NeedVersion(u16)","parent":{"krate":0,"index":9698},"children":[],"decl_id":null,"docs":" A requested feature requires a different DWARF version.\n","sig":null,"attributes":[{"value":"/ A requested feature requires a different DWARF version.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135597,"byte_end":1135656,"line_start":183,"line_end":183,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9722},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135745,"byte_end":1135767,"line_start":186,"line_end":186,"column_start":5,"column_end":27},"name":"LineStringFormMismatch","qualname":"::write::Error::LineStringFormMismatch","value":"Error::LineStringFormMismatch","parent":{"krate":0,"index":9698},"children":[],"decl_id":null,"docs":" Strings in line number program have mismatched forms.\n","sig":null,"attributes":[{"value":"/ Strings in line number program have mismatched forms.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135683,"byte_end":1135740,"line_start":185,"line_end":185,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9724},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135822,"byte_end":1135834,"line_start":188,"line_end":188,"column_start":5,"column_end":17},"name":"InvalidRange","qualname":"::write::Error::InvalidRange","value":"Error::InvalidRange","parent":{"krate":0,"index":9698},"children":[],"decl_id":null,"docs":" The range is empty or otherwise invalid.\n","sig":null,"attributes":[{"value":"/ The range is empty or otherwise invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135773,"byte_end":1135817,"line_start":187,"line_end":187,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9726},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135921,"byte_end":1135952,"line_start":190,"line_end":190,"column_start":5,"column_end":36},"name":"IncompatibleLineProgramEncoding","qualname":"::write::Error::IncompatibleLineProgramEncoding","value":"Error::IncompatibleLineProgramEncoding","parent":{"krate":0,"index":9698},"children":[],"decl_id":null,"docs":" The line number program encoding is incompatible with the unit encoding.\n","sig":null,"attributes":[{"value":"/ The line number program encoding is incompatible with the unit encoding.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135840,"byte_end":1135916,"line_start":189,"line_end":189,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9728},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1136020,"byte_end":1136042,"line_start":192,"line_end":192,"column_start":5,"column_end":27},"name":"InvalidFrameCodeOffset","qualname":"::write::Error::InvalidFrameCodeOffset","value":"Error::InvalidFrameCodeOffset(u32)","parent":{"krate":0,"index":9698},"children":[],"decl_id":null,"docs":" Could not encode code offset for a frame instruction.\n","sig":null,"attributes":[{"value":"/ Could not encode code offset for a frame instruction.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1135958,"byte_end":1136015,"line_start":191,"line_end":191,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9731},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1136115,"byte_end":1136137,"line_start":194,"line_end":194,"column_start":5,"column_end":27},"name":"InvalidFrameDataOffset","qualname":"::write::Error::InvalidFrameDataOffset","value":"Error::InvalidFrameDataOffset(i32)","parent":{"krate":0,"index":9698},"children":[],"decl_id":null,"docs":" Could not encode data offset for a frame instruction.\n","sig":null,"attributes":[{"value":"/ Could not encode data offset for a frame instruction.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1136053,"byte_end":1136110,"line_start":193,"line_end":193,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9734},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1136195,"byte_end":1136221,"line_start":196,"line_end":196,"column_start":5,"column_end":31},"name":"UnsupportedPointerEncoding","qualname":"::write::Error::UnsupportedPointerEncoding","value":"Error::UnsupportedPointerEncoding(constants::DwEhPe)","parent":{"krate":0,"index":9698},"children":[],"decl_id":null,"docs":" Unsupported eh_frame pointer encoding.\n","sig":null,"attributes":[{"value":"/ Unsupported eh_frame pointer encoding.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1136148,"byte_end":1136190,"line_start":195,"line_end":195,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9737},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1136295,"byte_end":1136328,"line_start":198,"line_end":198,"column_start":5,"column_end":38},"name":"UnsupportedCfiExpressionReference","qualname":"::write::Error::UnsupportedCfiExpressionReference","value":"Error::UnsupportedCfiExpressionReference","parent":{"krate":0,"index":9698},"children":[],"decl_id":null,"docs":" Unsupported reference in CFI expression.\n","sig":null,"attributes":[{"value":"/ Unsupported reference in CFI expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1136246,"byte_end":1136290,"line_start":197,"line_end":197,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9739},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1136387,"byte_end":1136424,"line_start":200,"line_end":200,"column_start":5,"column_end":42},"name":"UnsupportedExpressionForwardReference","qualname":"::write::Error::UnsupportedExpressionForwardReference","value":"Error::UnsupportedExpressionForwardReference","parent":{"krate":0,"index":9698},"children":[],"decl_id":null,"docs":" Unsupported forward reference in expression.\n","sig":null,"attributes":[{"value":"/ Unsupported forward reference in expression.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1136334,"byte_end":1136382,"line_start":199,"line_end":199,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":9698},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1134970,"byte_end":1134975,"line_start":164,"line_end":164,"column_start":10,"column_end":15},"name":"Error","qualname":"::write::Error","value":"pub enum Error {\n\n    /// The given offset is out of bounds.\n    OffsetOutOfBounds,\n\n    /// The given length is out of bounds.\n    LengthOutOfBounds,\n\n    /// The attribute value is an invalid for writing.\n    InvalidAttributeValue,\n\n    /// The value is too large for the encoding form.\n    ValueTooLarge,\n\n    /// Unsupported word size.\n    UnsupportedWordSize(u8),\n\n    /// Unsupported DWARF version.\n    UnsupportedVersion(u16),\n\n    /// The unit length is too large for the requested DWARF format.\n    InitialLengthOverflow,\n\n    /// The address is invalid.\n    InvalidAddress,\n\n    /// The reference is invalid.\n    InvalidReference,\n\n    /// A requested feature requires a different DWARF version.\n    NeedVersion(u16),\n\n    /// Strings in line number program have mismatched forms.\n    LineStringFormMismatch,\n\n    /// The range is empty or otherwise invalid.\n    InvalidRange,\n\n    /// The line number program encoding is incompatible with the unit encoding.\n    IncompatibleLineProgramEncoding,\n\n    /// Could not encode code offset for a frame instruction.\n    InvalidFrameCodeOffset(u32),\n\n    /// Could not encode data offset for a frame instruction.\n    InvalidFrameDataOffset(i32),\n\n    /// Unsupported eh_frame pointer encoding.\n    UnsupportedPointerEncoding(constants::DwEhPe),\n\n    /// Unsupported reference in CFI expression.\n    UnsupportedCfiExpressionReference,\n\n    /// Unsupported forward reference in expression.\n    UnsupportedExpressionForwardReference,\n}","parent":null,"children":[{"krate":0,"index":9699},{"krate":0,"index":9701},{"krate":0,"index":9703},{"krate":0,"index":9705},{"krate":0,"index":9707},{"krate":0,"index":9710},{"krate":0,"index":9713},{"krate":0,"index":9715},{"krate":0,"index":9717},{"krate":0,"index":9719},{"krate":0,"index":9722},{"krate":0,"index":9724},{"krate":0,"index":9726},{"krate":0,"index":9728},{"krate":0,"index":9731},{"krate":0,"index":9734},{"krate":0,"index":9737},{"krate":0,"index":9739}],"decl_id":null,"docs":" An error that occurred when writing.\n","sig":null,"attributes":[{"value":"/ An error that occurred when writing.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1134875,"byte_end":1134915,"line_start":162,"line_end":162,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":2930},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1139039,"byte_end":1139045,"line_start":261,"line_end":261,"column_start":10,"column_end":16},"name":"Result","qualname":"::write::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" The result of a write.\n","sig":null,"attributes":[{"value":"/ The result of a write.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1139003,"byte_end":1139029,"line_start":260,"line_end":260,"column_start":1,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9754},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1139226,"byte_end":1139234,"line_start":267,"line_end":267,"column_start":5,"column_end":13},"name":"Constant","qualname":"::write::Address::Constant","value":"Address::Constant(u64)","parent":{"krate":0,"index":9753},"children":[],"decl_id":null,"docs":" A fixed address that does not require relocation.\n","sig":null,"attributes":[{"value":"/ A fixed address that does not require relocation.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1139168,"byte_end":1139221,"line_start":266,"line_end":266,"column_start":5,"column_end":58}}]},{"kind":"StructVariant","id":{"krate":0,"index":9757},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1139317,"byte_end":1139323,"line_start":269,"line_end":269,"column_start":5,"column_end":11},"name":"Symbol","qualname":"::write::Address::Symbol","value":"Address::Symbol { symbol, addend }","parent":{"krate":0,"index":9753},"children":[],"decl_id":null,"docs":" An address that is relative to a symbol which may be relocated.\n","sig":null,"attributes":[{"value":"/ An address that is relative to a symbol which may be relocated.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1139245,"byte_end":1139312,"line_start":268,"line_end":268,"column_start":5,"column_end":72}}]},{"kind":"Enum","id":{"krate":0,"index":9753},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1139154,"byte_end":1139161,"line_start":265,"line_end":265,"column_start":10,"column_end":17},"name":"Address","qualname":"::write::Address","value":"pub enum Address {\n\n    /// A fixed address that does not require relocation.\n    Constant(u64),\n\n    /// An address that is relative to a symbol which may be relocated.\n    Symbol {\n        /// The symbol that the address is relative to.\n        ///\n        /// The meaning of this value is decided by the writer, but\n        /// will typically be an index into a symbol table.\n        symbol: usize,\n        /// The offset of the address relative to the symbol.\n        ///\n        /// This will typically be used as the addend in a relocation.\n        addend: i64,\n    },\n}","parent":null,"children":[{"krate":0,"index":9754},{"krate":0,"index":9757}],"decl_id":null,"docs":" An address.\n","sig":null,"attributes":[{"value":"/ An address.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1139078,"byte_end":1139093,"line_start":263,"line_end":263,"column_start":1,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9776},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1139995,"byte_end":1140001,"line_start":289,"line_end":289,"column_start":5,"column_end":11},"name":"Symbol","qualname":"::write::Reference::Symbol","value":"Reference::Symbol(usize)","parent":{"krate":0,"index":9775},"children":[],"decl_id":null,"docs":" An external symbol.","sig":null,"attributes":[{"value":"/ An external symbol.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1139839,"byte_end":1139862,"line_start":285,"line_end":285,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1139867,"byte_end":1139870,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ The meaning of this value is decided by the writer, but","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1139875,"byte_end":1139934,"line_start":287,"line_end":287,"column_start":5,"column_end":64}},{"value":"/ will typically be an index into a symbol table.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1139939,"byte_end":1139990,"line_start":288,"line_end":288,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9779},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1140134,"byte_end":1140139,"line_start":293,"line_end":293,"column_start":5,"column_end":10},"name":"Entry","qualname":"::write::Reference::Entry","value":"Reference::Entry(UnitId, UnitEntryId)","parent":{"krate":0,"index":9775},"children":[],"decl_id":null,"docs":" An entry in the same section.","sig":null,"attributes":[{"value":"/ An entry in the same section.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1140014,"byte_end":1140047,"line_start":290,"line_end":290,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1140052,"byte_end":1140055,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ This only supports references in units that are emitted together.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1140060,"byte_end":1140129,"line_start":292,"line_end":292,"column_start":5,"column_end":74}}]},{"kind":"Enum","id":{"krate":0,"index":9775},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1139823,"byte_end":1139832,"line_start":284,"line_end":284,"column_start":10,"column_end":19},"name":"Reference","qualname":"::write::Reference","value":"pub enum Reference {\n\n    /// An external symbol.\n    ///\n    /// The meaning of this value is decided by the writer, but\n    /// will typically be an index into a symbol table.\n    Symbol(usize),\n\n    /// An entry in the same section.\n    ///\n    /// This only supports references in units that are emitted together.\n    Entry(UnitId, UnitEntryId),\n}","parent":null,"children":[{"krate":0,"index":9776},{"krate":0,"index":9779}],"decl_id":null,"docs":" A reference to a `.debug_info` entry.\n","sig":null,"attributes":[{"value":"/ A reference to a `.debug_info` entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1139721,"byte_end":1139762,"line_start":282,"line_end":282,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9817},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1140950,"byte_end":1140954,"line_start":324,"line_end":324,"column_start":9,"column_end":13},"name":"Read","qualname":"::write::convert::ConvertError::Read","value":"ConvertError::Read(read::Error)","parent":{"krate":0,"index":9816},"children":[],"decl_id":null,"docs":" An error occurred when reading.\n","sig":null,"attributes":[{"value":"/ An error occurred when reading.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1140906,"byte_end":1140941,"line_start":323,"line_end":323,"column_start":9,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9820},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141045,"byte_end":1141070,"line_start":326,"line_end":326,"column_start":9,"column_end":34},"name":"UnsupportedAttributeValue","qualname":"::write::convert::ConvertError::UnsupportedAttributeValue","value":"ConvertError::UnsupportedAttributeValue","parent":{"krate":0,"index":9816},"children":[],"decl_id":null,"docs":" Writing of this attribute value is not implemented yet.\n","sig":null,"attributes":[{"value":"/ Writing of this attribute value is not implemented yet.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1140977,"byte_end":1141036,"line_start":325,"line_end":325,"column_start":9,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9822},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141150,"byte_end":1141171,"line_start":328,"line_end":328,"column_start":9,"column_end":30},"name":"InvalidAttributeValue","qualname":"::write::convert::ConvertError::InvalidAttributeValue","value":"ConvertError::InvalidAttributeValue","parent":{"krate":0,"index":9816},"children":[],"decl_id":null,"docs":" This attribute value is an invalid name/form combination.\n","sig":null,"attributes":[{"value":"/ This attribute value is an invalid name/form combination.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141080,"byte_end":1141141,"line_start":327,"line_end":327,"column_start":9,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9824},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141252,"byte_end":1141274,"line_start":330,"line_end":330,"column_start":9,"column_end":31},"name":"InvalidDebugInfoOffset","qualname":"::write::convert::ConvertError::InvalidDebugInfoOffset","value":"ConvertError::InvalidDebugInfoOffset","parent":{"krate":0,"index":9816},"children":[],"decl_id":null,"docs":" A `.debug_info` reference does not refer to a valid entry.\n","sig":null,"attributes":[{"value":"/ A `.debug_info` reference does not refer to a valid entry.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141181,"byte_end":1141243,"line_start":329,"line_end":329,"column_start":9,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9826},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141331,"byte_end":1141345,"line_start":332,"line_end":332,"column_start":9,"column_end":23},"name":"InvalidAddress","qualname":"::write::convert::ConvertError::InvalidAddress","value":"ConvertError::InvalidAddress","parent":{"krate":0,"index":9816},"children":[],"decl_id":null,"docs":" An address could not be converted.\n","sig":null,"attributes":[{"value":"/ An address could not be converted.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141284,"byte_end":1141322,"line_start":331,"line_end":331,"column_start":9,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9828},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141428,"byte_end":1141454,"line_start":334,"line_end":334,"column_start":9,"column_end":35},"name":"UnsupportedLineInstruction","qualname":"::write::convert::ConvertError::UnsupportedLineInstruction","value":"ConvertError::UnsupportedLineInstruction","parent":{"krate":0,"index":9816},"children":[],"decl_id":null,"docs":" Writing this line number instruction is not implemented yet.\n","sig":null,"attributes":[{"value":"/ Writing this line number instruction is not implemented yet.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141355,"byte_end":1141419,"line_start":333,"line_end":333,"column_start":9,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9830},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141533,"byte_end":1141558,"line_start":336,"line_end":336,"column_start":9,"column_end":34},"name":"UnsupportedLineStringForm","qualname":"::write::convert::ConvertError::UnsupportedLineStringForm","value":"ConvertError::UnsupportedLineStringForm","parent":{"krate":0,"index":9816},"children":[],"decl_id":null,"docs":" Writing this form of line string is not implemented yet.\n","sig":null,"attributes":[{"value":"/ Writing this form of line string is not implemented yet.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141464,"byte_end":1141524,"line_start":335,"line_end":335,"column_start":9,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9832},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141619,"byte_end":1141635,"line_start":338,"line_end":338,"column_start":9,"column_end":25},"name":"InvalidFileIndex","qualname":"::write::convert::ConvertError::InvalidFileIndex","value":"ConvertError::InvalidFileIndex","parent":{"krate":0,"index":9816},"children":[],"decl_id":null,"docs":" A `.debug_line` file index is invalid.\n","sig":null,"attributes":[{"value":"/ A `.debug_line` file index is invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141568,"byte_end":1141610,"line_start":337,"line_end":337,"column_start":9,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9834},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141701,"byte_end":1141722,"line_start":340,"line_end":340,"column_start":9,"column_end":30},"name":"InvalidDirectoryIndex","qualname":"::write::convert::ConvertError::InvalidDirectoryIndex","value":"ConvertError::InvalidDirectoryIndex","parent":{"krate":0,"index":9816},"children":[],"decl_id":null,"docs":" A `.debug_line` directory index is invalid.\n","sig":null,"attributes":[{"value":"/ A `.debug_line` directory index is invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141645,"byte_end":1141692,"line_start":339,"line_end":339,"column_start":9,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9836},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141782,"byte_end":1141797,"line_start":342,"line_end":342,"column_start":9,"column_end":24},"name":"InvalidLineBase","qualname":"::write::convert::ConvertError::InvalidLineBase","value":"ConvertError::InvalidLineBase","parent":{"krate":0,"index":9816},"children":[],"decl_id":null,"docs":" A `.debug_line` line base is invalid.\n","sig":null,"attributes":[{"value":"/ A `.debug_line` line base is invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141732,"byte_end":1141773,"line_start":341,"line_end":341,"column_start":9,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9838},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141857,"byte_end":1141871,"line_start":344,"line_end":344,"column_start":9,"column_end":23},"name":"InvalidLineRef","qualname":"::write::convert::ConvertError::InvalidLineRef","value":"ConvertError::InvalidLineRef","parent":{"krate":0,"index":9816},"children":[],"decl_id":null,"docs":" A `.debug_line` reference is invalid.\n","sig":null,"attributes":[{"value":"/ A `.debug_line` reference is invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141807,"byte_end":1141848,"line_start":343,"line_end":343,"column_start":9,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9840},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141942,"byte_end":1141956,"line_start":346,"line_end":346,"column_start":9,"column_end":23},"name":"InvalidUnitRef","qualname":"::write::convert::ConvertError::InvalidUnitRef","value":"ConvertError::InvalidUnitRef","parent":{"krate":0,"index":9816},"children":[],"decl_id":null,"docs":" A `.debug_info` unit entry reference is invalid.\n","sig":null,"attributes":[{"value":"/ A `.debug_info` unit entry reference is invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141881,"byte_end":1141933,"line_start":345,"line_end":345,"column_start":9,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9842},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1142016,"byte_end":1142035,"line_start":348,"line_end":348,"column_start":9,"column_end":28},"name":"InvalidDebugInfoRef","qualname":"::write::convert::ConvertError::InvalidDebugInfoRef","value":"ConvertError::InvalidDebugInfoRef","parent":{"krate":0,"index":9816},"children":[],"decl_id":null,"docs":" A `.debug_info` reference is invalid.\n","sig":null,"attributes":[{"value":"/ A `.debug_info` reference is invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1141966,"byte_end":1142007,"line_start":347,"line_end":347,"column_start":9,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9844},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1142099,"byte_end":1142126,"line_start":350,"line_end":350,"column_start":9,"column_end":36},"name":"InvalidRangeRelativeAddress","qualname":"::write::convert::ConvertError::InvalidRangeRelativeAddress","value":"ConvertError::InvalidRangeRelativeAddress","parent":{"krate":0,"index":9816},"children":[],"decl_id":null,"docs":" Invalid relative address in a range list.\n","sig":null,"attributes":[{"value":"/ Invalid relative address in a range list.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1142045,"byte_end":1142090,"line_start":349,"line_end":349,"column_start":9,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9846},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1142201,"byte_end":1142226,"line_start":352,"line_end":352,"column_start":9,"column_end":34},"name":"UnsupportedCfiInstruction","qualname":"::write::convert::ConvertError::UnsupportedCfiInstruction","value":"ConvertError::UnsupportedCfiInstruction","parent":{"krate":0,"index":9816},"children":[],"decl_id":null,"docs":" Writing this CFI instruction is not implemented yet.\n","sig":null,"attributes":[{"value":"/ Writing this CFI instruction is not implemented yet.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1142136,"byte_end":1142192,"line_start":351,"line_end":351,"column_start":9,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9848},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1142298,"byte_end":1142324,"line_start":354,"line_end":354,"column_start":9,"column_end":35},"name":"UnsupportedIndirectAddress","qualname":"::write::convert::ConvertError::UnsupportedIndirectAddress","value":"ConvertError::UnsupportedIndirectAddress","parent":{"krate":0,"index":9816},"children":[],"decl_id":null,"docs":" Writing indirect pointers is not implemented yet.\n","sig":null,"attributes":[{"value":"/ Writing indirect pointers is not implemented yet.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1142236,"byte_end":1142289,"line_start":353,"line_end":353,"column_start":9,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9850},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1142404,"byte_end":1142424,"line_start":356,"line_end":356,"column_start":9,"column_end":29},"name":"UnsupportedOperation","qualname":"::write::convert::ConvertError::UnsupportedOperation","value":"ConvertError::UnsupportedOperation","parent":{"krate":0,"index":9816},"children":[],"decl_id":null,"docs":" Writing this expression operation is not implemented yet.\n","sig":null,"attributes":[{"value":"/ Writing this expression operation is not implemented yet.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1142334,"byte_end":1142395,"line_start":355,"line_end":355,"column_start":9,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9852},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1142482,"byte_end":1142501,"line_start":358,"line_end":358,"column_start":9,"column_end":28},"name":"InvalidBranchTarget","qualname":"::write::convert::ConvertError::InvalidBranchTarget","value":"ConvertError::InvalidBranchTarget","parent":{"krate":0,"index":9816},"children":[],"decl_id":null,"docs":" Operation branch target is invalid.\n","sig":null,"attributes":[{"value":"/ Operation branch target is invalid.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1142434,"byte_end":1142473,"line_start":357,"line_end":357,"column_start":9,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":9816},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1140883,"byte_end":1140895,"line_start":322,"line_end":322,"column_start":14,"column_end":26},"name":"ConvertError","qualname":"::write::convert::ConvertError","value":"pub enum ConvertError {\n\n    /// An error occurred when reading.\n    Read(read::Error),\n\n    /// Writing of this attribute value is not implemented yet.\n    UnsupportedAttributeValue,\n\n    /// This attribute value is an invalid name/form combination.\n    InvalidAttributeValue,\n\n    /// A `.debug_info` reference does not refer to a valid entry.\n    InvalidDebugInfoOffset,\n\n    /// An address could not be converted.\n    InvalidAddress,\n\n    /// Writing this line number instruction is not implemented yet.\n    UnsupportedLineInstruction,\n\n    /// Writing this form of line string is not implemented yet.\n    UnsupportedLineStringForm,\n\n    /// A `.debug_line` file index is invalid.\n    InvalidFileIndex,\n\n    /// A `.debug_line` directory index is invalid.\n    InvalidDirectoryIndex,\n\n    /// A `.debug_line` line base is invalid.\n    InvalidLineBase,\n\n    /// A `.debug_line` reference is invalid.\n    InvalidLineRef,\n\n    /// A `.debug_info` unit entry reference is invalid.\n    InvalidUnitRef,\n\n    /// A `.debug_info` reference is invalid.\n    InvalidDebugInfoRef,\n\n    /// Invalid relative address in a range list.\n    InvalidRangeRelativeAddress,\n\n    /// Writing this CFI instruction is not implemented yet.\n    UnsupportedCfiInstruction,\n\n    /// Writing indirect pointers is not implemented yet.\n    UnsupportedIndirectAddress,\n\n    /// Writing this expression operation is not implemented yet.\n    UnsupportedOperation,\n\n    /// Operation branch target is invalid.\n    InvalidBranchTarget,\n}","parent":null,"children":[{"krate":0,"index":9817},{"krate":0,"index":9820},{"krate":0,"index":9822},{"krate":0,"index":9824},{"krate":0,"index":9826},{"krate":0,"index":9828},{"krate":0,"index":9830},{"krate":0,"index":9832},{"krate":0,"index":9834},{"krate":0,"index":9836},{"krate":0,"index":9838},{"krate":0,"index":9840},{"krate":0,"index":9842},{"krate":0,"index":9844},{"krate":0,"index":9846},{"krate":0,"index":9848},{"krate":0,"index":9850},{"krate":0,"index":9852}],"decl_id":null,"docs":" An error that occurred when converting a read value into a write value.\n","sig":null,"attributes":[{"value":"/ An error that occurred when converting a read value into a write value.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1140745,"byte_end":1140820,"line_start":320,"line_end":320,"column_start":5,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":2946},"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1145185,"byte_end":1145198,"line_start":419,"line_end":419,"column_start":14,"column_end":27},"name":"ConvertResult","qualname":"::write::convert::ConvertResult","value":"result::Result<T, ConvertError>","parent":null,"children":[],"decl_id":null,"docs":" The result of a conversion.\n","sig":null,"attributes":[{"value":"/ The result of a conversion.","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1145140,"byte_end":1145171,"line_start":418,"line_end":418,"column_start":5,"column_end":36}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":2352,"byte_end":2358,"line_start":10,"line_end":10,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":4101,"byte_end":4113,"line_start":70,"line_end":70,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":14}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8041,"byte_end":8057,"line_start":172,"line_end":172,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8302,"byte_end":8315,"line_start":183,"line_end":183,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9967,"byte_end":9976,"line_start":244,"line_end":244,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":41236,"byte_end":41242,"line_start":836,"line_end":836,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":53083,"byte_end":53089,"line_start":1289,"line_end":1289,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":60231,"byte_end":60244,"line_start":183,"line_end":183,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":60510,"byte_end":60523,"line_start":197,"line_end":197,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":60748,"byte_end":60760,"line_start":208,"line_end":208,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":60861,"byte_end":60873,"line_start":215,"line_end":215,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":61068,"byte_end":61077,"line_start":226,"line_end":226,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":61172,"byte_end":61181,"line_start":233,"line_end":233,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":110290,"byte_end":110299,"line_start":10,"line_end":10,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":111597,"byte_end":111606,"line_start":43,"line_end":43,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":112419,"byte_end":112428,"line_start":67,"line_end":67,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":112577,"byte_end":112586,"line_start":77,"line_end":77,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115696,"byte_end":115706,"line_start":35,"line_end":35,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116266,"byte_end":116276,"line_start":53,"line_end":53,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":117106,"byte_end":117116,"line_start":77,"line_end":77,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":117274,"byte_end":117284,"line_start":87,"line_end":87,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":118157,"byte_end":118167,"line_start":117,"line_end":117,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":118464,"byte_end":118474,"line_start":127,"line_end":127,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":120213,"byte_end":120223,"line_start":176,"line_end":176,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":120375,"byte_end":120385,"line_start":186,"line_end":186,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":120478,"byte_end":120494,"line_start":192,"line_end":192,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":121807,"byte_end":121817,"line_start":223,"line_end":223,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128174,"byte_end":128181,"line_start":408,"line_end":408,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128423,"byte_end":128430,"line_start":417,"line_end":417,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":129264,"byte_end":129271,"line_start":441,"line_end":441,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":129426,"byte_end":129433,"line_start":451,"line_end":451,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130210,"byte_end":130226,"line_start":482,"line_end":482,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130350,"byte_end":130363,"line_start":492,"line_end":492,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137976,"byte_end":137986,"line_start":694,"line_end":694,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":138929,"byte_end":138939,"line_start":734,"line_end":734,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":139040,"byte_end":139047,"line_start":738,"line_end":738,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":139856,"byte_end":139863,"line_start":774,"line_end":774,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":142011,"byte_end":142024,"line_start":832,"line_end":832,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":144719,"byte_end":144733,"line_start":914,"line_end":914,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":145452,"byte_end":145466,"line_start":940,"line_end":940,"column_start":66,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":150412,"byte_end":150424,"line_start":1063,"line_end":1063,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":152957,"byte_end":152973,"line_start":1136,"line_end":1136,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":156488,"byte_end":156510,"line_start":1221,"line_end":1221,"column_start":17,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":335},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":159084,"byte_end":159106,"line_start":1305,"line_end":1305,"column_start":17,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":356},{"krate":0,"index":359},{"krate":0,"index":361},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":163693,"byte_end":163721,"line_start":1444,"line_end":1444,"column_start":26,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":166529,"byte_end":166550,"line_start":1526,"line_end":1526,"column_start":17,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":375},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":170583,"byte_end":170604,"line_start":1647,"line_end":1647,"column_start":17,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":399},{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":175046,"byte_end":175072,"line_start":1769,"line_end":1769,"column_start":17,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":175288,"byte_end":175314,"line_start":1776,"line_end":1776,"column_start":29,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":175538,"byte_end":175564,"line_start":1786,"line_end":1786,"column_start":17,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":177229,"byte_end":177242,"line_start":1832,"line_end":1832,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":180336,"byte_end":180349,"line_start":1945,"line_end":1945,"column_start":43,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":183731,"byte_end":183742,"line_start":2024,"line_end":2024,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":439},{"krate":0,"index":441},{"krate":0,"index":443},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":195124,"byte_end":195139,"line_start":2319,"line_end":2319,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":454}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":195352,"byte_end":195367,"line_start":2327,"line_end":2327,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":195555,"byte_end":195570,"line_start":2336,"line_end":2336,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":195830,"byte_end":195845,"line_start":2346,"line_end":2346,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":196069,"byte_end":196084,"line_start":2356,"line_end":2356,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":472},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":199506,"byte_end":199521,"line_start":2455,"line_end":2455,"column_start":63,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":200094,"byte_end":200109,"line_start":2475,"line_end":2475,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":200610,"byte_end":200625,"line_start":2498,"line_end":2498,"column_start":16,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":200877,"byte_end":200893,"line_start":2506,"line_end":2506,"column_start":37,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":201424,"byte_end":201438,"line_start":2525,"line_end":2525,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":201701,"byte_end":201715,"line_start":2537,"line_end":2537,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":208169,"byte_end":208176,"line_start":2663,"line_end":2663,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":208339,"byte_end":208346,"line_start":2672,"line_end":2672,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":210148,"byte_end":210160,"line_start":2724,"line_end":2724,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":222024,"byte_end":222044,"line_start":3023,"line_end":3023,"column_start":17,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":230161,"byte_end":230185,"line_start":3235,"line_end":3235,"column_start":21,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":230767,"byte_end":230791,"line_start":3254,"line_end":3254,"column_start":61,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":231841,"byte_end":231848,"line_start":3292,"line_end":3292,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":231947,"byte_end":231954,"line_start":3299,"line_end":3299,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":232103,"byte_end":232110,"line_start":3308,"line_end":3308,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":538}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":372239,"byte_end":372244,"line_start":56,"line_end":56,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376055,"byte_end":376060,"line_start":137,"line_end":137,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":390000,"byte_end":390004,"line_start":517,"line_end":517,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":395616,"byte_end":395633,"line_start":668,"line_end":668,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":396725,"byte_end":396735,"line_start":698,"line_end":698,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":668}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":397818,"byte_end":397827,"line_start":730,"line_end":730,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":397933,"byte_end":397942,"line_start":736,"line_end":736,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":398320,"byte_end":398329,"line_start":747,"line_end":747,"column_start":57,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":400810,"byte_end":400821,"line_start":23,"line_end":23,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":403645,"byte_end":403656,"line_start":108,"line_end":108,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":405563,"byte_end":405574,"line_start":167,"line_end":167,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":405778,"byte_end":405789,"line_start":177,"line_end":177,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":726},{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":405988,"byte_end":405999,"line_start":187,"line_end":187,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":731},{"krate":0,"index":732}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":406182,"byte_end":406193,"line_start":197,"line_end":197,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":406337,"byte_end":406348,"line_start":206,"line_end":206,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":413375,"byte_end":413387,"line_start":129,"line_end":129,"column_start":62,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":413656,"byte_end":413668,"line_start":140,"line_end":140,"column_start":24,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":414765,"byte_end":414773,"line_start":169,"line_end":169,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":414861,"byte_end":414869,"line_start":171,"line_end":171,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":414941,"byte_end":414949,"line_start":173,"line_end":173,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":803}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":416136,"byte_end":416148,"line_start":222,"line_end":222,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":416934,"byte_end":416946,"line_start":249,"line_end":249,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":419362,"byte_end":419374,"line_start":328,"line_end":328,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":818},{"krate":0,"index":819}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":419618,"byte_end":419630,"line_start":339,"line_end":339,"column_start":45,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":823},{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":419869,"byte_end":419881,"line_start":350,"line_end":350,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":828},{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":420092,"byte_end":420104,"line_start":361,"line_end":361,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":442375,"byte_end":442386,"line_start":23,"line_end":23,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443215,"byte_end":443226,"line_start":46,"line_end":46,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443700,"byte_end":443711,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":987}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":444543,"byte_end":444554,"line_start":85,"line_end":85,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":993},{"krate":0,"index":994}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":444718,"byte_end":444729,"line_start":95,"line_end":95,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":997}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":445171,"byte_end":445184,"line_start":114,"line_end":114,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1001},{"krate":0,"index":1002}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":447899,"byte_end":447911,"line_start":192,"line_end":192,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1012},{"krate":0,"index":1014},{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":450918,"byte_end":450928,"line_start":299,"line_end":299,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1022}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":451831,"byte_end":451841,"line_start":330,"line_end":330,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1024}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":451960,"byte_end":451970,"line_start":336,"line_end":336,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":452069,"byte_end":452079,"line_start":342,"line_end":342,"column_start":13,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":452099,"byte_end":452109,"line_start":344,"line_end":344,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1029},{"krate":0,"index":1030}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":452398,"byte_end":452408,"line_start":354,"line_end":354,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1032}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":452707,"byte_end":452717,"line_start":367,"line_end":367,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1035}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":453094,"byte_end":453116,"line_start":382,"line_end":382,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1041},{"krate":0,"index":1043},{"krate":0,"index":1045}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":474415,"byte_end":474426,"line_start":28,"line_end":28,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":475038,"byte_end":475049,"line_start":54,"line_end":54,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1076}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":475194,"byte_end":475205,"line_start":60,"line_end":60,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1079}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":475654,"byte_end":475666,"line_start":76,"line_end":76,"column_start":37,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1086}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479186,"byte_end":479198,"line_start":175,"line_end":175,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1090}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480011,"byte_end":480023,"line_start":199,"line_end":199,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1093}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480702,"byte_end":480714,"line_start":219,"line_end":219,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1096},{"krate":0,"index":1097}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480876,"byte_end":480888,"line_start":229,"line_end":229,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1100}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":481290,"byte_end":481305,"line_start":242,"line_end":242,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1103}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":481894,"byte_end":481909,"line_start":255,"line_end":255,"column_start":57,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1108}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":490215,"byte_end":490224,"line_start":21,"line_end":21,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1137}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491033,"byte_end":491042,"line_start":44,"line_end":44,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1140}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":492681,"byte_end":492690,"line_start":84,"line_end":84,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1143}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":493514,"byte_end":493523,"line_start":108,"line_end":108,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1149},{"krate":0,"index":1150}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":493683,"byte_end":493692,"line_start":118,"line_end":118,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1153}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":494599,"byte_end":494620,"line_start":142,"line_end":142,"column_start":44,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1165},{"krate":0,"index":1166}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":496315,"byte_end":496323,"line_start":195,"line_end":195,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1191},{"krate":0,"index":1192}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":505034,"byte_end":505049,"line_start":405,"line_end":405,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1198}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":509699,"byte_end":509714,"line_start":523,"line_end":523,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1203}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":512873,"byte_end":512889,"line_start":589,"line_end":589,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1208}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":513187,"byte_end":513203,"line_start":598,"line_end":598,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1211}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":514914,"byte_end":514921,"line_start":652,"line_end":652,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1214},{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1234},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1239},{"krate":0,"index":1241}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":530132,"byte_end":530149,"line_start":1082,"line_end":1082,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1253},{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1258},{"krate":0,"index":1259},{"krate":0,"index":1260},{"krate":0,"index":1261},{"krate":0,"index":1262},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1272},{"krate":0,"index":1274},{"krate":0,"index":1276},{"krate":0,"index":1277},{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1280}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":542142,"byte_end":542163,"line_start":1444,"line_end":1444,"column_start":17,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1289},{"krate":0,"index":1290},{"krate":0,"index":1291}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":545454,"byte_end":545473,"line_start":1537,"line_end":1537,"column_start":17,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1298},{"krate":0,"index":1299}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":547048,"byte_end":547057,"line_start":1590,"line_end":1590,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1304},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311},{"krate":0,"index":1312},{"krate":0,"index":1313}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":550342,"byte_end":550357,"line_start":1688,"line_end":1688,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1316}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":597834,"byte_end":597842,"line_start":18,"line_end":18,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1353}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":598628,"byte_end":598636,"line_start":41,"line_end":41,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1356},{"krate":0,"index":1357}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":598784,"byte_end":598792,"line_start":51,"line_end":51,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1360}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599080,"byte_end":599093,"line_start":64,"line_end":64,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1364}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599919,"byte_end":599932,"line_start":87,"line_end":87,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1367},{"krate":0,"index":1368}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":600085,"byte_end":600098,"line_start":97,"line_end":97,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1371}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":600308,"byte_end":600322,"line_start":109,"line_end":109,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1373}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":600586,"byte_end":600600,"line_start":122,"line_end":122,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1375}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":601894,"byte_end":601907,"line_start":168,"line_end":168,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1380}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602233,"byte_end":602246,"line_start":179,"line_end":179,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1383}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":603189,"byte_end":603202,"line_start":206,"line_end":206,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1391},{"krate":0,"index":1393}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":608411,"byte_end":608426,"line_start":378,"line_end":378,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1399}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":611308,"byte_end":611322,"line_start":440,"line_end":440,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1402},{"krate":0,"index":1403}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":612120,"byte_end":612134,"line_start":468,"line_end":468,"column_start":57,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":612781,"byte_end":612792,"line_start":490,"line_end":490,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1411},{"krate":0,"index":1412},{"krate":0,"index":1413}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":615944,"byte_end":615955,"line_start":581,"line_end":581,"column_start":57,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/lookup.rs","byte_start":646178,"byte_end":646189,"line_start":41,"line_end":41,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1441}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/lookup.rs","byte_start":646409,"byte_end":646420,"line_start":54,"line_end":54,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1445},{"krate":0,"index":1446}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/lookup.rs","byte_start":646986,"byte_end":647001,"line_start":81,"line_end":81,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1450}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/lookup.rs","byte_start":649295,"byte_end":649309,"line_start":155,"line_end":155,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1457},{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1460}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":661090,"byte_end":661098,"line_start":302,"line_end":302,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1481}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":663062,"byte_end":663071,"line_start":360,"line_end":360,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1489}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684331,"byte_end":684341,"line_start":865,"line_end":865,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1492},{"krate":0,"index":1493}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":685675,"byte_end":685688,"line_start":905,"line_end":905,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1496},{"krate":0,"index":1497}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":688979,"byte_end":688989,"line_start":998,"line_end":998,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1500},{"krate":0,"index":1501},{"krate":0,"index":1502},{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1511},{"krate":0,"index":1512},{"krate":0,"index":1513},{"krate":0,"index":1514},{"krate":0,"index":1515},{"krate":0,"index":1516},{"krate":0,"index":1517},{"krate":0,"index":1518},{"krate":0,"index":1519},{"krate":0,"index":1520},{"krate":0,"index":1521}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":787743,"byte_end":787756,"line_start":14,"line_end":14,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1541},{"krate":0,"index":1542},{"krate":0,"index":1543}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":788347,"byte_end":788360,"line_start":33,"line_end":33,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1546}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":788884,"byte_end":788897,"line_start":52,"line_end":52,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1550}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789736,"byte_end":789749,"line_start":76,"line_end":76,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1553}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":790449,"byte_end":790462,"line_start":97,"line_end":97,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1556},{"krate":0,"index":1557}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":790625,"byte_end":790638,"line_start":107,"line_end":107,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1560}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":791067,"byte_end":791084,"line_start":120,"line_end":120,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1563}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":791680,"byte_end":791697,"line_start":134,"line_end":134,"column_start":57,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":1566},{"krate":0,"index":1567},{"krate":0,"index":1568}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":792344,"byte_end":792357,"line_start":14,"line_end":14,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1588},{"krate":0,"index":1589},{"krate":0,"index":1590}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":792984,"byte_end":792997,"line_start":33,"line_end":33,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1593}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":793517,"byte_end":793530,"line_start":52,"line_end":52,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1597}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794353,"byte_end":794366,"line_start":76,"line_end":76,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1600}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":795066,"byte_end":795079,"line_start":97,"line_end":97,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1603},{"krate":0,"index":1604}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":795242,"byte_end":795255,"line_start":107,"line_end":107,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1607}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":795684,"byte_end":795701,"line_start":120,"line_end":120,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1610}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":796297,"byte_end":796314,"line_start":134,"line_end":134,"column_start":57,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":1613},{"krate":0,"index":1614},{"krate":0,"index":1615}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":796995,"byte_end":797006,"line_start":17,"line_end":17,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1641}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":797816,"byte_end":797827,"line_start":40,"line_end":40,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1644},{"krate":0,"index":1645}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":797978,"byte_end":797989,"line_start":50,"line_end":50,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1648}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798272,"byte_end":798285,"line_start":63,"line_end":63,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1652}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":799123,"byte_end":799136,"line_start":87,"line_end":87,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1655},{"krate":0,"index":1656}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":799289,"byte_end":799302,"line_start":97,"line_end":97,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1659}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":799512,"byte_end":799526,"line_start":109,"line_end":109,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1661}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":799790,"byte_end":799804,"line_start":122,"line_end":122,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1663}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801104,"byte_end":801114,"line_start":168,"line_end":168,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1668}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801443,"byte_end":801453,"line_start":179,"line_end":179,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1671}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":802390,"byte_end":802400,"line_start":206,"line_end":206,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1677},{"krate":0,"index":1678},{"krate":0,"index":1679},{"krate":0,"index":1681}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":807076,"byte_end":807091,"line_start":358,"line_end":358,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1685}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":809480,"byte_end":809494,"line_start":409,"line_end":409,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1689},{"krate":0,"index":1690}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":810293,"byte_end":810307,"line_start":437,"line_end":437,"column_start":57,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1693},{"krate":0,"index":1694},{"krate":0,"index":1695}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":810954,"byte_end":810965,"line_start":459,"line_end":459,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1698},{"krate":0,"index":1699},{"krate":0,"index":1700}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":813522,"byte_end":813533,"line_start":532,"line_end":532,"column_start":57,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1703},{"krate":0,"index":1704},{"krate":0,"index":1705}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":813994,"byte_end":814002,"line_start":551,"line_end":551,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1707},{"krate":0,"index":1708},{"krate":0,"index":1709}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":815218,"byte_end":815223,"line_start":590,"line_end":590,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1712}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":838523,"byte_end":838531,"line_start":15,"line_end":15,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1732}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":839330,"byte_end":839338,"line_start":38,"line_end":38,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1735}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840105,"byte_end":840113,"line_start":58,"line_end":58,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1738}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840933,"byte_end":840941,"line_start":82,"line_end":82,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1744},{"krate":0,"index":1745}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":841099,"byte_end":841107,"line_start":92,"line_end":92,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1748}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":841369,"byte_end":841384,"line_start":104,"line_end":104,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1751}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":842740,"byte_end":842755,"line_start":136,"line_end":136,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1754}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":843586,"byte_end":843601,"line_start":160,"line_end":160,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1760},{"krate":0,"index":1761}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":843756,"byte_end":843771,"line_start":170,"line_end":170,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1764}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844062,"byte_end":844074,"line_start":183,"line_end":183,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1767}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844380,"byte_end":844392,"line_start":192,"line_end":192,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1770}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":845214,"byte_end":845226,"line_start":216,"line_end":216,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1776},{"krate":0,"index":1777}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":845378,"byte_end":845390,"line_start":226,"line_end":226,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1780}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":847828,"byte_end":847844,"line_start":21,"line_end":21,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1831}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":848488,"byte_end":848503,"line_start":40,"line_end":40,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1835}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":849321,"byte_end":849331,"line_start":63,"line_end":63,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1839},{"krate":0,"index":1841}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850261,"byte_end":850270,"line_start":90,"line_end":90,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1846}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851079,"byte_end":851088,"line_start":113,"line_end":113,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1849},{"krate":0,"index":1850}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852346,"byte_end":852355,"line_start":152,"line_end":152,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1853}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":853179,"byte_end":853188,"line_start":176,"line_end":176,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1859},{"krate":0,"index":1860}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":853348,"byte_end":853357,"line_start":186,"line_end":186,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1863}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":853789,"byte_end":853815,"line_start":202,"line_end":202,"column_start":17,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1866}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":854528,"byte_end":854554,"line_start":224,"line_end":224,"column_start":57,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":1869},{"krate":0,"index":1870},{"krate":0,"index":1871}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":855099,"byte_end":855120,"line_start":244,"line_end":244,"column_start":17,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1875},{"krate":0,"index":1876},{"krate":0,"index":1877},{"krate":0,"index":1878},{"krate":0,"index":1879},{"krate":0,"index":1880},{"krate":0,"index":1881},{"krate":0,"index":1882},{"krate":0,"index":1883},{"krate":0,"index":1884},{"krate":0,"index":1885},{"krate":0,"index":1886},{"krate":0,"index":1887},{"krate":0,"index":1890},{"krate":0,"index":1893},{"krate":0,"index":1896},{"krate":0,"index":1899},{"krate":0,"index":1902},{"krate":0,"index":1903}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":862897,"byte_end":862907,"line_start":488,"line_end":488,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1913},{"krate":0,"index":1914}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":863988,"byte_end":863998,"line_start":526,"line_end":526,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1918},{"krate":0,"index":1919},{"krate":0,"index":1920},{"krate":0,"index":1921},{"krate":0,"index":1922},{"krate":0,"index":1923},{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1926},{"krate":0,"index":1927},{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1930},{"krate":0,"index":1933},{"krate":0,"index":1936},{"krate":0,"index":1939},{"krate":0,"index":1942},{"krate":0,"index":1945}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":871619,"byte_end":871644,"line_start":752,"line_end":752,"column_start":33,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1953},{"krate":0,"index":1954},{"krate":0,"index":1955},{"krate":0,"index":1956},{"krate":0,"index":1957},{"krate":0,"index":1958},{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1964},{"krate":0,"index":1967},{"krate":0,"index":1968},{"krate":0,"index":1969}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":887204,"byte_end":887213,"line_start":1205,"line_end":1205,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1972},{"krate":0,"index":1973},{"krate":0,"index":1974},{"krate":0,"index":1991},{"krate":0,"index":1992},{"krate":0,"index":1993},{"krate":0,"index":1994},{"krate":0,"index":1995},{"krate":0,"index":1996},{"krate":0,"index":1997},{"krate":0,"index":1998}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":909159,"byte_end":909173,"line_start":1878,"line_end":1878,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2002},{"krate":0,"index":2003},{"krate":0,"index":2004},{"krate":0,"index":2005},{"krate":0,"index":2006},{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2009}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":926158,"byte_end":926167,"line_start":2290,"line_end":2290,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2028}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":927752,"byte_end":927761,"line_start":2332,"line_end":2332,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2034},{"krate":0,"index":2035},{"krate":0,"index":2036}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930473,"byte_end":930483,"line_start":2407,"line_end":2407,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2041},{"krate":0,"index":2042},{"krate":0,"index":2043},{"krate":0,"index":2044},{"krate":0,"index":2045}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":933209,"byte_end":933222,"line_start":2483,"line_end":2483,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2050},{"krate":0,"index":2051},{"krate":0,"index":2052},{"krate":0,"index":2053}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":946219,"byte_end":946230,"line_start":2869,"line_end":2869,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2058},{"krate":0,"index":2059},{"krate":0,"index":2061}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":950407,"byte_end":950422,"line_start":2994,"line_end":2994,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2067},{"krate":0,"index":2068},{"krate":0,"index":2069}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":951632,"byte_end":951647,"line_start":3030,"line_end":3030,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2075},{"krate":0,"index":2076}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953047,"byte_end":953057,"line_start":3075,"line_end":3075,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2085}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953868,"byte_end":953878,"line_start":3098,"line_end":3098,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2088}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":954706,"byte_end":954716,"line_start":3122,"line_end":3122,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2094},{"krate":0,"index":2095}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":954878,"byte_end":954888,"line_start":3132,"line_end":3132,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2098}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955029,"byte_end":955039,"line_start":3140,"line_end":3140,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2101}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":956200,"byte_end":956219,"line_start":3177,"line_end":3177,"column_start":17,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2104}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":956924,"byte_end":956943,"line_start":3199,"line_end":3199,"column_start":57,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":2107},{"krate":0,"index":2108},{"krate":0,"index":2109}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":957538,"byte_end":957552,"line_start":3221,"line_end":3221,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2113},{"krate":0,"index":2114},{"krate":0,"index":2115},{"krate":0,"index":2116},{"krate":0,"index":2117},{"krate":0,"index":2118},{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":2121},{"krate":0,"index":2122},{"krate":0,"index":2123},{"krate":0,"index":2124},{"krate":0,"index":2125},{"krate":0,"index":2126},{"krate":0,"index":2127},{"krate":0,"index":2130},{"krate":0,"index":2133},{"krate":0,"index":2136},{"krate":0,"index":2139}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059893,"byte_end":1059902,"line_start":80,"line_end":80,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2155},{"krate":0,"index":2156},{"krate":0,"index":2157}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1062678,"byte_end":1062683,"line_start":151,"line_end":151,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2160},{"krate":0,"index":2161},{"krate":0,"index":2163},{"krate":0,"index":2164},{"krate":0,"index":2165},{"krate":0,"index":2166},{"krate":0,"index":2167},{"krate":0,"index":2168},{"krate":0,"index":2169},{"krate":0,"index":2170},{"krate":0,"index":2171},{"krate":0,"index":2172},{"krate":0,"index":2173},{"krate":0,"index":2174},{"krate":0,"index":2175},{"krate":0,"index":2176},{"krate":0,"index":2177},{"krate":0,"index":2178},{"krate":0,"index":2179},{"krate":0,"index":2180},{"krate":0,"index":2181},{"krate":0,"index":2182},{"krate":0,"index":2183},{"krate":0,"index":2184},{"krate":0,"index":2185},{"krate":0,"index":2186},{"krate":0,"index":2187},{"krate":0,"index":2188},{"krate":0,"index":2189}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94638,"byte_end":94643,"line_start":390,"line_end":390,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2195}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94804,"byte_end":94809,"line_start":397,"line_end":397,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2197}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":102905,"byte_end":102910,"line_start":537,"line_end":537,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":102964,"byte_end":102969,"line_start":540,"line_end":540,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2200}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":104565,"byte_end":104573,"line_start":600,"line_end":600,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2215}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/endian_vec.rs","byte_start":1145676,"byte_end":1145685,"line_start":19,"line_end":19,"column_start":14,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2232},{"krate":0,"index":2233},{"krate":0,"index":2234},{"krate":0,"index":2235}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/endian_vec.rs","byte_start":1146386,"byte_end":1146395,"line_start":49,"line_end":49,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2238},{"krate":0,"index":2239},{"krate":0,"index":2240},{"krate":0,"index":2241},{"krate":0,"index":2242}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1168758,"byte_end":1168766,"line_start":100,"line_end":100,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2317}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1169655,"byte_end":1169663,"line_start":122,"line_end":122,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2320},{"krate":0,"index":2324}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/abbrev.rs","byte_start":1171773,"byte_end":1171790,"line_start":19,"line_end":19,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2346},{"krate":0,"index":2347}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/abbrev.rs","byte_start":1172731,"byte_end":1172743,"line_start":47,"line_end":47,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2350},{"krate":0,"index":2351}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/abbrev.rs","byte_start":1173803,"byte_end":1173825,"line_start":87,"line_end":87,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2354},{"krate":0,"index":2355}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1178171,"byte_end":1178181,"line_start":30,"line_end":30,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2381},{"krate":0,"index":2382},{"krate":0,"index":2383},{"krate":0,"index":2384},{"krate":0,"index":2385},{"krate":0,"index":2387},{"krate":0,"index":2389}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1181611,"byte_end":1181633,"line_start":131,"line_end":131,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2392},{"krate":0,"index":2393},{"krate":0,"index":2394},{"krate":0,"index":2395}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1186617,"byte_end":1186638,"line_start":286,"line_end":286,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2398},{"krate":0,"index":2399},{"krate":0,"index":2400}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1191220,"byte_end":1191240,"line_start":415,"line_end":415,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2403}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1198487,"byte_end":1198497,"line_start":594,"line_end":594,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2423}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1200756,"byte_end":1200778,"line_start":645,"line_end":645,"column_start":10,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2427}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1202821,"byte_end":1202842,"line_start":696,"line_end":696,"column_start":10,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2431}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1204567,"byte_end":1204587,"line_start":741,"line_end":741,"column_start":10,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2435}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1218169,"byte_end":1218174,"line_start":29,"line_end":29,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2453},{"krate":0,"index":2454}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1219404,"byte_end":1219413,"line_start":67,"line_end":67,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2457},{"krate":0,"index":2458}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1220931,"byte_end":1220936,"line_start":113,"line_end":113,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2469}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224791,"byte_end":1224802,"line_start":77,"line_end":77,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2501},{"krate":0,"index":2502},{"krate":0,"index":2503},{"krate":0,"index":2504},{"krate":0,"index":2505},{"krate":0,"index":2506},{"krate":0,"index":2507},{"krate":0,"index":2508},{"krate":0,"index":2509},{"krate":0,"index":2510},{"krate":0,"index":2511},{"krate":0,"index":2512},{"krate":0,"index":2514},{"krate":0,"index":2516},{"krate":0,"index":2518},{"krate":0,"index":2519},{"krate":0,"index":2520},{"krate":0,"index":2521},{"krate":0,"index":2522},{"krate":0,"index":2523},{"krate":0,"index":2524},{"krate":0,"index":2525}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1247014,"byte_end":1247021,"line_start":705,"line_end":705,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2529}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1248173,"byte_end":1248188,"line_start":755,"line_end":755,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2531}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1251034,"byte_end":1251044,"line_start":826,"line_end":826,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2536},{"krate":0,"index":2538},{"krate":0,"index":2539}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1253524,"byte_end":1253530,"line_start":905,"line_end":905,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2543},{"krate":0,"index":2544},{"krate":0,"index":2545},{"krate":0,"index":2546},{"krate":0,"index":2547}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1255214,"byte_end":1255225,"line_start":969,"line_end":969,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2559}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1263113,"byte_end":1263123,"line_start":1127,"line_end":1127,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2562}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1299298,"byte_end":1299315,"line_start":39,"line_end":39,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2587},{"krate":0,"index":2588},{"krate":0,"index":2590},{"krate":0,"index":2592}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1308957,"byte_end":1308969,"line_start":304,"line_end":304,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2606}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1320715,"byte_end":1320725,"line_start":17,"line_end":17,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2633},{"krate":0,"index":2634},{"krate":0,"index":2635},{"krate":0,"index":2636},{"krate":0,"index":2637},{"krate":0,"index":2638},{"krate":0,"index":2639},{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":2642},{"krate":0,"index":2643},{"krate":0,"index":2644},{"krate":0,"index":2645},{"krate":0,"index":2646},{"krate":0,"index":2647},{"krate":0,"index":2648},{"krate":0,"index":2649},{"krate":0,"index":2650},{"krate":0,"index":2651},{"krate":0,"index":2652},{"krate":0,"index":2653},{"krate":0,"index":2654},{"krate":0,"index":2655},{"krate":0,"index":2656},{"krate":0,"index":2657},{"krate":0,"index":2658},{"krate":0,"index":2659},{"krate":0,"index":2660},{"krate":0,"index":2661},{"krate":0,"index":2662},{"krate":0,"index":2663},{"krate":0,"index":2664},{"krate":0,"index":2665},{"krate":0,"index":2666},{"krate":0,"index":2667}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1337314,"byte_end":1337323,"line_start":477,"line_end":477,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2670},{"krate":0,"index":2672}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1350318,"byte_end":1350328,"line_start":798,"line_end":798,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2688}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1389775,"byte_end":1389789,"line_start":36,"line_end":36,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2714},{"krate":0,"index":2715},{"krate":0,"index":2717},{"krate":0,"index":2719}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1396590,"byte_end":1396599,"line_start":220,"line_end":220,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2731}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412297,"byte_end":1412306,"line_start":29,"line_end":29,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2801},{"krate":0,"index":2802},{"krate":0,"index":2803},{"krate":0,"index":2804},{"krate":0,"index":2805},{"krate":0,"index":2806}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1416269,"byte_end":1416273,"line_start":169,"line_end":169,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":2811},{"krate":0,"index":2812},{"krate":0,"index":2813},{"krate":0,"index":2814},{"krate":0,"index":2815},{"krate":0,"index":2816},{"krate":0,"index":2817},{"krate":0,"index":2818},{"krate":0,"index":2819},{"krate":0,"index":2820},{"krate":0,"index":2821},{"krate":0,"index":2822},{"krate":0,"index":2824}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1424171,"byte_end":1424196,"line_start":427,"line_end":427,"column_start":6,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2826},{"krate":0,"index":2827},{"krate":0,"index":2828},{"krate":0,"index":2829},{"krate":0,"index":2830},{"krate":0,"index":2831},{"krate":0,"index":2832},{"krate":0,"index":2833},{"krate":0,"index":2834},{"krate":0,"index":2837},{"krate":0,"index":2840},{"krate":0,"index":2842},{"krate":0,"index":2844},{"krate":0,"index":2845},{"krate":0,"index":2846},{"krate":0,"index":2847},{"krate":0,"index":2848}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1431716,"byte_end":1431725,"line_start":681,"line_end":681,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2851},{"krate":0,"index":2852},{"krate":0,"index":2853},{"krate":0,"index":2854}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1438015,"byte_end":1438029,"line_start":869,"line_end":869,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2856},{"krate":0,"index":2857},{"krate":0,"index":2859}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1459294,"byte_end":1459310,"line_start":1379,"line_end":1379,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2863},{"krate":0,"index":2864}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1460223,"byte_end":1460234,"line_start":1409,"line_end":1409,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2866},{"krate":0,"index":2867},{"krate":0,"index":2868}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1461332,"byte_end":1461343,"line_start":1449,"line_end":1449,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2870}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1463081,"byte_end":1463090,"line_start":1502,"line_end":1502,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2907}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1465144,"byte_end":1465148,"line_start":1552,"line_end":1552,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2910},{"krate":0,"index":2912}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1468966,"byte_end":1468991,"line_start":1658,"line_end":1658,"column_start":10,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2915},{"krate":0,"index":2917}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1471317,"byte_end":1471326,"line_start":1715,"line_end":1715,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2920}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Inherent","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1471810,"byte_end":1471824,"line_start":1729,"line_end":1729,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2924}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1136451,"byte_end":1136456,"line_start":203,"line_end":203,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2928}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1138993,"byte_end":1138998,"line_start":258,"line_end":258,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1140402,"byte_end":1140408,"line_start":305,"line_end":305,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2933}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1142536,"byte_end":1142548,"line_start":361,"line_end":361,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2941}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1144980,"byte_end":1144992,"line_start":410,"line_end":410,"column_start":27,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1145028,"byte_end":1145040,"line_start":412,"line_end":412,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2945}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1759,"byte_end":1768,"line_start":56,"line_end":56,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":29}},{"kind":"Mod","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1942,"byte_end":1948,"line_start":63,"line_end":63,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":85}},{"kind":"Mod","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":1984,"byte_end":1988,"line_start":66,"line_end":66,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":116}},{"kind":"Mod","span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/lib.rs","byte_start":2099,"byte_end":2104,"line_start":72,"line_end":72,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2217}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":2352,"byte_end":2358,"line_start":10,"line_end":10,"column_start":6,"column_end":12},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2949},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":4101,"byte_end":4113,"line_start":70,"line_end":70,"column_start":18,"column_end":30},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2989},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8041,"byte_end":8057,"line_start":172,"line_end":172,"column_start":21,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":3516},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":8302,"byte_end":8315,"line_start":183,"line_end":183,"column_start":21,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":3543},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/common.rs","byte_start":9967,"byte_end":9976,"line_start":244,"line_end":244,"column_start":6,"column_end":15},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":3611},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":41236,"byte_end":41242,"line_start":836,"line_end":836,"column_start":6,"column_end":12},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":4802},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/constants.rs","byte_start":53083,"byte_end":53089,"line_start":1289,"line_end":1289,"column_start":6,"column_end":12},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":5520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":55912,"byte_end":55917,"line_start":7,"line_end":7,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":6831},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":55920,"byte_end":55927,"line_start":7,"line_end":7,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":2059},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":55930,"byte_end":55935,"line_start":7,"line_end":7,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":1,"index":1762},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":55938,"byte_end":55942,"line_start":7,"line_end":7,"column_start":48,"column_end":52},"kind":"SuperTrait","from":{"krate":1,"index":2081},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":55945,"byte_end":55954,"line_start":7,"line_end":7,"column_start":55,"column_end":64},"kind":"SuperTrait","from":{"krate":1,"index":1790},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":55957,"byte_end":55959,"line_start":7,"line_end":7,"column_start":67,"column_end":69},"kind":"SuperTrait","from":{"krate":1,"index":1795},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":60231,"byte_end":60244,"line_start":183,"line_end":183,"column_start":18,"column_end":31},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":5546},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":60510,"byte_end":60523,"line_start":197,"line_end":197,"column_start":20,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":5546},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":60748,"byte_end":60760,"line_start":208,"line_end":208,"column_start":18,"column_end":30},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":5565},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":60861,"byte_end":60873,"line_start":215,"line_end":215,"column_start":20,"column_end":32},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":5565},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":61068,"byte_end":61077,"line_start":226,"line_end":226,"column_start":18,"column_end":27},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":5581},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/endianity.rs","byte_start":61172,"byte_end":61181,"line_start":233,"line_end":233,"column_start":20,"column_end":29},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":5581},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":110290,"byte_end":110299,"line_start":10,"line_end":10,"column_start":17,"column_end":26},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":5597},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":111597,"byte_end":111606,"line_start":43,"line_end":43,"column_start":9,"column_end":18},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":5597},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":112419,"byte_end":112428,"line_start":67,"line_end":67,"column_start":24,"column_end":33},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":5597},"to":{"krate":0,"index":2203}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/addr.rs","byte_start":112577,"byte_end":112586,"line_start":77,"line_end":77,"column_start":21,"column_end":30},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":5597},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":115696,"byte_end":115706,"line_start":35,"line_end":35,"column_start":17,"column_end":27},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":5611},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":116266,"byte_end":116276,"line_start":53,"line_end":53,"column_start":22,"column_end":32},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":5611},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":117106,"byte_end":117116,"line_start":77,"line_end":77,"column_start":32,"column_end":42},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":5611},"to":{"krate":0,"index":2203}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":117274,"byte_end":117284,"line_start":87,"line_end":87,"column_start":29,"column_end":39},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":5611},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":118157,"byte_end":118167,"line_start":117,"line_end":117,"column_start":22,"column_end":32},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":5635},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":118464,"byte_end":118474,"line_start":127,"line_end":127,"column_start":17,"column_end":27},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":5635},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":120213,"byte_end":120223,"line_start":176,"line_end":176,"column_start":32,"column_end":42},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":5635},"to":{"krate":0,"index":2203}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":120375,"byte_end":120385,"line_start":186,"line_end":186,"column_start":29,"column_end":39},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":5635},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":120478,"byte_end":120494,"line_start":192,"line_end":192,"column_start":17,"column_end":33},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":5658},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":121807,"byte_end":121817,"line_start":223,"line_end":223,"column_start":26,"column_end":36},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":5672},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128174,"byte_end":128181,"line_start":408,"line_end":408,"column_start":17,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":5684},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":128423,"byte_end":128430,"line_start":417,"line_end":417,"column_start":22,"column_end":29},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":5684},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":129264,"byte_end":129271,"line_start":441,"line_end":441,"column_start":32,"column_end":39},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":5684},"to":{"krate":0,"index":2203}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":129426,"byte_end":129433,"line_start":451,"line_end":451,"column_start":29,"column_end":36},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":5684},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130049,"byte_end":130053,"line_start":474,"line_end":474,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":1,"index":2081},"to":{"krate":0,"index":246}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130056,"byte_end":130061,"line_start":474,"line_end":474,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":6831},"to":{"krate":0,"index":246}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130064,"byte_end":130066,"line_start":474,"line_end":474,"column_start":51,"column_end":53},"kind":"SuperTrait","from":{"krate":1,"index":1795},"to":{"krate":0,"index":246}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130069,"byte_end":130073,"line_start":474,"line_end":474,"column_start":56,"column_end":60},"kind":"SuperTrait","from":{"krate":1,"index":1989},"to":{"krate":0,"index":246}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130210,"byte_end":130226,"line_start":482,"line_end":482,"column_start":29,"column_end":45},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":3516},"to":{"krate":0,"index":246}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":130350,"byte_end":130363,"line_start":492,"line_end":492,"column_start":29,"column_end":42},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":3543},"to":{"krate":0,"index":246}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":132310,"byte_end":132315,"line_start":542,"line_end":542,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":1762},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":132318,"byte_end":132323,"line_start":542,"line_end":542,"column_start":45,"column_end":50},"kind":"SuperTrait","from":{"krate":1,"index":6831},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":132326,"byte_end":132347,"line_start":542,"line_end":542,"column_start":53,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":255},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":137976,"byte_end":137986,"line_start":694,"line_end":694,"column_start":46,"column_end":56},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":5611},"to":{"krate":0,"index":255}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":138929,"byte_end":138939,"line_start":734,"line_end":734,"column_start":38,"column_end":48},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":5611},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":139040,"byte_end":139047,"line_start":738,"line_end":738,"column_start":46,"column_end":53},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":5684},"to":{"krate":0,"index":255}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":139856,"byte_end":139863,"line_start":774,"line_end":774,"column_start":38,"column_end":45},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":5684},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":142011,"byte_end":142024,"line_start":832,"line_end":832,"column_start":6,"column_end":19},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":5723},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":144719,"byte_end":144733,"line_start":914,"line_end":914,"column_start":26,"column_end":40},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":5756},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":145452,"byte_end":145466,"line_start":940,"line_end":940,"column_start":66,"column_end":80},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":5756},"to":{"krate":23,"index":41}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":150412,"byte_end":150424,"line_start":1063,"line_end":1063,"column_start":6,"column_end":18},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":5812},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":152957,"byte_end":152973,"line_start":1136,"line_end":1136,"column_start":6,"column_end":22},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":5831},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":156488,"byte_end":156510,"line_start":1221,"line_end":1221,"column_start":17,"column_end":39},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":5846},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":159084,"byte_end":159106,"line_start":1305,"line_end":1305,"column_start":17,"column_end":39},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":5846},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":163693,"byte_end":163721,"line_start":1444,"line_end":1444,"column_start":26,"column_end":54},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":5883},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":166529,"byte_end":166550,"line_start":1526,"line_end":1526,"column_start":17,"column_end":38},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":5923},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":170583,"byte_end":170604,"line_start":1647,"line_end":1647,"column_start":17,"column_end":38},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":5923},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":175046,"byte_end":175072,"line_start":1769,"line_end":1769,"column_start":17,"column_end":43},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":5958},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":175288,"byte_end":175314,"line_start":1776,"line_end":1776,"column_start":29,"column_end":55},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":5958},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":175538,"byte_end":175564,"line_start":1786,"line_end":1786,"column_start":17,"column_end":43},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":5958},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":177229,"byte_end":177242,"line_start":1832,"line_end":1832,"column_start":17,"column_end":30},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":5968},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":180336,"byte_end":180349,"line_start":1945,"line_end":1945,"column_start":43,"column_end":56},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":5968},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":183731,"byte_end":183742,"line_start":2024,"line_end":2024,"column_start":21,"column_end":32},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":5987},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":195124,"byte_end":195139,"line_start":2319,"line_end":2319,"column_start":35,"column_end":50},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":446},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":195352,"byte_end":195367,"line_start":2327,"line_end":2327,"column_start":29,"column_end":44},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":446},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":195555,"byte_end":195570,"line_start":2336,"line_end":2336,"column_start":35,"column_end":50},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":446},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":195830,"byte_end":195845,"line_start":2346,"line_end":2346,"column_start":26,"column_end":41},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":446},"to":{"krate":1,"index":2295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":196069,"byte_end":196084,"line_start":2356,"line_end":2356,"column_start":17,"column_end":32},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":446},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":199506,"byte_end":199521,"line_start":2455,"line_end":2455,"column_start":63,"column_end":78},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":446},"to":{"krate":1,"index":5438}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":200094,"byte_end":200109,"line_start":2475,"line_end":2475,"column_start":23,"column_end":38},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":446},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":200610,"byte_end":200625,"line_start":2498,"line_end":2498,"column_start":16,"column_end":31},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":446},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":200877,"byte_end":200893,"line_start":2506,"line_end":2506,"column_start":37,"column_end":53},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":6001},"to":{"krate":1,"index":5536}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":201424,"byte_end":201438,"line_start":2525,"line_end":2525,"column_start":29,"column_end":43},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":6014},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":201701,"byte_end":201715,"line_start":2537,"line_end":2537,"column_start":17,"column_end":31},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":6014},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":208169,"byte_end":208176,"line_start":2663,"line_end":2663,"column_start":29,"column_end":36},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":6038},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":208339,"byte_end":208346,"line_start":2672,"line_end":2672,"column_start":17,"column_end":24},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":6038},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":210148,"byte_end":210160,"line_start":2724,"line_end":2724,"column_start":17,"column_end":29},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":6063},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":222024,"byte_end":222044,"line_start":3023,"line_end":3023,"column_start":17,"column_end":37},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":6103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":230161,"byte_end":230185,"line_start":3235,"line_end":3235,"column_start":21,"column_end":45},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":6175},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":230767,"byte_end":230791,"line_start":3254,"line_end":3254,"column_start":61,"column_end":85},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":6175},"to":{"krate":23,"index":41}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":231841,"byte_end":231848,"line_start":3292,"line_end":3292,"column_start":18,"column_end":25},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":6189},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":231947,"byte_end":231954,"line_start":3299,"line_end":3299,"column_start":20,"column_end":27},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":6189},"to":{"krate":1,"index":1986}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/cfi.rs","byte_start":232103,"byte_end":232110,"line_start":3308,"line_end":3308,"column_start":6,"column_end":13},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":6189},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":372239,"byte_end":372244,"line_start":56,"line_end":56,"column_start":9,"column_end":14},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":6223},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":376055,"byte_end":376060,"line_start":137,"line_end":137,"column_start":17,"column_end":22},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":6223},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":390000,"byte_end":390004,"line_start":517,"line_end":517,"column_start":17,"column_end":21},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":6242},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":395616,"byte_end":395633,"line_start":668,"line_end":668,"column_start":23,"column_end":40},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":3570},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":396725,"byte_end":396735,"line_start":698,"line_end":698,"column_start":23,"column_end":33},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":7676},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":397818,"byte_end":397827,"line_start":730,"line_end":730,"column_start":29,"column_end":38},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":6260},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":397933,"byte_end":397942,"line_start":736,"line_end":736,"column_start":17,"column_end":26},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":6260},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/dwarf.rs","byte_start":398320,"byte_end":398329,"line_start":747,"line_end":747,"column_start":57,"column_end":66},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":6260},"to":{"krate":23,"index":41}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":400810,"byte_end":400821,"line_start":23,"line_end":23,"column_start":22,"column_end":33},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":6278},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":403645,"byte_end":403656,"line_start":108,"line_end":108,"column_start":22,"column_end":33},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":6278},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":405563,"byte_end":405574,"line_start":167,"line_end":167,"column_start":39,"column_end":50},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":6278},"to":{"krate":1,"index":2352}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":405778,"byte_end":405789,"line_start":177,"line_end":177,"column_start":50,"column_end":61},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":6278},"to":{"krate":1,"index":2352}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":405988,"byte_end":405999,"line_start":187,"line_end":187,"column_start":32,"column_end":43},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":6278},"to":{"krate":1,"index":2271}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":406182,"byte_end":406193,"line_start":197,"line_end":197,"column_start":45,"column_end":56},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":6278},"to":{"krate":1,"index":1986}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_slice.rs","byte_start":406337,"byte_end":406348,"line_start":206,"line_end":206,"column_start":33,"column_end":44},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":6278},"to":{"krate":0,"index":902}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":413375,"byte_end":413387,"line_start":129,"line_end":129,"column_start":62,"column_end":74},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":6318},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":413656,"byte_end":413668,"line_start":140,"line_end":140,"column_start":24,"column_end":36},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":6318},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":414765,"byte_end":414773,"line_start":169,"line_end":169,"column_start":25,"column_end":33},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":6339},"to":{"krate":1,"index":2071}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":414861,"byte_end":414869,"line_start":171,"line_end":171,"column_start":25,"column_end":33},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":6339},"to":{"krate":1,"index":2083}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":414941,"byte_end":414949,"line_start":173,"line_end":173,"column_start":9,"column_end":17},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":6339},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":416136,"byte_end":416148,"line_start":222,"line_end":222,"column_start":17,"column_end":29},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":6318},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":416934,"byte_end":416946,"line_start":249,"line_end":249,"column_start":17,"column_end":29},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":6318},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":419362,"byte_end":419374,"line_start":328,"line_end":328,"column_start":34,"column_end":46},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":6318},"to":{"krate":1,"index":2352}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":419618,"byte_end":419630,"line_start":339,"line_end":339,"column_start":45,"column_end":57},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":6318},"to":{"krate":1,"index":2352}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":419869,"byte_end":419881,"line_start":350,"line_end":350,"column_start":27,"column_end":39},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":6318},"to":{"krate":1,"index":2271}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/endian_reader.rs","byte_start":420092,"byte_end":420104,"line_start":361,"line_end":361,"column_start":28,"column_end":40},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":6318},"to":{"krate":0,"index":902}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428360,"byte_end":428365,"line_start":23,"line_end":23,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":6831},"to":{"krate":0,"index":866}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428368,"byte_end":428372,"line_start":23,"line_end":23,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":2081},"to":{"krate":0,"index":866}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428375,"byte_end":428377,"line_start":23,"line_end":23,"column_start":20,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":1795},"to":{"krate":0,"index":866}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428380,"byte_end":428383,"line_start":23,"line_end":23,"column_start":25,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1822},"to":{"krate":0,"index":866}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428386,"byte_end":428390,"line_start":23,"line_end":23,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":7019},"to":{"krate":0,"index":866}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428393,"byte_end":428396,"line_start":23,"line_end":23,"column_start":38,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":2136},"to":{"krate":0,"index":866}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428414,"byte_end":428423,"line_start":23,"line_end":23,"column_start":59,"column_end":68},"kind":"SuperTrait","from":{"krate":1,"index":2167},"to":{"krate":0,"index":866}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":428426,"byte_end":428429,"line_start":23,"line_end":23,"column_start":71,"column_end":74},"kind":"SuperTrait","from":{"krate":1,"index":2141},"to":{"krate":0,"index":866}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433309,"byte_end":433314,"line_start":207,"line_end":207,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":6831},"to":{"krate":0,"index":902}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/reader.rs","byte_start":433317,"byte_end":433322,"line_start":207,"line_end":207,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":1762},"to":{"krate":0,"index":902}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":442375,"byte_end":442386,"line_start":23,"line_end":23,"column_start":22,"column_end":33},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":6382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443215,"byte_end":443226,"line_start":46,"line_end":46,"column_start":17,"column_end":28},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":6382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":443700,"byte_end":443711,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":6382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":444543,"byte_end":444554,"line_start":85,"line_end":85,"column_start":24,"column_end":35},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":6382},"to":{"krate":0,"index":2203}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":444718,"byte_end":444729,"line_start":95,"line_end":95,"column_start":21,"column_end":32},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":6382},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":445171,"byte_end":445184,"line_start":114,"line_end":114,"column_start":6,"column_end":19},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":6396},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":447899,"byte_end":447911,"line_start":192,"line_end":192,"column_start":6,"column_end":18},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":6405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":450918,"byte_end":450928,"line_start":299,"line_end":299,"column_start":6,"column_end":16},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":6421},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":451831,"byte_end":451841,"line_start":330,"line_end":330,"column_start":16,"column_end":26},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":6421},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":451960,"byte_end":451970,"line_start":336,"line_end":336,"column_start":20,"column_end":30},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":6421},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":452069,"byte_end":452079,"line_start":342,"line_end":342,"column_start":13,"column_end":23},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":6421},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":452099,"byte_end":452109,"line_start":344,"line_end":344,"column_start":16,"column_end":26},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":6421},"to":{"krate":1,"index":2271}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":452398,"byte_end":452408,"line_start":354,"line_end":354,"column_start":47,"column_end":57},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":6421},"to":{"krate":1,"index":5438}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":452707,"byte_end":452717,"line_start":367,"line_end":367,"column_start":44,"column_end":54},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":6421},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/abbrev.rs","byte_start":453094,"byte_end":453116,"line_start":382,"line_end":382,"column_start":6,"column_end":28},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":6431},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":474415,"byte_end":474426,"line_start":28,"line_end":28,"column_start":15,"column_end":26},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":6470},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":475038,"byte_end":475049,"line_start":54,"line_end":54,"column_start":36,"column_end":47},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":6470},"to":{"krate":1,"index":1833}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":475194,"byte_end":475205,"line_start":60,"line_end":60,"column_start":29,"column_end":40},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":6470},"to":{"krate":1,"index":1822}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":475654,"byte_end":475666,"line_start":76,"line_end":76,"column_start":37,"column_end":49},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":6493},"to":{"krate":0,"index":1432}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":479186,"byte_end":479198,"line_start":175,"line_end":175,"column_start":22,"column_end":34},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":6502},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480011,"byte_end":480023,"line_start":199,"line_end":199,"column_start":17,"column_end":29},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":6502},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480702,"byte_end":480714,"line_start":219,"line_end":219,"column_start":32,"column_end":44},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":6502},"to":{"krate":0,"index":2203}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":480876,"byte_end":480888,"line_start":229,"line_end":229,"column_start":29,"column_end":41},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":6502},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":481290,"byte_end":481305,"line_start":242,"line_end":242,"column_start":17,"column_end":32},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":6512},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/aranges.rs","byte_start":481894,"byte_end":481909,"line_start":255,"line_end":255,"column_start":57,"column_end":72},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":6512},"to":{"krate":23,"index":41}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":490215,"byte_end":490224,"line_start":21,"line_end":21,"column_start":22,"column_end":31},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":6522},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":491033,"byte_end":491042,"line_start":44,"line_end":44,"column_start":17,"column_end":26},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":6522},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":492681,"byte_end":492690,"line_start":84,"line_end":84,"column_start":9,"column_end":18},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":6522},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":493514,"byte_end":493523,"line_start":108,"line_end":108,"column_start":24,"column_end":33},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":6522},"to":{"krate":0,"index":2203}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":493683,"byte_end":493692,"line_start":118,"line_end":118,"column_start":21,"column_end":30},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":6522},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":494599,"byte_end":494620,"line_start":142,"line_end":142,"column_start":44,"column_end":65},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":6752},"to":{"krate":0,"index":1157}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":496315,"byte_end":496323,"line_start":195,"line_end":195,"column_start":26,"column_end":34},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":6536},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":505034,"byte_end":505049,"line_start":405,"line_end":405,"column_start":17,"column_end":32},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":6553},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":509699,"byte_end":509714,"line_start":523,"line_end":523,"column_start":34,"column_end":49},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":6553},"to":{"krate":1,"index":6836}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":512873,"byte_end":512889,"line_start":589,"line_end":589,"column_start":17,"column_end":33},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":6641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":513187,"byte_end":513203,"line_start":598,"line_end":598,"column_start":17,"column_end":33},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":6641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":514914,"byte_end":514921,"line_start":652,"line_end":652,"column_start":6,"column_end":13},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":6650},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":530132,"byte_end":530149,"line_start":1082,"line_end":1082,"column_start":17,"column_end":34},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":6712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":542142,"byte_end":542163,"line_start":1444,"line_end":1444,"column_start":17,"column_end":38},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":6752},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":545454,"byte_end":545473,"line_start":1537,"line_end":1537,"column_start":17,"column_end":36},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":6779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":547048,"byte_end":547057,"line_start":1590,"line_end":1590,"column_start":17,"column_end":26},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":6806},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/line.rs","byte_start":550342,"byte_end":550357,"line_start":1688,"line_end":1688,"column_start":6,"column_end":21},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":6842},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":597834,"byte_end":597842,"line_start":18,"line_end":18,"column_start":22,"column_end":30},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":6857},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":598628,"byte_end":598636,"line_start":41,"line_end":41,"column_start":24,"column_end":32},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":6857},"to":{"krate":0,"index":2203}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":598784,"byte_end":598792,"line_start":51,"line_end":51,"column_start":21,"column_end":29},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":6857},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599080,"byte_end":599093,"line_start":64,"line_end":64,"column_start":22,"column_end":35},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":6871},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":599919,"byte_end":599932,"line_start":87,"line_end":87,"column_start":24,"column_end":37},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":6871},"to":{"krate":0,"index":2203}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":600085,"byte_end":600098,"line_start":97,"line_end":97,"column_start":21,"column_end":34},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":6871},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":600308,"byte_end":600322,"line_start":109,"line_end":109,"column_start":18,"column_end":32},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":6885},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":600586,"byte_end":600600,"line_start":122,"line_end":122,"column_start":6,"column_end":20},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":6885},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":601894,"byte_end":601907,"line_start":168,"line_end":168,"column_start":9,"column_end":22},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":6893},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":602233,"byte_end":602246,"line_start":179,"line_end":179,"column_start":9,"column_end":22},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":6893},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":603189,"byte_end":603202,"line_start":206,"line_end":206,"column_start":17,"column_end":30},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":6893},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":608411,"byte_end":608426,"line_start":378,"line_end":378,"column_start":17,"column_end":32},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":6915},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":611308,"byte_end":611322,"line_start":440,"line_end":440,"column_start":17,"column_end":31},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":6908},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":612120,"byte_end":612134,"line_start":468,"line_end":468,"column_start":57,"column_end":71},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":6908},"to":{"krate":23,"index":41}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":612781,"byte_end":612792,"line_start":490,"line_end":490,"column_start":17,"column_end":28},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":6953},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/loclists.rs","byte_start":615944,"byte_end":615955,"line_start":581,"line_end":581,"column_start":57,"column_end":68},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":6953},"to":{"krate":23,"index":41}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/lookup.rs","byte_start":646178,"byte_end":646189,"line_start":41,"line_end":41,"column_start":29,"column_end":40},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":6989},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/lookup.rs","byte_start":646409,"byte_end":646420,"line_start":54,"line_end":54,"column_start":17,"column_end":28},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":6989},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/lookup.rs","byte_start":646986,"byte_end":647001,"line_start":81,"line_end":81,"column_start":17,"column_end":32},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":7002},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/lookup.rs","byte_start":649295,"byte_end":649309,"line_start":155,"line_end":155,"column_start":36,"column_end":50},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":7039},"to":{"krate":0,"index":1432}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":661090,"byte_end":661098,"line_start":302,"line_end":302,"column_start":17,"column_end":25},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":7229},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":663062,"byte_end":663071,"line_start":360,"line_end":360,"column_start":17,"column_end":26},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":7078},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":684331,"byte_end":684341,"line_start":865,"line_end":865,"column_start":17,"column_end":27},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":7384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":685675,"byte_end":685688,"line_start":905,"line_end":905,"column_start":17,"column_end":30},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":7411},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/op.rs","byte_start":688979,"byte_end":688989,"line_start":998,"line_end":998,"column_start":17,"column_end":27},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":7423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":787743,"byte_end":787756,"line_start":14,"line_end":14,"column_start":17,"column_end":30},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":7439},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":788347,"byte_end":788360,"line_start":33,"line_end":33,"column_start":38,"column_end":51},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":7439},"to":{"krate":0,"index":1451}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":788884,"byte_end":788897,"line_start":52,"line_end":52,"column_start":22,"column_end":35},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":7450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":789736,"byte_end":789749,"line_start":76,"line_end":76,"column_start":17,"column_end":30},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":7450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":790449,"byte_end":790462,"line_start":97,"line_end":97,"column_start":32,"column_end":45},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":7450},"to":{"krate":0,"index":2203}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":790625,"byte_end":790638,"line_start":107,"line_end":107,"column_start":29,"column_end":42},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":7450},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":791067,"byte_end":791084,"line_start":120,"line_end":120,"column_start":17,"column_end":34},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":7460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubnames.rs","byte_start":791680,"byte_end":791697,"line_start":134,"line_end":134,"column_start":57,"column_end":74},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":7460},"to":{"krate":23,"index":41}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":792344,"byte_end":792357,"line_start":14,"line_end":14,"column_start":17,"column_end":30},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":7470},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":792984,"byte_end":792997,"line_start":33,"line_end":33,"column_start":38,"column_end":51},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":7470},"to":{"krate":0,"index":1451}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":793517,"byte_end":793530,"line_start":52,"line_end":52,"column_start":22,"column_end":35},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":7481},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":794353,"byte_end":794366,"line_start":76,"line_end":76,"column_start":17,"column_end":30},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":7481},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":795066,"byte_end":795079,"line_start":97,"line_end":97,"column_start":32,"column_end":45},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":7481},"to":{"krate":0,"index":2203}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":795242,"byte_end":795255,"line_start":107,"line_end":107,"column_start":29,"column_end":42},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":7481},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":795684,"byte_end":795701,"line_start":120,"line_end":120,"column_start":17,"column_end":34},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":7491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/pubtypes.rs","byte_start":796297,"byte_end":796314,"line_start":134,"line_end":134,"column_start":57,"column_end":74},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":7491},"to":{"krate":23,"index":41}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":796995,"byte_end":797006,"line_start":17,"line_end":17,"column_start":22,"column_end":33},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":7501},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":797816,"byte_end":797827,"line_start":40,"line_end":40,"column_start":24,"column_end":35},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":7501},"to":{"krate":0,"index":2203}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":797978,"byte_end":797989,"line_start":50,"line_end":50,"column_start":21,"column_end":32},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":7501},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":798272,"byte_end":798285,"line_start":63,"line_end":63,"column_start":22,"column_end":35},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":7515},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":799123,"byte_end":799136,"line_start":87,"line_end":87,"column_start":24,"column_end":37},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":7515},"to":{"krate":0,"index":2203}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":799289,"byte_end":799302,"line_start":97,"line_end":97,"column_start":21,"column_end":34},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":7515},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":799512,"byte_end":799526,"line_start":109,"line_end":109,"column_start":18,"column_end":32},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":7529},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":799790,"byte_end":799804,"line_start":122,"line_end":122,"column_start":6,"column_end":20},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":7529},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801104,"byte_end":801114,"line_start":168,"line_end":168,"column_start":9,"column_end":19},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":7537},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":801443,"byte_end":801453,"line_start":179,"line_end":179,"column_start":9,"column_end":19},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":7537},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":802390,"byte_end":802400,"line_start":206,"line_end":206,"column_start":17,"column_end":27},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":7537},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":807076,"byte_end":807091,"line_start":358,"line_end":358,"column_start":23,"column_end":38},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":7559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":809480,"byte_end":809494,"line_start":409,"line_end":409,"column_start":17,"column_end":31},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":7552},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":810293,"byte_end":810307,"line_start":437,"line_end":437,"column_start":57,"column_end":71},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":7552},"to":{"krate":23,"index":41}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":810954,"byte_end":810965,"line_start":459,"line_end":459,"column_start":17,"column_end":28},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":7589},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":813522,"byte_end":813533,"line_start":532,"line_end":532,"column_start":57,"column_end":68},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":7589},"to":{"krate":23,"index":41}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":813994,"byte_end":814002,"line_start":551,"line_end":551,"column_start":6,"column_end":14},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":7598},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/rnglists.rs","byte_start":815218,"byte_end":815223,"line_start":590,"line_end":590,"column_start":6,"column_end":11},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":7616},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":838523,"byte_end":838531,"line_start":15,"line_end":15,"column_start":22,"column_end":30},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":7634},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":839330,"byte_end":839338,"line_start":38,"line_end":38,"column_start":17,"column_end":25},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":7634},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840105,"byte_end":840113,"line_start":58,"line_end":58,"column_start":9,"column_end":17},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":7634},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":840933,"byte_end":840941,"line_start":82,"line_end":82,"column_start":24,"column_end":32},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":7634},"to":{"krate":0,"index":2203}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":841099,"byte_end":841107,"line_start":92,"line_end":92,"column_start":21,"column_end":29},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":7634},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":841369,"byte_end":841384,"line_start":104,"line_end":104,"column_start":17,"column_end":32},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":7648},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":842740,"byte_end":842755,"line_start":136,"line_end":136,"column_start":9,"column_end":24},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":7648},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":843586,"byte_end":843601,"line_start":160,"line_end":160,"column_start":24,"column_end":39},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":7648},"to":{"krate":0,"index":2203}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":843756,"byte_end":843771,"line_start":170,"line_end":170,"column_start":21,"column_end":36},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":7648},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844062,"byte_end":844074,"line_start":183,"line_end":183,"column_start":17,"column_end":29},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":7662},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":844380,"byte_end":844392,"line_start":192,"line_end":192,"column_start":9,"column_end":21},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":7662},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":845214,"byte_end":845226,"line_start":216,"line_end":216,"column_start":24,"column_end":36},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":7662},"to":{"krate":0,"index":2203}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/str.rs","byte_start":845378,"byte_end":845390,"line_start":226,"line_end":226,"column_start":21,"column_end":33},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":7662},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":847828,"byte_end":847844,"line_start":21,"line_end":21,"column_start":23,"column_end":39},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":3461},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":848488,"byte_end":848503,"line_start":40,"line_end":40,"column_start":23,"column_end":38},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":3109},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":849321,"byte_end":849331,"line_start":63,"line_end":63,"column_start":23,"column_end":33},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":7676},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":850261,"byte_end":850270,"line_start":90,"line_end":90,"column_start":22,"column_end":31},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":7713},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":851079,"byte_end":851088,"line_start":113,"line_end":113,"column_start":17,"column_end":26},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":7713},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":852346,"byte_end":852355,"line_start":152,"line_end":152,"column_start":9,"column_end":18},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":7713},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":853179,"byte_end":853188,"line_start":176,"line_end":176,"column_start":24,"column_end":33},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":7713},"to":{"krate":0,"index":2203}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":853348,"byte_end":853357,"line_start":186,"line_end":186,"column_start":21,"column_end":30},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":7713},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":853789,"byte_end":853815,"line_start":202,"line_end":202,"column_start":17,"column_end":43},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":7727},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":854528,"byte_end":854554,"line_start":224,"line_end":224,"column_start":57,"column_end":83},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":7727},"to":{"krate":23,"index":41}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":855099,"byte_end":855120,"line_start":244,"line_end":244,"column_start":17,"column_end":38},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":7737},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":862897,"byte_end":862907,"line_start":488,"line_end":488,"column_start":17,"column_end":27},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":7768},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":863988,"byte_end":863998,"line_start":526,"line_end":526,"column_start":17,"column_end":27},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":7768},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":871619,"byte_end":871644,"line_start":752,"line_end":752,"column_start":33,"column_end":58},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":7801},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":887204,"byte_end":887213,"line_start":1205,"line_end":1205,"column_start":17,"column_end":26},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":7987},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":909159,"byte_end":909173,"line_start":1878,"line_end":1878,"column_start":17,"column_end":31},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":7823},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":926158,"byte_end":926167,"line_start":2290,"line_end":2290,"column_start":41,"column_end":50},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":8010},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":927752,"byte_end":927761,"line_start":2332,"line_end":2332,"column_start":9,"column_end":18},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":8010},"to":{"krate":23,"index":41}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":930473,"byte_end":930483,"line_start":2407,"line_end":2407,"column_start":33,"column_end":43},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":8035},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":933209,"byte_end":933222,"line_start":2483,"line_end":2483,"column_start":33,"column_end":46},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":8053},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":946219,"byte_end":946230,"line_start":2869,"line_end":2869,"column_start":33,"column_end":44},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":8072},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":950407,"byte_end":950422,"line_start":2994,"line_end":2994,"column_start":40,"column_end":55},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":8092},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":951632,"byte_end":951647,"line_start":3030,"line_end":3030,"column_start":40,"column_end":55},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":8105},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953047,"byte_end":953057,"line_start":3075,"line_end":3075,"column_start":22,"column_end":32},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":8119},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":953868,"byte_end":953878,"line_start":3098,"line_end":3098,"column_start":9,"column_end":19},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":8119},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":954706,"byte_end":954716,"line_start":3122,"line_end":3122,"column_start":24,"column_end":34},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":8119},"to":{"krate":0,"index":2203}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":954878,"byte_end":954888,"line_start":3132,"line_end":3132,"column_start":21,"column_end":31},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":8119},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":955029,"byte_end":955039,"line_start":3140,"line_end":3140,"column_start":17,"column_end":27},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":8119},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":956200,"byte_end":956219,"line_start":3177,"line_end":3177,"column_start":17,"column_end":36},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":8133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":956924,"byte_end":956943,"line_start":3199,"line_end":3199,"column_start":57,"column_end":76},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":8133},"to":{"krate":23,"index":41}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/unit.rs","byte_start":957538,"byte_end":957552,"line_start":3221,"line_end":3221,"column_start":17,"column_end":31},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":8143},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1059893,"byte_end":1059902,"line_start":80,"line_end":80,"column_start":6,"column_end":15},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":8176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/value.rs","byte_start":1062678,"byte_end":1062683,"line_start":151,"line_end":151,"column_start":6,"column_end":11},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":8210},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94638,"byte_end":94643,"line_start":390,"line_end":390,"column_start":23,"column_end":28},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":8253},"to":{"krate":1,"index":6836}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":94804,"byte_end":94809,"line_start":397,"line_end":397,"column_start":6,"column_end":11},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":8253},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":102905,"byte_end":102910,"line_start":537,"line_end":537,"column_start":23,"column_end":28},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":8253},"to":{"krate":5,"index":1724}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":102964,"byte_end":102969,"line_start":540,"line_end":540,"column_start":26,"column_end":31},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":8253},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":103543,"byte_end":103547,"line_start":561,"line_end":561,"column_start":23,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":1989},"to":{"krate":0,"index":2203}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/read/mod.rs","byte_start":104565,"byte_end":104573,"line_start":600,"line_end":600,"column_start":6,"column_end":14},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":3010},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/endian_vec.rs","byte_start":1145676,"byte_end":1145685,"line_start":19,"line_end":19,"column_start":14,"column_end":23},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":8418},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/endian_vec.rs","byte_start":1146386,"byte_end":1146395,"line_start":49,"line_end":49,"column_start":25,"column_end":34},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":8418},"to":{"krate":0,"index":2255}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1167246,"byte_end":1167254,"line_start":57,"line_end":57,"column_start":31,"column_end":39},"kind":"SuperTrait","from":{"krate":1,"index":2284},"to":{"krate":0,"index":2311}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1168758,"byte_end":1168766,"line_start":100,"line_end":100,"column_start":25,"column_end":33},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":8436},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/section.rs","byte_start":1169655,"byte_end":1169663,"line_start":122,"line_end":122,"column_start":17,"column_end":25},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":8436},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/abbrev.rs","byte_start":1171773,"byte_end":1171790,"line_start":19,"line_end":19,"column_start":6,"column_end":23},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":8458},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/abbrev.rs","byte_start":1172731,"byte_end":1172743,"line_start":47,"line_end":47,"column_start":6,"column_end":18},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":8464},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/abbrev.rs","byte_start":1173803,"byte_end":1173825,"line_start":87,"line_end":87,"column_start":6,"column_end":28},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":8482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1178171,"byte_end":1178181,"line_start":30,"line_end":30,"column_start":6,"column_end":16},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":8598},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1181611,"byte_end":1181633,"line_start":131,"line_end":131,"column_start":6,"column_end":28},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":8606},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1186617,"byte_end":1186638,"line_start":286,"line_end":286,"column_start":6,"column_end":27},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":8630},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1191220,"byte_end":1191240,"line_start":415,"line_end":415,"column_start":6,"column_end":26},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":8647},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1198487,"byte_end":1198497,"line_start":594,"line_end":594,"column_start":10,"column_end":20},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":8598},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1200756,"byte_end":1200778,"line_start":645,"line_end":645,"column_start":10,"column_end":32},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":8606},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1202821,"byte_end":1202842,"line_start":696,"line_end":696,"column_start":10,"column_end":31},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":8630},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/cfi.rs","byte_start":1204567,"byte_end":1204587,"line_start":741,"line_end":741,"column_start":10,"column_end":30},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":8647},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1218169,"byte_end":1218174,"line_start":29,"line_end":29,"column_start":6,"column_end":11},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":8711},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1219404,"byte_end":1219413,"line_start":67,"line_end":67,"column_start":6,"column_end":15},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":8720},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/dwarf.rs","byte_start":1220931,"byte_end":1220936,"line_start":113,"line_end":113,"column_start":10,"column_end":15},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":8711},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1224791,"byte_end":1224802,"line_start":77,"line_end":77,"column_start":6,"column_end":17},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":8726},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1247014,"byte_end":1247021,"line_start":705,"line_end":705,"column_start":6,"column_end":13},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":8744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1248173,"byte_end":1248188,"line_start":755,"line_end":755,"column_start":6,"column_end":21},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":8761},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1251034,"byte_end":1251044,"line_start":826,"line_end":826,"column_start":6,"column_end":16},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":8812},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1253524,"byte_end":1253530,"line_start":905,"line_end":905,"column_start":10,"column_end":16},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":8854},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1255214,"byte_end":1255225,"line_start":969,"line_end":969,"column_start":10,"column_end":21},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":8726},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/line.rs","byte_start":1263113,"byte_end":1263123,"line_start":1127,"line_end":1127,"column_start":10,"column_end":20},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":8812},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1299298,"byte_end":1299315,"line_start":39,"line_end":39,"column_start":6,"column_end":23},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":9000},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/loc.rs","byte_start":1308957,"byte_end":1308969,"line_start":304,"line_end":304,"column_start":10,"column_end":22},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":9007},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1320715,"byte_end":1320725,"line_start":17,"line_end":17,"column_start":6,"column_end":16},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":9055},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1337314,"byte_end":1337323,"line_start":477,"line_end":477,"column_start":6,"column_end":15},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":9073},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/op.rs","byte_start":1350318,"byte_end":1350328,"line_start":798,"line_end":798,"column_start":10,"column_end":20},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":9055},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1389775,"byte_end":1389789,"line_start":36,"line_end":36,"column_start":6,"column_end":20},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":9252},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/range.rs","byte_start":1396590,"byte_end":1396599,"line_start":220,"line_end":220,"column_start":10,"column_end":19},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":9259},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1412297,"byte_end":1412306,"line_start":29,"line_end":29,"column_start":6,"column_end":15},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":9480},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1416269,"byte_end":1416273,"line_start":169,"line_end":169,"column_start":6,"column_end":10},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":9487},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1424171,"byte_end":1424196,"line_start":427,"line_end":427,"column_start":6,"column_end":31},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":9497},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1431716,"byte_end":1431725,"line_start":681,"line_end":681,"column_start":6,"column_end":15},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":9506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1438015,"byte_end":1438029,"line_start":869,"line_end":869,"column_start":6,"column_end":20},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":9520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1459294,"byte_end":1459310,"line_start":1379,"line_end":1379,"column_start":6,"column_end":22},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":9667},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1460223,"byte_end":1460234,"line_start":1409,"line_end":1409,"column_start":6,"column_end":17},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":9674},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1461332,"byte_end":1461343,"line_start":1449,"line_end":1449,"column_start":6,"column_end":17},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":9680},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1463081,"byte_end":1463090,"line_start":1502,"line_end":1502,"column_start":10,"column_end":19},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":9480},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1465144,"byte_end":1465148,"line_start":1552,"line_end":1552,"column_start":10,"column_end":14},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":9487},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1468966,"byte_end":1468991,"line_start":1658,"line_end":1658,"column_start":10,"column_end":35},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":9497},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1471317,"byte_end":1471326,"line_start":1715,"line_end":1715,"column_start":10,"column_end":19},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":9506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/unit.rs","byte_start":1471810,"byte_end":1471824,"line_start":1729,"line_end":1729,"column_start":10,"column_end":24},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":9520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1136451,"byte_end":1136456,"line_start":203,"line_end":203,"column_start":23,"column_end":28},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":9698},"to":{"krate":1,"index":6836}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1138993,"byte_end":1138998,"line_start":258,"line_end":258,"column_start":23,"column_end":28},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":9698},"to":{"krate":5,"index":1724}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1140402,"byte_end":1140408,"line_start":305,"line_end":305,"column_start":18,"column_end":24},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":9798},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1142536,"byte_end":1142548,"line_start":361,"line_end":361,"column_start":27,"column_end":39},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":9816},"to":{"krate":1,"index":6836}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1144980,"byte_end":1144992,"line_start":410,"line_end":410,"column_start":27,"column_end":39},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":9816},"to":{"krate":5,"index":1724}},{"span":{"file_name":"/home/knoldus/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.22.0/src/write/mod.rs","byte_start":1145028,"byte_end":1145040,"line_start":412,"line_end":412,"column_start":32,"column_end":44},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":9816},"to":{"krate":1,"index":1989}}]}